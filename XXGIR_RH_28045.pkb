CREATE OR REPLACE PACKAGE BODY apps.xxgir_rh_28045 IS
   -- DBA : Version Phase 3.3  CHG 220437 + CHG 220439 + CHG 217615
   --                     3.4  CHG 225373
   --                     3.5  CHG 226617
   --                     3.6  CHG 226472
   -- DBA : Version        CHG-229379
   --

   /*******************************************************************************
   * But:
   *     Ce paquetage permet d'exporter à SAGIP des gains déclaratoires (H760),
   *     des déclarations de temps (H620) et l'annualation des documents d'entrée (H010).
   *
   * Pré-requis  : Cette interface doit être exécutée après
   *               l'adaptation 28065 - Recevoir les rejets de SAGIP.
   *
   * Post-requis : L'adaptation 28065 est exécutée ensuite pour mettre à jour les
   *               statuts de transfert des données vers SAGIP.
   *
   ********************************************************************************
   * Modifications:
   * Par                            Date         Description
   * ----------------------------   ----------   ---------------------------------
   * Michel Dessureault             2012-09-19   Création     CHG128106
   * Michel Dessureault             2012-10-30   INC00016215  Corriger la performance en limitant la liste
   *                                                          des affectations à celles dans la table GIR_RH_SUIVI_ELEMN
   *                                                          Ne pas modifier les enregistrements autre qu'en création pour le H760
   *                                                          ni lorsque l'enregistrement est rejeté.
   * Michel Dessureault             2012-11-09                Ajouter le traitement pour les transactions
   *                                                          H010 et H620
   * Michel Dessureault             2012-11-13   INC00016215  Corriger erreur dans le select de
   *                                                          constitution de la liste des gains H760.
   *                                                          Agrandir le champ nm_procd de 60 à 100.
   *                                                          Réinitialiser l'index lorsque la table
   *                                                          temporaire vlTAB_fdt est vidée.
   * Michel Dessureault             2012-11-14   INC00016215  Créer la fonction Fv_convr_nb_decml_carct
   *                                                          pour mettre les montants calculés sous un format
   *                                                          VARCHAR2 tenant compte des 2 positions décimales
   *                                                          pour le transfert vers SAGIP.
   *                                                          Corriger la comptabilité des rejets H620.
   * Michel Dessureault             2012-11-15   INC00016215  Corriger la façon de traiter le taux horaire
   *                                                          et d'extraire le corps d'emploi.
   * Michel Dessureault             2012-11-16   INC00016215  Corriger la grandeur d'extraction de la classe
   *                                                          Ajouter le numéro d'employé dans l'affichage du journal de bord.
   * Michel Dessureault             2012-11-16   INC00016215  Modifier le select des affectations pour ne pas inclure
   *                                                          les employées sans NAS car refusé par SAGIP.
   *                                                          Corriger le transfert du taux horaire du H760.
   *                                                          Mettre la mise à jour de la table des suivis d'élément
   *                                                          lors de l'inscription des transactions H620
   *                                                          plutôt que lors de la vérification et traitement des étapes.
   *                                                          Correction de la maj de la date de transfert dans GIR_RH_FDT
   * Michel Dessureault             2012-11-26   INC00016333  Corriger le SELECT pour obtenir la période de paie.
   *                                                          Corriger les SELECT utilisant le id_type_elemn
   *                                                          pour utiliser le id_entre_elemn quand on parle de liste d'éléments.
   *                                                          Corriger les traitements pour les périodes antérieures en
   *                                                          créant la procédure P_obten_perd_paie_gain
   * Michel Dessureault             2012-11-28   INC00016333  Inclure les éléments de regroupement pour 6_24 traitement 2.
   *                                                          Ajouter le lien à la table des suivis d'éléments
   *                                                          pour la validation des types et entrées d'élément
   * Michel Dessureault             2012-11-29   INC00016333  Ajout de la procédure P_valdr_trans_gain_h620
   *                                                          et correction des requêtes pour créer la transaction H620
   *                                                          des éléments récurrents à pourcentage et à taux-prorata.
   *                                                          Corriger l'appel pour annulation des transactions H620 dans la procédure P_expor_dons_h620.
   * Michel Dessureault             2012-11-30   INC00016333  Correction de la logique de traitements des heures de la procédure P_trait_elemn_etape_6_24.
   *                                                          Ajouter un paramètre à la procédure P_inser_absen_fdt_rejt pour utiliser
   *                                                          la procédure avec les transactions H620.
   *                                                          Corriger la procédure P_creer_trans_h620_etape_6 pour traiter toutes les périodes.
   * Michel Dessureault             2012-12-04   INC00016333  Modifier le nom de P_creer_gain_h760_fdt pour P_creer_gain_fdt
   *                                                          car sera utilisé par le H620 au lieu de P_creer_enreg_fdt_h620
   *                                                          afin de corriger le traitement du H620.
   *                                                          Correction des requêtes touchant aux absences suite à la particularité de création du suivi dans l'écran des absences.
   * Michel Dessureault             2012-12-05   INC00016333  Correction de la logique de traitement des absences modifiées.
   *                                                          Correction de la logique de création des transactions H620 pour les autres éléments récurrents et non récurrents.
   *                                                          Remplacer new par old quand on traite des suppressions dans le suivi d'éléments.
   *                                                          Ajouter le total d'unité et le grand total des unités dans la transaction H620 des absences.
   *                                                          Corriger l'extraction des listes à pourcentage(6.2) et à taux au prorata(6.3).
   *                                                          Correction de format de date pour les primes.
   * Michel Dessureault             2012-12-06   INC00016333  Correction de la logique de traitement des absences 6.25.
   *                                                          Diviser par 100 les montants provenant de GIR_TRANS_H620 pour comparaison.
   * Michel Dessureault             2012-12-07   INC00016333  Correction de la logique dans le traitement 6.22
   *                                                          Correction des calculs utilisant le Taux (taux horaire).
   *                                                          Inclure le total des unités dans la transaction des autres éléments non récurrent.
   *                                                          Corriger la comparaison entre le code SAGIP dans GIR_TRANS_H620 et celui du PGI.
   * Michel Dessureault             2012-12-08   INC00016333  Correction de la logique dans le traitement 6.23
   * Michel Dessureault             2012-12-10   INC00016333  Correction de la date passée pour obtenir certaines informations sur la personne.
   *                                                          Correction des étapes 3 et 5 de la création des H620.
   * Michel Dessureault             2012-12-13   INC00016333  Correction du traitement des montants de remplacement (6.28)
   *                                                          Correction des requêtes des traitements 6.6
   *                                                          Correction du traitement 6.8, h620_etape_6 et h620_etape_8.
   *                                                          Correction des traitements de suppression.
   * Michel Dessureault             2012-12-16   INC00016333  Correction des calculs.
   * Michel Dessureault             2012-12-17   INC00016333  Correction de la création des fiches concernant les éléments récurrents.
   *                                                          Correction de la requête pour trouver les enregistrements à recréer (6.24).
   * Michel Dessureault             2012-12-20   INC00016333  Correction des arrondis.
   * Michel Dessureault             2012-12-21   INC00016333  Correction pour l'appel des taux horaires et pour vérifier si l'affectation a changé de type de paie.
   * Michel Dessureault             2013-01-14   INC00016847  Corriger l'année financière pour les périodes 21 à 26.
   * Michel Dessureault             2013-01-15   INC00016849  Ne pas utiliser les heures converties dans le H760.
   * Michel Dessureault             2013-01-16   Retouche 41  Ajouter le paramètre pour la date d'exécution.
   * Michel Dessureault             2013-01-22   INC00016972  Afficher/utiliser le taux horaire du changement de corps d'emploi dans le H620.
   * Michel Dessureault             2013-01-22   INC00016962  Corriger l'utilisation du champ minst pour la génération des documents.
   * Michel Dessureault             2013-01-23   Retouche 116 (INC00016960) Ajouter l'allocation de repas de prime de nuit (A039) pour le H760.
   * Michel Dessureault             2013-01-30   Retouche 118 Séparer en deux transactions H760 lorsque les heures sont inscrites sur 2 jours pour une même entrée dans la feuille de temps.
   *                                                          Création de P_seprr_gains_tempr.
   * Michel Dessureault             2013-01-31   Retouche 123 (INC00016964) Selon le code SAGIP, on doit inscrire les heures en « Heure et minute » ou en « Heure centième » dans le formulaire H620
   * Michel Dessureault             2013-01-31   Retouche 121 (INC00016980) L'erreur GIR-100117 ne doit plus être inscrite dans le journal de bord et dans la table des erreurs.
   *                                                          Il faut corriger la date de fin dans la H620 si le cas s'applique selon les spécifications décrites dans le tableau de validations de la H620.
   * Michel Dessureault             2013-01-31   INC00016966  INC00016973 Erreur avec les heures supplémentaires à payer dans le passé.
   * Michel Dessureault             2013-02-05   INC00017154  Gains sans unités.
   * Michel Dessureault             2013-02-05   INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault             2013-02-06   Retouche 138 (INC00017186) Pour les gains A136, A236 et A336, les heures de début et fin doivent être vides.
   * Michel Dessureault             2013-02-08   Retouche 132 (INC00017155) Pour les montants supplémentaires et de remplacement, mettre la date de début et la date de fin de l'élément dans le formulaire H620
   * Michel Dessureault             2013-02-12   Retouche 126 (INC00017107) Modifier la validation pour le changement du code SAGIP de «A010» à «A015» d'une H620
   * Michel Dessureault             2013-02-13   INC00017263  Corriger le padding et ajouter des index aux tables gir_rh_suivi_elemn, gir_rh_fdt.
   * Michel Dessureault             2013-02-15   INC00017155  Corriger le nom d'un paramètre passé dans une requête de la procédure P_verfr_elemn_etape_6_23.
   * Michel Dessureault             2013-02-19   INC00017310  Date du gain doit être plus petite ou égale à la date d'exécution pour le transfert H760.
   * Michel Dessureault             2013-02-20   INC00017310  Correction des select avec id_trans en spécifiant le nm_fiche = H760 ou H620 ou H010 selon le cas.
   * Michel Dessureault             2013-02-21   INC00017408  Correction de la requête qui détermine la catégorie de dépense.
   * Michel Dessureault             2013-02-25   INC00017437  Problème lorsque 2 montants de remplacement pour le même code sagip créés en même temps
   *                                                          Affecte les procédures 6_4, 6_5 et 6_7.
   * Michel Dessureault             2013-02-26   INC00017437  Problème dans 6_4 et 6_18 corrigé.
   * Michel Dessureault             2013-02-27   INC00017310  Problème dans P_const_liste_gains_repas, P_trait_liste_gains, P_trait_liste_repas et P_seprr_gains_tempr.
   * Michel Dessureault             2013-02-27   INC00017475  Les autres éléments non récurrents qui possèdent une date de début et une date de fin (A015 par exemple--> Ajust sal rég ou indemn) doivent avoir le numéro de période de paie de la carte B = au numéro de la période de paie courante.
   * Michel Dessureault             2013-02-28   INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   * Michel Dessureault             2013-02-28   INC00017539  Date de transaction de GIR_TRANS_H760 à nul lorsque rejeté et mis à la date exécution lorsque transmis
   * Michel Dessureault             2013-02-28   INC00017473  Ligne à 0 à annuler lors du traitement des fdt dans le passé.
   * Michel Dessureault             2013-03-01   Retouche 151 (INC00017508) Traitement particulier du code A082
   * Michel Dessureault             2013-03-04   INC00017594  Le traitement de la H620 est en erreur parce que la période n'est pas trouvée.
   * Michel Dessureault             2013-03-04   INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault             2013-03-04   Retouche 150 La colonne EREUR_MESG de la table gir_rh_absen_fdt_rejet est maintenat VARCHAR2(300).
   * Michel Dessureault             2013-03-04   INC00017565  Les éléments non récurrents WEB ADI ne sont pas bien gérés.
   * Michel Dessureault             2013-03-05   INC00017614  Annuler la transaction H760 si la somme du regroupement est 0.
   * Michel Dessureault             2013-03-06   INC00017640  La date de fin doit être plus grande que la date de début lorsque transmise à SAGIP.
   * Michel Dessureault             2013-03-06   INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier et il faut tenir compte des special inputs.
   * Michel Dessureault             2013-03-07   Retouche 151 (INC00017508) Traitement particulier du code A082. Corriger le traitement lorsque le montant est 0.
   * Michel Dessureault             2013-03-08   Retouche 158 (INC00017530,17532) Heures et taux convertis pour les heures provenant de la feuille de temps.
   * Michel Dessureault             2013-03-12   INC00017714  Corriger le traitement des éléments Special inputs.
   * Michel Dessureault             2013-03-13   INC00017310  Problème dans P_valdr_trans_h760(oublier d'enlever du code qui ne sert plus et quia causé une erreur).
   * Michel Dessureault             2013-03-15   INC00017811  L'heure de début est obligatoire sur une H760 code d'action 3  (annulation), si elle a été inscrite lors de la création.
   * Michel Dessureault             2013-03-20   INC00017875  Pour les codes de gain, A015, A020, A022, inscrire le Montant à verser par unité pour la période couverte par le gain.
   * Michel Dessureault             2013-03-22   INC00017895  Problème de performance.
   * Michel Dessureault             2013-03-25   Retouche 169 Heures supplémentaires Résiduel avec Heures du plan.
   * Michel Dessureault             2013-04-03   Retouche 163 (INC00017912)  Majoration du taux horaire.
   * Michel Dessureault             2013-04-12   Retouche 169 Corriger la manière d'aller chercher la réserve.
   * Michel Dessureault             2013-04-12   Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault             2013-04-17   Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Michel Dessureault             2013-04-17   INC00018102: La date de début de couverture doit être >= à la date d'implantation
   * Frédéric Aubin                 2013-04-25   INC00018238: Pose de log journal pour étape
   * Michel Dessureault             2013-04-29   INC00018212  Remplacer dt_perd_paie_du par dt_perd_paie_au dans les BETWEEN car la date d'implantation peut débuter après le début de la période.
   * Michel Dessureault             2013-05-09   Retouche 202 (INC00018296) Ajouter une validation pour calculer la compensation pour certains codes de gain lors de changement de classe d'emploi
   *                                                          en créant la fonction Fn_valdr_utils_compn qui est utilisée dans P_creer_gain_fdt.
   *                                                          Annuler la multiplication du facteur de la retouche 158 pour les heures provenant de la feuille de temps dans 6_24.
   * Michel Dessureault             2013-05-10   Retouche 202 Ajouter la section et classe dans le regroupement des heures antérieures dans 6_24.
   * Michel Dessureault             2013-06-03   INC00018369  Corriger le select des autres éléments non récurrents dans les procédures 6_7, 6_22 et etape_5.
   *                                                          Ajout des constantes pour les codes de type de création de l'entrée d'élément.
   * Michel Dessureault             2013-06-04   INC00018514  Corriger les select des procédures de suppression pour se restreindre à la période courante.
   * Michel Dessureault             2013-06-05   INC00018519  Vérifier l'existence de l'élément pour la période courante lors de la suppression d'un élément récurrent du H620.
   * Michel Dessureault             2013-06-06   INC00018447  Retouche 230 Gérer les heures à rembourser provenant du PGI pour le H760.
   * Michel Dessureault             2013-06-11   INC00018508  Retouche 237 Gérer les absences par élément d'entrée pour tenir compte du changement de taux horaire.
   * Michel Dessureault             2013-06-13   INC00018592  Toujours aller chercher la valeur par défaut pour les repas dans P_creer_elemn_etape_6_8_6_12
   * Michel Dessureault             2013-06-13   INC00018584  Corriger le traitement des heures qui s'annulent dans P_trait_elemn_etape_6_24 et le traitment des heures dans P_trait_elemn_etape_6_18.
   * Michel Dessureault             2013-06-14   INC00018610  Convertir pour SAGIP les minst, budgt et centr_respn dans P_obten_ventl_cout.
   * Frédéric Aubin                 2014-02-17   INC-19172    Les remboursement d'heures supplémentaires C, paie variable, non transféré au SAGIP
   *                                                          Changement de comparaison de date au curseur CUR_elemn_non_recrn_rembr de P_creer_elemn_étape_6_11_6_12
   * Frédéric Aubin                 2014-02-22   Performance : A enlevé le count(*) pour un count(0) plus performant. + commit en autonomous
   *                                             Performance : Ajout de la relation avec id_afect et l'index est pris en compte
   *                                             Performance : Faire gather stats pour global temporary après les insert de
   *                                             gir_rh_elemn_h620_tempr, gir_rh_afect_tempr, gir_rh_suplm_h620_tempr,
   *                                             gir_rh_gains_tempr, gir_rh_h620_pc_tx_tempr
   * Frédéric Aubin                 2014-02-25   INC-19168 : la date de gain doit être inférieure à la date d'exécution dans la procédure P_const_liste_gains_repas
   * Eric Beaudoin                  2014-05-26   DDC174934 : Ajout du Ç dans P_obten_persn
   * Edgar Doiron                   2014-05-29   INC-69369 : Enlever des jointure inutile
   * Frédéric Aubin                 2014-05-29   INC-69369 : Reprendre la date de début de l'affectation
   * Edgar Doiron                   2014-06-03   INC-69539 : Corrigé l'anomalie des taux horraire pour les H760
   * Edgar Doiron                   2014-06-03   INC-69571 : Corrigé l'erreur de person_id not found, en ajoutant un égal au condition plus grand
   * Mohamed KASSOUS+Haithem jebali 2014-06-10   INC-70159 : ajouter des traces (log) pour l'insertion --lignes 8514 et Ligne 26494
   * Frédéric Aubin                 2014-06-11   INC-70159 : Ajustement sur Curseur CUR_fdt_h010 et ajout d'un curseur et validations
   * Kevin Thibeault                2014-06-13   INC-70450 : retour à la version précédante
   * Edgar Doiron                   2014-07-08   INC-71406 : Exception SQ
   * Frédéric Aubin                 2014-07-16   DDC 178380 : Incident 72372, Les tables sont revenues temporaires car les 760 et 620 sont lancés en même temps...
   *                                                          Donc les EXECUTE IMMEDIATE TRUNC TABLE ont été enlevé.
   * Frédéric Aubin                 2014-07-18   DDC 178522 : Incident 70794 : Placement d'un OR pour la période de paie juste avant le 19 mai
   * Edgar Doiron                   2014-07-31   INC71083
   * Frédéric Aubin                 2014-07-31   INC71083 : Ajout de P_log pour la ventilation des couts.  P_obten_ventl_cout
   * Edgar Doiron                   2014-08-05   CHG00179336 : Création des table physique
   * Edgar Doiron                   2014-08-07   INC70559: Mettre les hh_debut/fin a null pour les A123
   * Frédéric Aubin                 2014-08-12   DDC 179706 : Mettre le sysdate sur les étapes
   * Edgar Doiron                   2014-07-31   INC72261 Affectation Valide ou non pour le taux Etape 6
   * Edgar Doiron                   2014-09-03   INC70575 Deduction double
   * Edgar Doiron                   2014-09-09   INC74599 Correction d'heure a 1
   * Frédéric Aubin                 2014-09-12   INC74599 : nice to have des id affectations
   * Edgar Doiron                   2014-09-15   INC70575 : ajustement curseur CUR_paie_perd_trait + Correction Taux Majoration
   * Edgar Doiron                   2014-09-23   DS-CHG00182096 Ajout de parametrage par person id
   *
   * Edgar Doiron                   2014-10-31   Ajout de reinit de variable a l'etape 8
   * Edgar Doiron                   2014-11-20   CHG 185759
   * Edgar Doiron                   2015-02-05   INC 82003
   * Edgar Doiron                   2015-02-16   DDC 189877 INC 82813 (mauvaise année fin dans le bf)
   * Edgar Doiron                   2015-02-17   --DDC 190097 INC 72857 H760
   * Edgar Doiron                   2015-03-27   INC 74743  etape 6.27
   *
   * Edgar Doiron                   2015-03-30   INC 85349 h760 Date a 4712 H760
   * Edgar Doiron                   2015-04-01   INC 85862 Payé les heure demander non existance h620
   * Edgar Doiron                   2015-04-02   INC 85944 Réserve + INC 85862 correction d'un bug
   * Edgar Doiron                   2015-04-21    DDC 192898  AJOUT du commentaire ici
   * Edgar Doiron                   2015-04-27   DDC 194297 INC 87341  Changement dans p_trait_rembr_h760
   * Santiago Giusti                2015-04-30   DDC 158505: Procédure p_obten_ventl_cout modifié pour le dossier des sinistres - Interface H760/H620 Feuille de temps
   * Edgar Doiron                   2015-05-01   INC 79477 H760 validation
   * Edgar Doiron                   2015-05-01   INC 70901 H760 Validation
   * Edgar Doiron                   2015-05-04   INC 74659/77451
   * Frédéric Aubin                 2015-07-06   INC 90486 : à l'appel du xxgir_rh_23000_convr_du, prendre nb_hh_signe.
   * Frédéric Aubin                 2015-07-10   INC 90486 : ajout de log + ajout affectation nb_hh dans p_trait_trans_h760
   * Frédéric Aubin                 2015-07-10   INC 90486 : ajout de log + ajustement de comparaison dans p_creer_trans_h760
   * Geneviève Bélanger             2015-07-15   CHG 197790 : intégration des versions contenant INC-90486 et CHG 158505.
   * François Lachance              2015-08-05   INC 89949 : Changer la table gir_rh_suivi_elemn pour gir_rh_suivi_entre_elemn_paie pour les selects
   *                                                         Duplication des updates sur la table gir_rh_suivi_elemn pour le faire aussi dans la table gir_rh_suivi_entre_elemn_paie
   * Edgar Doiron                   2015-08-18   DDC199119 : Ajout de hint dans certain select touchant fdt
   * Frédéric Aubin                 2015-08-26   DDC199119 : Ajout de LEADING sur (rat)
   * Edgar  Doiron                  2015-11-03  --DDC 175592
   * Edgar  Doiron                  2015-11-04  --DDC 189924  2015-12-03 code en commentaire
   * Edgar  Doiron                  2015-11-12  --DDC 195202  2015-12-03 code en commentaire
   * Edgar  Doiron                  2015-11-26  DDC175592 AJOUT pour special input a l'etape 4
   * Popol et Fred. Aubin           2015-12-03  DDC175592 Ajout d'un NVL pour compter le grand total 6_22
   * Frédéric Aubin                 2015-12-07  DDC 189924 et 195202 : Remis en action
   * Frédéric Aubin                 2015-12-09   DDC 204441 INC-97004 : Date Track pour les curseurs (CUR_hh_carra) de la CARRA.
   * Edgar    Doiron                2015-12-09  --INC00097074 : Correction d'une réinitialisation d'un vecteur dans 6_29
   * Frédéric Aubin                 2015-12-09   DDC 204441 INC-97004 : Date Track pour les curseurs (CUR_hh_carra) de la CARRA. Autre version
   * Edgar    doiron                2015-12-11   DDC 204445 Split des heures Carra
   * Frédéric Aubin                 2015-12-16  DDC 189924 et 195202 : Correction du vlrec_trans_h620.tx_mt = REC_CUR_non_recrn_hh_anter.tx_horr
   *                                                                   Pour les gains 'A032', 'A067', 'A083' et n'écrase plus si payé
   * Frédéric Aubin                 2015-12-16  DDC 204445 A enlever le A13 + log
   * Frédéric Aubin                 2016-01-14  DDC 204445 INC-98048 : Rebrassage des conditions pour retourner la semaine 1 et semaine 2 par rapport au Grand total
   * Phase II:
   * Edgar Doiron                   2016-05-15  DDC 209235 : Implantation des boucles par employés + gestion d'erreurs
   * Frédéric Aubin                 2016-06-23  DDC 209235 : Implantation des boucles par employés et non juste par affectation
   * Edgar Doiron                   2016-07-08  DDC 209235 : Split pour rouler la H760 en Paralele.
   * Frédéric Aubin                 2016-07-12  DDC 209235 : Ajustement de la boucle du H620 pour gérer les table de H010
   * Frédéric Aubin                 2016-07-17  DDC 209235 : Ajustement du select de supp. en 6.19 (H620).  Annulation intempestive de trop provoquée.
   * Frédéric Aubin                 2016-07-19  DDC 209235 : Intégration des nouveaux messages d'erreurs.
   * Edgar Doiron                   2016-08-05  DDC 216136 : Projet d'amélioration de la 28045 - Retirer du code du package 28045 la gestion des structures budgétaires vides (à null)
   * Edgar Doiron                   2016-08-05  INC00105800: Les journaux d'exécution des H760 et H620 manquent d'informations
   * Edgar Doiron                   2016-08-05  INC00105810 Dans la table de rejets et erreurs, nous avons corrigé insertion de l'information dans l'attribut1, celle qui inscrivait tout le temps « H010 » dans la table des rejets et erreurs.
   * Edgar Doiron                   2016-08-05  INC00105813: Écarts dans les transactions H010 - Correction d'un bug de production
   * Edgar Doiron                   2016-08-05  INC00105944: Écarts entre les H010 versus la production pour la journée du 13 juillet
   * Edgar Doiron                   2016-08-05  INC00106205: La table de rejet-erreur ne contient pas l'employé ayant fait tombé en erreur l'exécution du 19 juillet
   * Edgar Doiron                   2016-08-05  INC00106428: L'amélioration du backtrace (traçage de la provenance de l'erreur) pour que le programme affiche aussi bien la ligne
   *                                                         en erreur que la raison de l'erreur comme indiqué ci-dessous.
   * Frédéric Aubin                 2016-08-10  INC00106352: toujours avoir le id_entre_elemn lorsque possible.
   * Frédéric Aubin                 2016-08-15  DDC 209235 : Bogue de boucle, en prod. il prenait le personId en la valeur précédente.  Il faut le forcer à se remplir si le record est vide.
   * Frédéric Aubin                 2016-08-16  INC00105800: Les journaux d'exécution des H760 et H620 manquent d'info.
   * Frédéric Aubin                 2016-08-16  INC00106425: Compteurs du journal (log) ne sont pas exacts du au fait du rollaback savepoint
   *                                                         Ajout d'un global comme compteur + modif de p_incre_cp + soustraction sur rollaback savepoint.
   * Frédéric Aubin                 2016-08-17  INC00105800 : reprendre la méthode utilisé pour H620 soit l'appel à p_time_diff_store_print pour la loop du H760
   * Frédéric Aubin                 2016-08-18  INC00106122 : Étape P_trait_elemn_etape_6_18 avec une mauvaise affectation + p_creer_trans_h620_etape_6 qui n'exécutait qu'une seule fois
   *                                                          les obtentions de statut d'affectation et cela donnait une mauvaise date de fin.
   * Frédéric Aubin                 2016-08-17  INC00105800 : la proc. p_time_diff_store_print peut avoir une erreur technique. Il faut traiter cette petite exception.
   * Phase I:
   * Geneviève Bélanger             2016-01-29  CHG204574 - Ne pas traiter les gains A030 et A029 de type I dont les sommes sont <= 0
   * Edgar Doiron                   2016-01-27  PAI45 : DDC206235 - INC86765 La correction pour rejets
   *                                            S038 «ANNEE FINANCIERE INVALIDE» sur les H760 et
   *                                            S204 «ANNEE FINANCIERE INVALIDE» sur les H620
   * Edgar Doiron                   2016-02-03  DDC 200241 INC 82025 - H620 rejetés avec certain types de gains.
   *                                            L'erreur est causée par certaines entrées d'éléments qui
   *                                            chevauchent deux années civiles
   * Geneviève Bélanger             2016-04-15  CHG206235 (INC 86765) Un gain transmis durant les périodes transitoires 1 et 2
   *                                            doit avoir l'année financière précédente, et non celle en cours
   *                                            CHG206235 Ne plus mettre à jour l'année financière de la table FDT, pour garder l'information originale
   * Geneviève Bélanger             2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   *                                            (p_creer_trans_h620_etape_1 à _9)
   * Geneviève Bélanger             2016-05-13  INC00103230 - ne plus annuler FDT si IN_TRANS_ANUL déjà à 'O' (p_trait_rembr_h760)
   * Geneviève Bélanger             2016-06-13  INC00104155 - Obtenir les dates de début et de fin des absences dans per_absence_attendances
   * Geneviève Bélanger             2016-08-22  INC00103450 - pour les éléments supprimés, ne plus inscrire le id_contr_fdt dans
   *                                            l'historique des entrées d'éléments, car cela fausse les données du zoom
   * Geneviève Bélanger             2016-08-22  INC00104183 - ne pas annuler les gains dont la dt_trans = end_of_time
   * Geneviève Bélanger             2016-08-26  INC00106428 - Ajouter des variables globales pour l'inscription dans GIR_ADM_EREUR_REJET_GENRQ
   * Geneviève Bélanger             2016-08-30  INC00106619 - insérer la date d'exécution dans la table d'erreurs/rejets
   * Geneviève Bélanger             2016-09-02  CHG217124 / INC00106739 - ajout des messages fonctionnels
   *                                            Retirer l'attribut4 et attribut5 de la table d'erreurs/rejets si la création de la transaction plante
   * Geneviève Bélanger             2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger             2016-09-13  INC00104143 - Si c'est la période 01 ou 02, mettre l'année financière précédente pour un gain avant le 1er avril
   * Geneviève Bélanger             2016-09-13  INC00103227 - Transformer le A010 en A015 à partir de la période 03 seulement.
   * Geneviève Bélanger             2016-09-22  INC00107677 - S'assurer que le +1 à la date de fin est fait
   * Geneviève Bélanger             2016-11-01  INC00109354 - Étapes 1 et 2 (H620) : Corriger CUR_fdt pour préciser les dates de période de paie.
   * Geneviève Bélanger             2017-01-10  CHG220437 - Ne pas obtenir la combinaison comptable à nouveau si c'est la période 01 ou 02
   * Geneviève Bélanger             2017-07-10  CHG220439 - Pour les gains antérieurs A010 et A014 soumis pour une période de paie déjà rémunérée
   *                                            avec un taux antérieur différent du taux actuel, il faut retenir le taux antérieur.
   * Geneviève Bélanger             2017-01-23  CHG217615 - Séparer les transactions H620 qui chevauchent l'année financière
   * Geneviève Bélanger             2017-03-03  CHG225373 - Pour le calcul de l'année financière, la date à utiliser peut être soit
   *                                            la date du gain, soit la date de début
   * Geneviève Bélanger             2017-03-29  CHG226617 - Commenter tout le code de CHG225373
   * Geneviève Bélanger             2017-03-30  CHG226617 - l'étape 6_22 étant remise comme avant, réintégrer le CHG225373
   * Geneviève Bélanger             2017-03-31  CHG226472 - corriger l'année financière précédente
   * François Lachance              2017-08-01  CHG229379 - Correction à la 28045 afin de payer adéquatement le nouveau gain A290 (maladies remb réserve)
   * Julie Goulet                   2017-12-14  CHG239717 / INC 122929 - Ajouter des HINT pour problème de performance
   * Edgar Doiron                   2018-02-12  DDC 241595 ASC- Augmentation du pourcentage de compensation des avantages sociaux.
   * Edgar Doiron                   2018-03-14  DDC 239545 - RH - Paiement des heures supplémentaires au taux en vigueur au moment du paiement
   * Julie Goulet                   2018-04-30  DDC 246262 / INC 125796 Inscrire le taux corps/classe de la FT pour les H620
   * Mohammed Chentouf        2018-08-30  integration du conflit CHG239717 / CHG229379/ DDC 241595/ DDC 239545/ DDC 246262
   * Popol Kayembe               2019-06-08   Incident projet INC00145348 : problème de performance
   * Julie Goulet                   2020-06-18  DDC282404 Corriger l'étape 10 puisque absences payées deux fois
   * Gheith Abi-Nader               2022-03-08  DDC305406 Ajout des heures à payer pour le gain A078 en paie standard
   * Francis Tshimbombo             2022-09-16  DDC316524
   ********************************************************************************************************/
   --
   -- =========================================================================
   -- Types enregistrement.
   -- =========================================================================
   --
   -- Pour avoir plus de trace dans le journal
   vgb_debug BOOLEAN := FALSE;
   --
   TYPE type_rec_temps_exec IS RECORD(
      id            NUMBER,
      dt_hh_debut   TIMESTAMP,
      dt_hh_fin     TIMESTAMP,
      delta         NUMBER,
      description   VARCHAR2(250),
      assignment_id NUMBER,
      tri           NUMBER);

   TYPE tab_temps_exec IS TABLE OF type_rec_temps_exec INDEX BY PLS_INTEGER; -- Table des temps
   vgrec_temps_exec tab_temps_exec; -- tableau temps
   --DDC 209235
   vgn_id_demnd       NUMBER := fnd_global.conc_request_id;
   vgv_nm_abreg_progr VARCHAR2(100) := 'GIR_RH_28045';

   vgv_type_trans     VARCHAR(10); --setter au début de la H620/H760/H010
   vgv_id_entre_elemn NUMBER := NULL; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
   vgv_no_emplo       VARCHAR(30);
   vgv_no_afect       per_all_assignments_f.assignment_number%TYPE; -- INC00106428 pour l'inscription des messages dans la table de rejets/erreurs

   -- Plage de temps?
   TYPE type_rec_plage IS RECORD(
      dt_debut    DATE,
      dt_fin      DATE,
      aa_finnc    VARCHAR2(4),
      no_perd     VARCHAR2(2),
      dt_du_achem DATE,
      dt_au_achem DATE); -- Type: Plage de temps.
   --
   -- Déclaration d'un type record pour garder les segments de la ventilation des coûts.
   TYPE type_rec_ventl_cout IS RECORD(
      unite_admin pay_cost_allocation_keyflex.segment2%TYPE,
      type_budgt  pay_cost_allocation_keyflex.segment4%TYPE,
      progr       pay_cost_allocation_keyflex.segment5%TYPE,
      captl       pay_cost_allocation_keyflex.segment8%TYPE,
      entit       pay_cost_allocation_keyflex.segment1%TYPE,
      budgt       VARCHAR2(7),
      minst       VARCHAR2(3),
      centr_respn VARCHAR2(4)); -- Type clé comptable
   --
   -- Journal de bord
   TYPE type_rec_cp_enreg IS RECORD(
      nb_lu    PLS_INTEGER,
      nb_rejt  PLS_INTEGER,
      nb_inser PLS_INTEGER); -- Type enregistrement de compteurs.
   --
   -- Enregistrements rejetés
   TYPE type_rec_rejt IS RECORD(
      id_afect       NUMBER,
      id_entre_elemn NUMBER,
      id_trans       NUMBER,
      no_emplo       VARCHAR2(10),
      dt_perd_couvr  VARCHAR2(20),
      cd_ereur       VARCHAR2(40),
      de_ereur       VARCHAR2(300),
      nm_procd       VARCHAR2(100),
      cd_gain        VARCHAR2(4)
      -- INC00017359
      ,
      id_contr_fdt NUMBER); -- Type enregistrement rejeté
   --
   -- Infos de la personne
   TYPE type_rec_persn IS RECORD(
      id_persn    per_all_people_f.person_id%TYPE,
      no_emplo    per_all_people_f.employee_number%TYPE,
      nas         per_all_people_f.national_identifier%TYPE,
      catgr_emplo per_all_assignments_f.employment_category%TYPE,
      nm_valdr    per_all_people_f.last_name%TYPE
      -- INC00016962
      --,minst    VARCHAR2(3)
      ); -- Type personne
   -- Jeu d'éléments (gains H760)
   TYPE type_rec_jeu_elemn IS RECORD(
      id_type_elemn pay_element_types_f.element_type_id%TYPE,
      nm_elemn      pay_element_types_f.element_name%TYPE,
      cd_sagip      VARCHAR2(4),
      md_compn      VARCHAR2(1)); -- Type: Jeu d'éléments.
   --
   -- Type utilisé pour renseigner la table de contrôle des feuilles de temps
   TYPE type_rec_fdt IS RECORD(
      id_afect        gir_rh_fdt.id_afect%TYPE,
      dt_gain         gir_rh_fdt.dt_gain%TYPE,
      id_entre_elemn  gir_rh_fdt.elemn_entry_id%TYPE,
      id_type_elemn   gir_rh_fdt.elemn_type_id%TYPE,
      nb_hh           gir_rh_fdt.nb_hh%TYPE,
      tx_mt           gir_rh_fdt.tx_mt%TYPE,
      nb_hh_signe     gir_rh_fdt.nb_hh_signe%TYPE,
      tx_mt_signe     gir_rh_fdt.tx_mt_signe%TYPE,
      dt_debut        gir_rh_fdt.dt_debut%TYPE,
      hh_debut        gir_rh_fdt.hh_debut%TYPE,
      dt_fin          gir_rh_fdt.dt_fin%TYPE,
      hh_fin          gir_rh_fdt.hh_fin%TYPE,
      id_persn        gir_rh_fdt.id_persn%TYPE,
      unite_admin     gir_rh_fdt.unite_admin%TYPE,
      type_budgt      gir_rh_fdt.type_budgt%TYPE,
      progr           gir_rh_fdt.progr%TYPE,
      captl           gir_rh_fdt.captl%TYPE,
      budgt           gir_rh_fdt.budgt%TYPE,
      minst           gir_rh_fdt.minst%TYPE,
      centr_respn     gir_rh_fdt.centr_respn%TYPE,
      cd_gain         gir_rh_fdt.cd_gain%TYPE,
      cd_paiem        gir_rh_fdt.cd_paiem%TYPE,
      id_bloc_temps   gir_rh_fdt.id_bloc_temps%TYPE,
      no_versn_objet  gir_rh_fdt.no_versn_objet%TYPE,
      sectn           gir_rh_fdt.sectn%TYPE,
      clas            gir_rh_fdt.clas%TYPE,
      in_mt_rempl     gir_rh_fdt.in_mt_rempl_specl_input%TYPE,
      in_mt_suplm     gir_rh_fdt.in_mt_suplm_specl_input%TYPE,
      dt_perd_paie_du gir_rh_fdt.dt_perd_paie_du%TYPE,
      dt_perd_paie_au gir_rh_fdt.dt_perd_paie_au%TYPE,
      aa_finnc        gir_rh_fdt.aa_finnc%TYPE,
      statu_sagip     gir_rh_fdt.statu_sagip%TYPE,
      dt_statu_sagip  gir_rh_fdt.dt_statu_sagip%TYPE,
      nm_fiche        gir_rh_fdt.nm_fiche%TYPE,
      in_trans_anul   gir_rh_fdt.in_trans_anul%TYPE,
      cd_actio        gir_rh_fdt.cd_actio%TYPE,
      tx_horr         gir_rh_fdt.tx_horr%TYPE);

   --
   -- Type utilisé pour l'étape de validation des transactions H620
   TYPE type_rec_trans_h620 IS RECORD(
      dt_debut           gir_trans_h620.dt_debut%TYPE,
      dt_fin             gir_trans_h620.dt_fin%TYPE,
      cd_gain            gir_trans_h620.cd_gain%TYPE,
      cd_paiem           gir_trans_h620.cd_paiem%TYPE,
      dt_perd_paie_du    gir_trans_h620.perd_paie_varbl_du%TYPE,
      dt_perd_paie_au    gir_trans_h620.perd_paie_varbl_au%TYPE,
      tx_mt              gir_trans_h620.tx_mt%TYPE,
      tx_horr            gir_trans_h620.tx_mt%TYPE,
      nb_hh              gir_rh_fdt.nb_hh_signe%TYPE,
      total_unite_1      gir_trans_h620.total_unite_semn_1%TYPE,
      total_unite_2      gir_trans_h620.total_unite_semn_2%TYPE,
      grand_total_unite  gir_trans_h620.grand_total_unite%TYPE,
      statu_afect        per_assignment_status_types_tl.user_status%TYPE,
      dt_fin_prevu_contr DATE,
      dt_debut_termn     DATE,
      dt_statu_afect     DATE,
      in_carte           VARCHAR2(1),
      dt_trans           DATE,
      cd_ereur           VARCHAR2(100),
      jeton              BOOLEAN,
      nm_jeton           VARCHAR2(100)
      -- retouche 126
      ,
      no_perd     gir_trans_h620.no_perd%TYPE,
      aa_finnc    gir_trans_h620.aa_finnc%TYPE,
      minst       gir_trans_h620.minst%TYPE,
      budgt       gir_trans_h620.budgt%TYPE,
      centr_respn gir_trans_h620.centr_respn%TYPE,
      id_afect    gir_trans_h620.id_afect%TYPE);

   --
   TYPE type_rec_jeu_elemn_h620 IS RECORD(
      id_type_elemn pay_element_types_f.element_type_id%TYPE,
      nm_elemn      pay_element_types_f.element_name%TYPE,
      cd_sagip      pay_element_types_f.attribute1%TYPE); -- Type: Jeu d'éléments.
   --
   -- Type utilisé pour le statut de l'employé
   TYPE type_rec_statu IS RECORD(
      id_afect           gir_trans_h620.id_afect%TYPE,
      statu_afect        per_assignment_status_types_tl.user_status%TYPE,
      dt_fin_prevu_contr DATE,
      paf_dt_debut_efect DATE,
      paf_dt_fin_efect   DATE,
      catgr_afect        per_all_assignments_f.employment_category%TYPE);

   --
   -- Type utilisé pour garder les dates et heures de début et de fin.
   TYPE type_rec_dt_hh IS RECORD(
      dt_debut       gir_rh_fdt.dt_debut%TYPE,
      hh_debut       gir_rh_fdt.hh_debut%TYPE,
      dt_fin         gir_rh_fdt.dt_fin%TYPE,
      hh_fin         gir_rh_fdt.hh_fin%TYPE,
      id_bloc_temps  gir_rh_fdt.id_bloc_temps%TYPE,
      no_versn_objet gir_rh_fdt.no_versn_objet%TYPE,
      sectn          gir_rh_fdt.sectn%TYPE,
      clas           gir_rh_fdt.clas%TYPE);

   --
   --
   -- type utilisé pour l'étape 6.2 et 6.3.
   TYPE type_rec_jeu_elemn_6_2_6_3 IS RECORD(
      id_afect       per_all_assignments_f.assignment_id%TYPE,
      id_type_elemn  pay_element_types_f.element_type_id%TYPE,
      id_entre_elemn pay_element_entries_f.element_entry_id%TYPE,
      nm_elemn       pay_element_types_f.element_name%TYPE,
      cd_elemn       pay_element_types_f.attribute3%TYPE,
      cd_sagip       VARCHAR2(150),
      dt_debut       DATE,
      dt_fin         DATE,
      va_pc          NUMBER,
      va_tx          NUMBER,
      va_factr       NUMBER,
      in_type_liste  VARCHAR2(1));

   --
   -- type utilisé pour l'étape 6.6 et autres du même format.
   TYPE type_rec_jeu_elemn_6_6 IS RECORD(
      id_afect          per_all_assignments_f.assignment_id%TYPE,
      catgr_emplo       pay_element_links_f.employment_category%TYPE,
      id_type_elemn     pay_element_types_f.element_type_id%TYPE,
      id_entre_elemn    pay_element_entries_f.element_entry_id%TYPE,
      nm_elemn          pay_element_types_f.element_name%TYPE,
      cd_elemn          pay_element_types_f.attribute3%TYPE,
      cd_sagip          VARCHAR2(4),
      nm_va_entre_elemn pay_input_values_f.name%TYPE,
      va_entre_elemn    pay_element_entry_values_f.screen_entry_value%TYPE,
      dt_debut          DATE,
      dt_fin            DATE,
      nm_liste          VARCHAR2(20));

   --
   -- Type enregistrement d'élément
   TYPE type_rec_elemn IS RECORD(
      id_entre_elemn pay_element_entries_f.element_entry_id%TYPE);

   --
   -- type pour garder l'identifiant et le statut de la transaction H620
   TYPE type_rec_h620 IS RECORD(
      id_trans_h620 gir_trans_h620.id_trans_h620%TYPE,
      statu_trans   gir_trans_h620.statu_trans%TYPE);

   --
   -- INC00017310 Il faut tenir compte de la date de début et fin de l'affectation
   TYPE type_rec_afect IS RECORD(
      id_afect gir_rh_fdt.id_afect%TYPE,
      dt_debut gir_rh_fdt.dt_debut%TYPE,
      dt_fin   gir_rh_fdt.dt_fin%TYPE
      -- INC00017895
      ,
      id_persn gir_rh_fdt.id_persn%TYPE);

   --
   -- Retouche 169
   -- Type enregistrement d'élément remboursé
   TYPE type_rec_elemn_rembr IS RECORD(
      id_entre_elemn pay_element_entries_f.element_entry_id%TYPE,
      id_contr_fdt   gir_rh_fdt.id_contr_fdt%TYPE,
      dt_gain        DATE);

   --
   -- INC00018222
   -- Type enregistrement pour mettre à jour gir_rh_fdt avec les id_trans, no_docmn et dt_trans
   TYPE type_rec_maj_fdt IS RECORD(
      id_trans     gir_rh_fdt.id_trans%TYPE,
      dt_trans     gir_rh_fdt.dt_trans%TYPE,
      no_docmn     gir_rh_fdt.no_docmn%TYPE,
      id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE);

   --
   TYPE type_rec_maj_suivi IS RECORD(
      id_entre_elemn gir_rh_suivi_entre_elemn_paie.element_entry_id%TYPE, -- INC-89949
      id_contr_fdt   gir_rh_suivi_entre_elemn_paie.id_contr_fdt%TYPE); -- INC-89949

   --
   -- =========================================================================
   -- Types tables PL/SQL.
   -- =========================================================================
   -- Utilisés par H760 et H620
   TYPE tab_rejt IS TABLE OF type_rec_rejt INDEX BY PLS_INTEGER; -- Table des rejets
   --
   -------------------------------------------------------------------------------------------------
   -- Utilisés par H760
   TYPE tab_jeu_elemn IS TABLE OF type_rec_jeu_elemn INDEX BY PLS_INTEGER; -- Type: Table de la liste des jeux d'éléments.
   --
   /* INC00017310
   TYPE TAB_liste_afect        IS TABLE OF NUMBER                   INDEX BY PLS_INTEGER;*/
   TYPE tab_liste_afect IS TABLE OF type_rec_afect INDEX BY PLS_INTEGER; -- Type: Table de la liste des affectations.
   -- INC00016215
   TYPE tab_fdt IS TABLE OF gir_rh_fdt%ROWTYPE INDEX BY PLS_INTEGER; -- Table des contrôles de feuille de temps
   --
   --------------------------------------------------------------------------------------------------
   -- Utilisés par H620
   TYPE tab_jeu_elemn_h620 IS TABLE OF type_rec_jeu_elemn_h620 INDEX BY PLS_INTEGER; -- Type: Table de la liste des jeux d'éléments H620.
   TYPE tab_elemn IS TABLE OF type_rec_elemn INDEX BY PLS_INTEGER; -- Table des éléments
   TYPE tab_jeu_elemn_6_6 IS TABLE OF type_rec_jeu_elemn_6_6 INDEX BY PLS_INTEGER; -- Type: Table de la liste des éléments de suivi.
   TYPE tab_id_trans IS TABLE OF gir_rh_fdt.id_trans%TYPE INDEX BY PLS_INTEGER; -- Type table plsql pour le type number(15).
   TYPE tab_fdt_h620 IS TABLE OF type_rec_fdt INDEX BY PLS_INTEGER; -- Table des contrôles de feuille de temps
   TYPE tab_trans_h620 IS TABLE OF type_rec_h620 INDEX BY PLS_INTEGER; -- Type table plsql pour les transactions H620.
   --
   -- Retouche 169
   TYPE tab_elemn_rembr IS TABLE OF type_rec_elemn_rembr INDEX BY PLS_INTEGER; -- Table des éléments remboursés.
   --
   -- INC00018222
   -- Table PL/SQL indexée par le id_contr_fdt pour mettre à jour gir_rh_fdt lors de la création des trans_h760 et trans_h620
   TYPE tab_maj_fdt IS TABLE OF type_rec_maj_fdt INDEX BY PLS_INTEGER;

   --
   -- =========================================================================
   -- Types tables NESTED TABLE.
   -- =========================================================================
   -- Tables de type NESTED afin de pouvoir faire un BULK COLLECT
   TYPE tab_jeu_elemn_6_2_6_3 IS TABLE OF type_rec_jeu_elemn_6_2_6_3; -- Table pour les éléments à pourcentage et au prorata.
   TYPE tab_liste_elemn IS TABLE OF xxgir_rh_elemn_h620_tempr%ROWTYPE; -- Table pour les listes 6_4 à 6_11
   TYPE tab_maj_suivi IS TABLE OF type_rec_maj_suivi; -- Table pour associer le id_contr_fdt avec l'élément
   --
   -- =========================================================================
   -- Constantes.
   -- =========================================================================
   cd_dt_prodc CONSTANT DATE := TRUNC(FND_DATE.CANONICAL_TO_DATE(FND_PROFILE.VALUE('GIR_DT_MISE_EN_PRODC_LIVRS_2')));
   cd_dt_infer CONSTANT DATE := TRUNC(FND_DATE.CANONICAL_TO_DATE(FND_PROFILE.VALUE('GIR_RH_28045_DT_INFER')));
   -- Date de mise en production livraison 2.
   -- Retouche 41
   --cd_dt_exect                      CONSTANT   DATE         := SYSDATE; -- Date d'exécution de l'adaptation.
   cn_id_demd_concr  CONSTANT NUMBER := fnd_global.conc_request_id; -- Identifiant de la demande concurrente.
   cn_nb_hh_max_semn CONSTANT NUMBER := 70; -- Nombre d'heures d'absence maximale pour une semaine  SAGIP
   /* INC00017310
   cv_atrib_perd_dt_achem           CONSTANT   VARCHAR2(1)  := '3';   -- Valeur de l'attribut3 de la table per_time_periods*/
   cv_catgr_emplo_ocasn CONSTANT VARCHAR2(3) := 'OMA'; -- Catégorie d'emploi servant pour un calcul spécial
   cv_cd_actio_creat    CONSTANT VARCHAR2(1) := '1'; -- Valeur du code d'action pour la création H760
   cv_cd_actio_modfc    CONSTANT VARCHAR2(1) := '2'; -- Valeur du code d'action pour la modification H760
   cv_cd_actio_suprs    CONSTANT VARCHAR2(1) := '3'; -- Valeur du code d'action pour la suppression H760
   cv_cd_entit          CONSTANT VARCHAR2(4) := '7010';

   cv_cd_docmn_sgi_h010 CONSTANT VARCHAR2(10) := 'SRHHRTH010';

   cv_cd_docmn_sgi_h620 CONSTANT VARCHAR2(10) := 'SRHHRTH620';

   cv_cd_docmn_sgi_h760 CONSTANT VARCHAR2(10) := 'SRHHRTH760';

   cv_cd_elemn_suplm_compn     CONSTANT VARCHAR2(11) := 'SUPLM_COMPN'; -- Code de l'élément Heures supplémentaires C
   cv_cd_elemn_suplm_rembr     CONSTANT VARCHAR2(11) := 'SUPLM_REMBR'; -- Code de l'élément Heures suppl remb
   cv_cd_elemn_inter_rembr     CONSTANT VARCHAR2(11) := 'INTER_REMBR'; -- Code de l'élément Heures interméd remb
   cv_cd_elemn_avant_socl      CONSTANT VARCHAR2(16) := 'COMPN_AVANT_SOCL'; -- Code de l'élément Compensation pour avantage social
   cv_cd_statu_sagip_acept     CONSTANT VARCHAR2(1) := 'A'; -- Statut de l'enregistrement Accepté par SAGIP.
   cv_cd_statu_sagip_trans     CONSTANT VARCHAR2(1) := 'T'; -- Statut de l'enregistrement Transféré à SAGIP.
   cv_cd_statu_sagip_rejt      CONSTANT VARCHAR2(1) := 'R'; -- Statut de l'enregistrement Rejeté par SAGIP.
   cv_cd_statu_sagip_non_trans CONSTANT VARCHAR2(1) := 'N'; -- Statut de l'enregistrement Non transféré à SAGIP.
   cv_id_type_paie_stand       CONSTANT VARCHAR2(1) := '1'; -- Paie standard.
   cv_id_type_paie_varbl       CONSTANT VARCHAR2(1) := '2'; -- Paie variable.
   cv_nm_hh                    CONSTANT VARCHAR2(6) := 'Heures'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le nombre d'heures
   --DDC175592
   cv_nm_hh_carra                 CONSTANT VARCHAR2(20) := 'Heures pour la CARRA';
   cv_nm_hh_echelon               CONSTANT VARCHAR2(23) := 'Équiv hres pour échelon';
   cv_nm_unite_repas              CONSTANT VARCHAR2(6) := 'Heures'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le nombre d'unités de repas
   cv_nm_tx                       CONSTANT VARCHAR2(4) := 'Taux'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le taux horaire
   cv_nm_factr                    CONSTANT VARCHAR2(7) := 'Facteur'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le facteur
   cv_nm_mt                       CONSTANT VARCHAR2(7) := 'Montant'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le montant
   cv_nm_pc                       CONSTANT VARCHAR2(11) := 'Pourcentage'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le pourcentage
   cv_nm_dt_debut                 CONSTANT VARCHAR2(13) := 'Date de début'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver la date de début
   cv_nm_dt_fin                   CONSTANT VARCHAR2(11) := 'Date de fin'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver la date de fin
   cv_nm_dt_efect                 CONSTANT VARCHAR2(14) := 'Date effective'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver la date du gain
   cv_nm_va_paie                  CONSTANT VARCHAR2(14) := 'Valeur de paie'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver la valeur de paie
   cv_nm_cd_paiem                 CONSTANT VARCHAR2(16) := 'Code de paiement'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le code de paiement
   cv_nm_table_factr              CONSTANT VARCHAR2(17) := 'Table de facteurs'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver la table de facteurs
   cv_nm_mt_rempl                 CONSTANT VARCHAR2(23) := 'Montant de remplacement'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le montant de remplacement
   cv_nm_mt_suplm                 CONSTANT VARCHAR2(22) := 'Montant supplémentaire'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver le montant supplémentaire
   cv_nm_hh_compn_derv            CONSTANT VARCHAR2(18) := 'Hres comp dérivées'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver les heures compensées dérivées
   cv_nm_specl_input              CONSTANT VARCHAR2(14) := 'Special inputs'; -- Nom pour retrouver les éléments Special inputs
   cv_nm_jeu_elemn_h760           CONSTANT VARCHAR2(18) := 'Éléments pour H760'; -- Nom du jeu d'éléments H760.
   cv_nm_jeu_elemn_h620           CONSTANT VARCHAR2(18) := 'Éléments pour H620'; -- Nom du jeu d'éléments H620.
   cv_nm_jeu_elemn_eligb_prime_pc CONSTANT VARCHAR2(52) := 'Éléments éligibles pour primes à pourcentage pour PV';

   cv_nm_jeu_elemn_tx_anuel CONSTANT VARCHAR2(71) := 'Éléments basés sur taux annuel - prorata en fonction des heures pour PV';

   cv_nm_table_fdt          CONSTANT VARCHAR2(10) := 'GIR_RH_FDT'; -- Nom de la table des feuilles de temps.
   cv_nm_table_h010         CONSTANT VARCHAR2(14) := 'GIR_TRANS_H010'; -- Nom de la table des tansactions H760.
   cv_nm_table_h620         CONSTANT VARCHAR2(14) := 'GIR_TRANS_H620'; -- Nom de la table des tansactions H760.
   cv_nm_table_h760         CONSTANT VARCHAR2(14) := 'GIR_TRANS_H760'; -- Nom de la table des tansactions H760.
   cv_statu_sagip_non_trans CONSTANT VARCHAR2(21) := 'Non transféré à SAGIP'; -- Valeur du statut SAGIP non transféré
   cv_statu_sagip_trans     CONSTANT VARCHAR2(21) := 'Transféré à SAGIP'; -- Valeur du statut SAGIP transféré
   cv_statu_sagip_rejt      CONSTANT VARCHAR2(21) := 'Rejeté'; -- Valeur du statut SAGIP rejeté
   cv_statu_sagip_acept     CONSTANT VARCHAR2(21) := 'Accepté'; -- Valeur du statut SAGIP accepté
   -- INC00016966 INC00016973
   cv_hh_rembr CONSTANT VARCHAR2(5) := 'REMBR'; -- Pour identifier les heures intermédiaires et supplémentaires remboursées
   -- Retouche 169
   cv_nm_regm_acuml_inter CONSTANT VARCHAR2(21) := 'Heures intermédiaires'; -- Nom du régime d'accumulation du temps intermédiaire
   cv_nm_regm_acuml_suplm CONSTANT VARCHAR2(22) := 'Heures supplémentaires'; -- Nom du régime d'accumulation du temps supplémentaire
   cv_cd_aditn            CONSTANT VARCHAR2(1) := '1'; -- Code représentant l'opération Ajouter dans le régime
   --INC00018369
   cv_cd_type_creat_absen CONSTANT VARCHAR2(1) := 'A'; -- Code représentant la provenance des données de l'écran des absences
   cv_cd_type_creat_fdt   CONSTANT VARCHAR2(1) := 'H'; -- Code représentant la provenance des données de la feuille de temps
   cv_cd_type_creat_pgi   CONSTANT VARCHAR2(1) := 'F'; -- Code représentant la provenance des données du PGI
   -- fin INC00018369
   cv_cd_type_elemn_efect  CONSTANT VARCHAR2(2) := 'EF'; -- Code du type effectué
   cv_cd_elemn_inter_compn CONSTANT VARCHAR2(11) := 'INTER_COMPN'; -- Code de l'élément Heures intermédiaires C
   cv_nm_hh_plan           CONSTANT VARCHAR2(14) := 'Heures du plan'; -- Nom de l'attribut de valeur d'entrée permettant de retrouver les heures du plan résiduel à rembourser
   cv_nm_dt_entre_vigr     CONSTANT VARCHAR2(25) := 'Date d''entrée en vigueur'; -- Nom de l'attribut de la date pour les heures du plan
   -- Retouche 202
   cv_nm_table_consl_gain_compn CONSTANT VARCHAR2(17) := 'GIR_RH_GAIN_COMPN'; -- Valeur du lookup type
   cv_nm_table_consl_gain_decml CONSTANT VARCHAR2(17) := 'GIR_RH_GAIN_DECML'; -- Valeur du lookup type
   cv_nm_table_consl_gain_1     CONSTANT VARCHAR2(16) := 'GIR_RH_CD_GAIN_1'; -- Valeur du lookup type
   cv_nm_table_consl_gain_2     CONSTANT VARCHAR2(16) := 'GIR_RH_CD_GAIN_2'; -- Valeur du lookup type
   --   cv_nm_table_consl_gain_3         CONSTANT   VARCHAR2(16) := 'GIR_RH_CD_GAIN_3';  -- Valeur du lookup type
   cv_nm_table_consl_gain_4 CONSTANT VARCHAR2(16) := 'GIR_RH_CD_GAIN_4'; -- Valeur du lookup type
   --   cv_nm_table_consl_gain_5         CONSTANT   VARCHAR2(16) := 'GIR_RH_CD_GAIN_5';  -- Valeur du lookup type
   cv_nm_table_consl_gain_6 CONSTANT VARCHAR2(16) := 'GIR_RH_CD_GAIN_6'; -- Valeur du lookup type --DDC200241 INC82025
   --
   -- =========================================================================
   -- Variables globales.
   -- =========================================================================
   -- Retouche 41
   vgd_dt_exect       DATE; -- Date d'exécution passée en paramètre par H760 et H620.
   vgb_in_statu_termn BOOLEAN; -- TRUE indique que l'affectation est terminée, FALSE affectation valide
   vgn_id_paie_stand  pay_all_payrolls_f.payroll_id%TYPE; -- Identifiant de la paie standard
   vgv_texte_ereur    VARCHAR2(4000); -- Texte explicatif du problème rencontré.
   vgv_in_etape_2     VARCHAR2(1) := 'N'; -- Indicateur que l'étape 2 a été exécutée.
   vgrec_gir_rh_fdt   gir_rh_fdt%ROWTYPE; -- enregistrement de type gir_rh_fdt.
   vgrec_cp_fdt       type_rec_cp_enreg; -- Compteurs pour GIR_RH_FDT
   vgrec_cp_h760      type_rec_cp_enreg; -- Compteurs pour GIR_TRANS_H760
   vgrec_cp_h620      type_rec_cp_enreg; -- Compteurs pour GIR_TRANS_H620
   vgrec_cp_h010      type_rec_cp_enreg; -- Compteurs pour GIR_TRANS_H010
   --Début SAGIR F.Aubin 2016-08-16 INC00106425: copie
   vgrec_cp_fdt_copie  type_rec_cp_enreg; -- Compteurs pour GIR_RH_FDT
   vgrec_cp_h760_copie type_rec_cp_enreg; -- Compteurs pour GIR_TRANS_H760
   vgrec_cp_h620_copie type_rec_cp_enreg; -- Compteurs pour GIR_TRANS_H620
   vgrec_cp_h010_copie type_rec_cp_enreg; -- Compteurs pour GIR_TRANS_H010
   --
   vgrec_perd_paie          type_rec_plage; -- période de paie courante.
   vgrec_persn              type_rec_persn; -- Infos de la personne
   vgrec_perd_paie_varbl    type_rec_plage; -- Plage de période de paie variable.
   vgrec_perd_paie_stand    type_rec_plage; -- Plage de période de paie standard.
   vgtab_rejt               tab_rejt; -- Table PL/SQL des rejets
   vgtab_trans_anul_h620    tab_id_trans; -- Table des identifiants H620 à annuler dans GIR_TRANS_H620 et GIR_RH_FDT.
   vgvar_liste_id_h620_h010 sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de type NUMBER pour les identifiants de transactions H620 annulées avec une H010.
   vgv_etape                VARCHAR2(100); -- Étape à inscrire lorsqu'il y a un raise.
   --INC70575
   vgd_dt_least DATE;
   -- Pour gestion d'erreurs
   vgv_id_afect gir_rh_fdt.id_afect%TYPE;
   --
   -- ===================================================================================
   --                               Exceptions.
   -- ===================================================================================
   vgexc_trait_h760 EXCEPTION; -- Exception levée et qui remonte jusqu'à la procédure appelante pour h760
   vgexc_trait_h620 EXCEPTION; -- Exception levée et qui remonte jusqu'à la procédure appelante pour h620.
   vgexc_dml_ereur  EXCEPTION; -- Exception lors de l'insertion avec un FORALL.
   vgexc_mesg_ereur EXCEPTION; -- Exception lors de messages d'erreurs.
   --
   PRAGMA EXCEPTION_INIT(vgexc_dml_ereur,
                         -24381); -- ORA - 24381 = Erreur(s) dans un tableau DML
   --
   -- =========================================================================
   -- Curseurs.
   -- =========================================================================
   --
   -- ============================================================================
   -- P_log:
   -- ============================================================================
   /*************************************************************************
   * But : Cette procédure permet de faire du log.
   *
   * Paramètres entrée :
   *   - pv_texte : le texte à afficher dans le log
   *   - pv_apeln : le nom de la fonction ou la procédure appelante
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   *************************************************************************/
   PROCEDURE p_log(pv_texte IN VARCHAR2,
                   pv_apeln IN VARCHAR2) IS
   BEGIN
      FND_LOG.STRING(log_level => FND_LOG.LEVEL_STATEMENT,
                     module    => pv_apeln,
                     message   => pv_texte);
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_log.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         NULL;
   END p_log;
   --

   -- ============================================================================
   -- p_chevc_aa_finnc:
   -- ============================================================================
   /*************************************************************************
   * But : Cette procédure permet de gérer les gains qui chevauchent une année financière
   *
   * Paramètres entrée
   *   pd_dt_debut_gain        : Date de début du gain
   *   pd_dt_fin_gain          : Date de fin du gain
   *   pd_dt_debut_perd_gain   : Date de début de la période de paie du gain
   *   pd_dt_fin_perd_gain     : Date de fin de la période de paie du gain
   *   pd_dt_debut_perd_paie   : Date de début de la période de paie courante
   *   pd_dt_fin_perd_paie     : Date de fin de la période de paie courante
   *   pd_dt_du_achem          : Date de début de l'acheminement
   *   pv_no_perd              : Numéro de la période de paie
   *   pd_id_afect             : Identifiant affectation
   *   pv_aa_finnc             : Année financière
   *   pv_in_rempl_dt          : Indicateur de remplacement de date
   * Paramètres de sortie
   *   pd_dt_debut_trans       : Date de début de la transaction
   *   pd_dt_fin_trans         : Date de fin de la transaction
   *   pv_aa_finnc_trans       : Année financière de la transaction
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Geneviève Bélanger  2017-01-27  CHG 217615 - création initiale
   *************************************************************************/
   PROCEDURE p_chevc_aa_finnc(pd_dt_debut_gain      IN DATE,
                              pd_dt_fin_gain        IN DATE,
                              pd_dt_debut_perd_gain IN DATE,
                              pd_dt_fin_perd_gain   IN DATE,
                              pd_dt_debut_perd_paie IN DATE,
                              pd_dt_fin_perd_paie   IN DATE,
                              pv_no_perd            IN VARCHAR2,
                              pn_id_afect           IN NUMBER,
                              pv_aa_finnc           IN VARCHAR2,
                              pv_in_rempl_dt        IN VARCHAR2,
                              pd_dt_debut_trans     OUT DATE,
                              pd_dt_fin_trans       OUT DATE,
                              pv_aa_finnc_trans     OUT VARCHAR2) IS
   
      vlv_in_chevc_gain VARCHAR2(1) := 'N';
      vlv_in_chevc_paie VARCHAR2(1) := 'N';
      vlv_nm_procd      VARCHAR2(100) := 'apps.xxgir_rh_28045.P_chevc_aa_finnc';
   
   BEGIN
   
      p_log('10 - pv_in_rempl_dt = ' || pv_in_rempl_dt || ', pn_id_afect=' || pn_id_afect || ', pv_aa_finnc=' || pv_aa_finnc,
            vlv_nm_procd);
      p_log('12 - pd_dt_debut_gain=' || TO_CHAR(pd_dt_debut_gain,
                                                'YYYY-MM-DD') || ', pd_dt_fin_gain=' ||
            TO_CHAR(pd_dt_fin_gain,
                    'YYYY-MM-DD'),
            vlv_nm_procd);
      p_log('14 - pd_dt_debut_perd_gain=' || TO_CHAR(pd_dt_debut_perd_gain,
                                                     'YYYY-MM-DD') || ', pd_dt_fin_perd_gain=' ||
            TO_CHAR(pd_dt_fin_perd_gain,
                    'YYYY-MM-DD'),
            vlv_nm_procd);
      p_log('16 - pd_dt_debut_perd_paie=' || TO_CHAR(pd_dt_debut_perd_paie,
                                                     'YYYY-MM-DD') || ', pd_dt_fin_perd_paie=' ||
            TO_CHAR(pd_dt_fin_perd_paie,
                    'YYYY-MM-DD'),
            vlv_nm_procd);
      p_log('18 - pv_no_perd=' || pv_no_perd,
            vlv_nm_procd);
   
      -- Vérifier si la période couverte par le gain chevauche le 1er avril
      IF pd_dt_debut_gain < TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_gain) || '04-01',
                                    'YYYY-MM-DD') AND
         pd_dt_fin_gain >= TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_gain) || '04-01',
                                   'YYYY-MM-DD') THEN
         vlv_in_chevc_gain := 'O';
      END IF;
   
      p_log('20 - la période couverte par le gain chevauche le 1er avril de l''année du gain - vlv_in_chevc_gain = ' || vlv_in_chevc_gain,
            vlv_nm_procd);
   
      -- Vérifier si la période couverte par le gain chevauche le 1er avril
      IF pd_dt_debut_perd_gain < TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_paie) || '04-01',
                                         'YYYY-MM-DD') AND
         pd_dt_fin_perd_gain >= TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_paie) || '04-01',
                                        'YYYY-MM-DD') THEN
         vlv_in_chevc_paie := 'O';
      END IF;
   
      -- Vérifier si la période de paie courante chevauche le 1er avril
      IF pd_dt_debut_perd_paie < TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_paie) || '04-01',
                                         'YYYY-MM-DD') AND
         pd_dt_fin_perd_paie >= TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_paie) || '04-01',
                                        'YYYY-MM-DD') THEN
         vlv_in_chevc_paie := 'O';
      END IF;
   
      p_log('30 - la période de paie du gain, ou la période de paie courante chevauche le 1er avril de l''année en cours - vlv_in_chevc_paie = ' ||
            vlv_in_chevc_paie,
            vlv_nm_procd);
   
      -- si la période couverte par le gain ne chevauche pas le 1er avril
      IF vlv_in_chevc_gain = 'N' THEN
         p_log('40 - vlv_in_chevc_gain = N',
               vlv_nm_procd);
      
         -- Si la personne n'a jamais été rémunérée, la date de couverture demeure telle que lue dans FDT
         IF pv_in_rempl_dt = 'N' THEN
            pd_dt_debut_trans := pd_dt_debut_gain;
            pd_dt_fin_trans   := pd_dt_fin_gain;
            pv_aa_finnc_trans := pv_aa_finnc;
         
            p_log('50 - pv_in_rempl_dt = N, la personne n''a jamais été rémunérée, la date de couverture demeure telle que lue dans FDT',
                  vlv_nm_procd);
         
            -- Si la personne a déjà été rémunérée ou si les dates ont été remplacées
         ELSE
            -- Si la période de paie courante chevauche le 1er avril
            IF vlv_in_chevc_paie = 'O' THEN
               p_log('60 - vlv_in_chevc_paie = O',
                     vlv_nm_procd);
            
               -- si c'est la période 1 ou 2, arrêter au 31 mars et inscrire l'année financière précédente
               IF TO_NUMBER(pv_no_perd) IN (1,
                                            2) THEN
                  pd_dt_debut_trans := pd_dt_debut_perd_paie;
                  pd_dt_fin_trans   := TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_paie) || '-03-31',
                                               'YYYY-MM-DD');
                  pv_aa_finnc_trans := EXTRACT(YEAR FROM pd_dt_debut_perd_paie) - 1;
               
                  p_log('70 - période 1 ou 2, arrêter le 31 mars pour l''année financière antérieure',
                        vlv_nm_procd);
               
               ELSE
                  pd_dt_debut_trans := pd_dt_debut_perd_paie;
                  pd_dt_fin_trans   := pd_dt_fin_perd_paie;
                  pv_aa_finnc_trans := pv_aa_finnc;
               
                  p_log('75 - période 3 ou plus, inscrire les dates de la période de paie courante',
                        vlv_nm_procd);
               END IF;
            
               -- Aucun chevauchement de la période de paie, inscrire les dates de la période de paie
            ELSE
               pd_dt_debut_trans := pd_dt_debut_perd_paie;
               pd_dt_fin_trans   := pd_dt_fin_perd_paie;
               pv_aa_finnc_trans := pv_aa_finnc;
            
               p_log('80 - vlv_in_chevc_paie = N, inscrire les dates de la période de paie courante',
                     vlv_nm_procd);
            END IF;
         END IF;
      
         -- la période couverte par le gain chevauche le 1er avril
      ELSE
         p_log('90 - vlv_in_chevc_gain = O',
               vlv_nm_procd);
      
         -- Si la personne n'a jamais été rémunérée, vérifier si les dates doivent être modifiées pour la période 1 ou 2
         IF pv_in_rempl_dt = 'N' THEN
            p_log('100 - pv_in_rempl_dt = N',
                  vlv_nm_procd);
         
            IF TO_NUMBER(pv_no_perd) IN (1,
                                         2) THEN
               p_log('110 - période 1 ou 2',
                     vlv_nm_procd);
            
               IF vlv_in_chevc_paie = 'O' THEN
                  p_log('120 - vlv_in_chevc_paie = O',
                        vlv_nm_procd);
               
                  -- si c'est un gain de l'année précédente, conserver les dates du gain, mais pour l'année financière précédente
                  IF EXTRACT(YEAR FROM pd_dt_debut_gain) < EXTRACT(YEAR FROM pd_dt_debut_perd_paie) THEN
                     pd_dt_debut_trans := pd_dt_debut_gain;
                     pd_dt_fin_trans   := pd_dt_fin_gain;
                     pv_aa_finnc_trans := EXTRACT(YEAR FROM pd_dt_debut_perd_paie) - 1;
                  
                     p_log('130 - gain de l''année précédente, conserver la période du gain et inscrire l''année financière précédente',
                           vlv_nm_procd);
                  
                  ELSE
                     -- Si le gain débute avant le 1er avril, terminer le 31 mars
                     IF pd_dt_debut_gain < TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_paie) || '-04-01',
                                                   'YYYY-MM-DD') THEN
                        pd_dt_debut_trans := pd_dt_debut_gain;
                        pd_dt_fin_trans   := TO_DATE(EXTRACT(YEAR FROM pd_dt_fin_perd_paie) || '-03-31',
                                                     'YYYY-MM-DD');
                        pv_aa_finnc_trans := EXTRACT(YEAR FROM pd_dt_debut_perd_paie) - 1;
                     
                        p_log('140 - gain de l''année financière précédente qui se termine le 31 mars',
                              vlv_nm_procd);
                     
                        -- Si le gain débute le 1er avril, modifier la date de début
                     ELSE
                        pd_dt_debut_trans := TO_DATE(EXTRACT(YEAR FROM pd_dt_debut_perd_paie) || '-04-01',
                                                     'YYYY-MM-DD');
                        pd_dt_fin_trans   := pd_dt_fin_perd_paie;
                        pv_aa_finnc_trans := pv_aa_finnc;
                     
                        p_log('150 - gain de l''année financière courante qui débute le 1er avril',
                              vlv_nm_procd);
                     END IF;
                  END IF;
               
                  -- aucun chevauchement, les dates demeurent telles quelles pour l'année financière précédente
               ELSE
                  pd_dt_debut_trans := pd_dt_debut_gain;
                  pd_dt_fin_trans   := pd_dt_fin_gain;
                  pv_aa_finnc_trans := EXTRACT(YEAR FROM pd_dt_debut_perd_paie) - 1;
               
                  p_log('160 - pas de chevauchement, les dates demeurent telles quelles, pour l''année financière précédente',
                        vlv_nm_procd);
               END IF;
            
               -- Sinon, les dates demeurent telles quelles
            ELSE
               pd_dt_debut_trans := pd_dt_debut_gain;
               pd_dt_fin_trans   := pd_dt_fin_gain;
               pv_aa_finnc_trans := pv_aa_finnc;
            
               p_log('170 - période 3 ou plus, les dates demeurent telles quelles',
                     vlv_nm_procd);
            END IF;
         
            -- Si personne déjà rémunérée ou période substituée, inscrire les dates de la période de paie
         ELSE
            p_log('180 - pv_in_rempl_dt = O',
                  vlv_nm_procd);
         
            IF TO_NUMBER(pv_no_perd) IN (1,
                                         2) THEN
               p_log('190 - période 1 ou 2',
                     vlv_nm_procd);
            
               IF vlv_in_chevc_paie = 'O' THEN
                  p_log('200 - vlv_in_chevc_paie = O',
                        vlv_nm_procd);
               
                  pd_dt_debut_trans := pd_dt_debut_perd_paie;
                  pd_dt_fin_trans   := TO_DATE(EXTRACT(YEAR FROM pd_dt_fin_perd_paie) || '-03-31',
                                               'YYYY-MM-DD');
                  pv_aa_finnc_trans := EXTRACT(YEAR FROM pd_dt_debut_perd_paie) - 1;
               
                  p_log('210 - période 1 ou 2, arrêter le 31 mars pour l''année financière antérieure',
                        vlv_nm_procd);
               ELSE
                  p_log('220 - vlv_in_chevc_paie = N',
                        vlv_nm_procd);
               
                  pd_dt_debut_trans := pd_dt_debut_perd_paie;
                  pd_dt_fin_trans   := pd_dt_fin_perd_paie;
                  pv_aa_finnc_trans := EXTRACT(YEAR FROM pd_dt_debut_perd_paie) - 1;
               
                  p_log('230 - période 1 ou 2, inscrire les dates de la période de paie courante pour l''année financière antérieure',
                        vlv_nm_procd);
               END IF;
            
            ELSE
               pd_dt_debut_trans := pd_dt_debut_perd_paie;
               pd_dt_fin_trans   := pd_dt_fin_perd_paie;
               pv_aa_finnc_trans := pv_aa_finnc;
            
               p_log('240 - période 3 ou plus, inscrire les dates de la période de paie courante',
                     vlv_nm_procd);
            END IF;
         END IF;
      END IF;
   
   END p_chevc_aa_finnc;

   -- ============================================================================
   -- p_insrt_erreur:
   -- ============================================================================
   /*************************************************************************
   * But : Cette procédure permet de gérer la nouvelle gestion des erreur
   *
   * Paramètres entrée :
   *   - pv_code_erreur_gir   erreur GIR, du format GIR-#####
   *   - pv_token_value  liste des token et valeur dans le format suivant "TOKEN1:VALUE1;TOKEN2:VALUE2"
   *   - pv_attribut1 --TYPE_TRANS
   *   - pv_attribut2 --ID_TRANS
   *   - pv_attribut3 --ID_CONTR_ABSEN
   *   - pv_attribut4 --ID_CONTR_FDT
   *   - pv_attribut5 --NO_DOCMN
   *   - pv_attribut6 --ID_AFECT
   *   - pv_attribut7 --ID_ENTRE_ELEMN
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Frederic Aubin      2016-07-19  Création
   * Geneviève Bélanger  2016-08-30  CHG XXXXXX / INC00106619 - insérer la date d'exécution dans la table d'erreurs/rejets
   *************************************************************************/
   PROCEDURE p_insrt_erreur(pn_id_demnd        IN NUMBER,
                            pd_dt_ereur_rejet  IN DATE /*DEFAULT SYSDATE*/, -- INC00106619
                            pv_nm_abreg_progr  IN VARCHAR2,
                            pv_nm_procd        IN VARCHAR2,
                            pv_code_erreur_gir IN VARCHAR2,
                            pv_message         IN VARCHAR2,
                            pv_de_mesg_techn   IN VARCHAR2,
                            pv_type_trans      IN VARCHAR2,
                            pv_id_trans        IN VARCHAR2,
                            pv_id_contr_absen  IN VARCHAR2,
                            pv_id_contr_fdt    IN VARCHAR2,
                            pv_no_docmn        IN VARCHAR2,
                            pv_id_afect        IN VARCHAR2,
                            pv_id_entre_elemn  IN VARCHAR2,
                            pv_dt_gain         IN VARCHAR2,
                            pv_cd_gain         IN VARCHAR2) IS
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
   BEGIN
   
      INSERT INTO gir_adm_ereur_rejet_genrq
         ( --id_seqnc,
          id_demnd,
          dt_ereur_rejet,
          nm_abreg_progr,
          nm_procd,
          cd_mesg,
          de_mesg_fonct,
          de_mesg_techn,
          attribut1,
          attribut2,
          attribut3,
          attribut4,
          attribut5,
          attribut6,
          attribut7,
          attribut8 /*,
                                                                                attribut9*/)
      VALUES
         ( --id dans le trigger,
          pn_id_demnd, --pn_id_demnd
          pd_dt_ereur_rejet,
          pv_nm_abreg_progr,
          pv_nm_procd,
          pv_code_erreur_gir,
          pv_message,
          pv_de_mesg_techn,
          pv_type_trans,
          pv_id_trans,
          pv_id_contr_absen,
          pv_id_contr_fdt,
          pv_no_docmn,
          pv_id_afect,
          pv_id_entre_elemn,
          pv_dt_gain /*,
                                                                                pv_cd_gain*/);
   
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Planté dans l''insertion d''erreur ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
      
   END p_insrt_erreur;
   --
   -- ============================================================================
   -- p_creer_erreur:
   -- ============================================================================
   /*************************************************************************
   * But : Cette procédure permet de gérer la nouvelle gestion des erreur
   *
   * Paramètres entrée :
   *   - pv_code_erreur_gir   erreur GIR, du format GIR-#####
   *   - pv_token_value  liste des token et valeur dans le format suivant "TOKEN1:VALUE1;TOKEN2:VALUE2"
   *   - pv_attribut1 --TYPE_TRANS
   *   - pv_attribut2 --ID_TRANS
   *   - pv_attribut3 --ID_CONTR_ABSEN
   *   - pv_attribut4 --ID_CONTR_FDT
   *   - pv_attribut5 --NO_DOCMN
   *   - pv_attribut6 --ID_AFECT
   *   - pv_attribut7 --ID_ENTRE_ELEMN
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Edgar Doiron        2016-03-18  Création
   * Geneviève Bélanger  2016-08-30  CHG XXXXXX / INC00106619 - insérer la date d'exécution dans la table d'erreurs/rejets
   * Geneviève Bélanger  2016-09-19  INC00107675 - Prévoir aussi les tokens qui ne sont pas insérés dans les attributs de la table d'erreurs/rejets
   *************************************************************************/
   PROCEDURE p_creer_erreur(pv_code_erreur_gir IN VARCHAR2,
                            pv_token_value     IN VARCHAR2,
                            pn_id_demnd        IN NUMBER,
                            pd_dt_ereur_rejet  IN DATE /*DEFAULT SYSDATE*/, -- INC00106619
                            pv_nm_abreg_progr  IN VARCHAR2,
                            pv_nm_procd        IN VARCHAR2,
                            pv_de_mesg_techn   IN VARCHAR2) IS
   
      --Edgar Doiron 2016-08-04
      --PRAGMA AUTONOMOUS_TRANSACTION;
      --
   
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.p_creer_erreur';
      vlv_message        VARCHAR2(1000);
      vlv_token          VARCHAR2(255);
      vlv_value          VARCHAR2(255);
      vlv_cur_string     VARCHAR2(2000);
      vlv_token_string   VARCHAR2(2000);
   
      vlv_type_trans     VARCHAR2(100);
      vlv_id_trans       VARCHAR2(100);
      vlv_id_contr_absen VARCHAR2(100);
      vlv_id_contr_fdt   VARCHAR2(100);
      vlv_no_docmn       VARCHAR2(100);
      vlv_id_afect       VARCHAR2(100);
      vlv_id_entre_elemn VARCHAR2(100);
      vlv_dt_gain        VARCHAR2(100);
      vlv_cd_gain        VARCHAR2(100);
   
   BEGIN
      --
      p_log('10 - Début procédure Param -> pv_code_erreur_gir=' || pv_code_erreur_gir || ', pv_token_value=' || pv_token_value || ', pn_id_demnd=' ||
            pn_id_demnd || ', pd_dt_ereur_rejet=' || pd_dt_ereur_rejet || ', pv_nm_abreg_progr=' || pv_nm_abreg_progr || ', pv_nm_procd=' ||
            pv_nm_procd || ', pv_de_mesg_techn=' || pv_de_mesg_techn,
            vlv_nm_procd_fonct);
      --
      vlv_token_string   := pv_token_value;
      vlv_type_trans     := NULL;
      vlv_id_trans       := NULL;
      vlv_id_contr_absen := NULL;
      vlv_id_contr_fdt   := NULL;
      vlv_no_docmn       := NULL;
      vlv_id_afect       := NULL;
      vlv_id_entre_elemn := NULL;
      vlv_dt_gain        := NULL;
      vlv_cd_gain        := NULL;
   
      FND_MESSAGE.SET_NAME('XXGIR',
                           pv_code_erreur_gir);
   
      WHILE LENGTH(vlv_token_string) > 0 LOOP
         vlv_cur_string   := SUBSTR(vlv_token_string,
                                    0,
                                    INSTR(vlv_token_string,
                                          ';'));
         vlv_token_string := SUBSTR(vlv_token_string,
                                    INSTR(vlv_token_string,
                                          ';') + 1,
                                    LENGTH(vlv_token_string));
      
         vlv_token := SUBSTR(vlv_cur_string,
                             0,
                             INSTR(vlv_cur_string,
                                   ':') - 1);
         vlv_value := SUBSTR(vlv_cur_string,
                             INSTR(vlv_cur_string,
                                   ':') + 1,
                             INSTR(vlv_cur_string,
                                   ';') - 1 - INSTR(vlv_cur_string,
                                                    ':'));
      
         CASE vlv_token
            WHEN 'TYPE_TRANS' THEN
               vlv_type_trans := vlv_value;
            WHEN 'ID_TRANS' THEN
               vlv_id_trans := vlv_value;
            WHEN 'ID_CONTR_ABSEN' THEN
               vlv_id_contr_absen := vlv_value;
            WHEN 'ID_CONTR_FDT' THEN
               vlv_id_contr_fdt := vlv_value;
            WHEN 'NO_DOCMN' THEN
               vlv_no_docmn := vlv_value;
            WHEN 'ID_AFECT' THEN
               vlv_id_afect := vlv_value;
            WHEN 'ID_ENTRE_ELEMN' THEN
               vlv_id_entre_elemn := vlv_value;
            WHEN 'DT_GAIN' THEN
               vlv_dt_gain := vlv_value;
            WHEN 'CD_GAIN' THEN
               vlv_cd_gain := vlv_value;
               -- INC00107675 Début 2016-09-19
         -- Gérer tokens jusqu'ici non prévus
            ELSE
               NULL;
               -- INC00107675 Fin
         END CASE;
      
         FND_MESSAGE.SET_TOKEN(token => vlv_token,
                               VALUE => vlv_value);
      
      END LOOP;
   
      --Reprendre le message généré
      vlv_message := FND_MESSAGE.GET;
   
      p_log('15 - Appel insertion -> vgn_id_demnd=' || vgn_id_demnd || ', pd_dt_ereur_rejet=' || pd_dt_ereur_rejet || ', pv_nm_abreg_progr=' ||
            pv_nm_abreg_progr || ', pv_nm_procd=' || pv_nm_procd || ', pv_code_erreur_gir=' || pv_code_erreur_gir || ', vlv_message=' || vlv_message ||
            ', pv_de_mesg_techn=' || pv_de_mesg_techn || ', vlv_type_trans=' || vlv_type_trans || ', vlv_id_trans=' || vlv_id_trans ||
            ', vlv_id_contr_absen=' || vlv_id_contr_absen || ', vlv_id_contr_fdt=' || vlv_id_contr_fdt || ', vlv_no_docmn=' || vlv_no_docmn ||
            ', vlv_id_afect=' || vlv_id_afect || ', vlv_id_entre_elemn=' || vlv_id_entre_elemn || ', vlv_dt_gain=' || vlv_dt_gain ||
            ', vlv_cd_gain=' || vlv_cd_gain,
            vlv_nm_procd_fonct);
   
      p_insrt_erreur(vgn_id_demnd,
                     pd_dt_ereur_rejet,
                     pv_nm_abreg_progr,
                     pv_nm_procd,
                     pv_code_erreur_gir,
                     vlv_message, --de_mesg_fonct
                     pv_de_mesg_techn,
                     vlv_type_trans,
                     vlv_id_trans,
                     vlv_id_contr_absen,
                     vlv_id_contr_fdt,
                     vlv_no_docmn,
                     vlv_id_afect,
                     vlv_id_entre_elemn,
                     vlv_dt_gain,
                     vlv_cd_gain);
   
      --Edgar Doiron 2016-08-04
      --COMMIT;
   
   EXCEPTION
      WHEN OTHERS THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Planté dans la création d''erreur ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
      
   END p_creer_erreur;
   /*************************************************************************
   * But : Cette procédure permet de d'imprimer les étape en calculant les moyennes.
   *
   * Paramètres entrée :
   *   - pn_store_print    : commande selon calcul ou impression
   *   - pd_dt_debut       : date/heure de début de calcul
   *   - pd_dt_fin         : date/heure de fin de calcul
   *   - cpt               : compteur pour calcul de moyenne
   *   - pn_assignment_id  : affectation en cours
   *   - pv_description    : Texte
   *   - pn_tri            : Trie d'affichage
   *   - pv_sourc          : source H760 ou H620
   *
   * Paramètres entré/sortie :
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Edgar Doiron        2012-11-08  Création
   *
   *************************************************************************/
   PROCEDURE p_time_diff_store_print(pn_store_print   IN NUMBER, --0 store;  1 print
                                     pd_dt_debut      IN TIMESTAMP,
                                     pd_dt_fin        IN TIMESTAMP,
                                     cpt              IN NUMBER,
                                     pn_assignment_id IN NUMBER,
                                     pv_description   IN VARCHAR2,
                                     pn_tri           IN NUMBER,
                                     pv_sourc         IN VARCHAR2 DEFAULT 'H620') IS
   
      -- Variables de travail
      vln_delta      NUMBER := 0;
      ltab_desc_moyn type_tab_desc_moyn := type_tab_desc_moyn();
      l_idx          INTEGER;
   
   BEGIN
      IF pn_store_print = 0 THEN
         vln_delta := (EXTRACT(HOUR FROM to_timestamp(TO_CHAR(pd_dt_fin,
                                                    'YYYY-MM-DD HH24:mi:ss.ff9'),
                                            'YYYY-MM-DD HH24:mi:ss.ff9')) -
                      EXTRACT(HOUR FROM to_timestamp(TO_CHAR(pd_dt_debut,
                                                    'YYYY-MM-DD HH24:mi:ss.ff9'),
                                            'YYYY-MM-DD HH24:mi:ss.ff9'))) * 3600 +
                      (EXTRACT(MINUTE FROM to_timestamp(TO_CHAR(pd_dt_fin,
                                                    'YYYY-MM-DD HH24:mi:ss.ff9'),
                                            'YYYY-MM-DD HH24:mi:ss.ff9')) -
                      EXTRACT(MINUTE FROM to_timestamp(TO_CHAR(pd_dt_debut,
                                                    'YYYY-MM-DD HH24:mi:ss.ff9'),
                                            'YYYY-MM-DD HH24:mi:ss.ff9'))) * 60 +
                      (EXTRACT(SECOND FROM to_timestamp(TO_CHAR(pd_dt_fin,
                                                    'YYYY-MM-DD HH24:mi:ss.ff9'),
                                            'YYYY-MM-DD HH24:mi:ss.ff9')) -
                      EXTRACT(SECOND FROM to_timestamp(TO_CHAR(pd_dt_debut,
                                                    'YYYY-MM-DD HH24:mi:ss.ff9'),
                                            'YYYY-MM-DD HH24:mi:ss.ff9')));
      
         vgrec_temps_exec(cpt).id := cpt;
         vgrec_temps_exec(cpt).dt_hh_debut := pd_dt_debut;
         vgrec_temps_exec(cpt).dt_hh_fin := pd_dt_fin;
         vgrec_temps_exec(cpt).delta := vln_delta;
         vgrec_temps_exec(cpt).description := pv_description;
         vgrec_temps_exec(cpt).assignment_id := pn_assignment_id;
         vgrec_temps_exec(cpt).tri := pn_tri;
      ELSE
         BEGIN
            --INC00105800
            l_idx := vgrec_temps_exec.first;
            LOOP
               ltab_desc_moyn.extend;
               ltab_desc_moyn(ltab_desc_moyn.last) := NEW type_desc_moyn(vgrec_temps_exec(l_idx).description,
                                                                         vgrec_temps_exec(l_idx).delta,
                                                                         vgrec_temps_exec(l_idx).tri);
               l_idx := vgrec_temps_exec.NEXT(l_idx);
               EXIT WHEN l_idx IS NULL;
            END LOOP;
         
            SELECT CAST(MULTISET (SELECT description,
                                ROUND(AVG(moyenne),
                                      3),
                                tri
                           FROM TABLE(ltab_desc_moyn)
                          GROUP BY description,
                                   tri
                          ORDER BY tri) AS type_tab_desc_moyn)
              INTO ltab_desc_moyn
              FROM dual;
         
            l_idx := ltab_desc_moyn.first;
            LOOP
               IF ltab_desc_moyn(l_idx).tri > 18 OR
                   pv_sourc = 'H760' THEN
                  FND_FILE.PUT_LINE(FND_FILE.LOG, /*'La procédure '|| */
                                    ltab_desc_moyn(l_idx).description || ' a pris en moyenne ' || ltab_desc_moyn(l_idx).moyenne || 's par employé');
               ELSE
                  FND_FILE.PUT_LINE(FND_FILE.LOG, /*'La procédure '|| */
                                    ltab_desc_moyn(l_idx).description || ' a pris ' || ltab_desc_moyn(l_idx).moyenne || 's ');
               END IF;
               FND_FILE.NEW_LINE(FND_FILE.LOG);
               l_idx := ltab_desc_moyn.NEXT(l_idx);
               EXIT WHEN l_idx IS NULL;
            END LOOP;
         EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;
      END IF;
   END p_time_diff_store_print;

   /*************************************************************************
   * But : Cette procédure permet de splitter les heure de la carra
   *       DDC 204445
   * Paramètres entrée :
   *   - pv_cd_gain : code de gain
   *   - pn_assignment_id : id d'assignation de la personne
   *   - pd_dt_gain : date du gain
   * Paramètres entré/sortie :
   *   - pn_total_semn_1 : Heure de la semaine 1
   *   - pn_total_semn_2 : Heure de la semaine 2
   *   - pn_grand_total : Grand Total des 2 semaine
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Edgar Doiron        2012-11-08  Création
   * Frédéric Aubin      2016-01-14  DDC 204445 INC-98048 Rebrassage des conditions pour retourner la semaine 1 et semaine 2 par rapport au Grand total
   *
   *************************************************************************/
   PROCEDURE p_split_hh_carra(pv_cd_gain       IN VARCHAR2,
                              pn_assignment_id IN NUMBER,
                              pd_dt_gain       IN DATE,
                              pn_total_semn_1  IN OUT NUMBER,
                              pn_total_semn_2  IN OUT NUMBER,
                              pn_grand_total   IN OUT NUMBER) IS
   
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.p_split_hh_carra';
   
      -- Curseur pour obtenir les heures à l'affectation ou à l'échelon (plus grand des 2)
      CURSOR CUR_id_asign_fourn(pn_asign_id NUMBER,
                                pd_dt_valdr DATE) IS
         WITH tab_excpt AS
          (SELECT vlv.attribute1 -- échelon
                 ,
                  vlv.attribute2 -- catégorie
                 ,
                  vlv.attribute3 -- Nb heures
             FROM fnd_lookup_values_vl vlv
            WHERE vlv.lookup_type = 'GIR_RH_CORPS_CATGR_EMPLO_EXCPT'
              AND vlv.enabled_flag = 'Y'
              AND pd_dt_valdr BETWEEN vlv.start_date_active AND NVL(vlv.end_date_active,
                                                                    HR_GENERAL.END_OF_TIME))
         SELECT CASE
                    WHEN (paf.grade_id, paf.employment_category) IN (SELECT te.attribute1 -- échelon
                                                                           ,
                                                                            te.attribute2 -- catégorie
                                                                       FROM tab_excpt te) THEN
                     (SELECT FND_NUMBER.CANONICAL_TO_NUMBER(te.attribute3) -- Nb heure
                        FROM tab_excpt te
                       WHERE te.attribute1 = paf.grade_id
                         AND te.attribute2 = paf.employment_category)
                    ELSE
                     GREATEST(paf.normal_hours, --Heures de travail
                              FND_NUMBER.CANONICAL_TO_NUMBER(pgr.attribute1)) --Heures à l'échelon
                END hh_sem
         -- Fin F.Aubin 2013-07-05 INC00018506
           FROM per_all_assignments_f paf
           LEFT JOIN per_grades pgr
             ON (paf.grade_id = pgr.grade_id)
          WHERE pn_asign_id = paf.assignment_id
            AND TRUNC(pd_dt_valdr) BETWEEN paf.effective_start_date AND paf.effective_end_date
            AND paf.primary_flag = 'Y'
            AND paf.assignment_type = 'E'
            AND paf.assignment_status_type_id <> 3
            AND paf.payroll_id IN (61,
                                   62);
   
      vln_hh_sem NUMBER;
   
   BEGIN
      p_log('10- Début Param -> pv_cd_gain=' || pv_cd_gain || ', ' || 'pn_assignment_id=' || pn_assignment_id || ', ' || 'pd_dt_gain=' || pd_dt_gain || ', ' ||
            'pn_total_semn_1=' || pn_total_semn_1 || ', ' || 'pn_total_semn_2=' || pn_total_semn_2 || ', ' || 'pn_grand_total=' || pn_grand_total,
            vlv_nm_procd_fonct);
   
      -- INC 20445
      -- Début SAGIR F.Aubin 2016-01-14 INC-98048
      IF pv_cd_gain = 'A011' THEN
         IF (NVL(pn_total_semn_1,
                 0) > 70 OR NVL(pn_total_semn_2,
                                 0) > 70) AND
            NVL(pn_grand_total,
                0) <= 80 THEN
            IF NVL(pn_total_semn_1,
                   0) > 70 AND
               NVL(pn_total_semn_2,
                   0) < 70 THEN
               pn_total_semn_1 := 70;
               pn_total_semn_2 := NVL(pn_grand_total,
                                      0) - NVL(pn_total_semn_1,
                                               0);
            ELSIF pn_total_semn_2 > 70 AND
                  NVL(pn_total_semn_1,
                      0) < 70 THEN
               pn_total_semn_2 := 70;
               pn_total_semn_1 := NVL(pn_grand_total,
                                      0) - NVL(pn_total_semn_2,
                                               0);
            END IF;
         END IF;
      ELSIF pv_cd_gain IN ('A012',
                           'A019',
                           'A023') THEN
         --aller chercher le nombre d'heure par semaine pour la personne
         OPEN CUR_id_asign_fourn(pn_assignment_id,
                                 pd_dt_gain);
         FETCH CUR_id_asign_fourn
            INTO vln_hh_sem;
         CLOSE CUR_id_asign_fourn;
         p_log('15- nb sem. affect =' || vln_hh_sem,
               vlv_nm_procd_fonct);
      
         IF vln_hh_sem IS NOT NULL THEN
            IF (NVL(pn_total_semn_1,
                    0) > vln_hh_sem OR NVL(pn_total_semn_2,
                                            0) > vln_hh_sem) AND
               NVL(pn_grand_total,
                   0) <= (vln_hh_sem * 2) THEN
               IF NVL(pn_total_semn_1,
                      0) > vln_hh_sem AND
                  NVL(pn_total_semn_2,
                      0) < vln_hh_sem THEN
                  pn_total_semn_1 := vln_hh_sem;
                  pn_total_semn_2 := NVL(pn_grand_total,
                                         0) - NVL(pn_total_semn_1,
                                                  0);
               ELSIF pn_total_semn_2 > vln_hh_sem AND
                     NVL(pn_total_semn_1,
                         0) < vln_hh_sem THEN
                  pn_total_semn_2 := vln_hh_sem;
                  pn_total_semn_1 := NVL(pn_grand_total,
                                         0) - NVL(pn_total_semn_2,
                                                  0);
               END IF;
            END IF;
         END IF;
      END IF;
      -- Fin SAGIR F.Aubin 2016-01-14 INC-98048
   
      -- Gestion du retour si null
      IF pn_total_semn_1 = 0 THEN
         pn_total_semn_1 := NULL;
      END IF;
      IF pn_total_semn_2 = 0 THEN
         pn_total_semn_2 := NULL;
      END IF;
      IF pn_grand_total = 0 THEN
         pn_grand_total := NULL;
      END IF;
   
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_log.
      ***********************************************************************************/
   EXCEPTION
      --
   
      WHEN OTHERS THEN
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80414',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(pd_dt_gain,
                                                                                           'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo ||
                                              ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                              TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_split_hh_carra',
                        pv_de_mesg_techn   => SUBSTR(SQLERRM,
                                                     1,
                                                     300));
         --
         RAISE vgexc_mesg_ereur;
         --
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         NULL;
   END p_split_hh_carra;

   --
   -- ============================================================================
   -- P_copie_table_tempr:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet d'exporter les données tables temporaires
   *       en table physiques pour permettre un meilleur débogage.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *
   * Paramètres de sortie :
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   *
   *************************************************************************/
   PROCEDURE p_copie_h620_pc_tx_tempr_physq(pn_request_id NUMBER,
                                            pd_dt_exect   DATE,
                                            prec          xxgir_rh_h620_pc_tx_tempr%ROWTYPE) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
   BEGIN
      INSERT INTO gir_rh_h620_pc_tx_tempr_physq
      VALUES
         (pn_request_id,
          pd_dt_exect,
          prec.id_afect,
          prec.id_type_elemn,
          prec.id_entre_elemn,
          prec.nm_elemn,
          prec.cd_elemn,
          prec.cd_sagip,
          prec.dt_debut,
          prec.dt_fin,
          prec.va_pc,
          prec.va_tx,
          prec.va_factr,
          prec.in_type_liste);
      COMMIT;
   END;

   PROCEDURE p_copie_gains_tempr_physq(pn_request_id NUMBER,
                                       pd_dt_exect   DATE,
                                       prec          xxgir_rh_gains_tempr%ROWTYPE) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
   BEGIN
      INSERT INTO gir_rh_gains_tempr_physq
      VALUES
         (pn_request_id,
          pd_dt_exect,
          prec.id_suivi_elemn,
          prec.id_afect,
          prec.id_gain,
          prec.dt_gain,
          prec.id_type_gain,
          prec.cd_gain_sagip,
          prec.id_va_entre,
          prec.va_entre,
          prec.dt_debut,
          prec.hh_debut,
          prec.dt_fin,
          prec.hh_fin,
          prec.nb_hh_convr,
          prec.perd_paie_debut,
          prec.perd_paie_fin,
          prec.aa_finnc,
          prec.md_compn,
          prec.nm_entre,
          prec.id_bloc_temps,
          prec.no_versn_objet,
          prec.cd_elemn,
          prec.id_corps_emplo);
      COMMIT;
   END;

   PROCEDURE p_copie_suplm_h620_tempr_physq(pn_request_id NUMBER,
                                            pd_dt_exect   DATE,
                                            prec          xxgir_rh_suplm_h620_tempr%ROWTYPE) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
   BEGIN
      INSERT INTO gir_rh_suplm_h620_tempr_physq
      VALUES
         (pn_request_id,
          pd_dt_exect,
          prec.id_afect,
          prec.id_type_elemn,
          prec.id_entre_elemn,
          prec.cd_sagip,
          prec.dt_gain,
          prec.nb_hh,
          prec.tx_horr);
      COMMIT;
   END;

   ----
   PROCEDURE p_copie_afect_tempr_physq(pn_request_id NUMBER,
                                       pd_dt_exect   DATE,
                                       prec          xxgir_rh_afect_tempr%ROWTYPE) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
   BEGIN
      INSERT INTO gir_rh_afect_tempr_physq
      VALUES
         (pn_request_id,
          pd_dt_exect,
          prec.id_afect,
          prec.id_emplo,
          prec.dt_debut,
          prec.dt_fin,
          prec.in_type_paie);
      COMMIT;
   END;

   ----
   PROCEDURE p_copie_elemn_h620_tempr_physq(pn_request_id NUMBER,
                                            pd_dt_exect   DATE,
                                            prec          xxgir_rh_elemn_h620_tempr%ROWTYPE) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
   BEGIN
      INSERT INTO gir_rh_elemn_h620_tempr_physq
      VALUES
         (pn_request_id,
          pd_dt_exect,
          prec.id_afect,
          prec.catgr_emplo,
          prec.id_type_elemn,
          prec.id_entre_elemn,
          prec.nm_elemn,
          prec.cd_elemn,
          prec.cd_sagip,
          prec.nm_va_entre_elemn,
          prec.va_entre_elemn,
          prec.dt_debut,
          prec.dt_fin,
          prec.nm_liste);
      COMMIT;
   END;

   ----
   PROCEDURE p_copie_table_tempr IS
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_copie_table_tempr';
      vld_dt_systm       DATE := SYSDATE;
   BEGIN
      p_log('10 - Début du traitement',
            vlv_nm_procd_fonct);
      ---------------------------------------------------------
      -- Insert physique de gir_rh_h620_pc_tx_tempr
      ---------------------------------------------------------
      FOR REC_CUR_1 IN (SELECT gct.id_afect,
                               gct.id_type_elemn,
                               gct.id_entre_elemn,
                               gct.nm_elemn,
                               gct.cd_elemn,
                               gct.cd_sagip,
                               gct.dt_debut,
                               gct.dt_fin,
                               gct.va_pc,
                               gct.va_tx,
                               gct.va_factr,
                               gct.in_type_liste
                          FROM xxgir_rh_h620_pc_tx_tempr gct) LOOP
         p_copie_h620_pc_tx_tempr_physq(fnd_global.conc_request_id,
                                        vld_dt_systm,
                                        REC_CUR_1);
      END LOOP;
      ---------------------------------------------------------
      -- Insert physique de gir_rh_gains_tempr_physq
      ---------------------------------------------------------
      FOR REC_CUR_2 IN (SELECT ggt.id_suivi_elemn,
                               ggt.id_afect,
                               ggt.id_gain,
                               ggt.dt_gain,
                               ggt.id_type_gain,
                               ggt.cd_gain_sagip,
                               ggt.id_va_entre,
                               ggt.va_entre,
                               ggt.dt_debut,
                               ggt.hh_debut,
                               ggt.dt_fin,
                               ggt.hh_fin,
                               ggt.nb_hh_convr,
                               ggt.perd_paie_debut,
                               ggt.perd_paie_fin,
                               ggt.aa_finnc,
                               ggt.md_compn,
                               ggt.nm_entre,
                               ggt.id_bloc_temps,
                               ggt.no_versn_objet,
                               ggt.cd_elemn,
                               ggt.id_corps_emplo
                          FROM xxgir_rh_gains_tempr ggt) LOOP
         p_copie_gains_tempr_physq(fnd_global.conc_request_id,
                                   vld_dt_systm,
                                   REC_CUR_2);
      END LOOP;
      ---------------------------------------------------------
      -- Insert physique de gir_rh_suplm_h620_tempr_physq
      ---------------------------------------------------------
      FOR REC_CUR_3 IN (SELECT gs.id_afect,
                               gs.id_type_elemn,
                               gs.id_entre_elemn,
                               gs.cd_sagip,
                               gs.dt_gain,
                               gs.nb_hh,
                               gs.tx_horr
                          FROM xxgir_rh_suplm_h620_tempr gs) LOOP
         p_copie_suplm_h620_tempr_physq(fnd_global.conc_request_id,
                                        vld_dt_systm,
                                        REC_CUR_3);
      END LOOP;
      ---------------------------------------------------------
      -- Insert physique de gir_rh_afect_tempr_physq
      ---------------------------------------------------------
      FOR REC_CUR_4 IN (SELECT gat.id_afect,
                               gat.id_emplo,
                               gat.dt_debut,
                               gat.dt_fin,
                               gat.in_type_paie
                          FROM xxgir_rh_afect_tempr gat) LOOP
         p_copie_afect_tempr_physq(fnd_global.conc_request_id,
                                   vld_dt_systm,
                                   REC_CUR_4);
      END LOOP;
      ---------------------------------------------------------
      -- Insert physique de gir_rh_elemn_h620_tempr_physq
      ---------------------------------------------------------
      FOR REC_CUR_5 IN (SELECT geht.id_afect,
                               geht.catgr_emplo,
                               geht.id_type_elemn,
                               geht.id_entre_elemn,
                               geht.nm_elemn,
                               geht.cd_elemn,
                               geht.cd_sagip,
                               geht.nm_va_entre_elemn,
                               geht.va_entre_elemn,
                               geht.dt_debut,
                               geht.dt_fin,
                               geht.nm_liste
                          FROM xxgir_rh_elemn_h620_tempr geht) LOOP
         p_copie_elemn_h620_tempr_physq(fnd_global.conc_request_id,
                                        vld_dt_systm,
                                        REC_CUR_5);
      END LOOP;
      p_log('20 - Fin du traitement',
            vlv_nm_procd_fonct);
   END p_copie_table_tempr;

   PROCEDURE p_output_table_tempr IS
   BEGIN
      /*fnd_file.put_line(fnd_file.log,'------------============xxgir_rh_elemn_h620_tempr============-------------');
      fnd_file.put_line(fnd_file.log,RPAD('ID_AFECT',15,' ')||RPAD('CATGR_EMPLO',30,' ')||RPAD('ID_TYPE_ELEMN',15,' ')||
                                     RPAD('ID_ENTRE_ELEMN',15,' ')||RPAD('NM_ELEMN',80,' ')||RPAD('CD_ELEMN',150,' ')||
                                     RPAD('CD_SAGIP',150,' ')||RPAD('NM_VA_ENTRE_ELEMN',80,' ')||RPAD('VA_ENTRE_ELEMN',60,' ')||
                                     RPAD('DT_DEBUT',11,' ')||RPAD('DT_FIN',11,' ')||RPAD('NM_LISTE',20,' '));
      fnd_file.put_line(fnd_file.log,RPAD('-',637,'-'));
      FOR REC_a IN (SELECT * FROM xxgir_rh_elemn_h620_tempr) LOOP
         fnd_file.put_line(fnd_file.log,RPAD(TO_CHAR(REC_a.ID_AFECT),15,' ')||RPAD(REC_a.CATGR_EMPLO,30,' ')||RPAD(TO_CHAR(REC_a.ID_TYPE_ELEMN),15,' ')||
                                        RPAD(TO_CHAR(REC_a.ID_ENTRE_ELEMN),15,' ')||RPAD(REC_a.NM_ELEMN,80,' ')||RPAD(REC_a.CD_ELEMN,150,' ')||
                                        RPAD(REC_a.CD_SAGIP,150,' ')||RPAD(REC_a.NM_VA_ENTRE_ELEMN,80,' ')||RPAD(REC_a.VA_ENTRE_ELEMN,60,' ')||
                                        RPAD(TO_CHAR(REC_a.DT_DEBUT,'YYYY-MM-DD'),11,' ')||RPAD(TO_CHAR(REC_a.DT_FIN,'YYYY-MM-DD'),11,' ')||RPAD(REC_a.NM_LISTE,20,' '));
      END LOOP;
      
      fnd_file.put_line(fnd_file.log,'------------============xxgir_rh_afect_tempr============-------------');
      fnd_file.put_line(fnd_file.log,RPAD('ID_AFECT',15,' ')||RPAD('ID_EMPLO',15,' ')||RPAD('DT_DEBUT',11,' ')||
                                     RPAD('DT_FIN',11,' ')||RPAD('IN_TYPE_PAIE',12,' '));
      fnd_file.put_line(fnd_file.log,RPAD('-',64,'-'));
      FOR REC_b IN (SELECT * FROM xxgir_rh_afect_tempr) LOOP
         fnd_file.put_line(fnd_file.log,RPAD(TO_CHAR(REC_b.ID_AFECT),15,' ')||RPAD(TO_CHAR(REC_b.ID_EMPLO),15,' ')||RPAD(TO_CHAR(REC_b.DT_DEBUT,'YYYY-MM-DD'),11,' ')||
                                        RPAD(TO_CHAR(REC_b.DT_FIN,'YYYY-MM-DD'),11,' ')||RPAD(TO_CHAR(REC_b.IN_TYPE_PAIE),12,' '));
      END LOOP;
      
      fnd_file.put_line(fnd_file.log,'------------============xxgir_rh_suplm_h620_tempr============-------------');
      fnd_file.put_line(fnd_file.log,RPAD('ID_AFECT',15,' ')||RPAD('ID_TYPE_ELEMN',15,' ')||RPAD('ID_ENTRE_ELEMN',15,' ')||
                                     RPAD('CD_SAGIP',150,' ')||RPAD('DT_GAIN',11,' ')||RPAD('NB_HH',8,' ')||
                                     RPAD('TX_HORR',8,' '));
      fnd_file.put_line(fnd_file.log,RPAD('-',222,'-'));
      FOR REC_c IN (SELECT * FROM xxgir_rh_suplm_h620_tempr) LOOP
         fnd_file.put_line(fnd_file.log,RPAD(TO_CHAR(REC_c.ID_AFECT),15,' ')||RPAD(TO_CHAR(REC_c.ID_TYPE_ELEMN),15,' ')||RPAD(TO_CHAR(REC_c.ID_ENTRE_ELEMN),15,' ')||
                                        RPAD(REC_c.CD_SAGIP,150,' ')||RPAD(TO_CHAR(REC_c.DT_GAIN,'YYYY-MM-DD'),11,' ')||RPAD(TO_CHAR(REC_c.NB_HH),8,' ')||
                                        RPAD(TO_CHAR(REC_c.TX_HORR),8,' '));
      END LOOP;*/
      /*fnd_file.put_line(fnd_file.log,'------------============xxgir_rh_gains_tempr============-------------');
      fnd_file.put_line(fnd_file.log,RPAD('ID_SUIVI_ELEMN',15,' ')||RPAD('ID_AFECT',15,' ')||RPAD('ID_GAIN',15,' ')||
                                     RPAD('DT_GAIN',11,' ')||RPAD('ID_TYPE_GAIN',15,' ')||RPAD('CD_GAIN_SAGIP',13,' ')||
                                     RPAD('ID_VA_ENTRE',15,' ')||RPAD('VA_ENTRE',30,' ')||RPAD('DT_DEBUT',11,' ')||
                                     RPAD('HH_DEBUT',8,' ')||RPAD('DT_FIN',11,' ')||RPAD('HH_FIN',6,' ')||
                                     RPAD('NB_HH_CONVR',11,' ')||RPAD('PERD_PAIE_DEBUT',15,' ')||RPAD('PERD_PAIE_FIN',15,' ')||
                                     RPAD('AA_FINNC',8,' ')||RPAD('MD_COMPN',8,' ')||RPAD('NM_ENTRE',80,' ')||
                                     RPAD('ID_BLOC_TEMPS',13,' ')||RPAD('NO_VERSN_OBJET',14,' ')||RPAD('CD_ELEMN',150,' ')||
                                     RPAD('ID_CORPS_EMPLO',15,' '));
      fnd_file.put_line(fnd_file.log,RPAD('-',509,'-'));
      FOR REC_d IN (SELECT * FROM xxgir_rh_gains_tempr) LOOP
         fnd_file.put_line(fnd_file.log,RPAD(TO_CHAR(REC_d.ID_SUIVI_ELEMN),15,' ')||RPAD(TO_CHAR(REC_d.ID_AFECT),15,' ')||RPAD(TO_CHAR(REC_d.ID_GAIN),15,' ')||
                                        RPAD(TO_CHAR(REC_d.DT_GAIN,'YYYY-MM-DD'),11,' ')||RPAD(TO_CHAR(REC_d.ID_TYPE_GAIN),15,' ')||RPAD(REC_d.CD_GAIN_SAGIP,13,' ')||
                                        RPAD(TO_CHAR(REC_d.ID_VA_ENTRE),15,' ')||RPAD(REC_d.VA_ENTRE,30,' ')||RPAD(TO_CHAR(REC_d.DT_DEBUT,'YYYY-MM-DD'),11,' ')||
                                        RPAD(REC_d.HH_DEBUT,8,' ')||RPAD(TO_CHAR(REC_d.DT_FIN,'YYYY-MM-DD'),11,' ')||RPAD(REC_d.HH_FIN,6,' ')||
                                        RPAD(TO_CHAR(REC_d.NB_HH_CONVR),11,' ')||RPAD(TO_CHAR(REC_d.PERD_PAIE_DEBUT,'YYYY-MM-DD'),15,' ')||RPAD(TO_CHAR(REC_d.PERD_PAIE_FIN,'YYYY-MM-DD'),15,' ')||
                                        RPAD(REC_d.AA_FINNC,8,' ')||RPAD(REC_d.MD_COMPN,8,' ')||RPAD(REC_d.NM_ENTRE,80,' ')||
                                        RPAD(TO_CHAR(REC_d.ID_BLOC_TEMPS),13,' ')||RPAD(TO_CHAR(REC_d.NO_VERSN_OBJET),14,' ')||RPAD(REC_d.CD_ELEMN,150,' ')||
                                        RPAD(TO_CHAR(REC_d.ID_CORPS_EMPLO),15,' '));
      END LOOP;*/
      /*fnd_file.put_line(fnd_file.log,'------------============xxgir_rh_h620_pc_tx_tempr============-------------');
         fnd_file.put_line(fnd_file.log,RPAD('ID_AFECT',15,' ')||RPAD('ID_TYPE_ELEMN',15,' ')||RPAD('ID_ENTRE_ELEMN',15,' ')||
                                        RPAD('NM_ELEMN',80,' ')||RPAD('CD_ELEMN',150,' ')||RPAD('CD_SAGIP',150,' ')||
                                        RPAD('DT_DEBUT',11,' ')||RPAD('DT_FIN',11,' ')||RPAD('VA_PC',9,' ')||
                                        RPAD('VA_TX',9,' ')||RPAD('VA_FACTR',9,' ')||RPAD('IN_TYPE_LISTE',13,' '));
         fnd_file.put_line(fnd_file.log,RPAD('-',487,'-'));
         FOR REC_e IN (SELECT * FROM xxgir_rh_h620_pc_tx_tempr) LOOP
            fnd_file.put_line(fnd_file.log,RPAD(TO_CHAR(REC_e.ID_AFECT),15,' ')||RPAD(TO_CHAR(REC_e.ID_TYPE_ELEMN),15,' ')||RPAD(TO_CHAR(REC_e.ID_ENTRE_ELEMN),15,' ')||
                                           RPAD(REC_e.NM_ELEMN,80,' ')||RPAD(REC_e.CD_ELEMN,150,' ')||RPAD(REC_e.CD_SAGIP,150,' ')||
                                           RPAD('DT_DEBUT',11,' ')||RPAD('DT_FIN',11,' ')||RPAD(TO_CHAR(REC_e.VA_PC),9,' ')||
                                           RPAD(TO_CHAR(REC_e.VA_TX),9,' ')||RPAD(TO_CHAR(REC_e.VA_FACTR),9,' ')||RPAD(REC_e.IN_TYPE_LISTE,13,' '));
         END LOOP;
      */
      NULL;
   END p_output_table_tempr;

   --
   /*******************************************************************************
   *                                  FONCTIONS
   ******************************************************************************/
   --
   -- ============================================================================
   -- Fv_init_mesg:
   -- ============================================================================
   /*******************************************************************************
   * But:
   *     Cette fonction retourne la description du message
   *
   ********************************************************************************
   * Entrée:   pv_id_mesg     - Le numéro du message.
   *           pb_jeton       - Indicateur pour une substitution dans le message.
   *           pv_nm_jeton    - Nom du jeton a modifié.
   *           pv_mesg        - Message à substituer.
   *
   * Sortie:   VARCHAR2       - Le message d'erreur.
   *
   * Modifications:
   * Par                            Date         Description
   * ----------------------------   ----------   ---------------------------------
   * Michel Dessureault             2012-09-12   Adaptation pour 28045
   *
   *******************************************************************************/
   FUNCTION fv_init_mesg(pv_id_mesg  IN VARCHAR2,
                         pb_jeton    IN BOOLEAN DEFAULT FALSE,
                         pv_nm_jeton IN VARCHAR2 DEFAULT NULL,
                         pv_mesg     IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.Fv_init_mesg';
      vlv_de_ereur       VARCHAR2(300); -- Message d'erreur SQLERRM
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour séparer les valeurs qui sont envoyées
      -- comme chaîne de caractères.
      ----------------------------------------------------------------------
      CURSOR CUR_parmt IS
         SELECT REGEXP_REPLACE(REGEXP_SUBSTR(pv_nm_jeton || ',',
                                             '(.*?),',
                                             1,
                                             LEVEL),
                               ',',
                               '') jeton,
                REGEXP_REPLACE(REGEXP_SUBSTR(pv_mesg || ',',
                                             '(.*?),',
                                             1,
                                             LEVEL),
                               ',',
                               '') valeur
           FROM dual
         CONNECT BY REGEXP_INSTR(pv_nm_jeton || ',',
                                 '(.*?),',
                                 1,
                                 LEVEL) > 0;
      --
   BEGIN
      p_log('10 - Début fonction. pv_id_mesg -> ' || pv_id_mesg || ', pb_jeton -> ' || (CASE pb_jeton WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END) ||
            ', pv_nm_jeton -> ' || pv_nm_jeton || ', pv_mesg -> ' || pv_mesg,
            vlv_nm_procd_fonct);
      --
      FND_MESSAGE.SET_NAME('XXGIR',
                           pv_id_mesg);
      --
      -- Si le message utilise des paramètres,
      -- le paramètre pb_jeton est vrai et la valeur est assignée au token.
      IF pb_jeton THEN
         FOR REC_CUR_parmt IN CUR_parmt LOOP
            -- Assignation de paramètres
            FND_MESSAGE.SET_TOKEN(REC_CUR_parmt.jeton,
                                  REC_CUR_parmt.valeur);
         END LOOP;
      END IF;
      --
      -- Retourne le message d'erreur
      --
      vlv_de_ereur := SUBSTR(FND_MESSAGE.GET,
                             1,
                             300);
      --
      p_log('20 - Fin fonction. Retour = ' || vlv_de_ereur,
            vlv_nm_procd_fonct);
      --
      RETURN vlv_de_ereur;
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de Fv_init_mesg
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur fonction : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || '. Retour = NULL',
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la fonction Fv_init_mesg du programme Transfert des heures et unités vers SAGIP ( 28045 ).');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80446',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vgv_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'fv_init_mesg',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RETURN NULL;
         --
   END fv_init_mesg;

   --
   -- ============================================================================
   -- Fn_obten_tx_horr:
   -- ============================================================================
   /*******************************************************************************
   * But:
   *     Cette fonction retourne le taux horaire en vigueur pour la date effective.
   *
   ********************************************************************************
   *
   * Entrée:   pn_id_afect    - L'identifiant de l'affectation de l'employé.
   *           pd_dt_efect    - Date effective de l'affectation pour laquelle le taux
   *                            est en vigueur.
   *           pv_in_tx_majrt - Indique si on applique le taux de majoration
   *
   * Sortie:   NUMBER         - Le taux horaire en vigueur.
   *
   * Modifications:
   * Par                 Date        Description
   * ------------------  ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   * Michel Dessureault  2013-04-03  Retouche 163 (INC00017912)  Ajouter la majoration dans le calcul
   *******************************************************************************/
   FUNCTION fn_obten_tx_horr(pn_id_afect    IN NUMBER,
                             pd_dt_efect    IN DATE,
                             pv_in_tx_majrt IN VARCHAR2 DEFAULT 'N') RETURN NUMBER IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.Fn_obten_tx_horr';
      vln_tx_horr        NUMBER;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      --
   BEGIN
      --
      p_log('10 - Début fonction. Affectation -> ' || pn_id_afect,
            vlv_nm_procd_fonct);
      --
      p_log('15 - Appel de la fonction xxgir_rh_23000_convr_du.Fn_obten_tx_horr.',
            vlv_nm_procd_fonct);
      --
      vln_tx_horr := xxgir_rh_23000_convr_du.fn_obten_tx_horr(pn_id_afect    => pn_id_afect,
                                                              pd_dt_efect    => pd_dt_efect,
                                                              pv_in_tx_majrt => pv_in_tx_majrt);
      --
      p_log('20 - Fin fonction. Taux horaire -> ' || vln_tx_horr,
            vlv_nm_procd_fonct);
      --
      RETURN vln_tx_horr;
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de Fn_obten_tx_horr
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur fonction. Affectation: ' || pn_id_afect || ' - Date: ' || fnd_date.date_to_displaydate(pd_dt_efect) || ' - ' ||
               DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la fonction Fn_obten_tx_horr pour l''affectation ' || pn_id_afect || ' et la date ' ||
                           fnd_date.date_to_displaydate(pd_dt_efect));
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80415',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';ID_AFECT:' ||
                                              pn_id_afect || ';DT_GAIN:' || TO_CHAR(pd_dt_efect,
                                                                                    'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                              vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                              TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'fn_obten_tx_horr',
                        pv_de_mesg_techn   => SUBSTR(SQLERRM,
                                                     1,
                                                     300));
         --
         RAISE vgexc_mesg_ereur;
         --
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
      --
      --
   END fn_obten_tx_horr;

   --
   -- ============================================================================
   -- Fv_obten_va_entre_elemn:
   -- ============================================================================
   /*******************************************************************************
   * But: Obtenir la valeur de l'entrée d'élément.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pn_id_afect          : Identifiant de l'affectation
   *       - pn_id_entre_elemn    : Identifiant de l'élément
   *       - pd_dt_efect          : Date effective de l'entrée d'élément
   *       - pv_nm_va_entre_elemn : Nom de la valeur d'entrée d'élément
   *
   * Sortie: VARCHAR2       - La valeur .
   *
   * Modifications:
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   *******************************************************************************/
   FUNCTION fv_obten_va_entre_elemn(pn_id_afect          IN NUMBER,
                                    pn_id_entre_elemn    IN NUMBER,
                                    pd_dt_efect          IN DATE,
                                    pv_nm_va_entre_elemn IN VARCHAR2) RETURN VARCHAR2 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.Fv_obten_va_entre_elemn';
      vlv_va_entre_elemn pay_element_entry_values_f.screen_entry_value%TYPE;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ---------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir la valeur de
      -- l'entrée d'élément
      ---------------------------------------------------------------
      CURSOR CUR_va_entre_elemn IS
         SELECT DECODE(rea.va_entre_elemn,
                       NULL,
                       DECODE(rea.in_va_entre_deft,
                              'Y',
                              rea.va_entre_deft),
                       rea.va_entre_elemn) va_entre_elemn
           FROM xxgir_rh_elemn_afect_v rea
          WHERE rea.id_afect = pn_id_afect
            AND rea.id_entre_elemn = pn_id_entre_elemn
            AND rea.nm_va_entre_elemn = pv_nm_va_entre_elemn
               -- Valide pour la date effective
            AND TRUNC(pd_dt_efect) BETWEEN rea.pee_dt_debut_efect AND rea.pee_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.peev_dt_debut_efect AND rea.peev_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.piv_dt_debut_efect AND rea.piv_dt_fin_efect;
      --
   BEGIN
      --
      p_log('10 - Début ',
            vlv_nm_procd_fonct);
      p_log('15   --> pn_id_afect=' || pn_id_afect || ' --> pn_id_entre_elemn=' || pn_id_entre_elemn || ' --> pd_dt_efect=' || pd_dt_efect ||
            ' --> pv_nm_va_entre_elemn=' || pv_nm_va_entre_elemn,
            vlv_nm_procd_fonct);
      --
      OPEN CUR_va_entre_elemn;
      --
      FETCH CUR_va_entre_elemn
         INTO vlv_va_entre_elemn;
      --
      CLOSE CUR_va_entre_elemn;
      --
      p_log('20 - Valeur: ' || vlv_va_entre_elemn,
            vlv_nm_procd_fonct);
      --
      RETURN vlv_va_entre_elemn;
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de Fv_obten_va_entre_elemn
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs ouverts
         IF CUR_va_entre_elemn%ISOPEN THEN
            CLOSE CUR_va_entre_elemn;
         END IF;
         --
         p_log('30 - Erreur :' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la fonction Fv_obten_va_entre_elemn pour l''affectation ' || pn_id_afect || ' et la date ' ||
                           fnd_date.date_to_displaydate(pd_dt_efect));
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80447',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              pn_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(pd_dt_efect,
                                                                                          'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo ||
                                              ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                              TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'fv_obten_va_entre_elemn',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RETURN NULL;
         --
   END fv_obten_va_entre_elemn;

   --
   -- ============================================================================
   -- Fv_convr_nb_decml_carct:
   -- ============================================================================
   /*******************************************************************************
   * But: Convertir un nombre décimal en caractère pour avoir les 2 positions
   *      après le point décimal.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pn_nb          : Nombre en NUMBER à convertir en caractère
   *
   * Sortie: VARCHAR2       - La valeur convertie.
   *
   * Modifications:
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-14  Création
   *
   *******************************************************************************/
   FUNCTION fv_convr_nb_decml_carct(pn_nb IN NUMBER) RETURN VARCHAR2 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.Fv_convr_nb_decml_carct';
      vlv_nb_convr       VARCHAR2(10);
      --
   BEGIN
      --
      p_log('10 - Début',
            vlv_nm_procd_fonct);
      --
      IF pn_nb IS NOT NULL THEN
         --
         vlv_nb_convr := TO_CHAR(ROUND((pn_nb * 100),
                                       0));
         --
      END IF;
      --
      p_log('20 - Valeur: ' || vlv_nb_convr,
            vlv_nm_procd_fonct);
      --
      RETURN vlv_nb_convr;
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de Fv_convr_nb_decml_carct
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur :' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la fonction Fv_convr_nb_decml_carct pour le nombre ' || pn_nb);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80445',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vgv_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'fv_convr_nb_decml_carct',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RETURN NULL;
         --
   END fv_convr_nb_decml_carct;

   --
   -- ============================================================================
   -- Fv_convr_nb_decml_carct:
   -- ============================================================================
   /*******************************************************************************
   * But: Convertir un nombre décimal en caractère pour avoir les 2 positions
   *      après le point décimal.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pv_nb          : Nombre en VARCHAR2 à convertir en caractère
   *
   * Sortie: VARCHAR2       - La valeur convertie.
   *
   * Modifications:
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-15  Création
   *
   *******************************************************************************/
   FUNCTION fv_convr_nb_decml_carct(pv_nb IN VARCHAR2) RETURN VARCHAR2 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.Fv_convr_nb_decml_carct';
      vlv_nb_convr       VARCHAR2(10);
      --
   BEGIN
      --
      p_log('10 - Début',
            vlv_nm_procd_fonct);
      --
      IF pv_nb IS NOT NULL THEN
         --
         vlv_nb_convr := TO_CHAR(ROUND((FND_NUMBER.CANONICAL_TO_NUMBER(pv_nb) * 100),
                                       0));
         --
      END IF;
      --
      p_log('20 - Valeur: ' || vlv_nb_convr,
            vlv_nm_procd_fonct);
      --
      RETURN vlv_nb_convr;
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de Fv_convr_nb_decml_carct
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur :' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la fonction Fv_convr_nb_decml_carct pour le nombre ' || pv_nb);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80448',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vgv_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'fv_convr_nb_decml_carct',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RETURN NULL;
         --
   END fv_convr_nb_decml_carct;

   --
   -- ============================================================================
   -- Fv_inscr_hh_mint_centm:
   -- ============================================================================
   /*******************************************************************************
   * But: Inscrire les heures en « Heure et minute » ou en « Heure centième »
   *      dans le formulaire selon l'appartenance du gain à la liste de codes de gain
   *      SAGIP utilisés par 28045 qui doivent avoir les décimales en centième.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pn_nb_hh          : Nombre d'heure à inscrire
   *       - pv_cd_gain        : Code du gain en traitement
   *       - pd_dt_gain        : Date du gain
   *
   * Sortie: VARCHAR2       - La valeur à inscrire dans le formulaire.
   *
   * Modifications:
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2013-01-30  Création      Retouche 123 (INC00016964) Selon le code SAGIP, on doit inscrire les heures en « Heure et minute » ou en « Heure centième » dans le formulaire H620
   *******************************************************************************/
   FUNCTION fv_inscr_hh_mint_centm(pn_nb_hh         IN NUMBER,
                                   pv_cd_gain       IN VARCHAR2,
                                   pd_dt_gain       IN DATE,
                                   pv_formt_hh      IN VARCHAR2 DEFAULT 'HHHMM',
                                   pn_assignment_id IN NUMBER) RETURN VARCHAR2 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.Fv_inscr_hh_mint_centm';
      vlv_nb_convr       VARCHAR2(6);
      vlv_exist          VARCHAR2(1);
      vln_nb_hh          NUMBER := ABS(pn_nb_hh);
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      --------------------------------------------------------------------------
      -- Déclaration du curseur permettant de déterminer si le gain appartient à la liste
      --------------------------------------------------------------------------
      CURSOR CUR_exist_gain IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = cv_nm_table_consl_gain_decml
            AND flv.lookup_code = pv_cd_gain
            AND pd_dt_gain BETWEEN flv.start_date_active AND NVL(flv.end_date_active,
                                                                 pd_dt_gain);
      --
   BEGIN
      --
      p_log('10 - Début',
            vlv_nm_procd_fonct);
      --
      -- Si aucune décimale, pas besoin de convertir.
      --
      vgv_id_afect := pn_assignment_id;
      IF TRUNC(vln_nb_hh) = vln_nb_hh THEN
         --
         vlv_nb_convr := fv_convr_nb_decml_carct(pn_nb_hh);
         --
      ELSE
         --
         OPEN CUR_exist_gain;
         FETCH CUR_exist_gain
            INTO vlv_exist;
         CLOSE CUR_exist_gain;
         --
         -- Si le gain ne fait pas partie de la liste alors on met en format HHHMM
         --
         IF NVL(vlv_exist,
                '!') = 'X' THEN
            --
            vlv_nb_convr := fv_convr_nb_decml_carct(pn_nb_hh);
            --
         ELSE
            --
            p_log('20 - Appel de la fonction xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint.',
                  vlv_nm_procd_fonct);
            p_log('21 - PARAMETRE de la fonction xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint.',
                  vlv_nm_procd_fonct);
            p_log('   pn_assignment_id: ' || pn_assignment_id,
                  vlv_nm_procd_fonct);
            p_log('   pd_dt_gain: ' || TO_CHAR(pd_dt_gain,
                                               'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('   pv_formt_hh: ' || pv_formt_hh,
                  vlv_nm_procd_fonct);
            p_log('   vln_nb_hh: ' || vln_nb_hh,
                  vlv_nm_procd_fonct);
            --
            /*vlv_nb_convr := xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
            pn_temps_reel => vln_nb_hh,
            pv_formt      => pv_formt_hh);*/
            vlv_nb_convr := xxgir_rh_23000_convr_du.fv_selct_hh_sagir_unite_sagip(pn_id_afect => pn_assignment_id,
                                                                                  --INC74599
                                                                                  pd_dt_prodc    => pd_dt_gain,
                                                                                  pv_formt_unite => pv_formt_hh,
                                                                                  pn_hh_sagir    => vln_nb_hh);
            --
         END IF;
         --
      END IF;
      --
      p_log('30 - Valeur: ' || vlv_nb_convr,
            vlv_nm_procd_fonct);
      --
      RETURN LPAD(vlv_nb_convr,
                  LENGTH(pv_formt_hh),
                  '0');
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de Fv_inscr_hh_mint_centm
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('40 - Erreur :' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la fonction Fv_inscr_hh_mint_centm' || ' pour le nombre ' || pn_nb_hh || ' et le gain ' || pv_cd_gain);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         RETURN NULL;
         --
   END fv_inscr_hh_mint_centm;

   --
   -- ============================================================================
   -- Fn_valdr_utils_compn:
   -- ============================================================================
   /*******************************************************************************
   * But: Valider si on peut utiliser la compensation dans la majoration
   *      du taux horaire selon le code de gain sagip utilisé.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pn_id_afect       : Identifiant de l'affectation
   *       - pv_cd_sagip       : Code du gain sagip en traitement
   *       - pd_dt_gain        : Date du gain
   *
   * Sortie: NUMBER       - Valeur de majoration à multiplier au taux horaire.
   *
   * Modifications:
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2013-05-09  Création      Retouche 202 (INC00018296) Selon le code SAGIP, on compense ou non.
   *******************************************************************************/
   FUNCTION fn_valdr_utils_compn(pn_id_afect IN NUMBER,
                                 pv_cd_gain  IN VARCHAR2,
                                 pd_dt_gain  IN DATE) RETURN NUMBER IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.Fb_valdr_utils_compn';
      vlv_exist          VARCHAR2(1); -- Pour valider l'existence
      vlb_utils_compn    BOOLEAN;
      vln_pc_compn       NUMBER := 1; -- Valeur de la majoration du taux horaire
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      --------------------------------------------------------------------------
      -- Déclaration du curseur permettant de déterminer si on utilise le facteur
      --------------------------------------------------------------------------
      CURSOR CUR_exist_gain(pv_type_consl    VARCHAR2,
                            pv_cd_consl      VARCHAR2,
                            pd_dt_gain_activ DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_type_consl
            AND flv.lookup_code = pv_cd_consl
            AND TRUNC(pd_dt_gain_activ) BETWEEN flv.start_date_active AND
                NVL(flv.end_date_active,
                    pd_dt_gain_activ);
      --
      ---------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir le taux de
      -- majoration pour l'affectation.
      ---------------------------------------------------------------
      CURSOR CUR_pc_compn(pn_id_afect_cur NUMBER,
                          pd_dt_efect     DATE) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(DECODE(rea.va_entre_elemn,
                                                      NULL,
                                                      DECODE(rea.in_va_entre_deft,
                                                             'Y',
                                                             NVL(pliv.default_value,
                                                                 rea.va_entre_deft)),
                                                      rea.va_entre_elemn)) compn_avant_socl
           FROM xxgir_rh_elemn_afect_v  rea,
                pay_link_input_values_f pliv
          WHERE rea.id_afect = pn_id_afect_cur
            AND rea.cd_elemn = 'COMPN_AVANT_SOCL'
            AND rea.nm_va_entre_elemn = 'Pourcentage'
            AND pliv.input_value_id = rea.id_va_entre_elemn
            AND pliv.element_link_id = rea.id_lien_elemn
            AND TRUNC(pd_dt_efect) BETWEEN rea.pee_dt_debut_efect AND rea.pee_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pel_dt_debut_efect AND rea.pel_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pet_dt_debut_efect AND rea.pet_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.piv_dt_debut_efect AND rea.piv_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.peev_dt_debut_efect AND rea.peev_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN pliv.effective_start_date AND pliv.effective_end_date;
      --
   BEGIN
      --
      p_log('10 - Début fonction.',
            vlv_nm_procd_fonct);
      --
      OPEN CUR_exist_gain(cv_nm_table_consl_gain_compn,
                          pv_cd_gain,
                          pd_dt_gain);
      --
      FETCH CUR_exist_gain
         INTO vlv_exist;
      --
      vlb_utils_compn := CUR_exist_gain%FOUND;
      --
      CLOSE CUR_exist_gain;
      --
      -- Si VRAI, on compense donc on trouve le montant de majoration à retourner.
      --
      IF vlb_utils_compn THEN
         --
         OPEN CUR_pc_compn(pn_id_afect,
                           pd_dt_gain);
         --
         FETCH CUR_pc_compn
            INTO vln_pc_compn;
         --
         IF CUR_pc_compn%NOTFOUND THEN
            CLOSE CUR_pc_compn;
            --
            vln_pc_compn := 1;
            --
         ELSE
            CLOSE CUR_pc_compn;
            --
            IF vln_pc_compn IS NOT NULL THEN
               --
               -- Transformer en multiplicande (ex. 6.5 -> 1.065)
               --
               vln_pc_compn := 1 + (vln_pc_compn / 100);
               --
            END IF;
            --
         END IF;
         --
      END IF;
      --
      p_log('20 - Fin fonction. Majoration -> ' || vln_pc_compn,
            vlv_nm_procd_fonct);
      --
      RETURN vln_pc_compn;
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de Fb_valdr_utils_compn
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_exist_gain%ISOPEN THEN
            CLOSE CUR_exist_gain;
         END IF;
         --
         IF CUR_pc_compn%ISOPEN THEN
            CLOSE CUR_pc_compn;
         END IF;
         --
         p_log('30 - Erreur :' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la fonction ' || vlv_nm_procd_fonct || ' pour le code sagip ' || pv_cd_gain);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80442',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';ID_AFECT:' ||
                                              pn_id_afect || ';DT_GAIN:' || TO_CHAR(pd_dt_gain,
                                                                                    'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                              vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                              TO_CHAR(NVL(vgrec_perd_paie_varbl.dt_debut,
                                                          vgrec_perd_paie.dt_debut),
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'fn_valdr_utils_compn',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         -- Ne pas majorer le taux horaire
         --
         RETURN 1;
         --
   END fn_valdr_utils_compn;

   --
   /*******************************************************************************
   *                                  PROCÉDURES
   ******************************************************************************/
   --
   -- ============================================================================
   -- P_initl_cp:
   -- ============================================================================
   /*******************************************************************************
   * But: Initialiser les compteurs.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - N/D
   *
   *   Paramètres de sortie :
   *       - N/D
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *
   **************************************************************************/
   PROCEDURE p_initl_cp IS
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_initl_cp';
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgrec_cp_fdt.nb_lu    := 0;
      vgrec_cp_fdt.nb_inser := 0;
      vgrec_cp_fdt.nb_rejt  := 0;
      --
      vgrec_cp_h760.nb_lu    := 0;
      vgrec_cp_h760.nb_inser := 0;
      vgrec_cp_h760.nb_rejt  := 0;
      --
      vgrec_cp_h010.nb_lu    := 0;
      vgrec_cp_h010.nb_inser := 0;
      vgrec_cp_h010.nb_rejt  := 0;
      --
      vgrec_cp_h620.nb_lu    := 0;
      vgrec_cp_h620.nb_inser := 0;
      vgrec_cp_h620.nb_rejt  := 0;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de P_initl_cp
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_initl_cp est en erreur');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80443',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect ||
                                              ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(NVL(vgrec_perd_paie_varbl.dt_debut,
                                                                                    vgrec_perd_paie.dt_debut),
                                                                                'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_initl_cp',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
   END p_initl_cp;
   --
   /*******************************************************************************
   *                                  PROCÉDURES
   ******************************************************************************/
   --
   -- ============================================================================
   -- P_initl_cp_copie:
   -- ============================================================================
   /*******************************************************************************
   * But: Initialiser les compteurs.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - N/D
   *
   *   Paramètres de sortie :
   *       - N/D
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Frédéric Aubin       2016-08-16  INC00106425
   *
   **************************************************************************/
   PROCEDURE p_initl_cp_copie IS
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_initl_cp_copie';
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgrec_cp_fdt_copie.nb_lu    := vgrec_cp_fdt.nb_lu;
      vgrec_cp_fdt_copie.nb_inser := vgrec_cp_fdt.nb_inser;
      vgrec_cp_fdt_copie.nb_rejt  := vgrec_cp_fdt.nb_rejt;
      --                              --
      vgrec_cp_h760_copie.nb_lu    := vgrec_cp_h760.nb_lu;
      vgrec_cp_h760_copie.nb_inser := vgrec_cp_h760.nb_inser;
      vgrec_cp_h760_copie.nb_rejt  := vgrec_cp_h760.nb_rejt;
      --                              --
      vgrec_cp_h010_copie.nb_lu    := vgrec_cp_h010.nb_lu;
      vgrec_cp_h010_copie.nb_inser := vgrec_cp_h010.nb_inser;
      vgrec_cp_h010_copie.nb_rejt  := vgrec_cp_h010.nb_rejt;
      --                              --
      vgrec_cp_h620_copie.nb_lu    := vgrec_cp_h620.nb_lu;
      vgrec_cp_h620_copie.nb_inser := vgrec_cp_h620.nb_inser;
      vgrec_cp_h620_copie.nb_rejt  := vgrec_cp_h620.nb_rejt;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de P_initl_cp
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
   END p_initl_cp_copie;
   --
   -- ============================================================================
   -- P_retr_cp_copie:
   -- ============================================================================
   /*******************************************************************************
   * But: Initialiser les compteurs.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - N/D
   *
   *   Paramètres de sortie :
   *       - N/D
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Frédéric Aubin       2016-08-16  INC00106425
   *
   **************************************************************************/
   PROCEDURE p_retr_cp_copie IS
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_retr_cp_copie';
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgrec_cp_fdt.nb_lu    := vgrec_cp_fdt_copie.nb_lu;
      vgrec_cp_fdt.nb_inser := vgrec_cp_fdt_copie.nb_inser;
      vgrec_cp_fdt.nb_rejt  := vgrec_cp_fdt_copie.nb_rejt;
      --
      vgrec_cp_h760.nb_lu    := vgrec_cp_h760_copie.nb_lu;
      vgrec_cp_h760.nb_inser := vgrec_cp_h760_copie.nb_inser;
      vgrec_cp_h760.nb_rejt  := vgrec_cp_h760_copie.nb_rejt;
      --
      vgrec_cp_h010.nb_lu    := vgrec_cp_h010_copie.nb_lu;
      vgrec_cp_h010.nb_inser := vgrec_cp_h010_copie.nb_inser;
      vgrec_cp_h010.nb_rejt  := vgrec_cp_h010_copie.nb_rejt;
      --
      vgrec_cp_h620.nb_lu    := vgrec_cp_h620_copie.nb_lu;
      vgrec_cp_h620.nb_inser := vgrec_cp_h620_copie.nb_inser;
      vgrec_cp_h620.nb_rejt  := vgrec_cp_h620_copie.nb_rejt;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de P_initl_cp
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
   END p_retr_cp_copie;
   --
   -- ============================================================================
   -- P_incre_cp:
   -- ============================================================================
   /*******************************************************************************
   * But: Incrémenter les compteurs pour la table traitée.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pv_nm_table  : Nom de la table en traitement
   *       - pn_in_rejt   : Indicateur d'enregistrement rejeté
   *       - pn_in_inser  : Indicateur d'enregistrement inséré
   *
   *   Paramètres de sortie :
   *       - N/D
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *
   **************************************************************************/
   PROCEDURE p_incre_cp(pv_nm_table IN VARCHAR2,
                        pb_in_rejt  IN BOOLEAN DEFAULT FALSE,
                        pb_in_inser IN BOOLEAN DEFAULT FALSE) IS
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_incre_cp';
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      CASE pv_nm_table
      -- GIR_RH_FDT
         WHEN cv_nm_table_fdt THEN
            --
            -- On doit toujours lire un enregistrement.
            --
            vgrec_cp_fdt.nb_lu := vgrec_cp_fdt.nb_lu + 1;
            --
            -- Il se peut qu'il n'y ait pas de rejet.
            --
            IF pb_in_rejt THEN
               vgrec_cp_fdt.nb_rejt := vgrec_cp_fdt.nb_rejt + 1;
            END IF;
            --
            -- Il se peut qu'il n'y ait pas d'insertion.
            --
            IF pb_in_inser THEN
               vgrec_cp_fdt.nb_inser := vgrec_cp_fdt.nb_inser + 1;
            END IF;
            --
      -- GIR_TRANS_H760
         WHEN cv_nm_table_h760 THEN
            --
            -- On doit toujours lire un enregistrement.
            --
            vgrec_cp_h760.nb_lu := vgrec_cp_h760.nb_lu + 1;
            --
            -- Il se peut qu'il n'y ait pas de rejet.
            --
            IF pb_in_rejt THEN
               vgrec_cp_h760.nb_rejt := vgrec_cp_h760.nb_rejt + 1;
            END IF;
            --
            -- Il se peut qu'il n'y ait pas d'insertion.
            --
            IF pb_in_inser THEN
               vgrec_cp_h760.nb_inser := vgrec_cp_h760.nb_inser + 1;
            END IF;
            --
      -- GIR_TRANS_H620
         WHEN cv_nm_table_h620 THEN
            --
            -- On doit toujours lire un enregistrement.
            --
            vgrec_cp_h620.nb_lu := vgrec_cp_h620.nb_lu + 1;
            --
            -- Il se peut qu'il n'y ait pas de rejet.
            --
            IF pb_in_rejt THEN
               vgrec_cp_h620.nb_rejt := vgrec_cp_h620.nb_rejt + 1;
            END IF;
            --
            -- Il se peut qu'il n'y ait pas d'insertion.
            --
            IF pb_in_inser THEN
               vgrec_cp_h620.nb_inser := vgrec_cp_h620.nb_inser + 1;
            END IF;
            --
      -- GIR_TRANS_H010
         WHEN cv_nm_table_h010 THEN
            --
            -- On doit toujours lire un enregistrement.
            --
            vgrec_cp_h010.nb_lu := vgrec_cp_h010.nb_lu + 1;
            --
            -- Il se peut qu'il n'y ait pas de rejet.
            --
            IF pb_in_rejt THEN
               vgrec_cp_h010.nb_rejt := vgrec_cp_h010.nb_rejt + 1;
            END IF;
            --
            -- Il se peut qu'il n'y ait pas d'insertion.
            --
            IF pb_in_inser THEN
               vgrec_cp_h010.nb_inser := vgrec_cp_h010.nb_inser + 1;
            END IF;
            --
      END CASE;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de P_incre_cp
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_incre_cp est en erreur pour la table ' || pv_nm_table);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80444',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect ||
                                              ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(NVL(vgrec_perd_paie_varbl.dt_debut,
                                                                                    vgrec_perd_paie.dt_debut),
                                                                                'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_incre_cp',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
   END p_incre_cp;

   --
   -- ============================================================================
   -- P_obten_persn:
   -- ============================================================================
   /*******************************************************************************
   * But: Obtenir les informations de la personne.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pn_id_afect      : Identifiant de l'affectation
   *       - pd_dt_fin        : Date de fin de la période
   *
   *   Paramètres de sortie :
   *       - pREC_pern        : Contenant des infos recherchées
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *   Michel Dessureault   2012-12-10  INC00016333  Mettre date de fin au lieu de début
   *                                                 car l'employé a pu être engagé en cours de période
   *   Michel Dessureault   2013-01-22  INC00016962  Corriger l'utilisation du champ minst pour la génération des documents.
   *   Yanick Fortin        2013-02-18  INC00017310  Corriger le select pour bien cibler l'affectation.
   **************************************************************************/
   PROCEDURE p_obten_persn(pn_id_afect NUMBER,
                           pd_dt_fin   DATE,
                           prec_persn  OUT type_rec_persn) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_persn';
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer l'identifiant de
      -- la personne selon l'affectation.
      ----------------------------------------------------------------------
      CURSOR CUR_persn IS
         SELECT papf.person_id id_persn,
                papf.employee_number no_emplo,
                REPLACE(papf.national_identifier,
                        ' ',
                        '') nas,
                paaf.employment_category catgr_emplo,
                SUBSTR( -- Pour ne prendre que les 7 premiers caractères valideurs
                       REGEXP_REPLACE( -- Pour enlever les tirets et les espaces «- »
                                      REGEXP_REPLACE( -- Pour remplacer les SAINT qui sont précédés par un espace « SAINT» devient « ST»
                                                     REGEXP_REPLACE( -- Pour remplacer les SAINT qui sont précédés par un tiret «-SAINT» devient «-ST»
                                                                    REGEXP_REPLACE( -- Pour remplacer les SAINT qui débutent le nom «SAINT» devient «ST»
                                                                                   TRANSLATE( -- Pour remplacer les caractères accentués par l'équivalent non accentué et enlever les caractères spéciaux "¿«»'
                                                                                             UPPER(papf.last_name)
                                                                                             --Debut sagir DDC174934
                                                                                             -- Eric Beaudoin 2014-05-26
                                                                                             -- Ajout du Ç
                                                                                            ,
                                                                                             'ÇÀÁÂÃÄÅÆÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝ"¿«»''',
                                                                                             'CAAAAAAAEEEEIIIINOOOOOOUUUUY'
                                                                                             --Fin sagir DDC174934
                                                                                             -- Eric Beaudoin 2014-05-26
                                                                                             ),
                                                                                   'SAINT',
                                                                                   'ST',
                                                                                   DECODE( -- Pour déterminer la position de début du remplacement
                                                                                          REGEXP_INSTR( -- Pour aller chercher la position du premier SAINT
                                                                                                       TRANSLATE( -- Pour remplacer les caractères accentués par l'équivalent non accentué et enlever les caractères spéciaux "¿«»'
                                                                                                                 UPPER(papf.last_name)
                                                                                                                 --Debut sagir DDC174934
                                                                                                                 -- Eric Beaudoin 2014-05-26
                                                                                                                 -- Ajout du Ç
                                                                                                                ,
                                                                                                                 'ÇÀÁÂÃÄÅÆÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝ"¿«»''',
                                                                                                                 'CAAAAAAAEEEEIIIINOOOOOOUUUUY'
                                                                                                                 --Fin sagir DDC174934
                                                                                                                 -- Eric Beaudoin 2014-05-26
                                                                                                                 ),
                                                                                                       'SAINT'),
                                                                                          1,
                                                                                          1 -- permet de remplacer le SAINT qui débute le nom
                                                                                         ,
                                                                                          LENGTH(papf.last_name) -- permet de ne rien remplacer
                                                                                          ),
                                                                                   1 -- première occurence seulement
                                                                                   ),
                                                                    '-SAINT',
                                                                    '-ST'),
                                                     ' SAINT',
                                                     ' ST'),
                                      '[- ]',
                                      ''),
                       1,
                       7) nm_valdr
         -- INC00016962
         --,haou.minst                               minst
           FROM per_all_assignments_f paaf,
                per_all_people_f      papf
         -- INC00016333
         -- ,hr_all_organization_units_vl haou
          WHERE paaf.assignment_id = pn_id_afect
            AND papf.person_id = paaf.person_id
               -- INC00016333
               --  AND  haou.organization_id = paaf.organization_id
               --- Yanick Fortin 2013-02-18  : ENLEVER CECI CAR la personne pas récupéré si non
               /*AND  TRUNC(pd_dt_fin) BETWEEN paaf.effective_start_date
               AND paaf.effective_end_date*/
               -- Mettre la même condition que premier curseur affectation :
            AND (paaf.effective_start_date <= TRUNC(pd_dt_fin))
               --INC69571 2014-06-03 Rajouter un =
            AND (paaf.effective_end_date >= cd_dt_prodc)
               --- Yanick Fortin 2013-02-18  : ENLEVER CECI CAR la personne pas récupéré si non  FIN
            AND TRUNC(pd_dt_fin) BETWEEN papf.effective_start_date AND papf.effective_end_date
         -- 2013-02-19
          ORDER BY papf.effective_end_date DESC;
      --
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pn_id_afect=' || pn_id_afect || ' --> pd_dt_fin=' || pd_dt_fin,
            vlv_nm_procd_fonct);
      --
      prec_persn := NULL;
      --
      -- Obtenir les infos de la personne
      --
      OPEN CUR_persn;
      --
      FETCH CUR_persn
         INTO prec_persn;
      --
      CLOSE CUR_persn;
      --
      /* 2013-02-19
      FOR REC_CUR_persn IN CUR_persn LOOP
         pREC_persn.id_persn    := REC_CUR_persn.id_persn;
         pREC_persn.nas         := SUBSTR(REPLACE(REC_CUR_persn.nas, ' ', ''), 1, 9);
         pREC_persn.nm_valdr    := Fv_obten_nm_valdr(REC_CUR_persn.nm_faml);
         pREC_persn.catgr_emplo := REC_CUR_persn.catgr_emplo;
         pREC_persn.no_emplo    := REC_CUR_persn.no_emplo;
         --INC00016962
         --pREC_persn.minst       := REC_CUR_persn.minst;
         --
         P_log('No emplo:' || pREC_persn.no_emplo, vlv_nm_procd_fonct);
         P_log('NAS     :' || pREC_persn.nas, vlv_nm_procd_fonct);
         P_log('Nom val :' || pREC_persn.nm_valdr, vlv_nm_procd_fonct);
         --
      END LOOP;*/
      --
      p_log('No emplo:' || prec_persn.no_emplo,
            vlv_nm_procd_fonct);
      p_log('NAS     :' || prec_persn.nas,
            vlv_nm_procd_fonct);
      p_log('Nom val :' || prec_persn.nm_valdr,
            vlv_nm_procd_fonct);
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_persn
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         IF CUR_persn%ISOPEN THEN
            CLOSE CUR_persn;
         END IF;
         --
         prec_persn := NULL;
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_persn pour l''identifiant d''affectation ' || pn_id_afect);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80452',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(pd_dt_fin,
                                                                                           'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo ||
                                              ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                              TO_CHAR(NVL(vgrec_perd_paie_varbl.dt_debut,
                                                          vgrec_perd_paie.dt_debut),
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_persn',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
      --
      --
   END p_obten_persn;

   --
   -- ============================================================================
   -- P_ajout_rejt:
   -- ============================================================================
   /*******************************************************************************
   * But: Ajouter le rejet dans la table PL/SQL des rejets.
   *
   ********************************************************************************
   * Paramètres entrée :
   *   - pn_id_entre_elemn  : Identifiant de l'élément en entrée rejeté
   *   - pv_cd_ereur        : Code de l'erreur causant le rejet
   *   - pn_id_afect        : Identifiant de l'affectation de l'employé
   *   - pn_id_trans        : Identifiant de la transaction H620
   *   - pd_dt_perd_couvr   : Date de gain de la période couverte
   *   - pv_nm_procd        : Nom de la procédure où l'erreur a lieu.
   *   - pv_cd_gain         : Code du gain
   *   - pb_jeton           : Indicateur pour une substitution dans le message.
   *   - pv_nm_jeton        : Nom du jeton à modifier.
   *   - pv_va_jeton        : Valeur du jeton à substituer dans le message.
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ---------------      ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-02-27  INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   **************************************************************************/
   PROCEDURE p_ajout_rejt(pn_id_entre_elemn IN NUMBER,
                          pv_cd_ereur       IN VARCHAR2,
                          pn_id_afect       IN NUMBER,
                          pn_id_trans       IN NUMBER,
                          pd_dt_perd_couvr  IN DATE,
                          pv_nm_procd       IN VARCHAR2,
                          pv_no_emplo       IN VARCHAR2 DEFAULT NULL,
                          pv_cd_gain        IN VARCHAR2 DEFAULT NULL,
                          pb_jeton          IN BOOLEAN DEFAULT FALSE,
                          pv_nm_jeton       IN VARCHAR2 DEFAULT NULL,
                          pv_va_jeton       IN VARCHAR2 DEFAULT NULL,
                          -- INC00017359
                          pn_id_contr_fdt IN NUMBER DEFAULT NULL) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_ajout_rejt';
      vln_index          PLS_INTEGER; -- index de la table PL/SQL.
      vlv_no_emplo       per_all_people_f.employee_number%TYPE; -- Numéro d'employé
      vlrec_persn        type_rec_persn; -- Infos de la personne
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pn_id_entre_elemn=' || pn_id_entre_elemn || ' --> pv_cd_ereur=' || pv_cd_ereur || ' --> pn_id_afect=' || pn_id_afect ||
            ' --> pn_id_trans=' || pn_id_trans || ' --> pd_dt_perd_couvr=' || pd_dt_perd_couvr || ' --> pv_no_emplo=' || pv_no_emplo ||
            ' --> pb_jeton=' || (CASE pb_jeton WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END) || ' --> pv_nm_jeton=' || pv_nm_jeton || ' --> pv_va_jeton=' ||
            pv_va_jeton || ' --> pn_id_contr_fdt=' || pn_id_contr_fdt,
            vlv_nm_procd_fonct);
      --
      IF pv_no_emplo IS NULL THEN
         --
         p_obten_persn(pn_id_afect => pn_id_afect,
                       pd_dt_fin   => NVL(pd_dt_perd_couvr,
                                          vgd_dt_exect),
                       prec_persn  => vlrec_persn);
         --
         vlv_no_emplo := vlrec_persn.no_emplo;
         --
      ELSE
         --
         vlv_no_emplo := pv_no_emplo;
         --
      END IF;
      --
      vln_index := vgtab_rejt.count + 1;
      --
      vgtab_rejt(vln_index).no_emplo := vlv_no_emplo;
      vgtab_rejt(vln_index).id_entre_elemn := pn_id_entre_elemn;
      vgtab_rejt(vln_index).id_afect := pn_id_afect;
      vgtab_rejt(vln_index).id_trans := pn_id_trans;
      vgtab_rejt(vln_index).dt_perd_couvr := fnd_date.date_to_displaydate(pd_dt_perd_couvr);
      vgtab_rejt(vln_index).cd_ereur := pv_cd_ereur;
      vgtab_rejt(vln_index).de_ereur := fv_init_mesg(pv_id_mesg  => pv_cd_ereur,
                                                     pb_jeton    => pb_jeton,
                                                     pv_nm_jeton => pv_nm_jeton,
                                                     pv_mesg     => pv_va_jeton);
      vgtab_rejt(vln_index).nm_procd := pv_nm_procd;
      vgtab_rejt(vln_index).cd_gain := pv_cd_gain;
      -- INC00017359
      vgtab_rejt(vln_index).id_contr_fdt := pn_id_contr_fdt;
      --
   
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de P_ajout_rejt
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_ajout_rejt est en erreur pour la procédure ' || pv_nm_procd);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80449',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              pn_id_entre_elemn || ';CD_EREUR:' || pv_cd_ereur || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                              vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                              TO_CHAR(NVL(vgrec_perd_paie_varbl.dt_debut,
                                                          vgrec_perd_paie.dt_debut),
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_ajout_rejt',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
      --
      --
   END p_ajout_rejt;

   --
   -- ============================================================================
   -- P_afich_journ_bord:
   -- ============================================================================
   /*******************************************************************************
   * But: Afficher le journal de bord dans le PGI.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - N/D
   *
   *   Paramètres de sortie :
   *       - N/D
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *
   **************************************************************************/
   PROCEDURE p_afich_journ_bord IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_afich_journ_bord';
      vln_index          PLS_INTEGER; -- index de la table PL/SQL.
      vlv_dt_exect       VARCHAR2(20) := fnd_date.date_to_displaydate(TRUNC(vgd_dt_exect));
      -- Date d'exécution en format d'affichage
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      FND_FILE.NEW_LINE(1);
      --
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'La date de dernière exécution est ' || vlv_dt_exect ||
                        ' dans le cadre du transfert des heures et unités vers SAGIP (RH_28045).');
      --
      -- Nombre total d'enregistrements lus, rejetés et insérés dans GIR_RH_FDT
      --
      FND_FILE.NEW_LINE(1);
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Total des enregistrement pour la table de contrôle des feuilles de temps ');
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements lus     = ' || TO_CHAR(vgrec_cp_fdt.nb_lu,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements rejetés = ' || TO_CHAR(vgrec_cp_fdt.nb_rejt,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements insérés = ' || TO_CHAR(vgrec_cp_fdt.nb_inser,
                                                                   '999999'));
      --
      -- Nombre total d'enregistrements lus, rejetés et insérés dans GIR_TRANS_H760
      --
      FND_FILE.NEW_LINE(1);
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Total des enregistrement pour la table des transactions H760 ');
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements lus     = ' || TO_CHAR(vgrec_cp_h760.nb_lu,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements rejetés = ' || TO_CHAR(vgrec_cp_h760.nb_rejt,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements insérés = ' || TO_CHAR(vgrec_cp_h760.nb_inser,
                                                                   '999999'));
      --
      -- Nombre total d'enregistrements lus, rejetés et insérés dans GIR_TRANS_H620
      --
      FND_FILE.NEW_LINE(1);
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Total des enregistrement pour la table des transactions H620 ');
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements lus     = ' || TO_CHAR(vgrec_cp_h620.nb_lu,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements rejetés = ' || TO_CHAR(vgrec_cp_h620.nb_rejt,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements insérés = ' || TO_CHAR(vgrec_cp_h620.nb_inser,
                                                                   '999999'));
      --
      -- Nombre total d'enregistrements lus, rejetés et insérés dans GIR_TRANS_H010
      --
      FND_FILE.NEW_LINE(1);
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Total des enregistrement pour la table des transactions H010 ');
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements lus     = ' || TO_CHAR(vgrec_cp_h010.nb_lu,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements rejetés = ' || TO_CHAR(vgrec_cp_h010.nb_rejt,
                                                                   '999999'));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        '   Enregistrements insérés = ' || TO_CHAR(vgrec_cp_h010.nb_inser,
                                                                   '999999'));
      /*--
      -- Afficher les éléments de paie rejetés
      --
      vln_index := vgtab_rejt.first;
      --
      --
      fnd_file.new_line(1);
      fnd_file.put_line(fnd_file.log,
                        'Détail des rejets ');
      --
      <<rejets>>
      WHILE vln_index IS NOT NULL LOOP
         --
         fnd_file.new_line(1);
         fnd_file.put_line(fnd_file.log,
                           '   Numéro d''employé                 : ' || vgtab_rejt(vln_index).no_emplo);
         fnd_file.put_line(fnd_file.log,
                           --'   Identifiant de l''affectation     : ' || vgtab_rejt(vln_index).no_emplo);--CHG204574
                           '   Identifiant de l''affectation     : ' || vgtab_rejt(vln_index).id_afect);  --CHG204574
         fnd_file.put_line(fnd_file.log,
                           '   Période couverte du gain          : ' || vgtab_rejt(vln_index).dt_perd_couvr);
         IF vgtab_rejt(vln_index).cd_gain IS NOT NULL THEN
            fnd_file.put_line(fnd_file.log,
                              '   Code de gain                      : ' || vgtab_rejt(vln_index).cd_gain);
         END IF;
         fnd_file.put_line(fnd_file.log,
                           '   Identifiant de l''élément de gain : ' || vgtab_rejt(vln_index).id_entre_elemn);
         fnd_file.put_line(fnd_file.log,
                           '   Identifiant de la transaction     : ' || vgtab_rejt(vln_index).id_trans);
         fnd_file.put_line(fnd_file.log,
                           '   Date de dernière exécution        : ' || vlv_dt_exect);
         fnd_file.put_line(fnd_file.log,
                           '   Code d''erreur                    : ' || vgtab_rejt(vln_index).cd_ereur);
         fnd_file.put_line(fnd_file.log,
                           '   Description de l''erreur          : ' || vgtab_rejt(vln_index).de_ereur);
         fnd_file.put_line(fnd_file.log,
                           '   Traitement                        : ' || vgtab_rejt(vln_index).nm_procd);
         --
         vln_index := vgtab_rejt.next(vln_index);
         --
      END LOOP rejets;*/
      --
      FND_FILE.NEW_LINE(1);
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /*******************************************************************************
      *      BLOC D'EXCEPTION de P_afich_journ_bord
      *******************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'La procédure P_afich_journ_bord est en erreur.');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
         --
         -- On ne veut pas arrêter le programme au cas ou la journalisation ne serait pas disponible.
         --
         NULL;
      
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80450',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect ||
                                              ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(NVL(vgrec_perd_paie_varbl.dt_debut,
                                                                                    vgrec_perd_paie.dt_debut),
                                                                                'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_afich_journ_bord',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
      --
   END p_afich_journ_bord;

   --
   -- ============================================================================
   -- P_obten_ventl_cout:
   -- ============================================================================
   /*************************************************************************
   * But : Obtenir les segments unité administrative, type budget, programme et capitalisable
   *       de la clé comptable.
   *
   * Paramètres entrée :
   *   - pn_id_afect       : Numéro d'affectation
   *   - pd_dt_afect       : Date courante de l'affectation
   *   - pv_id_type_paie   : Identifiant du type de paie (standard(H760) ou variable(H620))
   *   - pn_id_entre_elemn : Identifiant du gain pouvant avoir une clé comptable
   *
   * Paramètres de sortie :
   *   - pREC_ventl_cout : Enregistrement contenant la valeur des segments de la clé comptable.
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   * Michel Dessureault  2013-01-22  INC00016962  Corriger l'utilisation du champ minst pour la génération des documents.
   * Michel Dessureault  2013-02-22  INC00017408  Corriger le decode pour aller vérfier si employé Régulier ou Occasionnel.
   * Michel Dessureault  2013-04-17  Retouche 183 Tenir compte des entrées d'élément pour la clef comptable.
   * Michel Dessureault  2013-06-14  INC00018610  Convertir pour SAGIP les minst, budgt et centr_respn
   * Frédéric Aubin      2014-05-29  INC-69369 : Reprendre la date de début de l'affectation
   * Frédéric Aubin      2014-07-31  INC71083 : Ajout de P_log pour la ventilation des couts.  P_obten_ventl_cout
   * Santiago Giusti     2015-04-07  DDC 158505: Dossier des sinistres - Interface H760/H620 Feuille de temps
   *************************************************************************/
   PROCEDURE p_obten_ventl_cout(pn_id_afect     IN NUMBER,
                                pd_dt_afect     IN DATE,
                                pv_id_type_paie IN VARCHAR2
                                -- Retouche 183
                               ,
                                pn_id_entre_elemn IN NUMBER DEFAULT 0,
                                prec_ventl_cout   OUT type_rec_ventl_cout) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_ventl_cout';
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les informations budgétaires
      ----------------------------------------------------------------------
      CURSOR CUR_obten_ventl_cout(pn_id_afect_cur       NUMBER,
                                  pd_dt_afect_cur       DATE,
                                  pv_id_type_paie_cur   VARCHAR2,
                                  pn_id_entre_elemn_cur NUMBER) IS
         WITH atrib_cout AS
          (
           -- Pour récupérer la clef comptable au niveau affectation sinon Organisation
           SELECT pn_id_afect_cur id_afect,
                   pcak.segment2   unite_admin,
                   pcak.segment4   type_budgt,
                   pcak.segment5   progr,
                   pcak.segment8   captl,
                   pcak.segment1   entit
             FROM pay_cost_allocation_keyflex pcak
            WHERE pcak.cost_allocation_keyflex_id =
                  xxgir_rh_23000_atrib_cout.fn_obten_atrib_cout_afect(pn_id_afect => pn_id_afect_cur,
                                                                      pd_dt       => pd_dt_afect_cur)),
         elemn_cout AS
          ( -- Pour récupérer la clef comptable au niveau de l'élément de gain
           SELECT pee.assignment_id id_afect,
                   pcak.segment2     unite_admin -- unité admministrative de l'affectation/organisation
                  ,
                   pcak.segment4     type_budgt -- type de budget de l'affectation/organisation
                  ,
                   pcak.segment5     progr -- programme de l'affectation/organisation
                  ,
                   pcak.segment8     captl -- Capitalisable
             FROM pay_element_entries_f pee
             LEFT OUTER JOIN pay_cost_allocation_keyflex pcak
               ON (pee.cost_allocation_keyflex_id = pcak.cost_allocation_keyflex_id)
            WHERE pee.assignment_id = pn_id_afect_cur
              AND pee.element_entry_id = pn_id_entre_elemn_cur),
         depns AS
          ( -- Pour récupérer la catégorie de dépense
           SELECT paaf.assignment_id id_afect,
                   DECODE(SUBSTR((SELECT flv.attribute1
                                   FROM fnd_lookup_values flv
                                  WHERE flv.lookup_type = 'EMP_CAT'
                                    AND flv.enabled_flag = 'Y'
                                    AND flv.language = 'FRC'
                                    AND flv.lookup_code = paaf.employment_category),
                                 1,
                                 1),
                          'R',
                          '1',
                          '2') catgr_depns
             FROM per_all_assignments_f paaf
            WHERE paaf.assignment_id = pn_id_afect_cur
              AND paaf.primary_flag = 'Y'
                 /*incident 69369 enlever des jointure inutile*/
              AND TRUNC(pd_dt_afect_cur) BETWEEN paaf.effective_start_date AND paaf.effective_end_date),
         ventl_cout AS
          (
           -- Prioriser l'élément ensuite l'affectation ensuite l'organisation
           SELECT NVL(ec.unite_admin,
                       ac.unite_admin) unite_admin,
                   NVL(ec.type_budgt,
                       ac.type_budgt) type_budgt,
                   NVL(ec.progr,
                       ac.progr) progr,
                   NVL(ec.captl,
                       ac.captl) captl,
                   ac.entit entit,
                   LPAD(NVL(ec.progr,
                            ac.progr),
                        5,
                        '0') || (CASE
                                    WHEN NVL(ec.type_budgt,
                                             ac.type_budgt) = '100' THEN
                                     1
                                    WHEN NVL(ec.type_budgt,
                                             ac.type_budgt) = '201' THEN
                                     3
                                    WHEN NVL(ec.type_budgt,
                                             ac.type_budgt) = '210' THEN
                                     9
                                    WHEN NVL(ec.type_budgt,
                                             ac.type_budgt) BETWEEN '300' AND '399' THEN
                                     5
                                    WHEN NVL(ec.type_budgt,
                                             ac.type_budgt) BETWEEN '900' AND '999' THEN
                                     7
                                    ELSE
                                     0
                                 END) || d.catgr_depns budgt,
                   SUBSTR(LPAD(ac.entit,
                               4,
                               '0'),
                          2,
                          3) minst,
                   SUBSTR(LPAD(NVL(ec.unite_admin,
                                   ac.unite_admin),
                               7,
                               '0'),
                          4,
                          4) centr_respn
             FROM atrib_cout ac
            INNER JOIN depns d
               ON (ac.id_afect = d.id_afect)
             LEFT OUTER JOIN elemn_cout ec
               ON (ac.id_afect = ec.id_afect)
            WHERE ac.id_afect = pn_id_afect_cur)
         SELECT vc.entit,
                vc.unite_admin,
                vc.type_budgt,
                vc.progr,
                vc.captl,
                vc.minst,
                vc.budgt,
                vc.centr_respn
                -- INC00018610
               ,
                cor.cd_sagip_minst,
                cor.cd_sagip_budgt,
                cor.cd_sagip_centr_respn,
                cor.dt_desct
           FROM ventl_cout vc
         -- INC00018610
           LEFT OUTER JOIN gir_srhhrtrstr cor
         --ON (cor.cd_sagir_entit = vc.entit AND cor.cd_sagir_unite_admin = vc.unite_admin AND cor.cd_sagir_type_budgt = vc.type_budgt AND -- DDC 158505 sg
             ON (cor.cd_sagir_entit = vc.entit AND cor.cd_sagir_unite_admin = vc.unite_admin AND
                cor.cd_sagir_type_budgt = DECODE(xxgir_rh_23000_dosr_sinst.fv_verfr_budget_hors_sagip(vc.type_budgt),
                                                  'O',
                                                  '397',
                                                  vc.type_budgt) AND -- DDC 158505 sg
                cor.cd_sagir_progr = vc.progr AND cor.cd_sagir_captl = vc.captl AND
                -- vérifier si le dernier caractère est pareil
                SUBSTR(NVL(cor.cd_sagip_budgt,
                            SUBSTR(vc.budgt,
                                   -1)),
                        -1) = SUBSTR(vc.budgt,
                                      -1))
          ORDER BY vc.unite_admin;
      --
      REC_ventl_cout CUR_obten_ventl_cout%ROWTYPE; -- Enregistrement de type CUR_obten_ventl_cout
      --
      CURSOR CUR_afect_exist IS
         SELECT MIN(paaf.effective_start_date) dt_debut_min
           FROM per_all_assignments_f paaf
          WHERE paaf.assignment_id = pn_id_afect;
      vld_dt_debut_min DATE;
      --
   BEGIN
      p_log('10 Début procédure.  --> pn_id_afect=' || pn_id_afect || ' --> pd_dt_afect=' || pd_dt_afect || ' --> pv_id_type_paie=' ||
            pv_id_type_paie || ' --> pn_id_entre_elemn=' || pn_id_entre_elemn,
            vlv_nm_procd_fonct);
      --
      prec_ventl_cout := NULL;
      --
      OPEN CUR_afect_exist;
      FETCH CUR_afect_exist
         INTO vld_dt_debut_min;
      CLOSE CUR_afect_exist;
      -- SAGIR FAubin 2014-07-24 INC-72787 : Ajout de P_log pour la ventilation des couts
      p_log('20 - Debut affectation min.=' || TO_CHAR(vld_dt_debut_min,
                                                      'YYYY-MM-DD'),
            vlv_nm_procd_fonct);
      --
      IF pd_dt_afect < vld_dt_debut_min THEN
         --
         -- SAGIR FAubin 2014-07-24 INC-72787 : Ajout de P_log pour la ventilation des couts
         p_log('25a - pd_dt_afect < vld_dt_debut_min',
               vlv_nm_procd_fonct);
         OPEN CUR_obten_ventl_cout(pn_id_afect,
                                   vld_dt_debut_min,
                                   pv_id_type_paie,
                                   pn_id_entre_elemn);
      ELSE
         -- SAGIR FAubin 2014-07-24 INC-72787 : Ajout de P_log pour la ventilation des couts
         p_log('25b - pd_dt_afect >= vld_dt_debut_min',
               vlv_nm_procd_fonct);
         OPEN CUR_obten_ventl_cout(pn_id_afect,
                                   pd_dt_afect,
                                   pv_id_type_paie,
                                   pn_id_entre_elemn);
      END IF;
      --
      FETCH CUR_obten_ventl_cout
         INTO REC_ventl_cout;
      --
      CLOSE CUR_obten_ventl_cout;
      --
      -- SAGIR FAubin 2014-07-24 INC-72787 : Ajout de P_log pour la ventilation des couts
      p_log('30 - Ventilation --> pn_id_afect=' || pn_id_afect || ', entit=' || REC_ventl_cout.entit || ', unite_admin=' ||
            REC_ventl_cout.unite_admin || ', type_budgt=' || REC_ventl_cout.type_budgt || ', progr=' || REC_ventl_cout.progr || ', captl=' ||
            REC_ventl_cout.captl || ', dt_desct=' || REC_ventl_cout.dt_desct || ', budgt=' || REC_ventl_cout.budgt || ', centr_respn=' ||
            REC_ventl_cout.centr_respn || ', cd_sagip_minst=' || NVL(REC_ventl_cout.cd_sagip_minst,
                                                                     '000') || ', cd_sagip_budgt=' || REC_ventl_cout.cd_sagip_budgt ||
            ', cd_sagip_centr_respn=' || REC_ventl_cout.cd_sagip_centr_respn,
            vlv_nm_procd_fonct);
      --
      prec_ventl_cout.entit       := REC_ventl_cout.entit;
      prec_ventl_cout.unite_admin := REC_ventl_cout.unite_admin;
      prec_ventl_cout.type_budgt  := REC_ventl_cout.type_budgt;
      prec_ventl_cout.progr       := REC_ventl_cout.progr;
      prec_ventl_cout.captl       := REC_ventl_cout.captl;
      -- Début DDC 158505 sg
      -- Valider le type de budget avec le nouveau segment du champ flexible
      -- «Hors SAGIP» du jeu de valeur «GIR_GL_TYPE_BUDGET» pour déterminer
      -- la combinaison de la clé flexible à utiliser.
      IF xxgir_rh_23000_dosr_sinst.fv_verfr_budget_hors_sagip(REC_ventl_cout.type_budgt) = 'O' THEN
         IF REC_ventl_cout.captl = 'O' THEN
            -- Si capitalisable, on mettre 6 au code de budget
            prec_ventl_cout.budgt := SUBSTR(REC_ventl_cout.budgt,
                                            1,
                                            5) || '6' || SUBSTR(REC_ventl_cout.budgt,
                                                                7);
         ELSE
            -- Si non-capitalisable, on mettre 5 au code de budget
            prec_ventl_cout.budgt := SUBSTR(REC_ventl_cout.budgt,
                                            1,
                                            5) || '5' || SUBSTR(REC_ventl_cout.budgt,
                                                                7);
         END IF;
      ELSE
         prec_ventl_cout.budgt := REC_ventl_cout.budgt;
      END IF;
      -- Fin DDC 158505 sg
      --
      -- INC00018610
      -- Si le compte SAGIP est désactivé alors prendre les valeurs de SAGIR.
      --
      IF REC_ventl_cout.dt_desct IS NULL THEN
         --
         prec_ventl_cout.minst       := coalesce(REC_ventl_cout.cd_sagip_minst,
                                                 REC_ventl_cout.minst,
                                                 '000');
         prec_ventl_cout.budgt       := NVL(REC_ventl_cout.cd_sagip_budgt,
                                            --   REC_ventl_cout.budgt); -- DDC 158505 sg
                                            prec_ventl_cout.budgt); -- DDC 158505 sg
         prec_ventl_cout.centr_respn := NVL(REC_ventl_cout.cd_sagip_centr_respn,
                                            REC_ventl_cout.centr_respn);
         --
      ELSE
         --
         prec_ventl_cout.minst := NVL(REC_ventl_cout.minst,
                                      '000');
         --prec_ventl_cout.budgt       := REC_ventl_cout.budgt; -- DDC 158505 sg
         prec_ventl_cout.centr_respn := REC_ventl_cout.centr_respn;
         --
      END IF;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_ventl_cout.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         -- retouche 183
         IF CUR_obten_ventl_cout%ISOPEN THEN
            CLOSE CUR_obten_ventl_cout;
         END IF;
         -- fin retouche 183
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_obten_ventl_cout est en erreur ');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         prec_ventl_cout := NULL;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80416',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(pd_dt_afect,
                                                                                           'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_ventl_cout',
                        pv_de_mesg_techn   => vgv_texte_ereur);
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         IF pv_id_type_paie = cv_id_type_paie_varbl THEN
            RAISE vgexc_trait_h620;
         ELSE
            RAISE vgexc_trait_h760;
         END IF;
         --
   END p_obten_ventl_cout;

   --
   -- ============================================================================
   -- P_obten_perd_paie:
   -- ============================================================================
   /*******************************************************************************
   * But: Déterminer la période de paie en fonction de la date du jour.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pv_id_type_paie    : Type de paie
   *                                 1. Standard
   *                                 2. Variable
   *                                 3. Décentralisé
   *       - pv_dt_exect        : Date de la dernière exécution réussie de l'adaptation
   *
   *   Paramètres de sortie :
   *       - pREC_perd_paie     : Plage de période de paie
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *   Michel Dessureault   2012-11-19  INC00016333 Corriger le SELECT dt_limt
   *                                                pour aller chercher la bonne période
   *   Michel Dessureault   2013-01-14  INC00016847 Corriger l'année financière
   *   Geneviève Bélanger   2016-09-13  INC00104143 Modifier la façon d'obtenir l'année financière
   *******************************************************************************/
   PROCEDURE p_obten_perd_paie(pv_id_type_paie IN VARCHAR2,
                               pd_dt_exect     IN DATE,
                               prec_perd_paie  OUT type_rec_plage) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_perd_paie';
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de déterminer la période de paie
      ----------------------------------------------------------------------
      CURSOR CUR_perd_paie IS
         WITH dt_limt AS
          ( /* INC00016333
                                                                                                               SELECT MAX(ptp.cut_off_date) dt_limt
                                                                                                                     ,ptp.payroll_id        id_paie
                                                                                                               FROM   per_time_periods     ptp
                                                                                                                     ,pay_all_payrolls_f   papf
                                                                                                               WHERE  ptp.payroll_id = papf.payroll_id
                                                                                                                 AND  papf.attribute1 = pv_id_type_paie
                                                                                                                 AND  ptp.cut_off_date BETWEEN cd_dt_prodc
                                                                                                                                           AND cd_dt_exect
                                                                                                                 AND  TRUNC(pd_dt_exect) BETWEEN papf.effective_start_date
                                                                                                                                             AND papf.effective_end_date
                                                                                                               GROUP BY ptp.payroll_id */
           SELECT MIN(ptp.cut_off_date) dt_limt,
                   ptp.payroll_id id_paie
             FROM per_time_periods   ptp,
                   pay_all_payrolls_f papf
            WHERE ptp.payroll_id = papf.payroll_id
              AND papf.attribute1 = pv_id_type_paie
              AND TRUNC(pd_dt_exect) BETWEEN cd_dt_prodc AND ptp.cut_off_date
              AND ptp.cut_off_date BETWEEN papf.effective_start_date AND papf.effective_end_date
            GROUP BY ptp.payroll_id)
         SELECT ptp.start_date dt_debut,
                ptp.end_date   dt_fin
                -- INC00016847
                --,SUBSTR(ptp.attribute2,1,4)                 aa_finnc
               ,
                TO_CHAR(gp.period_year) aa_finnc,
                LPAD(ptp.attribute3,
                     2,
                     '0') no_perd,
                FND_DATE.CANONICAL_TO_DATE(ptp.attribute1) dt_du_achem,
                ptp.cut_off_date dt_au_achem
           FROM per_time_periods ptp,
                dt_limt
                -- INC00016847
               ,
                gl_periods gp
          WHERE ptp.cut_off_date = dt_limt.dt_limt
            AND ptp.payroll_id = dt_limt.id_paie
               -- INC00016847
            AND UPPER(gp.period_set_name) = 'GQ 31 MARS'
            AND ptp.end_date BETWEEN gp.start_date AND gp.end_date;
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_id_type_paie=' || pv_id_type_paie || ' --> pd_dt_exect=' || pd_dt_exect,
            vlv_nm_procd_fonct);
      --
      prec_perd_paie := NULL;
      --
      -- Obtenir la période de paie
      --
      FOR REC_CUR_perd_paie IN CUR_perd_paie LOOP
         prec_perd_paie.dt_debut := REC_CUR_perd_paie.dt_debut;
         prec_perd_paie.dt_fin   := REC_CUR_perd_paie.dt_fin;
      
         -- Début INC00104143 Geneviève Bélanger 2016-09-13
         -- utiliser une fonction commune pour déterminer l'année financière
         --prec_perd_paie.aa_finnc    := REC_CUR_perd_paie.aa_finnc;
         prec_perd_paie.aa_finnc := xxgir_rh_23000_convr_du.fn_obten_aa_finnc(TRUNC(pd_dt_exect));
         -- Fin INC00104143
      
         prec_perd_paie.no_perd     := REC_CUR_perd_paie.no_perd;
         prec_perd_paie.dt_du_achem := REC_CUR_perd_paie.dt_du_achem;
         prec_perd_paie.dt_au_achem := REC_CUR_perd_paie.dt_au_achem;
      
         p_log('20 - dt_debut :' || REC_CUR_perd_paie.dt_debut || ', dt_fin :' || REC_CUR_perd_paie.dt_fin || ', aa_finnc :' ||
               prec_perd_paie.aa_finnc || ', no_perd :' || REC_CUR_perd_paie.no_perd || ', dt_du_achem :' || REC_CUR_perd_paie.dt_du_achem ||
               ', dt_au_achem :' || REC_CUR_perd_paie.dt_au_achem,
               vlv_nm_procd_fonct);
      END LOOP;
   
      --
      p_log('25 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_perd_paie
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         prec_perd_paie := NULL;
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_perd_paie pour le type de paie ' || pv_id_type_paie);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80451',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vgv_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_perd_paie',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         RAISE vgexc_mesg_ereur;
         --
   END p_obten_perd_paie;

   --
   -- ============================================================================
   -- P_obten_perd_paie_gain:
   -- ============================================================================
   /*******************************************************************************
   * But: Obtenir la période de paie dans laquelle se trouve le gain.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pv_id_type_paie    : Type de paie
   *                                 1. Standard
   *                                 2. Variable
   *                                 3. Décentralisé
   *       - pv_dt_gain         : Date du gain
   *
   *   Paramètres de sortie :
   *       - pREC_perd_paie     : Plage de période de paie
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-11-26  Création
   *   Michel Dessureault   2013-01-14  INC00016847 Corriger l'année financière
   *   Michel Dessureault   2013-03-04  INC00017594 Corriger le select pour aller chercher la période ciblée
   *   Geneviève Bélanger   2016-09-13  INC00104143 Modifier la façon d'obtenir l'année financière
   *******************************************************************************/
   PROCEDURE p_obten_perd_paie_gain(pv_id_type_paie IN VARCHAR2,
                                    pd_dt_gain      IN DATE,
                                    prec_perd_paie  OUT type_rec_plage) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_perd_paie_gain';
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
   
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de déterminer la période de paie
      ----------------------------------------------------------------------
      CURSOR CUR_perd_paie IS
         SELECT ptp.start_date dt_debut,
                ptp.end_date   dt_fin
                -- INC00016847
                --,SUBSTR(ptp.attribute2,1,4)                 aa_finnc
               ,
                TO_CHAR(gp.period_year) aa_finnc,
                LPAD(ptp.attribute3,
                     2,
                     '0') no_perd,
                FND_DATE.CANONICAL_TO_DATE(ptp.attribute1) dt_du_achem,
                ptp.cut_off_date dt_au_achem
           FROM per_time_periods   ptp,
                pay_all_payrolls_f papf
                -- INC00016847
               ,
                gl_periods gp
          WHERE ptp.payroll_id = papf.payroll_id
            AND papf.attribute1 = pv_id_type_paie
            AND ptp.cut_off_date BETWEEN papf.effective_start_date AND papf.effective_end_date
            AND TRUNC(pd_dt_gain) BETWEEN ptp.start_date AND ptp.end_date
               --INC00017594
            AND TRUNC(pd_dt_gain) >= cd_dt_prodc
               -- INC00016847
            AND UPPER(gp.period_set_name) = 'GQ 31 MARS'
               /* INC00017594
               AND    gp.start_date            >= cd_dt_prodc*/
            AND ptp.end_date BETWEEN gp.start_date AND gp.end_date;
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_id_type_paie=' || pv_id_type_paie || ' --> pd_dt_gain=' || pd_dt_gain,
            vlv_nm_procd_fonct);
      --
      prec_perd_paie := NULL;
   
      --
      -- Obtenir la période de paie
      --
      FOR REC_CUR_perd_paie IN CUR_perd_paie LOOP
         prec_perd_paie.dt_debut := REC_CUR_perd_paie.dt_debut;
         prec_perd_paie.dt_fin   := REC_CUR_perd_paie.dt_fin;
         prec_perd_paie.no_perd  := REC_CUR_perd_paie.no_perd;
      
         -- Début INC00104143 Geneviève Bélanger 2016-09-13
         -- utiliser une fonction commune pour déterminer l'année financière
         --prec_perd_paie.aa_finnc    := REC_CUR_perd_paie.aa_finnc;
         prec_perd_paie.aa_finnc := xxgir_rh_23000_convr_du.fn_obten_aa_finnc(TRUNC(pd_dt_gain));
         -- Fin INC00104143
      
         prec_perd_paie.dt_du_achem := REC_CUR_perd_paie.dt_du_achem;
         prec_perd_paie.dt_au_achem := REC_CUR_perd_paie.dt_au_achem;
      
         p_log('20 - dt_debut :' || REC_CUR_perd_paie.dt_debut || ', dt_fin :' || REC_CUR_perd_paie.dt_fin || ', aa_finnc :' ||
               prec_perd_paie.aa_finnc || ', no_perd :' || REC_CUR_perd_paie.no_perd || ', dt_du_achem :' || REC_CUR_perd_paie.dt_du_achem ||
               ', dt_au_achem :' || REC_CUR_perd_paie.dt_au_achem,
               vlv_nm_procd_fonct);
      END LOOP;
   
      --
      p_log('25 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_perd_paie_gain
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         prec_perd_paie := NULL;
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_perd_paie_gain pour le type de paie ' || pv_id_type_paie);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80453',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                                              TO_CHAR(pd_dt_gain,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'P_obten_perd_paie_gain',
                        pv_de_mesg_techn   => SUBSTR(SQLERRM,
                                                     1,
                                                     300));
         --
         RAISE vgexc_mesg_ereur;
         --
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
      --
      --
   END p_obten_perd_paie_gain;

   --
   -- ============================================================================
   -- Fb_verfr_dt_gain:
   -- ============================================================================
   /*******************************************************************************
   * But: Vérifier si la date de gain est dans une année financière précédente.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - pd_dt_gain   : Date du gain
   *
   * Sortie: BOOLEAN      - TRUE  : La date est dans une année financière précédente.
   *                      - FALSE : La date est dans l'année financière courante
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2013-02-11  Création    Retouche 126
   *******************************************************************************/
   FUNCTION fb_verfr_dt_gain(pd_dt_gain IN DATE) RETURN BOOLEAN IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct   VARCHAR2(100) := 'apps.xxgir_rh_28045.Fb_verfr_dt_gain';
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      vlb_retr             BOOLEAN := FALSE; -- Valeur retournée par la fonction
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pd_dt_gain=' || pd_dt_gain,
            vlv_nm_procd_fonct);
      --
      vlrec_perd_paie_gain := NULL;
      --
      p_log('20 - Appel de la procédure P_obten_perd_paie_gain.',
            vlv_nm_procd_fonct);
      --
      p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                             pd_dt_gain      => pd_dt_gain,
                             prec_perd_paie  => vlrec_perd_paie_gain);
      --
      -- Si l'année financière du gain est < à celle de la période variable courante,
      -- on retourne VRAI
      --
      p_log('Année anc = ' || vlrec_perd_paie_gain.aa_finnc,
            vlv_nm_procd_fonct);
      --
      p_log('Année cou = ' || vgrec_perd_paie_varbl.aa_finnc,
            vlv_nm_procd_fonct);
      --
      IF vlrec_perd_paie_gain.aa_finnc < vgrec_perd_paie_varbl.aa_finnc THEN
         --
         vlb_retr := TRUE;
         --
      END IF;
      --
      RETURN vlb_retr;
      --
      p_log('30 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de Fb_verfr_dt_gain
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('40 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure Fb_verfr_dt_gain pour le type de paie ');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80430',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                                              TO_CHAR(pd_dt_gain,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'fb_verfr_dt_gain',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END fb_verfr_dt_gain;

   --
   -- ============================================================================
   -- P_modfr_perd_paie_gain:
   -- ============================================================================
   /*******************************************************************************
   * But: Modifier les dates de la période de paie dans laquelle se trouve le gain
   *      si l'année financière du gain précède celle de la paie courante.
   *
   ********************************************************************************
   * Paramètres entrée :
   *       - N/D
   *
   * Paramètres de sortie :
   *       - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2013-02-11  Création    Retouche 126
   *******************************************************************************/
   PROCEDURE p_modfr_perd_paie_gain IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct   VARCHAR2(100) := 'apps.xxgir_rh_28045.P_modfr_perd_paie_gain';
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vlrec_perd_paie_gain := NULL;
      --
      p_log('20 - Appel de la procédure P_obten_perd_paie_gain.',
            vlv_nm_procd_fonct);
      --
      p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                             pd_dt_gain      => vgrec_gir_rh_fdt.dt_gain,
                             prec_perd_paie  => vlrec_perd_paie_gain);
      --
      -- Si l'année financière du gain est >= à celle de la période variable courante,
      -- on utilise les dates de la période du gain
      -- sinon on a déjà mis par défaut les dates de la période variable courante
      --
      IF vlrec_perd_paie_gain.aa_finnc >= vgrec_perd_paie_varbl.aa_finnc THEN
         --
         vgrec_gir_rh_fdt.dt_perd_paie_du := vlrec_perd_paie_gain.dt_debut;
         vgrec_gir_rh_fdt.dt_perd_paie_au := vlrec_perd_paie_gain.dt_fin;
         --
      END IF;
      --
      p_log('30 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_modfr_perd_paie_gain
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('40 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_modfr_perd_paie_gain pour le type de paie ');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80429',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vgv_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vgrec_gir_rh_fdt.dt_gain,
                                                                                           'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_modfr_perd_paie_gain',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_modfr_perd_paie_gain;

   --
   -- ============================================================================
   -- P_modfr_cd_sagip:
   -- ============================================================================
   /*************************************************************************
   * But : Modifier le code sagip 010 par 015 lorsque le gain est créé l'année précédente.
   *
   * Paramètres entrée :
   *   - pv_nm_liste         : Nom de la liste pour laquelle on modifie le code SAGIP
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                 Date        Description
   * ------------------  ----------  -------------
   * Michel Dessureault  2013-02-11  Création    Retouche 126
   * Geneviève Bélanger  2016-09-13  INC00103227 - Transformer en A015 seulement si c'est la période 03 ou plus
   *************************************************************************/
   PROCEDURE p_modfr_cd_sagip(pv_nm_liste IN VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_modfr_cd_sagip';
      vltab_liste_elemn  tab_elemn; -- Table PL/SQL pour les numéros d'éléments.
      vln_id_entre_elemn NUMBER(15);
      vld_dt_gain        DATE;
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour obtenir la date du gain pour un élément
      -- avec un code de gain SAGIP égal à 010.
      ----------------------------------------------------------------------
      CURSOR CUR_elemn IS
         SELECT reht.id_entre_elemn,
                FND_DATE.CANONICAL_TO_DATE(reht.va_entre_elemn) dt_gain,
                reht.id_afect
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = pv_nm_liste
            AND reht.nm_va_entre_elemn = cv_nm_dt_efect
            AND reht.cd_sagip = '010';
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_nm_liste=' || pv_nm_liste,
            vlv_nm_procd_fonct);
      --
      vlTAB_liste_elemn.DELETE;
      --
      -- Afin que le code sagip dans la liste corresponde au code sagip de la transaction h620
      -- il faut le transformer en 015 si son année financière précède l'année de la période variable courante
      --
      FOR REC_CUR_elemn IN CUR_elemn LOOP
         --
         IF fb_verfr_dt_gain(REC_CUR_elemn.dt_gain) THEN
            p_log('20   --> dt_gain=' || REC_CUR_elemn.dt_gain,
                  vlv_nm_procd_fonct);
         
            -- INC00103227 Début Geneviève Bélanger 2016-09-13
            -- Si c'est la période 3 ou plus,
            -- transformer le A010 en A015
            IF TO_NUMBER(vgrec_perd_paie_varbl.no_perd) >= 3 THEN
            
               vltab_liste_elemn(vltab_liste_elemn.count + 1).id_entre_elemn := REC_CUR_elemn.id_entre_elemn;
               vln_id_entre_elemn := REC_CUR_elemn.id_entre_elemn;
               vld_dt_gain := REC_CUR_elemn.dt_gain;
            
               p_log('25   --> A010 devient A015 pour id_entre_elemn ' || REC_CUR_elemn.id_entre_elemn,
                     vlv_nm_procd_fonct);
            END IF;
            -- INC00103227 Fin
            --
         END IF;
         --
      END LOOP;
      --
      -- Modifier le code sagip les éléments ciblés
      --
      FORALL vln_cp IN INDICES OF vltab_liste_elemn
         UPDATE xxgir_rh_elemn_h620_tempr reht
            SET reht.cd_sagip = '015'
          WHERE reht.id_entre_elemn = vltab_liste_elemn(vln_cp).id_entre_elemn;
      --
      vlTAB_liste_elemn.DELETE;
      --
      p_log('30 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_modfr_cd_sagip.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         vlTAB_liste_elemn.DELETE;
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_modfr_cd_sagip est en erreur ');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80432',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                              TO_CHAR(vld_dt_gain,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_modfr_cd_sagip',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_modfr_cd_sagip;

   --
   -- ============================================================================
   -- P_creer_gain_fdt:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de créer le gain H760  ou le gain H620
   *       dans la table de contrôle des feuilles de temps.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - pn_id_contr_fdt   : Identifiant de contrôle de la feuille de temps
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2012-12-04  INC00016333  Modifier le nom pour être utiliser par le H620 autant que le H760
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement du code SAGIP de «A010» à «A015» d'une H620
   * Michel Dessureault   2013-04-17  INC00018102  La date de début de couverture doit être >= à la date d'implantation.
   * Frédéric Aubin       2013-04-25  INC00018238: Ajout de l'étape
   * Michel Dessureault   2013-05-09  Retouche 202 (INC00018296) Ajouter une validation pour calculer la compensation pour certains codes lors de changement de classe d'emploi.
   * Geneviève Bélanger   2016-09-14  INC00104143 - À la période 01 ou 02, modifier l'année financière pour un gain avant le 1er avril
   * Geneviève Bélanger   2017-03-03  CHG225373 - Pour le calcul de l'année financière, la date à utiliser peut être soit
   *                                  la date du gain, soit la date de début
   * Geneviève Bélanger   2017-03-29  CHG226617 - Commenter le CHG225373 (date de gain modifiée, et l'appel de la procédure
   *                                  p_modfr_perd_paie_gain modifie la période de paie...)
   * Geneviève Bélanger   2017-03-30  CHG226617 - l'étape 6_22 étant remise comme avant, réintégrer le CHG225373
   * Geneviève Bélanger   2017-03-31  CHG226472 - corriger l'année financière précédente
   *************************************************************************/
   PROCEDURE p_creer_gain_fdt(pn_id_contr_fdt OUT NUMBER,
                              -- CHG225373 Début 2017-03-03 ajout d'un flag pour le calcul de l'aa_finnc
                              pv_utils_autre_dt IN VARCHAR2 DEFAULT 'N') IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_gain_fdt';
   
      -- CHG225373 2017-03-03 ajout d'un flag pour le calcul de l'aa_finnc
      vld_dt_utils_aa_finnc DATE;
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('12   --> pn_id_contr_fdt=' || pn_id_contr_fdt,
            vlv_nm_procd_fonct);
      --
      IF vgv_in_etape_2 = 'N' AND
         vgrec_perd_paie_varbl.aa_finnc IS NULL THEN
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Étape 2 - Créer les gains déclaratoires à partir des informations extraites de SAGIR.');
         fnd_file.put_line(fnd_file.log,
                           ' ');*/
         --
         vgv_in_etape_2 := 'O';
         --
      END IF;
      --
      -- Retouche 126
      --
      IF vgrec_gir_rh_fdt.nm_fiche = 'H620' AND
         vgrec_gir_rh_fdt.dt_gain IS NOT NULL THEN
         --
         p_log('14 - Appel de la procédure P_modfr_perd_paie_gain.',
               vlv_nm_procd_fonct);
         --
         p_modfr_perd_paie_gain;
      
         p_log('16 - vgrec_gir_rh_fdt.dt_gain=' || vgrec_gir_rh_fdt.dt_gain || ', vgrec_perd_paie_varbl.no_perd=' || vgrec_perd_paie_varbl.no_perd ||
               ', EXTRACT(YEAR FROM vgd_dt_exect)=' || EXTRACT(YEAR FROM vgd_dt_exect) || ', vgrec_perd_paie_varbl.aa_finnc=' ||
               vgrec_perd_paie_varbl.aa_finnc,
               vlv_nm_procd_fonct);
      
         -- CHG225373 Début 2017-03-03
         -- si pv_utils_autre_dt = 'O', utiliser la date de début plutôt que la date du gain pour le calcul de l'aa_finnc
         IF pv_utils_autre_dt = 'O' THEN
            vld_dt_utils_aa_finnc := vgrec_gir_rh_fdt.dt_debut;
         ELSE
            vld_dt_utils_aa_finnc := vgrec_gir_rh_fdt.dt_gain;
         END IF;
      
         p_log('17 - pv_utils_autre_dt=' || pv_utils_autre_dt || ', vgrec_gir_rh_fdt.dt_debut=' ||
               TO_CHAR(vgrec_gir_rh_fdt.dt_debut,
                       'YYYY-MM-DD') || ', vgrec_gir_rh_fdt.dt_gain=' ||
               TO_CHAR(vgrec_gir_rh_fdt.dt_gain,
                       'YYYY-MM-DD') || ', vld_dt_utils_aa_finnc=' || TO_CHAR(vld_dt_utils_aa_finnc,
                                                                              'YYYY-MM-DD'),
               vlv_nm_procd_fonct);
      
         -- INC00104143 Début Geneviève Bélanger 2016-09-14
         --IF fb_verfr_dt_gain(vgrec_gir_rh_fdt.dt_gain)    AND
         IF fb_verfr_dt_gain(vld_dt_utils_aa_finnc) AND
           -- CHG225373 Fin
            vgrec_perd_paie_varbl.no_perd IN ('01',
                                              '02') AND
            vgrec_gir_rh_fdt.dt_gain < TO_DATE(EXTRACT(YEAR FROM vgd_dt_exect) || '-04-01',
                                               'YYYY-MM-DD') THEN
            -- CHG226472 Début 2017-03-31
            --vgrec_gir_rh_fdt.aa_finnc := vgrec_perd_paie_varbl.aa_finnc -1;
            vgrec_gir_rh_fdt.aa_finnc := EXTRACT(YEAR FROM vgd_dt_exect) - 1;
            -- CHG226472 Fin
         
            p_log('18a - vgrec_gir_rh_fdt.aa_finnc=' || vgrec_gir_rh_fdt.aa_finnc,
                  vlv_nm_procd_fonct);
         ELSE
            vgrec_gir_rh_fdt.aa_finnc := vgrec_perd_paie_varbl.aa_finnc;
         
            p_log('18b - vgrec_gir_rh_fdt.aa_finnc=' || vgrec_gir_rh_fdt.aa_finnc,
                  vlv_nm_procd_fonct);
         END IF;
         -- INC00104143 Fin
         --
      END IF;
      --
      -- fin retouche 126
      --
      -- INC00018102 La date de début doit être >= date implantation
      --
      IF vgrec_gir_rh_fdt.dt_debut < cd_dt_prodc THEN
         --
         vgrec_gir_rh_fdt.dt_debut := cd_dt_prodc;
         --
      END IF;
      -- fin INC00018102
      --
      -- Retouche 202
      -- Valider l'utilisation de la compensation
      -- Quand une section est présente,
      -- c'est que l'employé a travaillé dans un autre classe d'emploi
      --
      IF vgrec_gir_rh_fdt.sectn IS NOT NULL THEN
         --
         -- On majore le taux horaire pour les gains ciblés.
         --
         vgv_id_afect := vgrec_gir_rh_fdt.id_afect;
         CASE vgrec_gir_rh_fdt.nm_fiche
            WHEN 'H760' THEN
               vgrec_gir_rh_fdt.tx_horr := TO_CHAR(ROUND(FND_NUMBER.CANONICAL_TO_NUMBER(vgrec_gir_rh_fdt.tx_horr)
                                                         -- On valide le gain pour la compensation.
                                                         * fn_valdr_utils_compn(pn_id_afect => vgrec_gir_rh_fdt.id_afect,
                                                                                pv_cd_gain  => vgrec_gir_rh_fdt.cd_gain,
                                                                                pd_dt_gain  => vgrec_gir_rh_fdt.dt_gain),
                                                         2));
            WHEN 'H620' THEN
               vgrec_gir_rh_fdt.tx_horr := fv_convr_nb_decml_carct(FND_NUMBER.CANONICAL_TO_NUMBER(vgrec_gir_rh_fdt.tx_horr) / 100
                                                                   -- On valide le gain pour la compensation.
                                                                   * fn_valdr_utils_compn(pn_id_afect => vgrec_gir_rh_fdt.id_afect,
                                                                                          pv_cd_gain  => vgrec_gir_rh_fdt.cd_gain,
                                                                                          pd_dt_gain  => vgrec_gir_rh_fdt.dt_gain));
            ELSE
               NULL;
         END CASE;
         --
      END IF;
      -- fin retouche 202
      --
      -- créer le gain dans GIR_RH_FDT
      --
      p_log('20 - vgrec_gir_rh_fdt.minst ' || vgrec_gir_rh_fdt.minst || ', vgrec_gir_rh_fdt.budgt => ' || vgrec_gir_rh_fdt.budgt ||
            ', vgrec_gir_rh_fdt.centr_respn => ' || vgrec_gir_rh_fdt.centr_respn,
            vlv_nm_procd_fonct);
      --
      INSERT INTO gir_rh_fdt
      VALUES vgrec_gir_rh_fdt
      RETURNING id_contr_fdt INTO pn_id_contr_fdt;
      --
      p_log('25 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_fdt || ', pb_in_inser => ' || 'TRUE',
            vlv_nm_procd_fonct);
      --
      -- Incrémente le nombre d'enregistrements lus et
      -- le nombre d'enregistrements insérés.
      --
      p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                 pb_in_inser => TRUE);
      --
      p_log('30 - Fin procédure. pn_id_contr_fdt -> ' || pn_id_contr_fdt,
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_gain_fdt
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('40 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_creer_gain_fdt est en erreur à l''étape ' || vgv_etape || ' pour l''employé ' || vgrec_persn.no_emplo);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80417',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_TRANS:' || vgrec_gir_rh_fdt.id_trans || ';ID_CONTR_FDT:' ||
                                              pn_id_contr_fdt || ';NO_DOCMN:' || vgrec_gir_rh_fdt.no_docmn || ';ID_AFECT:' ||
                                              vgrec_gir_rh_fdt.id_afect || ';ID_ENTRE_ELEMN:' ||
                                              NVL(vgrec_gir_rh_fdt.elemn_entry_id,
                                                  vgv_id_entre_elemn) || ';DT_GAIN:' ||
                                              TO_CHAR(vgrec_gir_rh_fdt.dt_gain,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_creer_gain_fdt',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         --
         IF vgrec_perd_paie_varbl.aa_finnc IS NOT NULL THEN
            RAISE vgexc_trait_h620;
         ELSE
            RAISE vgexc_trait_h760;
         END IF;
         --
   END p_creer_gain_fdt;

   --
   -- ============================================================================
   -- P_inser_absen_fdt_rejt:
   -- ============================================================================
   /****************************************************************************
   * But : Cette procédure permet de mettre à jour la table des absences et
   *       rejets des feuilles de temps.
   *****************************************************************************
   *
   *   Paramètres entrée    :
   *       - pv_cd_trans      : Code de la transaction rejetée
   *
   *   Paramètres de sortie :
   *       - N/D
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *   Michel Dessureault   2012-11-29  INC00016333 Ajouter paramètre pour utiliser
   *                                                la procédure avec les transactions H620.
   *   Michel Dessureault   2013-02-27  INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   *   Michel Dessureault   2013-03-04  Retouche 150 La colonne EREUR_MESG de la table gir_rh_absen_fdt_rejet est maintenat VARCHAR2(300).
   *************************************************************************/
   PROCEDURE p_inser_absen_fdt_rejt(pv_cd_trans IN VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_inser_absen_fdt_rejt';
      vln_index          PLS_INTEGER; -- index de la table PL/SQL.
      --
      vlv_id_afect       gir_rh_absen_fdt_rejet.id_afect%TYPE;
      vlv_id_entre_elemn gir_rh_absen_fdt_rejet.id_entre_elemn%TYPE;
      vlv_id_contr_fdt   gir_rh_absen_fdt_rejet.id_contr_fdt%TYPE;
   BEGIN
      p_log('10 - Début procédure. Id demande concurrente = ' || cn_id_demd_concr,
            vlv_nm_procd_fonct);
      p_log('15   --> pv_cd_trans=' || pv_cd_trans,
            vlv_nm_procd_fonct);
      --
      -- Insérer les éléments de paie rejetés
      --
      vln_index := vgtab_rejt.first;
      --
      <<rejets>>
      WHILE vln_index IS NOT NULL LOOP
         --
         -- inscrire les rejets dans la table gir_rh_absen_fdt_rejet
         --
         vlv_id_afect       := vgtab_rejt(vln_index).id_afect;
         vlv_id_entre_elemn := vgtab_rejt(vln_index).id_entre_elemn;
         vlv_id_contr_fdt   := vgtab_rejt(vln_index).id_contr_fdt;
         --
         INSERT INTO gir_rh_absen_fdt_rejet
            (dt_ereur,
             id_demnd_concr,
             cd_mesg_sagir,
             ereur_mesg,
             nm_procd,
             type_trans,
             id_afect,
             id_entre_elemn,
             -- INC00017359
             id_contr_fdt)
         VALUES
            (vgd_dt_exect,
             cn_id_demd_concr,
             vgtab_rejt(vln_index).cd_ereur,
             /* Retouche 150
             --SUBSTR(vgTAB_rejt(vln_index).de_ereur,1,100),*/
             vgtab_rejt(vln_index).de_ereur,
             vgtab_rejt(vln_index).nm_procd,
             -- INC00016333
             --'H760'
             pv_cd_trans,
             vgtab_rejt(vln_index).id_afect,
             vgtab_rejt(vln_index).id_entre_elemn,
             -- INC00017359
             vgtab_rejt(vln_index).id_contr_fdt);
         --
         vln_index := vgtab_rejt.NEXT(vln_index);
         --
      END LOOP rejets;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_inser_absen_fdt_rejt
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('30 - Erreur procédure :' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_inser_absen_fdt_rejt est en erreur pour l''employé ' || vgrec_persn.no_emplo);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80431',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vlv_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vlv_id_entre_elemn || ';ID_CONTR_FDT:' || vlv_id_contr_fdt || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_inser_absen_fdt_rejt',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         -- INC00016333
         IF pv_cd_trans = 'H760' THEN
            RAISE vgexc_trait_h760;
         ELSE
            RAISE vgexc_trait_h620;
         END IF;
         --
   END p_inser_absen_fdt_rejt;

   --
   -- ============================================================================
   -- P_maj_dernr_exect:
   -- ============================================================================
   /****************************************************************************
   * But : Cette procédure permet de mettre à jour la table de dernière
   *       exécution et exécute le COMMIT pour valider toutes les transactions.
   *****************************************************************************
   *
   * Paramètres entrée    :
   *   - pv_statu  : Statut de la dernière exécution de l'adaptation
   *   - pv_trait  : Traitement exécuté (H760 ou H620)
   *   - pv_ereur  : Message d'erreur s'il y a lieu
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   *
   *************************************************************************/
   PROCEDURE p_maj_dernr_exect(pv_statu    IN VARCHAR2,
                               pv_trait    IN VARCHAR2,
                               pv_ereur    IN VARCHAR2 DEFAULT NULL,
                               pn_id_demnd IN NUMBER) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_maj_dernr_exect';
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_statu=' || pv_statu || '  --> pv_trait=' || pv_trait || '  --> pv_ereur=' || pv_ereur,
            vlv_nm_procd_fonct);
      --
      IF pv_ereur IS NOT NULL THEN
         --
         p_log('Erreur: ' || SUBSTR(pv_ereur,
                                    1,
                                    100),
               vlv_nm_procd_fonct);
         --
         -- Vider les compteurs car rien n'est traité suite à l'erreur
         --
         p_log('20 - Appel de la procédure P_initl_cp',
               vlv_nm_procd_fonct);
         --
         p_initl_cp;
         --
      END IF;
      --
      INSERT INTO gir_rh_dt_dernr_exect
         (dt_dernr_exect,
          cd_trans,
          statu_dernr_exect,
          cm)
      VALUES
         (vgd_dt_exect,
          SUBSTR(pv_trait,
                 1,
                 4),
          SUBSTR(pv_statu,
                 1,
                 30),
          pv_ereur);
      --
      p_log('Avant COMMIT ',
            vlv_nm_procd_fonct);
      --
      -- Ici on valide toutes les transactions
      --
      COMMIT;
   
      --
      p_log('30 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_maj_dernr_exect
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Toutes les transactions doivent être annulées
         --
         ROLLBACK;
         --
         p_log('40 - Erreur procédure : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_maj_dernr_exect est en erreur pour le traitement ' || pv_trait || '.');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80426',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';',
                        pn_id_demnd        => pn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_jeu_elemn',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE_APPLICATION_ERROR(-20003,
                                 'PROBLEME DE SYSTEME. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
         --
   END p_maj_dernr_exect;

   --
   -- ============================================================================
   -- P_obten_jeu_elemn:
   -- ============================================================================
   /****************************************************************************
   * But : Cette procédure permet d'obtenir la liste des gains pour le jeu
   *       d'éléments passé en paramètre.
   *****************************************************************************
   *
   *   Paramètres entrée    :
   *       - pv_nm_jeu_elemn  : Nom du jeu d'éléments
   *       - pv_dt_exect      : Date de la dernière exécution réussie de l'adaptation
   *
   *   Paramètres de sortie :
   *       - pTAB_jeu_elemn   : Table des gains déclaratoires
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *   Frédéric Aubin       2014-02-22  Performance : Faire gather stats pour global temporary après les insert de
   *                                    gir_rh_elemn_h620_tempr, gir_rh_afect_tempr, gir_rh_suplm_h620_tempr,
   *                                    gir_rh_gains_tempr, gir_rh_h620_pc_tx_tempr
   *
   *************************************************************************/
   PROCEDURE p_obten_jeu_elemn(pv_nm_jeu_elemn IN VARCHAR2,
                               pd_dt_exect     IN DATE) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_jeu_elemn';
      vltab_jeu_elemn    tab_jeu_elemn;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ---------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir le jeu d'éléments
      ---------------------------------------------------------------
      CURSOR CUR_jeu_elemn IS
         SELECT mje.id_type_elemn,
                mje.nm_elemn,
                'A' || (SELECT pet.attribute1
                          FROM pay_element_types_f pet
                         WHERE pet.element_type_id = mje.id_type_elemn
                           AND pet.effective_start_date = mje.dt_debut_efect
                           AND pet.effective_end_date = mje.dt_fin_efect) cd_sagip,
                DECODE(UPPER(SUBSTR(mje.nm_elemn,
                                    -2,
                                    2)),
                       ' C',
                       'C',
                       ' P',
                       'P',
                       ' R',
                       'R',
                       NULL) md_compn
           FROM xxgir_rh_membr_jeu_elemn_v mje
          WHERE mje.nm_jeu_elemn = pv_nm_jeu_elemn
            AND TRUNC(pd_dt_exect) BETWEEN mje.dt_debut_efect AND mje.dt_fin_efect;
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_nm_jeu_elemn=' || pv_nm_jeu_elemn || '  --> pd_dt_exect=' || pd_dt_exect,
            vlv_nm_procd_fonct);
      --
      -- Initialiser la liste
      --
      vlTAB_jeu_elemn.DELETE;
      --
      OPEN CUR_jeu_elemn;
      --
      FETCH CUR_jeu_elemn BULK COLLECT
         INTO vltab_jeu_elemn;
      --
      CLOSE CUR_jeu_elemn;
      --
      IF vltab_jeu_elemn.count > 0 THEN
         --
         FORALL vln_cp IN INDICES OF vltab_jeu_elemn
            INSERT INTO xxgir_rh_elemn_h620_tempr
               (id_type_elemn,
                nm_elemn,
                cd_sagip,
                va_entre_elemn,
                nm_liste)
            VALUES
               (vltab_jeu_elemn(vln_cp).id_type_elemn,
                vltab_jeu_elemn(vln_cp).nm_elemn,
                vltab_jeu_elemn(vln_cp).cd_sagip,
                vltab_jeu_elemn(vln_cp).md_compn,
                'jeu_H760');
         --
      END IF;
      -- F.Aubin 2014-02-22 Performance : faire gather stats.
      /*DBMS_STATS.gather_table_stats (ownname            => 'XXGIR',
      tabname            => 'GIR_RH_ELEMN_H620_TEMPR', -- le nom de ta table
      cascade            => TRUE,
      estimate_percent   => 10);*/
      --
      --
      vlTAB_jeu_elemn.DELETE;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_jeu_elemn.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         IF CUR_jeu_elemn%ISOPEN THEN
            CLOSE CUR_jeu_elemn;
         END IF;
         --
         vlTAB_jeu_elemn.DELETE;
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_jeu_elemn pour le jeu d''éléments ' || pv_nm_jeu_elemn);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80425',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';DT_GAIN:' ||
                                              TO_CHAR(pd_dt_exect,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_jeu_elemn',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
      --
      --
   END p_obten_jeu_elemn;

   --
   -- ============================================================================
   -- P_obten_liste_afect:
   -- ============================================================================
   /****************************************************************************
   * But : Cette procédure permet d'obtenir la lise des affections effectives
   *       d'un type de paie pour la période courante ou antérieures.
   *****************************************************************************
   *
   *   Paramètres entrée    :
   *       - pv_id_type_paie   : Type de paie
   *                                1. Standard
   *                                2. Variable
   *                                3. Décentralisé
   *       - pv_perd_fin       : Date de début de la période de paie
   *
   *   Paramètres de sortie :
   *       - pTAB_afect        : Table des affectations
   *
   *
   *   Modifications :
   *   Par                  Date        Description
   *   ------------------   ----------  -------------
   *   Michel Dessureault   2012-09-12  Création
   *   Michel Dessureault   2012-10-30  INC00016215  Ajouter la table de suivi au SELECT
   *                                                 pour diminuer la liste d'affectation à traiter
   *   Michel Dessureault   2012-11-13  INC00016215  Utiliser xxgir_rh_elemn_h620_tempr
   *                                                 pour améliorer la performance et la clarté
   *   Michel Dessureault   2013-02-19  INC00017310  Ajouter les dates de début et fin de l'affectation
   *   Michel Dessureault   2013-03-22  INC00017895  Problème de performance.
   *   Frédéric Aubin       2014-02-22  Performance : Faire gather stats pour global temporary après les insert de
   *                                    gir_rh_elemn_h620_tempr, gir_rh_afect_tempr, gir_rh_suplm_h620_tempr,
   *                                    gir_rh_gains_tempr, gir_rh_h620_pc_tx_tempr
   *   Edgar Doiron         2016-07-08  DDC 209235 Split pour rouler en paralele
   *************************************************************************/
   /* INC00017895
   PROCEDURE P_obten_liste_afect ( pv_id_type_paie IN VARCHAR2
                                  ,pd_perd_fin     IN DATE
                                  ,pTAB_afect      OUT NOCOPY TAB_liste_afect
                                 ) IS
   */
   PROCEDURE p_obten_liste_afect(pv_id_type_paie IN VARCHAR2,
                                 pd_perd_fin     IN DATE,
                                 -- DDC 209235
                                 pn_person_id_debut IN NUMBER,
                                 pn_person_id_fin   IN NUMBER) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_liste_afect';
      -- INC00017895
      vltab_afect tab_liste_afect; -- Table des affectations.
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ---------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir la liste des
      -- affectations de paie effectives à la période de paie courante
      -- ou aux périodes de paie antérieures à partir de la date
      -- d'implantation qui ont un suivi non traité en création.
      ---------------------------------------------------------------
      CURSOR CUR_liste_afect IS
         SELECT rse.assignment_id         id_afect,
                paaf.effective_start_date dt_debut,
                paaf.effective_end_date   dt_fin,
                paaf.person_id            id_persn
           FROM per_all_assignments_f         paaf,
                gir_rh_suivi_entre_elemn_paie rse -- INC-89949
          WHERE paaf.payroll_id = vgn_id_paie_stand
            AND paaf.effective_start_date <= TRUNC(pd_perd_fin)
               --INC69571 2014-06-03 Rajouter un =
            AND paaf.effective_end_date >= cd_dt_prodc
            AND rse.assignment_id = paaf.assignment_id
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'I'
            AND rse.element_type_id IN (SELECT reht.id_type_elemn
                                          FROM xxgir_rh_elemn_h620_tempr reht
                                         WHERE reht.nm_liste = 'jeu_H760'
                                           AND reht.id_type_elemn = rse.element_type_id)
               --DDC 209235
            AND paaf.person_id BETWEEN pn_person_id_debut AND pn_person_id_fin
          GROUP BY rse.assignment_id,
                   paaf.effective_start_date,
                   paaf.effective_end_date,
                   paaf.person_id;
      /* INC00017895
         SELECT rse.assignment_id         id_afect
               -- INC00017310
               ,paaf.effective_start_date dt_debut
               ,paaf.effective_end_date   dt_fin
               -- INC00017310 fin
         FROM   pay_all_payrolls_f    papf
               ,per_all_assignments_f paaf
               ,gir_rh_suivi_entre_elemn_paie rse -- INC-89949
         WHERE  papf.attribute1             = pv_id_type_paie
         AND    paaf.payroll_id             = papf.payroll_id
         AND    paaf.effective_start_date BETWEEN papf.effective_start_date
                                              AND papf.effective_end_date
         AND    paaf.effective_start_date  <= TRUNC(pd_perd_fin)
         AND    paaf.effective_end_date     > cd_dt_prodc
         AND    rse.assignment_id           = paaf.assignment_id
         AND    rse.in_trait                = 'N'
         AND    rse.trans_type              = 'I'
         AND    rse.element_type_id IN (
                    SELECT reht.id_type_elemn
                    FROM   xxgir_rh_elemn_h620_tempr reht
                    WHERE  reht.nm_liste = 'jeu_H760'
                    AND    reht.id_type_elemn = rse.element_type_id)
         GROUP BY rse.assignment_id
                 -- INC00017310
                 ,paaf.effective_start_date
                 ,paaf.effective_end_date
                 -- INC00017310 fin
         ORDER BY rse.assignment_id;
      */
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_id_type_paie=' || pv_id_type_paie || '  --> pd_perd_fin=' || pd_perd_fin,
            vlv_nm_procd_fonct);
      --
      -- Initialiser la liste
      /* INC00017895
      pTAB_afect.DELETE;*/
      --
      -- Remplir la liste
      --
      OPEN CUR_liste_afect;
      --
      /* INC00017895
      FETCH CUR_liste_afect BULK COLLECT INTO pTAB_afect;*/
      FETCH CUR_liste_afect BULK COLLECT
         INTO vltab_afect;
      --
      CLOSE CUR_liste_afect;
   
      p_log('20 - (I) nb dans xxgir_rh_afect_tempr = ' || vltab_afect.count,
            vlv_nm_procd_fonct);
      --
      --INC00017895
      FORALL vln_cp IN INDICES OF vltab_afect
         INSERT INTO xxgir_rh_afect_tempr
         VALUES
            (vltab_afect(vln_cp).id_afect,
             vltab_afect(vln_cp).id_persn,
             vltab_afect(vln_cp).dt_debut,
             vltab_afect(vln_cp).dt_fin,
             pv_id_type_paie);
      --
      -- F.Aubin 2014-02-22 Performance : faire gather stats.
      /*DBMS_STATS.gather_table_stats (ownname            => 'XXGIR',
      tabname            => 'GIR_RH_AFECT_TEMPR', -- le nom de ta table
      cascade            => TRUE,
      estimate_percent   => 10);*/
      --
      vlTAB_afect.DELETE;
   
      -- fin
      --
      p_log('25 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_liste_afect.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         IF CUR_liste_afect%ISOPEN THEN
            CLOSE CUR_liste_afect;
         END IF;
         --
         /* INC00017895
         pTAB_afect.DELETE;*/
         vlTAB_afect.DELETE;
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_liste_afect pour le type de paie ' || pv_id_type_paie);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80428',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';DT_GAIN:' ||
                                              TO_CHAR(pd_perd_fin,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_liste_afect',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         RAISE vgexc_mesg_ereur;
         --
   END p_obten_liste_afect;

   --
   -- ============================================================================
   -- P_seprr_gains_tempr:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de séparer en deux transactions H760 lorsque
   *       les heures sont inscrites sur 2 jours pour une même entrée dans la feuille de temps.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pn_id_afect       : Identifiant de l'affectation de l'employé
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2013-01-29  Création     Retouche 118.
   * Michel Dessureault   2013-02-27  INC00017310  Date du gain doit être à l'intérieur de l'effectivité de l'affectation
   * Michel Dessureault   2013-02-28  INC00017475  Le gain doit avoir la bonne période de paie courante.
   * Michel Dessureault   2013-03-22  INC00017895  Problème de performance.
   *
   *************************************************************************/
   /* INC00017895
   PROCEDURE P_seprr_gains_tempr(pn_id_afect IN NUMBER
                                 -- INC00017310
                                ,pd_dt_debut_afect IN DATE
                                ,pd_dt_fin_afect   IN DATE) IS
   */
   PROCEDURE p_seprr_gains_tempr(pn_assignment_id   IN NUMBER,
                                 pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                 pv_token_value     OUT NOCOPY VARCHAR2,
                                 pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                 pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_seprr_gains_tempr';
      --
      --DDC 209235
      vlv_nm_procd       VARCHAR2(100) := 'p_seprr_gains_tempr';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      vld_dt_gain        DATE;
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- On ajoute la partie correspondant aux heures travaillées après minuit
      -- On calcule le nombre d'heures travaillées après minuit.
      --
      p_output_table_tempr;
      INSERT INTO xxgir_rh_gains_tempr
         (id_suivi_elemn,
          id_afect,
          id_gain,
          dt_gain,
          id_type_gain,
          cd_gain_sagip,
          id_va_entre,
          va_entre,
          dt_debut,
          hh_debut,
          dt_fin,
          hh_fin,
          nb_hh_convr,
          perd_paie_debut,
          perd_paie_fin,
          aa_finnc,
          md_compn,
          nm_entre,
          id_bloc_temps,
          no_versn_objet,
          cd_elemn,
          id_corps_emplo)
         SELECT rgt.id_suivi_elemn,
                rgt.id_afect,
                rgt.id_gain,
                (rgt.dt_gain + 1) dt_gain,
                rgt.id_type_gain,
                rgt.cd_gain_sagip,
                rgt.id_va_entre,
                DECODE(rgt.nm_entre,
                       cv_nm_hh,
                       CASE
                          WHEN FND_NUMBER.CANONICAL_TO_NUMBER(rgt.va_entre) < 0 THEN
                           TO_CHAR(ROUND((0 - FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                    1,
                                                                                    2)) -
                                         FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                3,
                                                                                2)) / 60),
                                         3))
                          ELSE
                           TO_CHAR(ROUND((FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                1,
                                                                                2)) +
                                         FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                3,
                                                                                2)) / 60),
                                         3))
                       END,
                       cv_nm_dt_efect,
                       fnd_date.date_to_canonical(TRUNC(rgt.dt_fin)),
                       rgt.va_entre) va_entre,
                TRUNC(rgt.dt_fin) dt_debut,
                '0000' hh_debut,
                rgt.dt_fin,
                rgt.hh_fin,
                rgt.nb_hh_convr
                /* INC00017475 Vérifier dans quelle période est la nouvelle date de gain
                ,rgt.perd_paie_debut
                ,rgt.perd_paie_fin*/,
                (SELECT lp.dt_debut
                   FROM (SELECT ptp.start_date dt_debut,
                                ptp.end_date   dt_fin
                           FROM per_time_periods ptp,
                                gl_periods       gp
                          WHERE ptp.payroll_id = vgn_id_paie_stand
                            AND UPPER(gp.period_set_name) = 'GQ 31 MARS'
                            AND ptp.end_date BETWEEN gp.start_date AND gp.end_date) lp
                  WHERE TRUNC(rgt.dt_fin) BETWEEN lp.dt_debut AND lp.dt_fin) perd_paie_debut,
                (SELECT lp.dt_fin
                   FROM (SELECT ptp.start_date dt_debut,
                                ptp.end_date   dt_fin
                           FROM per_time_periods ptp,
                                gl_periods       gp
                          WHERE ptp.payroll_id = vgn_id_paie_stand
                            AND UPPER(gp.period_set_name) = 'GQ 31 MARS'
                            AND ptp.end_date BETWEEN gp.start_date AND gp.end_date) lp
                  WHERE TRUNC(rgt.dt_fin) BETWEEN lp.dt_debut AND lp.dt_fin) perd_paie_fin
                /* INC00017475 Prendre l'année financière en date d'exécution
                ,(SELECT lp.aa_finnc
                  FROM   (SELECT ptp.start_date          dt_debut
                                ,ptp.end_date            dt_fin
                                ,TO_CHAR(gp.period_year) aa_finnc
                          FROM   per_time_periods     ptp
                                ,gl_periods           gp
                          WHERE  ptp.payroll_id  = vgn_id_paie_stand
                          AND    UPPER(gp.period_set_name) = 'GQ 31 MARS'
                          AND    ptp.end_date BETWEEN gp.start_date
                                              AND     gp.end_date) lp
                  WHERE  TRUNC(rgt.dt_fin) BETWEEN lp.dt_debut
                                           AND     lp.dt_fin) aa_finnc*/,
                rgt.aa_finnc,
                rgt.md_compn,
                rgt.nm_entre,
                rgt.id_bloc_temps,
                rgt.no_versn_objet,
                rgt.cd_elemn,
                rgt.id_corps_emplo
           FROM xxgir_rh_gains_tempr rgt
         /* INC00017895
         WHERE  rgt.id_afect = pn_id_afect
         --INC00017310
         AND    rgt.dt_gain  BETWEEN pd_dt_debut_afect
                             AND     pd_dt_fin_afect
         AND    rgt.hh_fin   IS NOT NULL
         */
          WHERE rgt.hh_fin IS NOT NULL
            AND rgt.hh_fin <> '0000'
            AND rgt.hh_fin <= rgt.hh_debut
               --DDC 209235 par employé (=assignment_id)
            AND rgt.id_afect = pn_assignment_id;
      --
      --
      -- On modifie les heures de fin pour terminer à minuit.
      -- On calcule le nombre d'heures travaillées jusqu'à minuit.
      --
      UPDATE xxgir_rh_gains_tempr rgt
         SET rgt.dt_fin   = TRUNC(rgt.dt_fin),
             rgt.hh_fin   = '0000',
             rgt.va_entre = DECODE(rgt.nm_entre,
                                   cv_nm_hh,
                                   CASE
                                      WHEN FND_NUMBER.CANONICAL_TO_NUMBER(rgt.va_entre) < 0 THEN
                                       TO_CHAR(ROUND((FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                            1,
                                                                                            2)) +
                                                     FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                            3,
                                                                                            2)) / 60 + FND_NUMBER.CANONICAL_TO_NUMBER(rgt.va_entre)),
                                                     3))
                                      ELSE
                                       TO_CHAR(ROUND((FND_NUMBER.CANONICAL_TO_NUMBER(rgt.va_entre) -
                                                     FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                            1,
                                                                                            2)) -
                                                     FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(rgt.hh_fin,
                                                                                            3,
                                                                                            2)) / 60),
                                                     3))
                                   END,
                                   cv_nm_dt_efect,
                                   rgt.va_entre,
                                   rgt.va_entre)
      /* INC00017895
      WHERE rgt.id_afect = pn_id_afect
      --INC00017310
      AND   rgt.dt_gain  BETWEEN pd_dt_debut_afect
                         AND     pd_dt_fin_afect
      AND   rgt.hh_fin  IS NOT NULL
      */
       WHERE rgt.hh_fin IS NOT NULL
         AND rgt.hh_fin <> '0000'
         AND rgt.hh_fin <= rgt.hh_debut
            --DDC 209235 par employé (=assignment_id)
         AND rgt.id_afect = pn_assignment_id;
      --
      p_output_table_tempr;
      p_log('20 - Fin procédure. ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_seprr_gains_tempr
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /* INC00017895
         fnd_file.put_line(fnd_file.log,'La procédure ,' || vlv_nm_procd_fonct || ' est en erreur pour l''employé '
                                        || vgREC_persn.no_emplo);*/
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80397';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_seprr_gains_tempr;

   --
   -- ============================================================================
   -- P_creer_trans_sgi_h760:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de créer les transactions pour le SGI.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2012-10-30  INC00016215 Justifier à droite ou gauche par des zéros
   * Michel Dessureault   2013-02-19  INC00017310 Date du gain doit être plus petite ou égale à la date d'exécution
   *                                              et Inscrire le no_docmn dans les tables GIR_RH_FDT et GIR_TRANS_H760.
   * Michel Dessureault   2013-02-28  INC00017539 Date de transaction de GIR_TRANS_H760 à infini lorsque rejeté et mis à la date exécution lorsque transmis
   * Michel Dessureault   2013-03-12  INC00017714 Quand heure de fin est 0000, mettre 2400.
   * Geneviève Bélanger   2016-08-23  Ne plus mettre à jour l'année financière de la table FDT, pour garder l'information originale
   *************************************************************************/
   PROCEDURE p_creer_trans_sgi_h760 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_sgi_h760';
      vln_id_lot         gir_wm_contr.id_lot%TYPE; -- lot identifié pour la sortie
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE; -- numéro du document
      vlv_carte          gir_srhhrth760.va_carte%TYPE; -- Valeurs inscrites dans la carte
      vln_nb_enreg       PLS_INTEGER; -- Nombre d'enregistrements insérés dans SRHHRTH760
      vlv_blanc          VARCHAR2(1) := ' '; -- Pour les champs toujours à blanc
      vlv_cd_gain        gir_rh_fdt.cd_gain%TYPE; -- Code du gain
      -- INC00017310
      vlvar_liste_id_760 sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de type NUMBER pour les identifiants de H760 annulées.
      vln_id_trans       NUMBER(15);
      vln_id_afect       NUMBER(15);
      vld_dt_gain        gir_trans_h760.dt_gain%TYPE;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de sélectionner les données
      -- à transmettre au SGI.
      ----------------------------------------------------------------------
      CURSOR CUR_h760(pv_nouvl_aa IN VARCHAR2) IS
         SELECT h760.id_trans_h760,
                h760.statu_trans,
                h760.in_type_carte,
                /*DDC 206235 - INC86765
                h760.aa_finnc,
                */
                NVL(pv_nouvl_aa,
                    h760.aa_finnc) aa_finnc,
                /*FIN DDC 206235 - INC86765 */
                h760.actio_montr,
                h760.budgt,
                h760.cd_actio,
                h760.cd_gain,
                h760.cd_trans,
                h760.centr_respn,
                h760.clas,
                h760.clasm,
                h760.dt_debut,
                h760.dt_fin,
                h760.dt_gain,
                h760.hh_debut
                --INC00017714
               ,
                DECODE(h760.hh_fin,
                       '0000',
                       '2400',
                       h760.hh_fin) hh_fin,
                h760.hh_payer,
                h760.md_compn,
                h760.minst,
                h760.nas,
                h760.nb_hh,
                h760.nb_perd_repas,
                h760.nm_valdr,
                h760.no_docmn,
                h760.raisn_1,
                h760.raisn_2,
                h760.raisn_3,
                h760.sectn,
                h760.tx_horr,
                h760.de_carte_a,
                h760.id_afect
           FROM gir_trans_h760 h760
          WHERE h760.cd_trans = 'H760'
            AND h760.statu_trans IN (cv_cd_statu_sagip_non_trans,
                                     cv_cd_statu_sagip_rejt)
               -- INC00017310
               --AND    h760.dt_trans <= TRUNC(vgd_dt_exect)
            AND FND_DATE.CANONICAL_TO_DATE(h760.dt_gain) <= TRUNC(vgd_dt_exect)
            AND NOT
                 ((SUBSTR(h760.dt_gain,
                          5,
                          2) IN ('04',
                                   '05')) AND (vgrec_perd_paie.no_perd IN ('01',
                                                                            '02'))
                 --INC 85349
                 AND SUBSTR(h760.dt_gain,
                             1,
                             4) = EXTRACT(YEAR FROM vgd_dt_exect))
            AND h760.in_trans_anul = 'N';
      --
      --INC00017310
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de sélectionner les enregistrements
      -- à rejeter.
      ----------------------------------------------------------------------
      CURSOR CUR_h760_non_trans IS
         SELECT h760.id_trans_h760
           FROM gir_trans_h760 h760
          WHERE h760.cd_trans = 'H760'
            AND h760.statu_trans = cv_cd_statu_sagip_non_trans
            AND ((FND_DATE.CANONICAL_TO_DATE(h760.dt_gain) > TRUNC(vgd_dt_exect)) OR
                ((SUBSTR(h760.dt_gain,
                          5,
                          2) IN ('04',
                                    '05')) AND (vgrec_perd_paie.no_perd IN ('01',
                                                                              '02'))
                --INC 85349
                AND SUBSTR(h760.dt_gain,
                             1,
                             4) = EXTRACT(YEAR FROM vgd_dt_exect)))
               
               --
            AND h760.in_trans_anul = 'N';
      --
      --DDC 206235 - INC86765
      vln_no_perd  NUMBER;
      vlv_nouvl_aa NUMBER;
   
   BEGIN
   
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      -- Obtenir le prochain numéro de la séquence
      --
      vln_id_lot := gir_id_lot_s.nextval; -- (Release 11)
      --
   
      --DDC 206235 - INC86765
      IF TO_NUMBER(vgrec_perd_paie.no_perd) IN (1,
                                                2) THEN
         vlv_nouvl_aa := NULL;
      ELSE
         vlv_nouvl_aa := vgrec_perd_paie.aa_finnc;
      END IF;
      -- FIN DDC 206235 - INC86765
   
      -- Étape 1. page 78 du MD50
      --
      -- Créer un enregistrement dans la table de contrôle
      --
      INSERT INTO gir_wm_contr
         (id_lot,
          cd_entit,
          cd_docmn,
          nm_fichr,
          dh_recpt_inter_convr_wm,
          dh_inter_convr_emit_wm,
          dh_debut_concr_progr_pgi,
          dh_fin_concr_progr_pgi,
          cd_statu,
          nb_enreg_inser,
          nb_enreg_rejet,
          nb_enreg_trait,
          nm_destn_1,
          nm_destn_2,
          ind_reprs,
          autre_parmt)
      VALUES
         (vln_id_lot,
          cv_cd_entit,
          cv_cd_docmn_sgi_h760,
          cv_cd_entit || cv_cd_docmn_sgi_h760 || TO_CHAR(vgd_dt_exect,
                                                         'YYYYMMDDHH24MISS') || '.txt',
          NULL,
          NULL,
          vgd_dt_exect,
          GREATEST(SYSDATE,
                   vgd_dt_exect),
          'TS',
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL);
      --
      IF SQL%ROWCOUNT = 0 THEN
         --
         -- Ne devrait jamais arriver mais ...
         --
         p_log('20 - Enregistrement Contrôle inaccessible',
               vlv_nm_procd_fonct);
         --
         vgv_texte_ereur := 'La table de contrôle n''est pas disponible.';
         --
         RAISE vgexc_trait_h760;
         --
      END IF;
      --
      vln_nb_enreg := 0;
      --
      -- Étape 2. page 78 du MD50
      --
      <<h760>>
      FOR REC_CUR_h760 IN CUR_h760(vlv_nouvl_aa) /*DDC 206235 - INC86765 */
       LOOP
         --
         -- Si une transaction est rejetée, il ne faut pas l'envoyer avec le même numéro de document
         --
         vln_id_trans := REC_CUR_h760.id_trans_h760;
         vld_dt_gain  := REC_CUR_h760.dt_gain;
         vln_id_afect := REC_CUR_h760.id_afect;
         --
         IF REC_CUR_h760.statu_trans = cv_cd_statu_sagip_rejt THEN
            --
            p_log('30 - Appel de xxgir_rh_23000_trans_docmn.Fn_obten_no_docmn. ' || 'pv_no_docmn => ' || REC_CUR_h760.minst,
                  vlv_nm_procd_fonct);
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => REC_CUR_h760.minst);
            --
         ELSE
            --
            vlv_no_docmn := REC_CUR_h760.no_docmn;
            --
         END IF;
         --
         -- Carte A toujours présente                                   -- Position
         --
         vlv_carte := LPAD(vlv_no_docmn,
                           8,
                           '0') -- 1-8
                      || REC_CUR_h760.de_carte_a -- 9-9
                      || LPAD(REC_CUR_h760.cd_trans,
                              4,
                              ' ') -- 10-13
                      || LPAD(NVL(REC_CUR_h760.nas,
                                  '0'),
                              9,
                              '0') -- 14-22
                      || RPAD(NVL(REC_CUR_h760.nm_valdr,
                                  ' '),
                              7,
                              ' ') -- 23-29
                      || RPAD(NVL(REC_CUR_h760.cd_actio,
                                  ' '),
                              1,
                              ' ') -- 30-30
                      || RPAD(NVL(REC_CUR_h760.minst,
                                  '000'),
                              3,
                              ' ') -- 31-33
                      || RPAD(NVL(REC_CUR_h760.budgt,
                                  ' '),
                              7,
                              ' ') -- 34-40
                      || RPAD(NVL(REC_CUR_h760.centr_respn,
                                  ' '),
                              4,
                              ' ') -- 41-44
                      || LPAD(NVL(REC_CUR_h760.aa_finnc,
                                  ' '),
                              4,
                              ' ') -- 45-48
                      || vlv_blanc; -- 49-49 REC_CUR_h760.actio_montr
         --
         -- créer la carte
         --
         INSERT INTO gir_srhhrth760
            (id_lot,
             cd_entit,
             cd_docmn,
             no_docmn,
             de_carte,
             cd_trans,
             nas,
             nm_valdr,
             va_carte)
         VALUES
            (vln_id_lot,
             cv_cd_entit,
             cv_cd_docmn_sgi_h760,
             vlv_no_docmn,
             REC_CUR_h760.de_carte_a,
             REC_CUR_h760.cd_trans,
             REC_CUR_h760.nas,
             REC_CUR_h760.nm_valdr,
             vlv_carte);
         --
         IF SQL%ROWCOUNT > 0 THEN
            --
            -- Comptabiliser le nombre d'enregistrements seulement avec la carte A
            --
            vln_nb_enreg := vln_nb_enreg + 1;
            --
         END IF;
         --
         -- Remplir la carte B ou O
         --
         CASE REC_CUR_h760.in_type_carte -- Position
            WHEN 'B' THEN
               vlv_carte := LPAD(vlv_no_docmn,
                                 8,
                                 '0') -- 1-8
                            || 'B' -- 9-9
                            || LPAD(NVL(REC_CUR_h760.cd_gain,
                                        ' '),
                                    4,
                                    ' ') -- 10-13
                            || LPAD(NVL(REC_CUR_h760.dt_gain,
                                        ' '),
                                    8,
                                    ' ') -- 14-21
                            || RPAD(NVL(REC_CUR_h760.hh_debut,
                                        ' '),
                                    4,
                                    ' ') -- 22-25
                            || RPAD(NVL(REC_CUR_h760.hh_fin,
                                        ' '),
                                    4,
                                    ' ') -- 26-29
                            || RPAD(vlv_blanc,
                                    3,
                                    ' ') -- 30-32 non utilisé dans B
                            || LPAD(NVL(REC_CUR_h760.nb_hh,
                                        ' '),
                                    4,
                                    ' ') -- 33-36
                            || LPAD(NVL(REC_CUR_h760.md_compn,
                                        ' '),
                                    1,
                                    ' ') -- 37-37
                           /*INC69539 correction tx_horr, enlever Fv_convr_nb_decml_carct 2014-06-03*/
                            || LPAD(NVL(REC_CUR_h760.tx_horr,
                                        '     '),
                                    5,
                                    '0') -- 38-42
                            || LPAD(NVL(REC_CUR_h760.sectn,
                                        ' '),
                                    3,
                                    ' ') -- 43-45
                            || LPAD(NVL(REC_CUR_h760.clas,
                                        ' '),
                                    2,
                                    ' ') -- 46-47
                            || LPAD(NVL(REC_CUR_h760.nb_perd_repas,
                                        '  '),
                                    2,
                                    '0') -- 48-49
                            || RPAD(NVL(REC_CUR_h760.raisn_1,
                                        ' '),
                                    3,
                                    ' ') -- 50-52
                            || RPAD(NVL(REC_CUR_h760.raisn_2,
                                        ' '),
                                    6,
                                    ' ') -- 53-58
                            || RPAD(NVL(REC_CUR_h760.raisn_3,
                                        ' '),
                                    6,
                                    ' '); -- 59-64
            WHEN 'O' THEN
               --
               -- Ne garder que le code de gain qui est A029
               --
               vlv_cd_gain := REC_CUR_h760.cd_gain;
               --
               IF vlv_cd_gain <> 'A029' THEN
                  vlv_cd_gain := ' ';
               END IF;
               --
               vlv_carte := LPAD(vlv_no_docmn,
                                 8,
                                 '0') -- 1-8
                            || 'O' -- 9-9
                            || LPAD(NVL(vlv_cd_gain,
                                        ' '),
                                    4,
                                    ' ') -- 10-13
                            || RPAD(vlv_blanc,
                                    8,
                                    ' ') --REC_CUR_h760.dt_debut         -- 14-21
                            || RPAD(vlv_blanc,
                                    4,
                                    ' ') --REC_CUR_h760.hh_debut         -- 22-25
                            || RPAD(vlv_blanc,
                                    8,
                                    ' ') --REC_CUR_h760.dt_fin           -- 26-33
                            || RPAD(vlv_blanc,
                                    4,
                                    ' ') --REC_CUR_h760.hh_fin           -- 34-37
                            || RPAD(vlv_blanc,
                                    5,
                                    ' ') --REC_CUR_h760.tx_horr          -- 38-42
                            || RPAD(vlv_blanc,
                                    7,
                                    ' ') --REC_CUR_h760.clasm            -- 43-49
                            || LPAD(NVL(REC_CUR_h760.hh_payer,
                                        '     '),
                                    5,
                                    '0'); -- 50-54
            ELSE
               vlv_carte := NULL;
         END CASE;
         IF REC_CUR_h760.in_type_carte IN ('B',
                                           'O') THEN
            --
            INSERT INTO gir_srhhrth760
               (id_lot,
                cd_entit,
                cd_docmn,
                no_docmn,
                de_carte,
                cd_trans,
                nas,
                nm_valdr,
                va_carte)
            VALUES
               (vln_id_lot,
                '7010',
                cv_cd_docmn_sgi_h760,
                vlv_no_docmn,
                REC_CUR_h760.in_type_carte,
                REC_CUR_h760.cd_trans,
                REC_CUR_h760.nas,
                REC_CUR_h760.nm_valdr,
                vlv_carte);
            --
         END IF;
         --
         -- Mise à jour de gir_trans_h760
         --
         UPDATE gir_trans_h760 gth
            SET gth.statu_trans = cv_cd_statu_sagip_trans
                -- INC0017310
               ,
                gth.no_docmn = vlv_no_docmn
                -- INC00017539
               ,
                gth.dt_trans = vgd_dt_exect
          WHERE gth.id_trans_h760 = REC_CUR_h760.id_trans_h760;
         --
         -- Mise à jour de gir_rh_fdt
         --
         UPDATE gir_rh_fdt
            SET statu_sagip = cv_statu_sagip_trans
                -- INC0017310
               ,
                no_docmn = vlv_no_docmn
          WHERE id_trans = REC_CUR_h760.id_trans_h760
            AND nm_fiche = 'H760';
         --
      
         --DDC 206235 - INC86765
         IF TO_NUMBER(vgrec_perd_paie.no_perd) NOT IN (1,
                                                       2) THEN
            UPDATE gir_trans_h760 h760
               SET h760.aa_finnc = vgrec_perd_paie.aa_finnc /*,
                                                                                                       h760.perd_paie_du = vgrec_perd_paie.dt_debut,
                                                                                                       h760.perd_paie_au = vgrec_perd_paie.dt_fin*/
             WHERE h760.id_trans_h760 = REC_CUR_h760.id_trans_h760;
         
            p_log('35 - Nb gir_trans_h760 UPDATÉS pour id_trans_h760 ' || REC_CUR_h760.id_trans_h760 || ' :' || SQL%ROWCOUNT,
                  vlv_nm_procd_fonct);
         
            -- CHG206235 Début 2016-08-23
            -- Ne plus mettre à jour l'année financière de la table FDT, pour garder l'information originale
            --UPDATE gir_rh_fdt fdt
            --SET    fdt.aa_finnc = vgrec_perd_paie.aa_finnc/*,
            --       fdt.dt_perd_paie_du = vgrec_perd_paie.dt_debut,
            --       fdt.dt_perd_paie_au = vgrec_perd_paie.dt_fin*/
            --WHERE  fdt.id_trans = REC_CUR_h760.id_trans_h760
            --AND    fdt.nm_fiche = 'H760';
            -- CHG206235 Fin
         END IF;
         -- FIN DDC 206235 - INC86765
      END LOOP h760;
      --
      -- Mettre à jour le nombre d'enregistrement dans la table de contrôle
      --
      UPDATE gir_wm_contr
         SET nb_enreg_inser = vln_nb_enreg,
             cd_statu       = 'NS'
       WHERE id_lot = vln_id_lot;
      --
      -- INC00017310 On rejète les transactions dans le futur pour les traiter
      --             lorsqu'on sera rendu à cette date
      --
      OPEN CUR_h760_non_trans;
      --
      FETCH CUR_h760_non_trans BULK COLLECT
         INTO vlvar_liste_id_760;
      --
      CLOSE CUR_h760_non_trans;
      /*
      FOR REC_CUR_h760 IN CUR_h760_non_trans LOOP
         --
         vlVAR_liste_id_760.EXTEND;
         vlVAR_liste_id_760(vlVAR_liste_id_760.COUNT) := REC_CUR_h760.id_trans_h760;
         --
      END LOOP;*/
      --
      IF vlVAR_liste_id_760.EXISTS(1) THEN
         --
         FORALL vln_cp IN INDICES OF vlvar_liste_id_760
            UPDATE gir_trans_h760 h760
               SET h760.statu_trans = cv_cd_statu_sagip_rejt
                   -- INC00017539 on doit mettre une date temporaire dans le futur
                  ,
                   h760.dt_trans = HR_GENERAL.END_OF_TIME
             WHERE h760.id_trans_h760 = vlvar_liste_id_760(vln_cp)
               AND h760.in_trans_anul = 'N';
         --
         FORALL vln_cp IN INDICES OF vlvar_liste_id_760
            UPDATE gir_rh_fdt fdt
               SET fdt.statu_sagip = cv_statu_sagip_rejt
             WHERE fdt.id_trans = vlvar_liste_id_760(vln_cp)
               AND fdt.nm_fiche = 'H760'
               AND fdt.in_trans_anul = 'N';
         --
         vlVAR_liste_id_760.DELETE;
         --
      END IF;
      -- fin INC00017310
      --
      p_log('40 - Fin procédure. Nombre de fiches (carte A + B ou O) = ' || vln_nb_enreg,
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_sgi_h760
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h760 THEN
         --
         p_log('50 - Exception  du traitement H760.',
               vlv_nm_procd_fonct);
         --
         IF CUR_h760_non_trans%ISOPEN THEN
            CLOSE CUR_h760_non_trans;
         END IF;
         --
         IF vlVAR_liste_id_760.EXISTS(1) THEN
            vlVAR_liste_id_760.DELETE;
         END IF;
         --
         RAISE vgexc_trait_h760;
         --
      WHEN OTHERS THEN
         --
         IF CUR_h760_non_trans%ISOPEN THEN
            CLOSE CUR_h760_non_trans;
         END IF;
         --
         IF vlVAR_liste_id_760.EXISTS(1) THEN
            vlVAR_liste_id_760.DELETE;
         END IF;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('60 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_creer_trans_sgi_h760 est en erreur pour l''employé ' || vgrec_persn.no_emplo);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80420',
                        pv_token_value     => 'TYPE_TRANS:' || 'H760' || ';ID_TRANS:' || vln_id_trans || ';ID_AFECT:' || vln_id_afect || ';DT_GAIN:' ||
                                              TO_CHAR(vld_dt_gain,
                                                      'YYYY-MM-DD') || ';NO_DOCMN:' || vlv_no_docmn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_creer_trans_sgi_h760',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_creer_trans_sgi_h760;

   --
   -- ============================================================================
   -- P_valdr_trans_h760:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de valider les données avant le mappage
   *       de GIR_TRANS_H760.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - pv_in_carte        : Indicateur que la carte B ou O est transmise
   *   - pd_dt_trans        : Date à laquelle la transaction est transférée à SAGIP
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2012-10-30  INC00016215  Calculer le taux horaire pour classe ouvrier
   * Michel Dessureault   2013-01-23  INC00016960  Ajouter l'allocation de repas de prime de nuit (A039) pour le H760.
   * Michel Dessureault   2013-01-31  INC00016966 et INC00016973 On corrige comment on traite le supplémentaire
   * Michel Dessureault   2013-02-06  INC00017186  Pour les gains A136, A236 et A336, les heures de début et fin doivent être vides.
   * Michel Dessureault   2013-03-13  INC00017310  On valide le 1er avril dans P_creer_trans_sgi_h760.
   * Michel Dessureault   2013-03-15  INC00017811  L'heure de début est obligatoire sur une H760 code d'action 3  (annulation), si elle a été inscrite lors de la création.
   * Frédéric Aubin       2014-07-21  CHG 178600 (INC-70559): valider que le total demandé (vgREC_gir_rh_fdt.nb_hh_derv_signe)
   *                                                          est similaire au total déjà transféré pour la journée (date du gain).
   * Edgar Doiron         2014-08-07  INC70559
   *************************************************************************/
   PROCEDURE p_valdr_trans_h760(pv_in_carte OUT VARCHAR2,
                                pd_dt_trans OUT DATE) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_valdr_trans_h760';
      /* INC00017310
      vld_1er_avril      DATE := fnd_date.canonical_to_date(vgREC_perd_paie.aa_finnc || '-04-01');*/
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      /* INC00017310
      --------------------------------------------------------------------------
      -- Déclaration du curseur permettant de déterminer la date d'acheminement
      --------------------------------------------------------------------------
      CURSOR CUR_dt_achem IS
         SELECT fnd_date.canonical_to_date(ptp.attribute1) dt_achem
         FROM   per_time_periods ptp
         WHERE  ptp.payroll_id = vgn_id_paie_stand
         AND    ptp.attribute2 = vgREC_perd_paie.aa_finnc
         AND    ptp.attribute3 = cv_atrib_perd_dt_achem
         AND    TRUNC(vgd_dt_exect) BETWEEN cd_dt_prodc
                                    AND     ptp.cut_off_date;*/
      --
      vlv_hh_debut VARCHAR2(4);
      vlv_hh_fin   VARCHAR2(4);
      --
      CURSOR CUR_A123_existant(pn_assignment_id IN NUMBER,
                               pv_cd_gain       IN VARCHAR2,
                               pv_dt_gain       IN VARCHAR2) IS
         SELECT fdt.nb_hh_signe,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                h760.*
           FROM gir_trans_h760 h760
           JOIN gir_rh_fdt fdt
             ON (fdt.id_trans = h760.id_trans_h760 AND fdt.nm_fiche = 'H760' AND fdt.id_afect = h760.id_afect)
          WHERE h760.id_afect = pn_assignment_id
            AND h760.cd_gain = pv_cd_gain
            AND h760.dt_gain = pv_dt_gain
          ORDER BY h760.statu_trans ASC;
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      -- Aucune transaction au départ.
      pv_in_carte := 'N';
      --INC71406 Edgar Doiron 2014-07-08
      vlv_hh_debut := vgrec_gir_rh_fdt.hh_debut;
      vlv_hh_fin   := vgrec_gir_rh_fdt.hh_fin;
      --
      -- Valider les données pour le mappage de GIR_TRANS_H760
      --
   
      pd_dt_trans := TRUNC(vgd_dt_exect);
      -- fin INC00017310
      --
      -- Carte A
      --
      -- Année financière
      -- paie 1 et 2 on PEUT utiliser la structure budgétaire et année financière antérieure ????
      --
      -- Carte B
      -- Heures de début et fin
      --
      --
      -- INC00017186
      -- INC 70901
      /*IF vgrec_gir_rh_fdt.cd_gain IN ('A136',
                                      'A236',
                                      'A336') THEN
         --
         vgrec_gir_rh_fdt.hh_debut := NULL;
         vgrec_gir_rh_fdt.hh_fin   := NULL;
         --
      END IF;*/
      --
      /*     INC00017811
      IF vgREC_gir_rh_fdt.cd_actio = cv_cd_actio_suprs THEN
         --
         vgREC_gir_rh_fdt.hh_debut := NULL;fg
         vgREC_gir_rh_fdt.hh_fin   := NULL;
         --
      ELSE
         IF vgREC_gir_rh_fdt.hh_debut IS NOT NULL AND
            vgREC_gir_rh_fdt.hh_fin IS NULL THEN
            --
            vgREC_gir_rh_fdt.hh_fin := vgREC_gir_rh_fdt.hh_debut;
            --
         END IF;
         --
      END IF;
      */
      -- S340
      --
      -- S300
      IF vgrec_gir_rh_fdt.hh_debut IS NOT NULL AND
         vgrec_gir_rh_fdt.hh_fin IS NULL THEN
         --
         vgrec_gir_rh_fdt.hh_fin := vgrec_gir_rh_fdt.hh_debut;
         --
      END IF;
      --
      -- S300
      IF vgrec_gir_rh_fdt.cd_actio = cv_cd_actio_suprs THEN
         --
         vgrec_gir_rh_fdt.hh_fin := NULL;
         --
      END IF;
      --      Fin INC00017811
      --
      -- Nombre d'heures
      -- cas 1
      --
      IF vgrec_gir_rh_fdt.cd_actio = cv_cd_actio_creat AND
         vgrec_gir_rh_fdt.nb_hh IS NULL THEN
         --
         --INC72336
         vgrec_gir_rh_fdt.nb_hh := '00000';
         --
      END IF;
      --
      -- cas 2
      --
      IF vgrec_gir_rh_fdt.cd_actio = cv_cd_actio_suprs AND
         vgrec_gir_rh_fdt.nb_hh IS NOT NULL THEN
         --
         vgrec_gir_rh_fdt.nb_hh := NULL;
         --
      END IF;
      --
      -- Section et classe
      --
      IF vgrec_gir_rh_fdt.cd_actio = cv_cd_actio_suprs THEN
         vgrec_gir_rh_fdt.sectn := NULL;
         vgrec_gir_rh_fdt.clas  := NULL;
      END IF;
      --
      --  Taux horaire Validation S472
      --
      IF vgrec_gir_rh_fdt.sectn IS NULL THEN
         --
         vgrec_gir_rh_fdt.tx_horr := NULL;
         --
      END IF;
      --
      -- Nombre de période de repas
      --
      IF vgrec_gir_rh_fdt.cd_actio = cv_cd_actio_suprs OR
        -- INC00016960
        --vgREC_gir_rh_fdt.cd_gain NOT IN ('A030','A047','A048','A148') THEN
         vgrec_gir_rh_fdt.cd_gain NOT IN ('A030',
                                          'A047',
                                          'A048',
                                          'A148',
                                          'A136',
                                          'A236',
                                          'A336') THEN
         --
         vgrec_gir_rh_fdt.nb_perd_repas := NULL;
         --
      END IF;
      --
      -- Raisons
      --
      vgrec_gir_rh_fdt.raisn_1 := NULL;
      vgrec_gir_rh_fdt.raisn_2 := NULL;
      vgrec_gir_rh_fdt.raisn_3 := NULL;
      --
      -- Carte O
      --
      IF vgrec_gir_rh_fdt.hh_payer IS NOT NULL THEN
         --
         -- vider la carte B
         --
         vgrec_gir_rh_fdt.hh_debut      := NULL;
         vgrec_gir_rh_fdt.hh_fin        := NULL;
         vgrec_gir_rh_fdt.nb_hh         := NULL;
         vgrec_gir_rh_fdt.md_compn      := NULL;
         vgrec_gir_rh_fdt.tx_horr       := NULL;
         vgrec_gir_rh_fdt.sectn         := NULL;
         vgrec_gir_rh_fdt.clas          := NULL;
         vgrec_gir_rh_fdt.nb_perd_repas := NULL;
         vgrec_gir_rh_fdt.raisn_1       := NULL;
         vgrec_gir_rh_fdt.raisn_2       := NULL;
         vgrec_gir_rh_fdt.raisn_3       := NULL;
         --
         -- code action vide
         --
         vgrec_gir_rh_fdt.cd_actio := NULL;
         --
         -- action monétaire vide
         --
         vgrec_gir_rh_fdt.actio_montr := NULL;
         --
         pv_in_carte := 'O';
         --
      ELSIF vgrec_gir_rh_fdt.cd_actio = cv_cd_actio_modfc THEN
         --
         IF vgrec_gir_rh_fdt.nb_hh IS NOT NULL OR
            vgrec_gir_rh_fdt.tx_horr IS NOT NULL OR
            vgrec_gir_rh_fdt.sectn IS NOT NULL OR
            vgrec_gir_rh_fdt.nb_perd_repas IS NOT NULL OR
            vgrec_gir_rh_fdt.raisn_1 IS NOT NULL THEN
            --
            pv_in_carte := 'B';
            --
         END IF;
         --
      ELSE
         --
         pv_in_carte := 'B';
         --
      END IF;
      --
      -- Edgar Doiron 2014-07-29 INC-70559
      IF vgrec_gir_rh_fdt.cd_gain = 'A123' THEN
         --
         vgrec_gir_rh_fdt.hh_debut := NULL;
         vgrec_gir_rh_fdt.hh_fin   := NULL;
         --
      END IF;
      --Début SAGIR INC71406 Edgar Doiron 2014-07-08
      IF vgrec_gir_rh_fdt.minst IN ('390',
                                    '812') AND
         vgrec_gir_rh_fdt.cd_gain NOT IN ('A079',
                                          'A083',
                                          'A123',
                                          'A179',
                                          'A279') THEN
         vgrec_gir_rh_fdt.hh_debut := vlv_hh_debut;
         vgrec_gir_rh_fdt.hh_fin   := vlv_hh_fin;
      
         -- S300
         --INC 79477
         IF vgrec_gir_rh_fdt.cd_actio = cv_cd_actio_suprs THEN
            --
            vgrec_gir_rh_fdt.hh_fin := NULL;
            --
         END IF;
      
      END IF;
      --Fin SAGIR INC71406 Edgar Doiron 2014-07-08
      p_log('20 - Fin procédure. ' || 'pv_in_carte => ' || pv_in_carte || ', pd_dt_trans => ' || pd_dt_trans,
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_valdr_trans_h760
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h760 THEN
         --
         p_log('30 - Exception  du traitement H760.',
               vlv_nm_procd_fonct);
         --
         RAISE vgexc_trait_h760;
         --
      WHEN OTHERS THEN
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('40 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_valdr_trans_h760 est en erreur pour l''employé ' || vgrec_persn.no_emplo);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80427',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_TRANS:' || vgrec_gir_rh_fdt.id_trans || ';ID_CONTR_FDT:' ||
                                              vgrec_gir_rh_fdt.id_contr_fdt || ';NO_DOCMN:' || vgrec_gir_rh_fdt.no_docmn || ';ID_AFECT:' ||
                                              vgrec_gir_rh_fdt.id_afect || ';ID_ENTRE_ELEMN:' ||
                                              NVL(vgrec_gir_rh_fdt.elemn_entry_id,
                                                  vgv_id_entre_elemn) || ';DT_GAIN:' ||
                                              TO_CHAR(vgrec_gir_rh_fdt.dt_gain,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_valdr_trans_h760',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_valdr_trans_h760;

   --
   -- ============================================================================
   -- P_creer_trans_h760:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de créer un enregistrement de GIR_TRANS_H760.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - pn_id_trans_h760     : Identifiant de la transaction H760.
   *   - pld_dt_trans         : Date de transfert de la transaction
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2012-10-30  INC00016215 Justifier à droite ou gauche par des zéros
   * Frédéric Aubin       2015-07-06  INC 90486 : à l'appel du xxgir_rh_23000_convr_du, prendre nb_hh_signe
   * Frédéric Aubin       2015-07-10  INC 90486 : ajout de log + ajustement de comparaison dans p_creer_trans_h760
   * Geneviève Bélanger   2016-08-23  INC00104143 Si c'est la période 1-2 et que le gain est dans une année financière précédente,
   *                                  ne pas modifier l'année financière pour l'année en cours. Conserver l'année financière précédente.
   * Geneviève Bélanger   2016-09-02  CHG217124 / INC00106739 - ajout des messages fonctionnels
   *                                  Retirer l'attribut4 et attribut5 de la table d'erreurs/rejets si la création de la transaction plante
   *************************************************************************/
   PROCEDURE p_creer_trans_h760(pn_id_trans_h760 OUT NUMBER,
                                pd_dt_trans      OUT DATE) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h760';
      vlv_in_carte       VARCHAR2(1);
      --INC 74659 INC 77451
      vlv_nb_hh     VARCHAR2(4);
      vlv_nb_hh_ret VARCHAR2(6);
   
      --INC00104143 obtenir l'année financière du gain
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      vlv_aa_finnc         gir_trans_h760.aa_finnc%TYPE;
   
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      -- Valider les données pour le mappage de GIR_TRANS_H760
      --
      p_log('20 - Appel de P_valdr_trans_h760.',
            vlv_nm_procd_fonct);
      --
      p_valdr_trans_h760(pv_in_carte => vlv_in_carte,
                         pd_dt_trans => pd_dt_trans);
      --
      IF vlv_in_carte <> 'N' THEN
         --
         -- Récupérer les infos de la personne de l'affectation
         --
         p_log('30 - Appel de la procédure P_obten_persn. ' || 'pn_id_afect => ' || vgrec_gir_rh_fdt.id_afect || ', pd_dt_fin => ' ||
               vgrec_perd_paie.dt_fin,
               vlv_nm_procd_fonct);
         --
         p_obten_persn(pn_id_afect => vgrec_gir_rh_fdt.id_afect,
                       pd_dt_fin   => vgrec_perd_paie.dt_fin,
                       prec_persn  => vgrec_persn);
         --
         --INC 74659 INC 77451
         p_log('35a - vgrec_gir_rh_fdt.nb_hh -> ' || vgrec_gir_rh_fdt.nb_hh || ', vgrec_gir_rh_fdt.nb_hh_derv_signe -> ' ||
               vgrec_gir_rh_fdt.nb_hh_derv_signe || ', vgrec_gir_rh_fdt.nb_hh_signe -> ' || vgrec_gir_rh_fdt.nb_hh_signe ||
               ', vgrec_gir_rh_fdt.cd_actio -> ' || vgrec_gir_rh_fdt.cd_actio || ', vgrec_gir_rh_fdt.id_afect -> ' || vgrec_gir_rh_fdt.id_afect ||
               ', vgrec_gir_rh_fdt.dt_gain -> ' || vgrec_gir_rh_fdt.dt_gain,
               vlv_nm_procd_fonct);
         --
         IF (vgrec_gir_rh_fdt.nb_hh IS NULL OR vgrec_gir_rh_fdt.nb_hh = '00000') AND
           -- Début SAGIR F.Aubin 2015-07-06 INC 90486
            (vgrec_gir_rh_fdt.nb_hh_signe IS NOT NULL OR vgrec_gir_rh_fdt.nb_hh_signe <> 0) AND
           -- Fin SAGIR F.Aubin 2015-07-06 INC 90486
            vgrec_gir_rh_fdt.cd_actio <> cv_cd_actio_suprs /* '3'  */
          THEN
            --
            vlv_nb_hh_ret := xxgir_rh_23000_convr_du.fv_selct_hh_sagir_unite_sagip(pn_id_afect    => vgrec_gir_rh_fdt.id_afect,
                                                                                   pd_dt_prodc    => vgrec_gir_rh_fdt.dt_gain,
                                                                                   pv_formt_unite => 'HHHMM',
                                                                                   -- Début SAGIR F.Aubin 2015-07-06 INC 90486
                                                                                   --  Anciennement : pn_hh_sagir    => ABS(vgrec_gir_rh_fdt.nb_hh_derv_signe)
                                                                                   pn_hh_sagir => ABS(vgrec_gir_rh_fdt.nb_hh_signe)
                                                                                   -- Fin SAGIR F.Aubin 2015-07-06 INC 90486
                                                                                   );
         
            p_log('35b - vlv_nb_hh_ret -> ' || vlv_nb_hh_ret,
                  vlv_nm_procd_fonct);
         
            vlv_nb_hh := SUBSTR(vlv_nb_hh_ret,
                                2,
                                4);
         
         ELSE
            vlv_nb_hh := SUBSTR(vgrec_gir_rh_fdt.nb_hh,
                                2,
                                4);
         END IF;
         --
         p_log('35c - vlv_nb_hh -> ' || vlv_nb_hh,
               vlv_nm_procd_fonct);
         --
         -- INC00104143 Début Geneviève Bélanger 2016-08-23
         -- Si l'année financière courante est plus grande que l'année du gain,
         -- que le gain est avant le 1er avril et que c'est la période 01 ou 02, mettre l'année financière précédente.
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_stand,
                                pd_dt_gain      => vgrec_gir_rh_fdt.dt_gain,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         p_log('36 - vgrec_perd_paie.no_perd=' || vgrec_perd_paie.no_perd || ', vgrec_gir_rh_fdt.dt_gain=' || vgrec_gir_rh_fdt.dt_gain ||
               ', vlrec_perd_paie_gain.aa_finnc=' || vlrec_perd_paie_gain.aa_finnc || ', année financière courante=' || vgrec_perd_paie.aa_finnc,
               vlv_nm_procd_fonct);
      
         IF vgrec_perd_paie.no_perd IN ('01',
                                        '02') AND
            vgrec_gir_rh_fdt.dt_gain < TO_DATE(EXTRACT(YEAR FROM vgd_dt_exect) || '-04-01',
                                               'YYYY-MM-DD') AND
            vlrec_perd_paie_gain.aa_finnc < vgrec_perd_paie.aa_finnc THEN
            vlv_aa_finnc := vgrec_perd_paie.aa_finnc - 1;
         ELSE
            vlv_aa_finnc := vgrec_perd_paie.aa_finnc;
         END IF;
      
         p_log('37 - vlv_aa_finnc=' || vlv_aa_finnc,
               vlv_nm_procd_fonct);
      
         -- INC00104143 Fin
      
         INSERT INTO gir_trans_h760
            (dt_trans,
             statu_trans,
             in_trans_anul,
             perd_paie_du,
             perd_paie_au,
             id_afect,
             no_docmn,
             de_carte_a,
             cd_trans,
             nas,
             nm_valdr,
             cd_actio,
             minst,
             budgt,
             centr_respn,
             aa_finnc,
             actio_montr,
             de_carte_b,
             cd_gain,
             dt_gain,
             hh_debut,
             hh_fin,
             nb_hh,
             md_compn,
             tx_horr,
             sectn,
             clas,
             nb_perd_repas,
             raisn_1,
             raisn_2,
             raisn_3,
             de_carte_o,
             dt_debut,
             dt_fin,
             clasm,
             hh_payer,
             in_type_carte)
         VALUES
            (pd_dt_trans,
             'N',
             'N',
             vgrec_gir_rh_fdt.dt_perd_paie_du,
             vgrec_gir_rh_fdt.dt_perd_paie_au,
             vgrec_gir_rh_fdt.id_afect,
             vgrec_gir_rh_fdt.no_docmn,
             'A',
             'H760',
             vgrec_persn.nas,
             vgrec_persn.nm_valdr,
             vgrec_gir_rh_fdt.cd_actio,
             NVL(vgrec_gir_rh_fdt.minst,
                 '000'),
             NVL(vgrec_gir_rh_fdt.budgt,
                 '0000000'),
             NVL(vgrec_gir_rh_fdt.centr_respn,
                 '0000'),
             vlv_aa_finnc, --INC00104143 vgrec_gir_rh_fdt.aa_finnc,
             vgrec_gir_rh_fdt.actio_montr,
             'B',
             vgrec_gir_rh_fdt.cd_gain,
             /* Mettre la date en format caractère */
             TO_CHAR(vgrec_gir_rh_fdt.dt_gain,
                     'YYYYMMDD'),
             vgrec_gir_rh_fdt.hh_debut,
             vgrec_gir_rh_fdt.hh_fin,
             --
             --INC 74659 INC 77451
             vlv_nb_hh,
             /*SUBSTR(vgrec_gir_rh_fdt.nb_hh,
             2,
             4),*/
             --
             vgrec_gir_rh_fdt.md_compn,
             vgrec_gir_rh_fdt.tx_horr,
             vgrec_gir_rh_fdt.sectn,
             vgrec_gir_rh_fdt.clas,
             /* Mettre le nombre de période de repas en caractère */
             LPAD(TO_CHAR(vgrec_gir_rh_fdt.nb_perd_repas),
                  2,
                  '0'),
             vgrec_gir_rh_fdt.raisn_1,
             vgrec_gir_rh_fdt.raisn_2,
             vgrec_gir_rh_fdt.raisn_3,
             'O',
             NULL,
             NULL,
             NULL,
             /* Mettre les heures à payer sous format 00000 car on ne peut le laisser nul */
             LPAD(NVL(vgrec_gir_rh_fdt.hh_payer,
                      '0'),
                  5,
                  '0'),
             vlv_in_carte)
         RETURNING id_trans_h760 INTO pn_id_trans_h760;
         --
         IF SQL%ROWCOUNT > 0 THEN
            --
            p_log('40 - Carte ' || vlv_in_carte || ' pour employé no. ' || vgrec_persn.no_emplo || ' créée pour la date ' ||
                  fnd_date.date_to_displaydate(pd_dt_trans) || ' pour pn_id_trans_h760 => ' || pn_id_trans_h760,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END IF;
      --
      p_log('50 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h760
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h760 THEN
         --
         p_log('60 - Exception  du traitement H760 venant de P_valdr_trans_h760.',
               vlv_nm_procd_fonct);
         --
         RAISE vgexc_trait_h760;
         --
      WHEN OTHERS THEN
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('70 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_creer_trans_h760 est en erreur pour l''employé ' || vgrec_persn.no_emplo);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(pln_id_trans_h760), id_contr_fdt(vgrec_gir_rh_fdt.id_contr_fdt) et no_docmn(vgrec_gir_rh_fdt.no_docmn)
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80418',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL ||
                                              ';ID_AFECT:' || vgrec_gir_rh_fdt.id_afect || ';ID_ENTRE_ELEMN:' ||
                                              NVL(vgv_id_entre_elemn,
                                                  vgrec_gir_rh_fdt.elemn_entry_id) || ';DT_GAIN:' ||
                                              TO_CHAR(vgrec_gir_rh_fdt.dt_gain,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_creer_trans_h760',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_creer_trans_h760;

   --
   -- ============================================================================
   -- P_trait_trans_h760:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de traiter les transactions pour le mappage
   *       de GIR_TRANS_H760.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2013-04-29  INC00018222  Mauvaise correspondance entre les numéros de document et le ministère
   * Frédéric Aubin       2015-07-10  INC 90486 : ajout affectation nb_hh dans p_trait_trans_h760
   * Geneviève Bélanger   2016-09-02  CHG217124 / INC00106739 - ajout des messages fonctionnels
   *                                  Retirer l'attribut4 et attribut5 de la table d'erreurs/rejets si la création de la transaction plante
   * Geneviève Bélanger   2016-11-08  INC00109212  Si pour un code de gain A029/A030 il existe déjà une transaction
   *                                  Acceptée et Non annulée, ne pas créer la transaction
   *************************************************************************/
   PROCEDURE p_trait_trans_h760(pn_assignment_id   IN NUMBER,
                                pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                pv_token_value     OUT NOCOPY VARCHAR2,
                                pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_trans_h760';
      --DDC 209235
      vlv_nm_procd   VARCHAR2(100) := 'p_trait_trans_h760';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      vld_dt_gain        DATE;
      --
      vln_id_trans gir_rh_fdt.id_trans%TYPE; -- Numéro unique de la transaction H760.
      vld_dt_trans DATE; -- Date de transfert de la transaction (si per 01 02, date acheminé 1er avril)
      -- INC00018222
      vltab_maj_fdt tab_maj_fdt; -- Table pour stocker les données fournit par la création des GIR_TRANS_H760
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de construire les regroupements
      -- de la liste des gains pour le point 8.
      ----------------------------------------------------------------------
      CURSOR CUR_gir_rh_fdt IS
         SELECT fdt.id_contr_fdt,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                fdt.id_afect,
                fdt.cd_actio,
                fdt.minst,
                fdt.budgt,
                fdt.centr_respn,
                fdt.aa_finnc,
                fdt.actio_montr,
                fdt.cd_gain,
                fdt.dt_gain,
                fdt.hh_debut,
                fdt.hh_fin,
                fdt.nb_hh,
                fdt.nb_hh_signe,
                fdt.md_compn,
                fdt.tx_horr,
                fdt.sectn,
                fdt.clas,
                fdt.nb_perd_repas,
                fdt.raisn_1,
                fdt.raisn_2,
                fdt.raisn_3,
                fdt.dt_debut,
                fdt.dt_fin,
                fdt.hh_payer,
                fdt.id_bloc_temps,
                fdt.no_versn_objet,
                fdt.elemn_entry_id,
                fdt.elemn_type_id -- INC00109212 lire ce champ pour vérifier si A029 ou A030
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H760'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id;
      --
      -- Début Edgar Doiron INC70559
      -- Curseur pour obtenir les heures dérivées d'un entré d'élément de paie
      CURSOR CUR_nb_hh_derv_signe(pv_cd_gain          IN VARCHAR2,
                                  pn_assignment_id    IN NUMBER,
                                  pn_element_entry_id IN NUMBER) IS
      -- Éléments de l'EFFECTUÉ du régime 'Heures supplémentaires'
         SELECT reav.va_entre_elemn
           FROM xxgir_rh_elemn_afect_v reav,
                pay_accrual_plans p,
                pay_net_calculation_rules c,
                pay_input_values_f i,
                pay_element_types_f e,
                (SELECT fvl.flex_value_meaning valeur,
                        fv.flex_value          fvalue
                   FROM fnd_flex_values_tl  fvl,
                        fnd_flex_values     fv,
                        fnd_flex_value_sets vs
                  WHERE (fv.flex_value_id = fvl.flex_value_id AND vs.flex_value_set_id = fv.flex_value_set_id AND fvl.language = USERENV('LANG') AND
                        vs.flex_value_set_name = 'GIR_RH_TYPE_ELEMN_ACUML')) col_ls
          WHERE p.accrual_plan_id = c.accrual_plan_id
            AND c.input_value_id = i.input_value_id
            AND col_ls.fvalue = e.attribute2
            AND i.element_type_id = e.element_type_id
            AND TRUNC(vgd_dt_exect /*Enlever SYSDATE*/) BETWEEN i.effective_start_date AND i.effective_end_date
            AND TRUNC(vgd_dt_exect /*Enlever SYSDATE*/) BETWEEN e.effective_start_date AND e.effective_end_date
            AND p.accrual_plan_name = 'Heures supplémentaires' -- régime
            AND col_ls.valeur = 'Effectué'
            AND e.attribute1 IS NOT NULL -- cd sagip
            AND reav.cd_sagip = e.attribute1
            AND nm_va_entre_elemn = cv_nm_hh_compn_derv
            AND reav.id_afect = pn_assignment_id
            AND reav.cd_sagip = SUBSTR(pv_cd_gain,
                                       2)
            AND reav.id_entre_elemn = pn_element_entry_id;
      -- Fin Edgar Doiron INC70559
   
      --INC00109212 Début 2016-11-08
      -- Vérifier si une transaction acceptée et non annulée existe déjà pour un gain A029 ou A030 à la même date
      CURSOR CUR_trans_acept(pdt_gain         IN DATE,
                             pn_elemn_type_id IN NUMBER) IS
         SELECT 1
           FROM gir_rh_fdt     f,
                gir_trans_h760 h
          WHERE f.id_trans = h.id_trans_h760
            AND f.id_afect = pn_assignment_id
            AND f.dt_gain = pdt_gain
            AND h.statu_trans = 'A'
            AND h.in_trans_anul = 'N'
            AND f.nm_fiche = 'H760'
            AND f.elemn_type_id = pn_elemn_type_id
            AND f.elemn_type_id IN (SELECT p.element_type_id
                                      FROM pay_element_types_f p
                                     WHERE p.attribute3 IN ('INTER_REMBR',
                                                            'SUPLM_REMBR'));
   
      vln_retr_trans NUMBER(1);
      vlv_creer_trx  VARCHAR2(1);
      --INC00109212 Fin
   
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- INC00018222
      --
      vlTAB_maj_fdt.DELETE;
      --
      <<fdt_h760>>
      FOR REC_CUR_gir_rh_fdt IN CUR_gir_rh_fdt LOOP
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_gir_rh_fdt.elemn_entry_id; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_gir_rh_fdt.dt_gain; -- INC00106352 : toujours avoir le dt_gain lorsque possible.
         vln_id_contr_fdt   := REC_CUR_gir_rh_fdt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         -- Récupérer la transaction H760
         --
         vgrec_gir_rh_fdt := NULL;
      
         -- INC00109212 réinitialiser la variable de création de TRX
         vlv_creer_trx := 'O';
         --
         vgrec_gir_rh_fdt.id_afect        := REC_CUR_gir_rh_fdt.Id_Afect;
         vgrec_gir_rh_fdt.id_contr_fdt    := REC_CUR_gir_rh_fdt.id_contr_fdt;
         vgrec_gir_rh_fdt.dt_perd_paie_du := REC_CUR_gir_rh_fdt.dt_perd_paie_du;
         vgrec_gir_rh_fdt.dt_perd_paie_au := REC_CUR_gir_rh_fdt.dt_perd_paie_au;
         vgrec_gir_rh_fdt.id_afect        := REC_CUR_gir_rh_fdt.id_afect;
         vgrec_gir_rh_fdt.cd_actio        := REC_CUR_gir_rh_fdt.cd_actio;
         vgrec_gir_rh_fdt.minst           := NVL(REC_CUR_gir_rh_fdt.minst,
                                                 '000');
         vgrec_gir_rh_fdt.budgt           := NVL(REC_CUR_gir_rh_fdt.budgt,
                                                 '0000000');
         vgrec_gir_rh_fdt.centr_respn     := NVL(REC_CUR_gir_rh_fdt.centr_respn,
                                                 '0000');
         vgrec_gir_rh_fdt.aa_finnc        := REC_CUR_gir_rh_fdt.aa_finnc;
         vgrec_gir_rh_fdt.actio_montr     := REC_CUR_gir_rh_fdt.actio_montr;
         vgrec_gir_rh_fdt.cd_gain         := REC_CUR_gir_rh_fdt.cd_gain;
         vgrec_gir_rh_fdt.dt_gain         := REC_CUR_gir_rh_fdt.dt_gain;
         vgrec_gir_rh_fdt.dt_debut        := REC_CUR_gir_rh_fdt.dt_debut;
         vgrec_gir_rh_fdt.hh_debut        := REC_CUR_gir_rh_fdt.hh_debut;
         vgrec_gir_rh_fdt.dt_fin          := REC_CUR_gir_rh_fdt.dt_fin;
         vgrec_gir_rh_fdt.hh_fin          := REC_CUR_gir_rh_fdt.hh_fin;
         vgrec_gir_rh_fdt.nb_hh           := REC_CUR_gir_rh_fdt.nb_hh;
         -- Début Edgar Doiron INC70559
         OPEN CUR_nb_hh_derv_signe(REC_CUR_gir_rh_fdt.cd_gain,
                                   REC_CUR_gir_rh_fdt.id_afect,
                                   REC_CUR_gir_rh_fdt.elemn_entry_id);
         FETCH CUR_nb_hh_derv_signe
            INTO vgrec_gir_rh_fdt.nb_hh_derv_signe;
         CLOSE CUR_nb_hh_derv_signe;
      
         IF vgrec_gir_rh_fdt.nb_hh_derv_signe IS NULL THEN
         
            vgrec_gir_rh_fdt.nb_hh_derv_signe := REC_CUR_gir_rh_fdt.Nb_Hh_Signe;
         END IF;
      
         -- Fin Edgar Doiron INC70559
         vgrec_gir_rh_fdt.md_compn       := REC_CUR_gir_rh_fdt.md_compn;
         vgrec_gir_rh_fdt.tx_horr        := fv_convr_nb_decml_carct(REC_CUR_gir_rh_fdt.tx_horr);
         vgrec_gir_rh_fdt.sectn          := REC_CUR_gir_rh_fdt.sectn;
         vgrec_gir_rh_fdt.clas           := REC_CUR_gir_rh_fdt.clas;
         vgrec_gir_rh_fdt.nb_perd_repas  := REC_CUR_gir_rh_fdt.nb_perd_repas;
         vgrec_gir_rh_fdt.raisn_1        := REC_CUR_gir_rh_fdt.raisn_1;
         vgrec_gir_rh_fdt.raisn_2        := REC_CUR_gir_rh_fdt.raisn_2;
         vgrec_gir_rh_fdt.raisn_3        := REC_CUR_gir_rh_fdt.raisn_3;
         vgrec_gir_rh_fdt.hh_payer       := REC_CUR_gir_rh_fdt.hh_payer;
         vgrec_gir_rh_fdt.id_bloc_temps  := REC_CUR_gir_rh_fdt.id_bloc_temps;
         vgrec_gir_rh_fdt.no_versn_objet := REC_CUR_gir_rh_fdt.no_versn_objet;
         -- Début SAGIR F.Aubin 2015-07-10 INC 90486 :ajout affectation nb_hh dans p_trait_trans_h760
         vgrec_gir_rh_fdt.nb_hh_signe := REC_CUR_gir_rh_fdt.nb_hh_signe;
         -- Fin SAGIR F.Aubin 2015-07-10 INC 90486
         --
         -- Obtenir le numéro de document
         --
         vgrec_gir_rh_fdt.no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(NVL(vgrec_gir_rh_fdt.minst,
                                                                                       '000'));
         --
         p_log('20 - Appel de la procédure P_creer_trans_h760',
               vlv_nm_procd_fonct);
         --
         -- INC00109212 Début 2016-11-08
         -- Vérifier si une transaction acceptée et non annulée existe pour un gain A029 ou A030 à la même date
         OPEN CUR_trans_acept(REC_CUR_gir_rh_fdt.dt_gain,
                              REC_CUR_gir_rh_fdt.elemn_type_id);
         FETCH CUR_trans_acept
            INTO vln_retr_trans;
         IF CUR_trans_acept%FOUND THEN
            -- Si oui, ne pas créer la transaction
            vlv_creer_trx := 'N';
         END IF;
         CLOSE CUR_trans_acept;
         -- INC00109212 Fin
      
         -- INC00109212 vérifier si on doit créer la FDT ou non, suite aux 2 curseurs précédents
         IF vlv_creer_trx = 'O' THEN
            p_creer_trans_h760(vln_id_trans,
                               vld_dt_trans);
         END IF;
         --p_creer_trans_h760(vln_id_trans,
         --                   vld_dt_trans);
         -- INC00109212 Fin
      
         --
         IF vln_id_trans IS NULL THEN
            --
            p_log('30 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_h760,
                  vlv_nm_procd_fonct);
            --
            -- Incrémente le nombre d'enregistrements lus
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h760);
            --
         ELSE
            --
            p_log('40 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_h760 || ', pb_in_inser => ' || 'TRUE',
                  vlv_nm_procd_fonct);
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h760,
                       pb_in_inser => TRUE);
            --
            --
            -- Mettre à jour les infos de transaction
            --
            -- INC00018222
            /*
            UPDATE gir_rh_fdt
            SET    id_trans     = vln_id_trans,
                   dt_trans     = vld_dt_trans,
                   no_docmn     = vgREC_gir_rh_fdt.no_docmn
            WHERE  id_contr_fdt = vgREC_gir_rh_fdt.id_contr_fdt;
            */
            --
            vltab_maj_fdt(vgrec_gir_rh_fdt.id_contr_fdt).id_trans := vln_id_trans;
            vltab_maj_fdt(vgrec_gir_rh_fdt.id_contr_fdt).dt_trans := vld_dt_trans;
            vltab_maj_fdt(vgrec_gir_rh_fdt.id_contr_fdt).no_docmn := vgrec_gir_rh_fdt.no_docmn;
            vltab_maj_fdt(vgrec_gir_rh_fdt.id_contr_fdt).id_contr_fdt := vgrec_gir_rh_fdt.id_contr_fdt;
            --
         END IF;
         --
      END LOOP fdt_h760;
      --
      p_log('50 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      -- INC00018222
      --
      -- Mettre à jour les infos de transaction
      --
      FORALL vln_cp IN INDICES OF vltab_maj_fdt
         UPDATE gir_rh_fdt fdt
            SET fdt.id_trans = vltab_maj_fdt(vln_cp).id_trans,
                fdt.dt_trans = vltab_maj_fdt(vln_cp).dt_trans,
                fdt.no_docmn = vltab_maj_fdt(vln_cp).no_docmn
          WHERE fdt.id_contr_fdt = vltab_maj_fdt(vln_cp).id_contr_fdt;
      --
      vlTAB_maj_fdt.DELETE;
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_trans_h760
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h760 THEN
         --
         -- INC00018222
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80402';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vgrec_gir_rh_fdt.id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vgrec_gir_rh_fdt.no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vlTAB_maj_fdt.DELETE;
         --
         p_log('60 - Exception  du traitement H760 venant de P_creer_trans_h760.',
               vlv_nm_procd_fonct);
         --
         RAISE vgexc_trait_h760;
         --
      WHEN OTHERS THEN
         --
         -- INC00018222
         --
         vlTAB_maj_fdt.DELETE;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('70 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80402';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_trait_trans_h760;

   --
   -- ============================================================================
   -- P_trait_liste_gains:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de traiter la liste des gains déclaratoires
   *       (point 8 et 9 du MD50).
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pn_id_afect       : Identifiant de l'affectation de l'employé
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2012-10-30  INC00016215  Ajouter trans_type = 'I'
   *                                               pour restreindre au suivi en création
   *                                               Ne pas changer lorsqu'un élément (gain) est rejeté
   * Michel Dessureault   2012-11-13  INC00016215  Réinitialiser l'index lorsque la table
   *                                               temporaire vlTAB_fdt est vidée.
   * Michel Dessureault   2013-01-15  INC00016849  Ne pas utiliser les heures converties
   * Michel Dessureault   2013-01-23  INC00016960  Ajouter l'allocation de repas de prime de nuit (A039) pour le H760.
   * Michel Dessureault   2013-01-29  Retouche 118 Tenir compte que la fdt est séparée en 2.
   * Michel Dessureault   2013-02-27  INC00017310  Date du gain doit être à l'intérieur de l'effectivité de l'affectation
   * Michel Dessureault   2013-03-18  INC00017811  Le message 100166 ne doit être déclenché que pour des heures à payer plus grand que 999
   * Michel Dessureault   2013-03-22  INC00017895  Problème de performance.
   * Michel Dessureault   2013-04-17  Retouche 183 Tenir compte des entrées d'élément pour la clef comptable.
   * Lucie Côté           2021-03-24  DDC.292818 : Remplacer le « SUBSTR... » du Select de la « clas » par « pg.ATTRIBUTE2 » .
   * Gheith Abi-Nader     2022-03-14  DDC305406 Ajout du calcul pour les A078 Allocation de disponibilités
   * Gheith Abi-Nader     2022-06-01  DDC305406 INC00179928 doublons dans certains cas
   *************************************************************************/
   /* INC00017895
   PROCEDURE P_trait_liste_gains(pn_id_afect NUMBER
                                 -- INC00017310
                                ,pd_dt_debut_afect IN DATE
                                ,pd_dt_fin_afect   IN DATE) IS
   */
   PROCEDURE p_trait_liste_gains(pn_assignment_id   IN NUMBER,
                                 pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                 pv_token_value     OUT NOCOPY VARCHAR2,
                                 pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                 pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_liste_gains';
      --DDC 209235
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      vlv_nm_procd        VARCHAR2(100) := 'p_trait_liste_gains';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h760.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn NUMBER;
      vld_dt_gain        DATE;
      --
   
      vlrec_cle_compt  type_rec_ventl_cout; -- Clé comptable
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de la fdt
      vln_mt_gain      NUMBER; -- Montant du gain
      vln_nb_hh        NUMBER; -- Nombre d'heures
      vlb_in_gain_rejt BOOLEAN; -- Indicateur de l'enregistrement rejeté
      vlv_cd_ereur     VARCHAR2(40); -- Code de l'erreur
      --
      -- INC00016215  Ajout des variables ci-dessous
      vln_index          NUMBER;
      vln_id_gain        gir_rh_fdt.elemn_entry_id%TYPE; -- pour garder la valeur en cours
      vlvar_liste_id_fdt sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de type NUMBER pour les identifiants de la fdt
      vlvar_liste_id_760 sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de type NUMBER pour les identifiants de H760 annulées.
      vltab_fdt          tab_fdt; -- Table contenat les enregistrements à créer dans GIR_RH_FDT
      /* INC00017895
      vln_id_corps_emplo  NUMBER;*/
      -- retouche 118
      vlv_exist VARCHAR2(1); -- Pour valider l'existence d'un identifiant de contrôle dans le suivi
      -- INC00017895
      vln_id_afect NUMBER := 0;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      /* INC00017895
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant d'aller chercher l'identifiant
      -- du corps d'emploi de l'affectation principale.
      ----------------------------------------------------------------------
      CURSOR CUR_id_corps_emplo IS
         SELECT paf.grade_id      id_corps_emplo
         FROM   per_assignments_f paf
         WHERE  TRUNC(vgd_dt_exect) BETWEEN paf.effective_start_date
                                    AND     paf.effective_end_date
         AND    paf.assignment_id        = pn_id_afect
         -- INC0017310
         AND    paf.effective_start_date = pd_dt_debut_afect
         AND    paf.effective_end_date   = pd_dt_fin_afect;
      */
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de construire les regroupements
      -- de la liste des gains pour le point 8.
      ----------------------------------------------------------------------
      /*    9. Ensuite, trier les regroupements de la liste des gains déclaratoires par :
               '   L'identifiant de affectation ;
               '   Le code du gain ;
               '   La date du gain ;
               '   Le montant du gain en ordre décroissant ;
               '   Le nombre d'heures converties en ordre décroissant ou
               '   Le nombre d'heures en ordre décroissant ;
               '   Le nombre d'unités de repas en ordre décroissant. *** Ceci ne peut être fait ici
         Le nombre heures converties a priorité sur le nombre d'heures
      */
      /* INC00017895
      CURSOR CUR_regrp_gains(pn_id_corps_emplo IN NUMBER) IS
         WITH rg AS (SELECT rgt.id_afect,
                            rgt.id_gain,
                            rgt.dt_gain,
                            rgt.id_type_gain,
                            rgt.cd_gain_sagip,
                            --INC00016849
                            --rgt.nb_hh_convr,
                            rgt.dt_debut,
                            rgt.hh_debut,
                            rgt.dt_fin,
                            rgt.hh_fin,
                            rgt.perd_paie_debut,
                            rgt.perd_paie_fin,
                            rgt.aa_finnc,
                            rgt.md_compn,
                            rgt.id_corps_emplo,
                            rgt.id_bloc_temps,
                            rgt.no_versn_objet,
                            rgt.cd_elemn
                     FROM   xxgir_rh_gains_tempr rgt
                     WHERE  rgt.id_afect = pn_id_afect
                     -- INC00016960
                     --AND    rgt.cd_gain_sagip != 'A032'
                     AND    rgt.cd_gain_sagip NOT IN ('A032', 'A039')
                     GROUP BY rgt.id_afect,
                              rgt.id_gain,
                              rgt.dt_gain,
                              rgt.id_type_gain,
                              rgt.cd_gain_sagip,
                              -- INC00016849
                              --rgt.nb_hh_convr,
                              rgt.dt_debut,
                              rgt.hh_debut,
                              rgt.dt_fin,
                              rgt.hh_fin,
                              rgt.perd_paie_debut,
                              rgt.perd_paie_fin,
                              rgt.aa_finnc,
                              rgt.md_compn,
                              rgt.id_corps_emplo,
                              rgt.id_bloc_temps,
                              rgt.no_versn_objet,
                              rgt.cd_elemn)
         SELECT rg.id_afect,
                rg.id_gain,
                rg.id_type_gain,
                rg.cd_gain_sagip,
                rg.dt_gain,
                (DECODE(rg.id_corps_emplo, pn_id_corps_emplo, NULL
                        ,(SELECT rgt1.va_entre
                          FROM   xxgir_rh_gains_tempr rgt1
                          WHERE  rgt1.id_gain  = rg.id_gain
                            AND  rgt1.nm_entre = cv_nm_tx
                            -- retouche 118
                            AND  rgt1.dt_gain  = rg.dt_gain)
                       )) tx_horr,
                (DECODE(rg.id_corps_emplo, pn_id_corps_emplo, NULL
                        ,(SELECT SUBSTR(pg.name,
                                        REGEXP_INSTR(pg.name,'[\.]', 1, 1) + 1, 3)
                          FROM   per_grades pg
                          WHERE  pg.grade_id = rg.id_corps_emplo)
                       )) sectn,
                (DECODE(rg.id_corps_emplo, pn_id_corps_emplo, NULL
                        ,(SELECT SUBSTR(pg.name,
                                        REGEXP_INSTR(pg.name,'[\.]', 1, 2) + 1, 2)
                          FROM   per_grades pg
                          WHERE  pg.grade_id = rg.id_corps_emplo)
                       )) clas,
                (SELECT rgt1.va_entre
                 FROM   xxgir_rh_gains_tempr rgt1
                 WHERE  rgt1.id_gain  = rg.id_gain
                 AND    rgt1.nm_entre = cv_nm_va_paie
                 -- retouche 118
                 AND    rgt1.dt_gain  = rg.dt_gain) mt_gain,
                -- INC00016849
                --NVL(TO_CHAR(rg.nb_hh_convr),
                --    (SELECT rgt1.va_entre
                --     FROM   xxgir_rh_gains_tempr rgt1
                --     WHERE  rgt1.id_gain  = rg.id_gain
                --     AND    rgt1.nm_entre = cv_nm_hh)) nb_hh,
                (SELECT rgt1.va_entre
                 FROM   xxgir_rh_gains_tempr rgt1
                 WHERE  rgt1.id_gain  = rg.id_gain
                 AND    rgt1.nm_entre = cv_nm_hh
                 -- retouche 118
                 AND    rgt1.dt_gain  = rg.dt_gain) nb_hh,
                rg.dt_debut,
                rg.hh_debut,
                rg.dt_fin,
                rg.hh_fin,
                rg.perd_paie_debut,
                rg.perd_paie_fin,
                rg.aa_finnc,
                rg.md_compn,
                -- INC00016849
                --DECODE(rg.cd_elemn, cv_cd_elemn_suplm_rembr,
                --       NVL(TO_CHAR(rg.nb_hh_convr),
                --           (SELECT rgt1.va_entre
                --            FROM   xxgir_rh_gains_tempr rgt1
                --            WHERE  rgt1.id_gain  = rg.id_gain
                --            AND    rgt1.nm_entre = cv_nm_hh)),
                --       cv_cd_elemn_inter_rembr,
                --       NVL(TO_CHAR(rg.nb_hh_convr),
                --           (SELECT rgt1.va_entre
                --            FROM   xxgir_rh_gains_tempr rgt1
                --            WHERE  rgt1.id_gain = rg.id_gain
                --            AND    rgt1.nm_entre = cv_nm_hh)),
                --       NULL) hh_payer,
                DECODE(rg.cd_elemn, cv_cd_elemn_suplm_rembr,
                                    (SELECT rgt1.va_entre
                                     FROM   xxgir_rh_gains_tempr rgt1
                                     WHERE  rgt1.id_gain  = rg.id_gain
                                     AND    rgt1.nm_entre = cv_nm_hh
                                     -- retouche 118
                                     AND    rgt1.dt_gain  = rg.dt_gain),
                                    cv_cd_elemn_inter_rembr,
                                    (SELECT rgt1.va_entre
                                     FROM   xxgir_rh_gains_tempr rgt1
                                     WHERE  rgt1.id_gain = rg.id_gain
                                     AND    rgt1.nm_entre = cv_nm_hh
                                     -- retouche 118
                                     AND    rgt1.dt_gain  = rg.dt_gain),
                                    NULL) hh_payer,
                rg.id_bloc_temps,
                rg.no_versn_objet
         FROM   rg
         -- INC00017310
         WHERE  rg.dt_gain BETWEEN pd_dt_debut_afect
                           AND     pd_dt_fin_afect
         ORDER BY rg.id_afect,
                  -- retouche 118
                  --rg.id_gain,
                  rg.cd_gain_sagip,
                  rg.dt_gain,
                  fnd_number.canonical_to_number(NVL(nb_hh, '0')) DESC,
                  fnd_number.canonical_to_number(NVL(mt_gain, '0')) DESC;
      */
      --
      CURSOR CUR_regrp_gains IS
         WITH rg AS
         --Popol 2019-06-05 INC00145348 index
          (SELECT /*+ parallel(rse), INDEX(gir_rh_suivi_entre_elemn_paie GIR_RH_ENTRE_ELEMN_PAIE_N1)*/
            rgt.id_afect,
            --fin
            rgt.id_gain,
            rgt.dt_gain,
            rgt.id_type_gain,
            rgt.cd_gain_sagip,
            rgt.dt_debut,
            rgt.hh_debut,
            rgt.dt_fin,
            rgt.hh_fin,
            rgt.perd_paie_debut,
            rgt.perd_paie_fin,
            rgt.aa_finnc,
            rgt.md_compn,
            rgt.id_corps_emplo,
            rgt.id_bloc_temps,
            rgt.no_versn_objet,
            rgt.cd_elemn,
            -- Début Edgar Doiron INC70559
            rse.element_entry_id
           --
             FROM xxgir_rh_gains_tempr rgt,
                  -- Fin Edgar Doiron INC70559
                  gir_rh_suivi_entre_elemn_paie rse -- INC-89949
            WHERE rse.suivi_elemn_record_id = rgt.id_suivi_elemn
                 --
                 --DDC 209235 par employé (=assignment_id)
              AND rse.assignment_id = pn_assignment_id
              AND rgt.cd_gain_sagip NOT IN ('A032',
                                            'A039')
            GROUP BY rgt.id_afect,
                     rgt.id_gain,
                     rgt.dt_gain,
                     rgt.id_type_gain,
                     rgt.cd_gain_sagip,
                     rgt.dt_debut,
                     rgt.hh_debut,
                     rgt.dt_fin,
                     rgt.hh_fin,
                     rgt.perd_paie_debut,
                     rgt.perd_paie_fin,
                     rgt.aa_finnc,
                     rgt.md_compn,
                     rgt.id_corps_emplo,
                     rgt.id_bloc_temps,
                     rgt.no_versn_objet,
                     rgt.cd_elemn,
                     -- Début Edgar Doiron INC70559
                     rse.element_entry_id
           -- Fin Edgar Doiron INC70559
           ),
         corps AS
          (SELECT rat.id_afect,
                  rat.dt_debut,
                  rat.dt_fin,
                  (SELECT paf.grade_id
                     FROM per_assignments_f paf
                    WHERE TRUNC(vgd_dt_exect) BETWEEN paf.effective_start_date AND paf.effective_end_date
                         --DDC 209235 par employé (=assignment_id)
                         --  AND paf.assignment_id = rat.id_afect
                      AND paf.assignment_id = pn_assignment_id
                      AND paf.effective_start_date = rat.dt_debut
                      AND paf.effective_end_date = rat.dt_fin) id_corps_emplo
             FROM xxgir_rh_afect_tempr rat
            WHERE rat.in_type_paie = cv_id_type_paie_stand
                 --DDC 209235 par employé (=assignment_id)
              AND rat.id_afect = pn_assignment_id)
         SELECT rg.id_afect,
                rg.id_gain,
                rg.id_type_gain,
                rg.cd_gain_sagip,
                rg.dt_gain,
                (DECODE(rg.id_corps_emplo,
                        (SELECT c.id_corps_emplo
                           FROM corps c
                          WHERE c.id_afect = rg.id_afect
                            AND rg.dt_gain BETWEEN c.dt_debut AND c.dt_fin),
                        NULL,
                        (SELECT rgt1.va_entre
                           FROM xxgir_rh_gains_tempr rgt1
                          WHERE rgt1.id_gain = rg.id_gain
                            AND rgt1.nm_entre = cv_nm_tx
                            AND rgt1.dt_gain = rg.dt_gain))) tx_horr,
                (DECODE(rg.id_corps_emplo,
                        (SELECT c.id_corps_emplo
                           FROM corps c
                          WHERE c.id_afect = rg.id_afect
                            AND rg.dt_gain BETWEEN c.dt_debut AND c.dt_fin),
                        NULL,
                        (SELECT SUBSTR(pg.name,
                                       REGEXP_INSTR(pg.name,
                                                    '[\.]',
                                                    1,
                                                    1) + 1,
                                       3)
                           FROM per_grades pg
                          WHERE pg.grade_id = rg.id_corps_emplo))) sectn,
                (DECODE(rg.id_corps_emplo,
                        (SELECT c.id_corps_emplo
                           FROM corps c
                          WHERE c.id_afect = rg.id_afect
                            AND rg.dt_gain BETWEEN c.dt_debut AND c.dt_fin),
                        NULL,
                        ( -- ddc.292818: remplacer « SUBSTR » par « pg.ATTRIBUTE2 »
                         -- SELECT SUBSTR(pg.name,
                         --                regexp_instr(pg.name,
                         --                             '[\.]',
                         --                             1,
                         --                             2) + 1,
                         --                2)
                         SELECT pg.attribute2
                           FROM per_grades pg
                          WHERE pg.grade_id = rg.id_corps_emplo))) clas,
                (SELECT rgt1.va_entre
                   FROM xxgir_rh_gains_tempr rgt1
                  WHERE rgt1.id_gain = rg.id_gain
                    AND rgt1.nm_entre = cv_nm_va_paie
                    AND rgt1.dt_gain = rg.dt_gain) mt_gain,
                (SELECT rgt1.va_entre
                   FROM xxgir_rh_gains_tempr rgt1
                  WHERE rgt1.id_gain = rg.id_gain
                    AND rgt1.nm_entre = cv_nm_hh
                    AND rgt1.dt_gain = rg.dt_gain) nb_hh,
                rg.dt_debut,
                rg.hh_debut,
                rg.dt_fin,
                rg.hh_fin,
                rg.perd_paie_debut,
                rg.perd_paie_fin,
                rg.aa_finnc,
                rg.md_compn,
                DECODE(rg.cd_elemn,
                       cv_cd_elemn_suplm_rembr,
                       (SELECT rgt1.va_entre
                          FROM xxgir_rh_gains_tempr rgt1
                         WHERE rgt1.id_gain = rg.id_gain
                           AND rgt1.nm_entre = cv_nm_hh
                           AND rgt1.dt_gain = rg.dt_gain),
                       cv_cd_elemn_inter_rembr,
                       (SELECT rgt1.va_entre
                          FROM xxgir_rh_gains_tempr rgt1
                         WHERE rgt1.id_gain = rg.id_gain
                           AND rgt1.nm_entre = cv_nm_hh
                           AND rgt1.dt_gain = rg.dt_gain),
                       NULL) hh_payer,
                rg.id_bloc_temps,
                rg.no_versn_objet,
                -- Début Edgar Doiron INC70559
                rg.element_entry_id
         -- Fin Edgar Doiron INC70559
           FROM rg
          ORDER BY rg.id_afect,
                   rg.cd_gain_sagip,
                   rg.dt_gain,
                   FND_NUMBER.CANONICAL_TO_NUMBER(NVL(nb_hh,
                                                      '0')) DESC,
                   FND_NUMBER.CANONICAL_TO_NUMBER(NVL(mt_gain,
                                                      '0')) DESC;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de vérifier l'existence du gain
      -- dans la feuille de temps pour le traiter en conséquence
      ----------------------------------------------------------------------
      /*retouche 118
      CURSOR CUR_gain_fdt (pn_id_bloc_temps  NUMBER,
                           pn_no_versn_objet NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.statu_sagip,
                fdt.cd_actio,
                fdt.id_trans,
                fdt.nb_hh_signe,
                fdt.tx_mt_signe,
                fdt.nb_perd_repas
         FROM   gir_rh_fdt fdt
         WHERE  fdt.id_bloc_temps  = pn_id_bloc_temps
         AND    fdt.no_versn_objet = pn_no_versn_objet
         AND    fdt.in_trans_anul  = 'N'
         AND    fdt.cd_actio IN (cv_cd_actio_creat,
                                 cv_cd_actio_modfc);
      */
      CURSOR CUR_gain_fdt(pn_id_bloc_temps NUMBER,
                          pd_dt_gain       DATE,
                          pn_nb_hh         NUMBER,
                          pn_tx_mt         NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.statu_sagip,
                fdt.cd_actio,
                fdt.id_trans,
                fdt.nb_hh_signe,
                fdt.tx_mt_signe,
                fdt.nb_perd_repas
           FROM gir_rh_fdt fdt
          WHERE fdt.id_bloc_temps = pn_id_bloc_temps
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.dt_gain = pd_dt_gain
            AND fdt.in_trans_anul = 'N'
            AND fdt.nm_fiche = 'H760'
            AND fdt.cd_actio IN (cv_cd_actio_creat,
                                 cv_cd_actio_modfc)
            AND ((pn_tx_mt > 0 AND fdt.tx_mt_signe = pn_tx_mt) OR (pn_nb_hh > 0 AND fdt.nb_hh_signe = pn_nb_hh))
          ORDER BY fdt.no_versn_objet DESC;
      --
      REC_gain_fdt CUR_gain_fdt%ROWTYPE; -- Enregistrement de type CUR_gain_fdt.
      --
      -- retouche 118
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de vérifier l'existence du contrôle
      -- de la feuille de temps dans le suivi d'élément
      ----------------------------------------------------------------------
      CURSOR CUR_exist_fdt_suivi(pn_id_gain IN NUMBER) IS
         SELECT 'X'
           FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
          WHERE rse.element_entry_id = pn_id_gain
               --DDC 209235 par employé (=assignment_id)
            AND rse.assignment_id = pn_assignment_id
            AND rse.id_contr_fdt IS NOT NULL;
      -- Début Edgar Doiron INC70559
      -- Curseur pour obtenir les heures dérivées d'un entré d'élément de paie
      CURSOR CUR_nb_hh_derv_signe(pv_cd_gain          IN VARCHAR2,
                                  pn_assignment_id    IN NUMBER,
                                  pn_element_entry_id IN NUMBER) IS
      -- éléments de l'EFFECTUÉ du régime 'Heures supplémentaires'
         SELECT reav.va_entre_elemn
           FROM xxgir_rh_elemn_afect_v reav,
                pay_accrual_plans p,
                pay_net_calculation_rules c,
                pay_input_values_f i,
                pay_element_types_f e,
                (SELECT fvl.flex_value_meaning valeur,
                        fv.flex_value          fvalue
                   FROM fnd_flex_values_tl  fvl,
                        fnd_flex_values     fv,
                        fnd_flex_value_sets vs
                  WHERE (fv.flex_value_id = fvl.flex_value_id AND vs.flex_value_set_id = fv.flex_value_set_id AND fvl.language = USERENV('LANG') AND
                        vs.flex_value_set_name = 'GIR_RH_TYPE_ELEMN_ACUML')) col_ls
          WHERE p.accrual_plan_id = c.accrual_plan_id
            AND c.input_value_id = i.input_value_id
            AND col_ls.fvalue = e.attribute2
            AND i.element_type_id = e.element_type_id
            AND TRUNC(vgd_dt_exect /*Enlever SYSDATE*/) BETWEEN i.effective_start_date AND i.effective_end_date
            AND TRUNC(vgd_dt_exect /*Enlever SYSDATE*/) BETWEEN e.effective_start_date AND e.effective_end_date
            AND p.accrual_plan_name = 'Heures supplémentaires' -- régime
            AND col_ls.valeur = 'Effectué'
            AND e.attribute1 IS NOT NULL -- cd sagip
            AND reav.cd_sagip = e.attribute1
            AND nm_va_entre_elemn = cv_nm_hh_compn_derv
            AND reav.id_afect = pn_assignment_id
            AND reav.cd_sagip = SUBSTR(pv_cd_gain,
                                       2)
            AND reav.id_entre_elemn = pn_element_entry_id;
      -- Fin Edgar Doiron INC70559
   
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      /*
            10. Pour mieux comprendre le traitement du point 10, consulter le graphique
               « Traitements pour H760 et les exemples qui sont décrits en annexe H.
      
            Pour chacun des regroupements de la liste des gains déclaratoires faire :
      */
      -- INC00016215
      -- Si le gain a déclenché un rejet, refusé les autres gains du même id
      -- Initialiser les variables nécessaire au traitement
      --
      vlb_in_gain_rejt := FALSE;
      vln_id_gain      := 0;
      vln_index        := 0;
      vlTAB_fdt.DELETE;
      --
      /* INC00017895
      -- Aller chercher le id du corps d'emploi pour comparer avec celui du gain pour le cas
      -- d'un changement de corps d'emploi pour une feuille de temps
      -- Dans le cas d'un changement, il faut afficher le taux horaire et le corps d'emploi
      --
      OPEN CUR_id_corps_emplo;
      --
      FETCH CUR_id_corps_emplo INTO vln_id_corps_emplo;
      --
      CLOSE CUR_id_corps_emplo;
      */
      --
      -- fin INC00016215
      --
      <<gains>>
   /* INC00017895
      FOR REC_CUR_regrp_gains IN CUR_regrp_gains(vln_id_corps_emplo) LOOP*/
      FOR REC_CUR_regrp_gains IN CUR_regrp_gains LOOP
         --
         -- INC00017895
         IF vln_id_afect <> REC_CUR_regrp_gains.id_afect THEN
            --
            vln_id_afect := REC_CUR_regrp_gains.id_afect;
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie.dt_fin,
                          prec_persn  => vgrec_persn);
            --
         END IF;
         --
         -- INC00016215
         -- Si le gain a déclenché un rejet, refuser les autres gains du même id
         -- pour ne pas mettre à jour GIR_RH_SUIVI_ENTRE_ELEMN_PAIE et GIR_RH_FDT
         --
         p_log('101 - vln_id_gain=' || vln_id_gain,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_regrp_gains.id_gain; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_regrp_gains.dt_gain; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
      
         --
         IF vln_id_gain <> REC_CUR_regrp_gains.id_gain THEN
            --
            -- Vérifier si il y a eu rejet d'un des enregistrements du GAIN PRÉCÉDENT
            --
            IF vlb_in_gain_rejt THEN
               --
               -- oui donc initialiser pour le nouveau gain
               --
               vlb_in_gain_rejt := FALSE;
               --
               p_log('20 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_fdt || ', pb_in_rejt => ' || 'TRUE',
                     vlv_nm_procd_fonct);
               --
               -- Incrémente le nombre d'enregistrements lus et
               -- le nombre d'enregistrements rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                          pb_in_rejt  => TRUE);
               --
               p_log('30 - Appel de la procédure P_ajout_rejt. ' || 'pn_id_entre_elemn => ' || vln_id_gain || ', pv_cd_ereur => ' || vlv_cd_ereur ||
                     ', pn_id_afect => ' || /* INC00017895pn_id_afect */
                     vln_id_afect || ', pv_nm_procd => ' || vlv_nm_procd_fonct,
                     vlv_nm_procd_fonct);
               --
               p_ajout_rejt(pn_id_entre_elemn => vln_id_gain,
                            pv_cd_ereur       => vlv_cd_ereur,
                            /* INC00017895
                                                                                                                                                                                                                                                         pn_id_afect       => pn_id_afect,*/
                            pn_id_afect      => vln_id_afect,
                            pn_id_trans      => NULL,
                            pd_dt_perd_couvr => vgrec_perd_paie.dt_debut,
                            pv_nm_procd      => vlv_nm_procd_fonct);
            
               --DDC 209235
               vlv_code_erreur_gir := NVL(vlv_cd_ereur,
                                          'GIR-80398');
               vln_id_entre_elemn  := vln_id_gain;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                    TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            
               --
            ELSE
               --
               -- Donc pas de rejet pour le GAIN PRÉCÉDENT
               -- On met à jour les tables
               --
               IF vltab_fdt.count > 0 THEN
                  --
                  p_log('40 - Appel de la procédure P_creer_gain_fdt',
                        vlv_nm_procd_fonct);
                  --
                  <<creer_fdt>>
                  FOR vln_cp IN 1 .. vltab_fdt.count LOOP
                     --
                     p_log('41 - Gain précédent Compteur: ' || vln_cp,
                           vlv_nm_procd_fonct);
                     --
                     --Edgar Doiron 2016-07-12
                     --S'assurer de vider le vecteur global a chaque boucle
                     vgrec_gir_rh_fdt := NULL;
                  
                     vgrec_gir_rh_fdt.elemn_entry_id  := vltab_fdt(vln_cp).elemn_entry_id;
                     vgrec_gir_rh_fdt.elemn_type_id   := vltab_fdt(vln_cp).elemn_type_id;
                     vgrec_gir_rh_fdt.id_persn        := vltab_fdt(vln_cp).id_persn;
                     vgrec_gir_rh_fdt.id_afect        := vltab_fdt(vln_cp).id_afect;
                     vgrec_gir_rh_fdt.dt_perd_paie_du := vltab_fdt(vln_cp).dt_perd_paie_du;
                     vgrec_gir_rh_fdt.dt_perd_paie_au := vltab_fdt(vln_cp).dt_perd_paie_au;
                     vgrec_gir_rh_fdt.unite_admin     := vltab_fdt(vln_cp).unite_admin;
                     vgrec_gir_rh_fdt.type_budgt      := vltab_fdt(vln_cp).type_budgt;
                     vgrec_gir_rh_fdt.progr           := vltab_fdt(vln_cp).progr;
                     vgrec_gir_rh_fdt.captl           := vltab_fdt(vln_cp).captl;
                     vgrec_gir_rh_fdt.minst           := vltab_fdt(vln_cp).minst;
                     vgrec_gir_rh_fdt.budgt           := vltab_fdt(vln_cp).budgt;
                     vgrec_gir_rh_fdt.centr_respn     := vltab_fdt(vln_cp).centr_respn;
                     vgrec_gir_rh_fdt.aa_finnc        := vltab_fdt(vln_cp).aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain         := vltab_fdt(vln_cp).cd_gain;
                     vgrec_gir_rh_fdt.dt_gain         := vltab_fdt(vln_cp).dt_gain;
                     vgrec_gir_rh_fdt.dt_debut        := vltab_fdt(vln_cp).dt_debut;
                     vgrec_gir_rh_fdt.hh_debut        := vltab_fdt(vln_cp).hh_debut;
                     vgrec_gir_rh_fdt.dt_fin          := vltab_fdt(vln_cp).dt_fin;
                     vgrec_gir_rh_fdt.hh_fin          := vltab_fdt(vln_cp).hh_fin;
                     vgrec_gir_rh_fdt.md_compn        := vltab_fdt(vln_cp).md_compn;
                     vgrec_gir_rh_fdt.tx_horr         := vltab_fdt(vln_cp).tx_horr;
                     vgrec_gir_rh_fdt.sectn           := vltab_fdt(vln_cp).sectn;
                     vgrec_gir_rh_fdt.clas            := vltab_fdt(vln_cp).clas;
                     vgrec_gir_rh_fdt.raisn_1         := vltab_fdt(vln_cp).raisn_1;
                     vgrec_gir_rh_fdt.raisn_2         := vltab_fdt(vln_cp).raisn_2;
                     vgrec_gir_rh_fdt.raisn_3         := vltab_fdt(vln_cp).raisn_3;
                     vgrec_gir_rh_fdt.statu_sagip     := vltab_fdt(vln_cp).statu_sagip;
                     vgrec_gir_rh_fdt.dt_statu_sagip  := vltab_fdt(vln_cp).dt_statu_sagip;
                     vgrec_gir_rh_fdt.nm_fiche        := vltab_fdt(vln_cp).nm_fiche;
                     vgrec_gir_rh_fdt.nb_perd_repas   := vltab_fdt(vln_cp).nb_perd_repas;
                     vgrec_gir_rh_fdt.hh_payer        := vltab_fdt(vln_cp).hh_payer;
                     vgrec_gir_rh_fdt.nb_hh           := vltab_fdt(vln_cp).nb_hh;
                     -- Début Edgar Doiron INC70559
                     OPEN CUR_nb_hh_derv_signe(vltab_fdt(vln_cp).cd_gain,
                                               vltab_fdt(vln_cp).id_afect,
                                               vltab_fdt(vln_cp).elemn_entry_id);
                     FETCH CUR_nb_hh_derv_signe
                        INTO vgrec_gir_rh_fdt.nb_hh_derv_signe;
                     CLOSE CUR_nb_hh_derv_signe;
                     -- Fin Edgar Doiron INC70559
                     vgrec_gir_rh_fdt.tx_mt          := vltab_fdt(vln_cp).tx_mt;
                     vgrec_gir_rh_fdt.id_bloc_temps  := vltab_fdt(vln_cp).id_bloc_temps;
                     vgrec_gir_rh_fdt.no_versn_objet := vltab_fdt(vln_cp).no_versn_objet;
                     vgrec_gir_rh_fdt.nb_hh_signe    := vltab_fdt(vln_cp).nb_hh_signe;
                     vgrec_gir_rh_fdt.tx_mt_signe    := vltab_fdt(vln_cp).tx_mt_signe;
                     vgrec_gir_rh_fdt.cd_actio       := vltab_fdt(vln_cp).cd_actio;
                     vgrec_gir_rh_fdt.in_trans_anul  := vltab_fdt(vln_cp).in_trans_anul;
                  
                     --
                     p_log('102 - id_afect: ' || vgrec_gir_rh_fdt.id_afect,
                           vlv_nm_procd_fonct);
                     p_log('103 - gain: ' || vgrec_gir_rh_fdt.cd_gain,
                           vlv_nm_procd_fonct);
                     p_log('104 - date: ' || vgrec_gir_rh_fdt.dt_gain,
                           vlv_nm_procd_fonct);
                     p_log('105 - id_gain: ' || vgrec_gir_rh_fdt.elemn_entry_id,
                           vlv_nm_procd_fonct);
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                     p_log('42 - Gain précédent id_fdt: ' || vln_id_contr_fdt,
                           vlv_nm_procd_fonct);
                     --
                     --
                     -- retouche 118
                     --
                     vlv_exist := NULL;
                     --
                     OPEN CUR_exist_fdt_suivi(vln_id_gain);
                     --
                     FETCH CUR_exist_fdt_suivi
                        INTO vlv_exist;
                     --
                     CLOSE CUR_exist_fdt_suivi;
                     --
                     IF vlv_exist IS NOT NULL THEN
                        --
                        -- Dans le cas d'une fdt séparée, on a un même identifiant gain
                        -- donc inscrire l'identifiant fdt dans le champ 2
                        --
                        UPDATE gir_rh_suivi_elemn rse
                           SET rse.id_contr_fdt_2 = vln_id_contr_fdt
                         WHERE rse.element_entry_id = vln_id_gain
                           AND rse.trans_type = 'I';
                        --
                        -- Début INC-89949
                        UPDATE gir_rh_suivi_entre_elemn_paie rse
                           SET rse.id_contr_fdt_2 = vln_id_contr_fdt
                         WHERE rse.element_entry_id = vln_id_gain
                           AND rse.trans_type = 'I';
                        -- Fin INC-89949
                     ELSE
                        --fin retouche 118
                        --
                        -- Inscrire l'identifiant de la fdt dans le suivi traité.
                        --
                        UPDATE gir_rh_suivi_elemn rse
                           SET rse.id_contr_fdt = vln_id_contr_fdt
                         WHERE rse.element_entry_id = vln_id_gain
                              -- INC00016215
                           AND rse.trans_type = 'I';
                        --
                        -- Début INC-89949
                        UPDATE gir_rh_suivi_entre_elemn_paie rse
                           SET rse.id_contr_fdt = vln_id_contr_fdt
                         WHERE rse.element_entry_id = vln_id_gain
                           AND rse.trans_type = 'I';
                        -- Fin INC-89949
                        --
                        -- Retouche 118
                     END IF;
                     --
                  -- fin retouche 118
                  --
                  END LOOP creer_fdt;
                  --
               END IF; -- vlTAB_fdt.COUNT > 0
               --
               IF vlVAR_liste_id_fdt.EXISTS(1) THEN
                  --
                  FORALL vln_cp IN INDICES OF vlvar_liste_id_fdt
                     UPDATE gir_rh_fdt fdt
                        SET fdt.in_trans_anul = 'O'
                      WHERE fdt.id_contr_fdt = vlvar_liste_id_fdt(vln_cp);
                  --
               END IF;
               --
               IF vlVAR_liste_id_760.EXISTS(1) THEN
                  --
                  FORALL vln_cp IN INDICES OF vlvar_liste_id_760
                     UPDATE gir_trans_h760
                        SET in_trans_anul = 'O'
                      WHERE id_trans_h760 = vlvar_liste_id_760(vln_cp);
                  --
               END IF;
               --
            END IF; --  vlb_in_gain_rejt = true
            --
            -- Garder la valeur du nouveau gain pour comparaison
            --
            vln_id_gain := REC_CUR_regrp_gains.id_gain;
            --
            -- Vider les objets pour le nouveau gain
            --
            vlTAB_fdt.DELETE;
            vln_index := 0;
            --
            IF vlVAR_liste_id_fdt.EXISTS(1) THEN
               vlVAR_liste_id_fdt.DELETE;
            END IF;
            --
            IF vlVAR_liste_id_760.EXISTS(1) THEN
               vlVAR_liste_id_760.DELETE;
            END IF;
            --
         END IF; -- vln_id_gain <> REC_CUR_regrp_gains.id_gain
         -- fin INC00016215
         --
         -- Initialiser les valeurs pour le gain en traitement
         --
         vln_id_contr_fdt := NULL;
         vgrec_gir_rh_fdt := NULL;
         --
         /* INC00016215
         vlb_in_gain_rejt := FALSE;
         */
         --
         vln_mt_gain := FND_NUMBER.CANONICAL_TO_NUMBER(NVL(REC_CUR_regrp_gains.mt_gain,
                                                           '0'));
         vln_nb_hh   := FND_NUMBER.CANONICAL_TO_NUMBER(NVL(REC_CUR_regrp_gains.nb_hh,
                                                           '0'));
         -- Début Gheith Abi-Nader DDC305406 Si le code de gain est allocation A078 on applique la logique du calcul
         IF REC_CUR_regrp_gains.cd_gain_sagip = 'A078' THEN
            p_log('102 - calcul des heures converties pour A078 Allocation de disponibilité pour vln_nb_hh :' || vln_nb_hh,
                  vlv_nm_procd_fonct);
            IF vln_nb_hh > 0 THEN
               --Début SAGIR DDC316524 : Francis Tshimbombo
               /*
               WITH xx_hh_aloc_hier(min_hier,
               max_hier,
               resource_id) AS
                ( -- sera utilisé pour traverser récursivement les entrées d'allocations qui commencent et termine par 00:00
                 SELECT hh_hier.start_time        min_hier,
                         hh_hier.stop_time         max_hier,
                         hh_a_calculer.resource_id
                   FROM hxc_time_building_blocks hh_a_calculer
                  INNER JOIN hxc_time_building_blocks hh_hier
                     ON (TRUNC(hh_a_calculer.start_time) = TRUNC(hh_hier.start_time) + 1 AND hh_a_calculer.resource_id = hh_hier.resource_id)
                  INNER JOIN hxc_time_attribute_usages htau
                     ON (hh_hier.time_building_block_id = htau.time_building_block_id AND hh_hier.object_version_number = htau.time_building_block_ovn)
                  INNER JOIN hxc_time_attributes hta
                     ON (hta.time_attribute_id = htau.time_attribute_id)
                  INNER JOIN pay_element_types_f pet
                     ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                      11))
                 -- hier doit être dans une feuille de temps approuvée
                  INNER JOIN hxc_time_building_blocks htbb_aprou
                     ON (hh_hier.resource_id = htbb_aprou.resource_id AND TRUNC(hh_hier.start_time) BETWEEN htbb_aprou.start_time AND
                        htbb_aprou.stop_time)
                  WHERE hh_a_calculer.time_building_block_id = REC_CUR_regrp_gains.id_bloc_temps
                    AND hh_a_calculer.object_version_number = REC_CUR_regrp_gains.no_versn_objet
                    AND hh_hier.date_to = HR_GENERAL.END_OF_TIME
                    AND TO_CHAR(hh_hier.stop_time,
                                'HH24MI') = '0000'
                    AND hh_hier.approval_status = 'SUBMITTED'
                    AND hh_hier.scope = 'DETAIL'
                       -- prends la dernière entrée time_building_block_id pour ignorer les modifs historiques
                    AND NOT EXISTS (SELECT 1
                           FROM hxc_time_building_blocks htbb
                          WHERE htbb.time_building_block_id = hh_hier.time_building_block_id
                            AND htbb.resource_id = hh_hier.resource_id
                            AND htbb.object_version_number > hh_hier.object_version_number)
                    AND hta.attribute_category LIKE 'ELEMENT -%'
                    AND pet.attribute1 = '078'
                    AND NVL(htbb_aprou.date_to,
                            HR_GENERAL.END_OF_TIME) = HR_GENERAL.END_OF_TIME -- peut-être remplacer par le ovn
                    AND htbb_aprou.approval_status = 'APPROVED'
                    AND htbb_aprou.scope = 'APPLICATION_PERIOD'
                 UNION ALL
                 SELECT hh_hier_n.start_time  min_hier,
                        hh_hier_n.stop_time   max_hier,
                        hh_hier_n.resource_id
                   FROM xx_hh_aloc_hier
                  INNER JOIN hxc_time_building_blocks hh_hier_n
                     ON (TRUNC(xx_hh_aloc_hier.min_hier) = TRUNC(hh_hier_n.start_time) + 1 AND xx_hh_aloc_hier.resource_id = hh_hier_n.resource_id)
                  INNER JOIN hxc_time_attribute_usages htau
                     ON (hh_hier_n.time_building_block_id = htau.time_building_block_id AND
                        hh_hier_n.object_version_number = htau.time_building_block_ovn)
                  INNER JOIN hxc_time_attributes hta
                     ON (hta.time_attribute_id = htau.time_attribute_id)
                  INNER JOIN pay_element_types_f pet
                     ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                      11))
                 -- hier doit être dans une feuille de temps approuvée
                  INNER JOIN hxc_time_building_blocks htbb_aprou
                     ON (hh_hier_n.resource_id = htbb_aprou.resource_id AND TRUNC(hh_hier_n.start_time) BETWEEN htbb_aprou.start_time AND
                        htbb_aprou.stop_time)
                  WHERE 1 = 1
                    AND hh_hier_n.date_to = HR_GENERAL.END_OF_TIME
                    AND TO_CHAR(hh_hier_n.stop_time,
                                'HH24MI') = '0000'
                    AND hh_hier_n.approval_status = 'SUBMITTED'
                    AND hh_hier_n.scope = 'DETAIL'
                       -- prends la dernière entrée time_building_block_id pour ignorer les modifs historiques
                    AND NOT EXISTS (SELECT 1
                           FROM hxc_time_building_blocks htbb
                          WHERE htbb.time_building_block_id = hh_hier_n.time_building_block_id
                            AND htbb.resource_id = hh_hier_n.resource_id
                            AND htbb.object_version_number > hh_hier_n.object_version_number)
                    AND hta.attribute_category LIKE 'ELEMENT -%'
                    AND pet.attribute1 = '078'
                    AND NVL(htbb_aprou.date_to,
                            HR_GENERAL.END_OF_TIME) = HR_GENERAL.END_OF_TIME -- peut-être remplacer par le ovn
                    AND htbb_aprou.approval_status = 'APPROVED'
                    AND htbb_aprou.scope = 'APPLICATION_PERIOD')
                    */
               
               WITH xx_hh_aloc_hier1(min_hier,
               max_hier,
               resource_id) AS
                (SELECT hh_hier.start_time        min_hier,
                        hh_hier.stop_time         max_hier,
                        hh_a_calculer.resource_id
                   FROM hxc_time_building_blocks hh_a_calculer
                  INNER JOIN hxc_time_building_blocks hh_hier
                     ON (TRUNC(hh_a_calculer.start_time) = TRUNC(hh_hier.start_time) + 1 AND hh_a_calculer.resource_id = hh_hier.resource_id)
                  INNER JOIN hxc_time_attribute_usages htau
                     ON (hh_hier.time_building_block_id = htau.time_building_block_id AND hh_hier.object_version_number = htau.time_building_block_ovn)
                  INNER JOIN hxc_time_attributes hta
                     ON (hta.time_attribute_id = htau.time_attribute_id)
                  INNER JOIN pay_element_types_f pet
                     ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                      11))
                  INNER JOIN hxc_time_building_blocks htbb_aprou
                     ON (hh_hier.resource_id = htbb_aprou.resource_id AND TRUNC(hh_hier.start_time) BETWEEN htbb_aprou.start_time AND
                        htbb_aprou.stop_time)
                  WHERE hh_a_calculer.time_building_block_id = REC_CUR_regrp_gains.id_bloc_temps
                    AND hh_a_calculer.object_version_number = REC_CUR_regrp_gains.no_versn_objet
                    AND hh_hier.date_to = HR_GENERAL.END_OF_TIME
                    AND TO_CHAR(hh_hier.stop_time,
                                'HH24MI') = '0000'
                    AND hh_hier.approval_status = 'SUBMITTED'
                    AND hh_hier.scope = 'DETAIL'
                    AND NOT EXISTS (SELECT 1
                           FROM hxc_time_building_blocks htbb
                          WHERE htbb.time_building_block_id = hh_hier.time_building_block_id
                            AND htbb.resource_id = hh_hier.resource_id
                            AND htbb.object_version_number > hh_hier.object_version_number)
                    AND hta.attribute_category LIKE 'ELEMENT -%'
                    AND pet.attribute1 = '078'
                    AND NVL(htbb_aprou.date_to,
                            HR_GENERAL.END_OF_TIME) = HR_GENERAL.END_OF_TIME
                    AND htbb_aprou.approval_status = 'APPROVED'
                    AND htbb_aprou.scope = 'APPLICATION_PERIOD'),
               xx_hh_aloc_hier2(min_hier,
               max_hier,
               resource_id) AS
               
                (SELECT hh_hier_n.start_time  min_hier,
                        hh_hier_n.stop_time   max_hier,
                        hh_hier_n.resource_id
                   FROM xx_hh_aloc_hier1
                  INNER JOIN hxc_time_building_blocks hh_hier_n
                     ON (TRUNC(xx_hh_aloc_hier1.min_hier) = TRUNC(hh_hier_n.start_time) + 1 AND xx_hh_aloc_hier1.resource_id = hh_hier_n.resource_id)
                  INNER JOIN hxc_time_attribute_usages htau
                     ON (hh_hier_n.time_building_block_id = htau.time_building_block_id AND
                        hh_hier_n.object_version_number = htau.time_building_block_ovn)
                  INNER JOIN hxc_time_attributes hta
                     ON (hta.time_attribute_id = htau.time_attribute_id)
                  INNER JOIN pay_element_types_f pet
                     ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                      11))
                  INNER JOIN hxc_time_building_blocks htbb_aprou
                     ON (hh_hier_n.resource_id = htbb_aprou.resource_id AND TRUNC(hh_hier_n.start_time) BETWEEN htbb_aprou.start_time AND
                        htbb_aprou.stop_time)
                  WHERE 1 = 1
                    AND hh_hier_n.date_to = HR_GENERAL.END_OF_TIME
                    AND TO_CHAR(hh_hier_n.stop_time,
                                'HH24MI') = '0000'
                    AND hh_hier_n.approval_status = 'SUBMITTED'
                    AND hh_hier_n.scope = 'DETAIL'
                    AND NOT EXISTS (SELECT 1
                           FROM hxc_time_building_blocks htbb
                          WHERE htbb.time_building_block_id = hh_hier_n.time_building_block_id
                            AND htbb.resource_id = hh_hier_n.resource_id
                            AND htbb.object_version_number > hh_hier_n.object_version_number)
                    AND hta.attribute_category LIKE 'ELEMENT -%'
                    AND pet.attribute1 = '078'
                    AND NVL(htbb_aprou.date_to,
                            HR_GENERAL.END_OF_TIME) = HR_GENERAL.END_OF_TIME
                    AND htbb_aprou.approval_status = 'APPROVED'
                    AND htbb_aprou.scope = 'APPLICATION_PERIOD'),
               xx_hh_aloc_hier(min_hier,
               max_hier,
               resource_id) AS
                (SELECT *
                   FROM xx_hh_aloc_hier1
                 UNION ALL
                 SELECT *
                   FROM xx_hh_aloc_hier2),
               --Fin SAGIR DDC316524 : Francis Tshimbombo
               xx_tranch_de_8 AS
                (
                 /*  SOMMAIRE DE LA LOGIQUE DES TRANCHES DE 8 HEURES PAR JOUR                                                                                                                                                                                                                                                                                heures du jour calculé. Sinon on se fie sur la première date d'allocation.
                                                                                                                                                                                                                                                                                                                                            */
                 SELECT -- CAS DE JOUR NON CONTINUE AVEC HIER (hier ne finit pas par 00:00 et aujourdh'ui ne commence pas par 00:00)
                 -- Si le temps minimum d'une journée donnée est plus grand que la démarcation maximale possible pour une des 3 tranches (max 8:00, 16:00) on met HR_GENERAL.END_OF_TIME pour éviter les évaluations non-nécéssaire
                  resource_id,
                   CASE
                      WHEN TO_CHAR(coupure_8,
                                   'HH24MI') >= 800 THEN
                       HR_GENERAL.START_OF_TIME
                      ELSE
                       coupure_8
                   END AS tranche_1,
                   CASE
                      WHEN TO_CHAR(coupure_8,
                                   'HH24MI') >= 1600 THEN
                       HR_GENERAL.START_OF_TIME
                      ELSE
                       (CASE
                          WHEN TO_CHAR(coupure_8,
                                       'HH24MI') < 800 THEN
                           coupure_8 + 8 / 24
                          ELSE
                           coupure_8
                       END)
                   END AS tranche_2,
                   CASE
                      WHEN TO_CHAR(coupure_8,
                                   'HH24MI') < 800 THEN
                       coupure_8 + 16 / 24
                      ELSE
                       (CASE
                          WHEN TO_CHAR(coupure_8,
                                       'HH24MI') >= 1600 THEN
                           coupure_8
                          ELSE
                           coupure_8 + 8 / 24
                       END)
                   END tranche_3
                   FROM (SELECT MIN(hh_meme_jj.start_time) coupure_8, -- les tranches de 8 heures doivent toujours commencer par la plus petite heure
                                 hh_a_calculer.resource_id
                            FROM hxc_time_building_blocks hh_a_calculer
                           INNER JOIN hxc_time_building_blocks hh_meme_jj
                              ON (TRUNC(hh_a_calculer.start_time) = TRUNC(hh_meme_jj.start_time) AND hh_a_calculer.resource_id = hh_meme_jj.resource_id)
                           INNER JOIN hxc_time_attribute_usages htau
                              ON (hh_meme_jj.time_building_block_id = htau.time_building_block_id AND
                                 hh_meme_jj.object_version_number = htau.time_building_block_ovn)
                           INNER JOIN hxc_time_attributes hta
                              ON (hta.time_attribute_id = htau.time_attribute_id)
                           INNER JOIN pay_element_types_f pet
                              ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                               11))
                           WHERE hh_a_calculer.time_building_block_id = REC_CUR_regrp_gains.id_bloc_temps
                             AND hh_a_calculer.object_version_number = REC_CUR_regrp_gains.no_versn_objet
                             AND hh_meme_jj.date_to = HR_GENERAL.END_OF_TIME
                             AND hh_meme_jj.approval_status = 'SUBMITTED'
                             AND hh_meme_jj.scope = 'DETAIL'
                                -- prends la dernière entrée time_building_block_id pour ignorer les modifs historiques
                             AND NOT EXISTS (SELECT 1
                                    FROM hxc_time_building_blocks htbb
                                   WHERE htbb.time_building_block_id = hh_meme_jj.time_building_block_id
                                     AND htbb.resource_id = hh_meme_jj.resource_id
                                     AND htbb.object_version_number > hh_meme_jj.object_version_number
                                  -- AND htbb.scope = 'DETAIL' time_building_block_id es du même scope
                                  )
                             AND hta.attribute_category LIKE 'ELEMENT -%'
                             AND pet.attribute1 = '078'
                           GROUP BY hh_a_calculer.resource_id) bloc_inter
                  WHERE
                 -- CONDITION DE NON-CONTINUITÉ AVEC LA JOURNÉE PRÉCÉDENTE
                  TO_CHAR(bloc_inter.coupure_8,
                          'HH24MI') <> '0000'
               OR (TO_CHAR(bloc_inter.coupure_8, -- la journée éxaminée commence par 00:00 mais hier ne finit pas par 00:00
                           'HH24MI') = '0000' AND NOT EXISTS
                   (SELECT 1
                      FROM hxc_time_building_blocks htbb
                     INNER JOIN hxc_time_building_blocks htbb_aprou
                        ON (htbb.resource_id = htbb_aprou.resource_id AND htbb.start_time BETWEEN htbb_aprou.start_time AND htbb_aprou.stop_time)
                     WHERE htbb.stop_time = bloc_inter.coupure_8
                       AND htbb.resource_id = bloc_inter.resource_id
                       AND htbb.approval_status = 'SUBMITTED'
                       AND htbb.scope = 'DETAIL'
                          -- prends la dernière entrée time_building_block_id pour ignorer les modifs historiques
                       AND NOT EXISTS (SELECT 1
                              FROM hxc_time_building_blocks htbb2
                             WHERE htbb2.time_building_block_id = htbb.time_building_block_id
                               AND htbb2.resource_id = htbb.resource_id
                               AND htbb2.object_version_number > htbb.object_version_number
                            -- AND htbb.scope = 'DETAIL' time_building_block_id es du même scope
                            )
                          --
                       AND NVL(htbb_aprou.date_to,
                               HR_GENERAL.END_OF_TIME) = HR_GENERAL.END_OF_TIME -- peut-être remplacer par le ovn
                       AND htbb_aprou.approval_status = 'APPROVED'
                       AND htbb_aprou.scope = 'APPLICATION_PERIOD'))
                 UNION ALL
                 SELECT -- CAS JOURNÉE CONTINUÉ D'HIER ie. HIER.STOP_TIME = TODAY.START_TIME = 00:00
                  resource_id,
                   coupure_8 AS tranche_1,
                   (coupure_8 + 8 / 24) AS tranche_2,
                   (coupure_8 + 16 / 24) AS tranche_3
                   FROM (SELECT CASE
                                    WHEN TO_CHAR(min_hier,
                                                 'HH24MI') >= 1600 THEN
                                     min_hier + 8 / 24
                                    ELSE
                                     (CASE
                                        WHEN TO_CHAR(min_hier,
                                                     'HH24MI') < 800 THEN
                                         min_hier + 24 / 24
                                        ELSE
                                         min_hier + 16 / 24
                                     END)
                                 END AS coupure_8,
                                 --max_hier,
                                 resource_id
                            FROM (
                                  -- on regarde la dernière allocation d'hier qui a un stop_time (00:00)  égal au start_time d'aujourdhui
                                  -- et on calcul les démarcations de 8:00 selon le début de cette dernière
                                  SELECT TO_DATE(TO_CHAR(jj_hier,
                                                          'YYMMDD') || TO_CHAR(min_hier,
                                                                               'HH24MISS'),
                                                  'YYMMDDHH24MISS') min_hier,
                                          resource_id
                                    FROM (SELECT MIN(min_hier) min_hier,
                                                  MAX(max_hier) - 1 jj_hier,
                                                  resource_id
                                             FROM xx_hh_aloc_hier
                                            WHERE EXISTS (SELECT 1 -- début DDC305406 INC00179928 Gheith Abi-Nader 2022-06-1
                                                     FROM hxc_time_building_blocks hh_a_calculer
                                                    WHERE 1 = 1
                                                      AND hh_a_calculer.time_building_block_id = REC_cur_regrp_gains.id_bloc_temps
                                                      AND hh_a_calculer.object_version_number = REC_cur_regrp_gains.no_versn_objet
                                                      AND TO_CHAR(hh_a_calculer.start_time,
                                                                  'HH24MI') = '0000') -- fin DDC305406 INC00179928 Gheith Abi-Nader 2022-06-1
                                            GROUP BY resource_id))))
               SELECT SUM(hh_alou) AS hh_alou
                 INTO vln_nb_hh
                 FROM (SELECT 0 AS hh_alou
                          FROM dual
                        UNION ALL
                        -- PREMIÈRE TRANCHE DE 8 DÉBUT
                        SELECT 1 -- on calcul 1 quand l'allocation en paramètre est la première des tranches de 8 sinon on retourne 0
                         FROM hxc_time_building_blocks hh_a_calculer
                        INNER JOIN xx_tranch_de_8 xx_tranc_1
                           ON (hh_a_calculer.start_time BETWEEN xx_tranc_1.tranche_1 AND xx_tranc_1.tranche_2 OR
                              hh_a_calculer.stop_time BETWEEN xx_tranc_1.tranche_1 + 1 / 1440 AND xx_tranc_1.tranche_2 OR
                              (hh_a_calculer.start_time <= xx_tranc_1.tranche_1 AND hh_a_calculer.stop_time >= xx_tranc_1.tranche_2))
                        WHERE 1 = 1
                          AND xx_tranc_1.tranche_1 <> HR_GENERAL.START_OF_TIME
                          AND hh_a_calculer.time_building_block_id = REC_CUR_regrp_gains.id_bloc_temps
                          AND hh_a_calculer.object_version_number = REC_CUR_regrp_gains.no_versn_objet
                          AND NOT EXISTS (SELECT 1
                                 FROM hxc_time_building_blocks hh_ds_tranche
                                INNER JOIN hxc_time_attribute_usages htau
                                   ON (hh_ds_tranche.time_building_block_id = htau.time_building_block_id AND
                                      hh_ds_tranche.object_version_number = htau.time_building_block_ovn)
                                INNER JOIN hxc_time_attributes hta
                                   ON (hta.time_attribute_id = htau.time_attribute_id)
                                INNER JOIN pay_element_types_f pet
                                   ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                                    11))
                                WHERE 1 = 1
                                  AND hh_ds_tranche.approval_status = 'SUBMITTED'
                                  AND hh_ds_tranche.scope = 'DETAIL'
                                  AND hh_a_calculer.resource_id = hh_ds_tranche.resource_id
                                  AND NOT EXISTS (SELECT 1
                                         FROM hxc_time_building_blocks htbb
                                        WHERE htbb.time_building_block_id = hh_ds_tranche.time_building_block_id
                                          AND htbb.resource_id = hh_ds_tranche.resource_id
                                          AND htbb.object_version_number > hh_ds_tranche.object_version_number)
                                  AND INSTR(hta.attribute_category,
                                            'ELEMENT -') > 0
                                  AND pet.attribute1 = '078'
                                  AND (hh_ds_tranche.start_time = xx_tranc_1.tranche_1 OR
                                      hh_ds_tranche.start_time BETWEEN xx_tranc_1.tranche_1 AND xx_tranc_1.tranche_2 OR
                                      hh_ds_tranche.stop_time BETWEEN xx_tranc_1.tranche_1 + 1 / 1440 AND
                                      xx_tranc_1.tranche_2 OR (hh_ds_tranche.start_time <= xx_tranc_1.tranche_1 AND
                                      hh_ds_tranche.stop_time >= xx_tranc_1.tranche_2))
                                  AND hh_ds_tranche.start_time < hh_a_calculer.start_time)
                       -- PREMIÈRE TRANCHE DE 8 FIN
                       UNION ALL -- 2ième tranche de 8
                       SELECT 1 -- on calcul 1 quand l'allocation en paramètre est la première des tranches de 8 sinon on retourne 0
                          FROM hxc_time_building_blocks hh_a_calculer
                         INNER JOIN xx_tranch_de_8 xx_tranc_2
                            ON (hh_a_calculer.start_time BETWEEN xx_tranc_2.tranche_2 AND xx_tranc_2.tranche_3 OR
                               hh_a_calculer.stop_time BETWEEN xx_tranc_2.tranche_2 + 1 / 1440 AND xx_tranc_2.tranche_3 OR
                               (hh_a_calculer.start_time <= xx_tranc_2.tranche_2 AND hh_a_calculer.stop_time >= xx_tranc_2.tranche_3))
                         WHERE 1 = 1
                           AND xx_tranc_2.tranche_2 <> HR_GENERAL.START_OF_TIME
                           AND hh_a_calculer.time_building_block_id = REC_CUR_regrp_gains.id_bloc_temps
                           AND hh_a_calculer.object_version_number = REC_CUR_regrp_gains.no_versn_objet
                           AND NOT EXISTS (SELECT 1
                                  FROM hxc_time_building_blocks hh_ds_tranche
                                 INNER JOIN hxc_time_attribute_usages htau
                                    ON (hh_ds_tranche.time_building_block_id = htau.time_building_block_id AND
                                       hh_ds_tranche.object_version_number = htau.time_building_block_ovn)
                                 INNER JOIN hxc_time_attributes hta
                                    ON (hta.time_attribute_id = htau.time_attribute_id)
                                 INNER JOIN pay_element_types_f pet
                                    ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                                     11))
                                 WHERE 1 = 1
                                   AND hh_ds_tranche.approval_status = 'SUBMITTED'
                                   AND hh_ds_tranche.scope = 'DETAIL'
                                   AND hh_a_calculer.resource_id = hh_ds_tranche.resource_id
                                   AND NOT EXISTS (SELECT 1
                                          FROM hxc_time_building_blocks htbb
                                         WHERE htbb.time_building_block_id = hh_ds_tranche.time_building_block_id
                                           AND htbb.resource_id = hh_ds_tranche.resource_id
                                           AND htbb.object_version_number > hh_ds_tranche.object_version_number)
                                   AND INSTR(hta.attribute_category,
                                             'ELEMENT -') > 0
                                   AND pet.attribute1 = '078'
                                   AND (hh_ds_tranche.start_time BETWEEN xx_tranc_2.tranche_2 AND xx_tranc_2.tranche_3 OR
                                       hh_ds_tranche.stop_time BETWEEN xx_tranc_2.tranche_2 + 1 / 1440 AND
                                       xx_tranc_2.tranche_3 OR (hh_ds_tranche.start_time <= xx_tranc_2.tranche_2 AND
                                       hh_ds_tranche.stop_time >= xx_tranc_2.tranche_3))
                                   AND hh_ds_tranche.start_time < hh_a_calculer.start_time)
                        UNION ALL -- troisième tranche de 8
                        SELECT 1 -- on calcul 1 quand l'allocation en paramètre est la première des tranches de 8 sinon on retourne 0
                         FROM hxc_time_building_blocks hh_a_calculer
                        INNER JOIN xx_tranch_de_8 xx_tranc_3
                           ON (hh_a_calculer.stop_time > xx_tranc_3.tranche_3)
                        WHERE 1 = 1
                             
                          AND hh_a_calculer.time_building_block_id = REC_CUR_regrp_gains.id_bloc_temps
                          AND hh_a_calculer.object_version_number = REC_CUR_regrp_gains.no_versn_objet
                          AND NOT EXISTS (SELECT 1
                                 FROM hxc_time_building_blocks hh_ds_tranche
                                INNER JOIN hxc_time_attribute_usages htau
                                   ON (hh_ds_tranche.time_building_block_id = htau.time_building_block_id AND
                                      hh_ds_tranche.object_version_number = htau.time_building_block_ovn)
                                INNER JOIN hxc_time_attributes hta
                                   ON (hta.time_attribute_id = htau.time_attribute_id)
                                INNER JOIN pay_element_types_f pet
                                   ON (pet.element_type_id = SUBSTR(hta.attribute_category,
                                                                    11))
                                WHERE 1 = 1
                                  AND hh_ds_tranche.approval_status = 'SUBMITTED'
                                  AND hh_ds_tranche.scope = 'DETAIL'
                                  AND hh_a_calculer.resource_id = hh_ds_tranche.resource_id
                                  AND NOT EXISTS (SELECT 1
                                         FROM hxc_time_building_blocks htbb
                                        WHERE htbb.time_building_block_id = hh_ds_tranche.time_building_block_id
                                          AND htbb.resource_id = hh_ds_tranche.resource_id
                                          AND htbb.object_version_number > hh_ds_tranche.object_version_number)
                                  AND INSTR(hta.attribute_category,
                                            'ELEMENT -') > 0
                                  AND pet.attribute1 = '078'
                                  AND hh_ds_tranche.stop_time > xx_tranc_3.tranche_3
                                  AND hh_ds_tranche.start_time < hh_a_calculer.start_time)); --
            ELSE
               SELECT -1 * fdt.nb_hh_signe
                 INTO vln_nb_hh
                 FROM gir_rh_fdt fdt
                WHERE fdt.id_bloc_temps = REC_CUR_regrp_gains.id_bloc_temps
                  AND NOT EXISTS (SELECT 1
                         FROM gir_rh_fdt fdt2
                        WHERE fdt2.id_bloc_temps = fdt.id_bloc_temps
                          AND fdt2.no_versn_objet > fdt.no_versn_objet
                          AND fdt2.nb_hh_signe >= 0)
                  AND fdt.nb_hh_signe >= 0;
            END IF;
         END IF;
         p_log('103 - valeur de vln_nb_hh ' || vln_nb_hh,
               vlv_nm_procd_fonct);
         -- Fin Gheith Abi-Nader DDC305406
         --
         -- Dériver les valeurs comptables
         --
         p_log('50 - Appel de la procédure P_obten_ventl_cout pn_id_afect => ' || REC_CUR_regrp_gains.id_afect || ', pd_dt_afect =>' ||
               REC_CUR_regrp_gains.dt_gain,
               vlv_nm_procd_fonct);
         --
         p_obten_ventl_cout(pn_id_afect     => REC_CUR_regrp_gains.id_afect,
                            pd_dt_afect     => REC_CUR_regrp_gains.dt_gain,
                            pv_id_type_paie => cv_id_type_paie_stand,
                            -- Retouche 183
                            pn_id_entre_elemn => REC_CUR_regrp_gains.id_gain,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         -- Remplir l'enregistrement pour la création du gain dans la table des feuilles de temps (fdt).
         -- Valeurs communes aux différents cas.
         --
         -- INC00016215
         vln_index := vln_index + 1;
         vltab_fdt(vln_index).elemn_entry_id := REC_CUR_regrp_gains.id_gain;
         vltab_fdt(vln_index).elemn_type_id := REC_CUR_regrp_gains.id_type_gain;
         vltab_fdt(vln_index).id_persn := vgrec_persn.id_persn;
         vltab_fdt(vln_index).id_afect := REC_CUR_regrp_gains.id_afect;
         vltab_fdt(vln_index).dt_perd_paie_du := REC_CUR_regrp_gains.perd_paie_debut;
         vltab_fdt(vln_index).dt_perd_paie_au := REC_CUR_regrp_gains.perd_paie_fin;
         vltab_fdt(vln_index).unite_admin := vlrec_cle_compt.unite_admin;
         vltab_fdt(vln_index).type_budgt := vlrec_cle_compt.type_budgt;
         vltab_fdt(vln_index).progr := vlrec_cle_compt.progr;
         vltab_fdt(vln_index).captl := vlrec_cle_compt.captl;
         vltab_fdt(vln_index).minst := NVL(vlrec_cle_compt.minst,
                                           '000');
         vltab_fdt(vln_index).budgt := vlrec_cle_compt.budgt;
         vltab_fdt(vln_index).centr_respn := vlrec_cle_compt.centr_respn;
         vltab_fdt(vln_index).aa_finnc := REC_CUR_regrp_gains.aa_finnc;
         vltab_fdt(vln_index).cd_gain := REC_CUR_regrp_gains.cd_gain_sagip;
         vltab_fdt(vln_index).dt_gain := REC_CUR_regrp_gains.dt_gain;
         vltab_fdt(vln_index).dt_debut := REC_CUR_regrp_gains.dt_debut;
         vltab_fdt(vln_index).hh_debut := REC_CUR_regrp_gains.hh_debut;
         vltab_fdt(vln_index).dt_fin := REC_CUR_regrp_gains.dt_fin;
         vltab_fdt(vln_index).hh_fin := REC_CUR_regrp_gains.hh_fin;
         vltab_fdt(vln_index).md_compn := REC_CUR_regrp_gains.md_compn;
         vltab_fdt(vln_index).tx_horr := REC_CUR_regrp_gains.tx_horr;
         vltab_fdt(vln_index).sectn := REC_CUR_regrp_gains.sectn;
         vltab_fdt(vln_index).clas := REC_CUR_regrp_gains.clas;
         vltab_fdt(vln_index).raisn_1 := NULL;
         vltab_fdt(vln_index).raisn_2 := NULL;
         vltab_fdt(vln_index).raisn_3 := NULL;
         vltab_fdt(vln_index).statu_sagip := cv_statu_sagip_non_trans;
         vltab_fdt(vln_index).dt_statu_sagip := TRUNC(vgd_dt_exect);
         vltab_fdt(vln_index).nm_fiche := 'H760';
         vltab_fdt(vln_index).nb_perd_repas := NULL;
         -- Début Edgar Doiron INC70559
         OPEN CUR_nb_hh_derv_signe(REC_CUR_regrp_gains.cd_gain_sagip,
                                   REC_CUR_regrp_gains.id_afect,
                                   REC_CUR_regrp_gains.element_entry_id);
         FETCH CUR_nb_hh_derv_signe
            INTO vltab_fdt(vln_index).nb_hh_derv_signe;
         CLOSE CUR_nb_hh_derv_signe;
         -- Fin Edgar Doiron INC70559
         vltab_fdt(vln_index).hh_payer := xxgir_rh_23000_convr_du.fv_selct_hh_sagir_unite_sagip(pn_id_afect    => REC_CUR_regrp_gains.id_afect,
                                                                                                pd_dt_prodc    => vgd_dt_exect,
                                                                                                pv_formt_unite => 'HHHMM',
                                                                                                pn_hh_sagir    => ABS(REC_CUR_regrp_gains.hh_payer));
         /*xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
         pn_temps_reel => ABS(REC_CUR_regrp_gains.hh_payer),
         pv_formt      => 'HHHMM');*/
         vltab_fdt(vln_index).nb_hh := CASE vln_nb_hh
                                          WHEN 0 THEN
                                           NULL
                                          ELSE
                                           xxgir_rh_23000_convr_du.fv_selct_hh_sagir_unite_sagip(pn_id_afect    => REC_CUR_regrp_gains.id_afect,
                                                                                                 pd_dt_prodc    => vgd_dt_exect,
                                                                                                 pv_formt_unite => 'HHHMM',
                                                                                                 pn_hh_sagir    => ABS(vln_nb_hh))
                                       /*xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                                                                                                                               pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                                                                                                                                                               pv_formt      => 'HHHMM')*/
                                       END;
         vltab_fdt(vln_index).tx_mt := CASE vln_mt_gain
                                          WHEN 0 THEN
                                           NULL
                                          ELSE
                                           fv_convr_nb_decml_carct(vln_mt_gain)
                                       END;
         vltab_fdt(vln_index).id_bloc_temps := REC_CUR_regrp_gains.id_bloc_temps;
         vltab_fdt(vln_index).no_versn_objet := REC_CUR_regrp_gains.no_versn_objet;
         --
         p_log('202 - id_afect: ' || vltab_fdt(vln_index).id_afect,
               vlv_nm_procd_fonct);
         p_log('203 - gain: ' || vltab_fdt(vln_index).cd_gain,
               vlv_nm_procd_fonct);
         p_log('204 - date: ' || vltab_fdt(vln_index).dt_gain,
               vlv_nm_procd_fonct);
         p_log('205 - id_gain: ' || vltab_fdt(vln_index).elemn_entry_id,
               vlv_nm_procd_fonct);
         --
         /* INC00016215
         vgREC_gir_rh_fdt.elemn_entry_id  := REC_CUR_regrp_gains.id_gain;
         vgREC_gir_rh_fdt.elemn_type_id   := REC_CUR_regrp_gains.id_type_gain;
         vgREC_gir_rh_fdt.id_persn        := vgREC_persn.id_persn;
         vgREC_gir_rh_fdt.id_afect        := REC_CUR_regrp_gains.id_afect;
         vgREC_gir_rh_fdt.dt_perd_paie_du := REC_CUR_regrp_gains.perd_paie_debut;
         vgREC_gir_rh_fdt.dt_perd_paie_au := REC_CUR_regrp_gains.perd_paie_fin;
         vgREC_gir_rh_fdt.unite_admin     := vlREC_cle_compt.unite_admin;
         vgREC_gir_rh_fdt.type_budgt      := vlREC_cle_compt.type_budgt;
         vgREC_gir_rh_fdt.progr           := vlREC_cle_compt.progr;
         vgREC_gir_rh_fdt.captl           := vlREC_cle_compt.captl;
         vgREC_gir_rh_fdt.minst           := vlREC_cle_compt.minst;
         vgREC_gir_rh_fdt.budgt           := vlREC_cle_compt.budgt;
         vgREC_gir_rh_fdt.centr_respn     := vlREC_cle_compt.centr_respn;
         vgREC_gir_rh_fdt.aa_finnc        := REC_CUR_regrp_gains.aa_finnc;
         vgREC_gir_rh_fdt.cd_gain         := REC_CUR_regrp_gains.cd_gain_sagip;
         vgREC_gir_rh_fdt.dt_gain         := REC_CUR_regrp_gains.dt_gain;
         vgREC_gir_rh_fdt.dt_debut        := REC_CUR_regrp_gains.dt_debut;
         vgREC_gir_rh_fdt.hh_debut        := REC_CUR_regrp_gains.hh_debut;
         vgREC_gir_rh_fdt.dt_fin          := REC_CUR_regrp_gains.dt_fin;
         vgREC_gir_rh_fdt.hh_fin          := REC_CUR_regrp_gains.hh_fin;
         vgREC_gir_rh_fdt.md_compn        := REC_CUR_regrp_gains.md_compn;
         vgREC_gir_rh_fdt.tx_horr         := Fn_obten_tx_horr(pn_id_afect => REC_CUR_regrp_gains.id_afect,
                                                              pd_dt_efect => REC_CUR_regrp_gains.dt_gain);
         vgREC_gir_rh_fdt.sectn           := REC_CUR_regrp_gains.sectn;
         vgREC_gir_rh_fdt.clas            := REC_CUR_regrp_gains.clas;
         vgREC_gir_rh_fdt.raisn_1         := NULL;
         vgREC_gir_rh_fdt.raisn_2         := NULL;
         vgREC_gir_rh_fdt.raisn_3         := NULL;
         vgREC_gir_rh_fdt.statu_sagip     := cv_statu_sagip_non_trans;
         vgREC_gir_rh_fdt.dt_statu_sagip  := TRUNC(vgd_dt_exect);
         vgREC_gir_rh_fdt.nm_fiche        := 'H760';
         vgREC_gir_rh_fdt.nb_perd_repas   := NULL;
         vgREC_gir_rh_fdt.hh_payer        := xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                pn_temps_reel => ABS(REC_CUR_regrp_gains.hh_payer),
                                                pv_formt      => 'HHHMM');
         vgREC_gir_rh_fdt.nb_hh           := CASE vln_nb_hh
                                                WHEN 0 THEN
                                                   NULL
                                                ELSE
                                                   xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                      pn_temps_reel => ABS(vln_nb_hh),
                                                      pv_formt      => 'HHHMM')
                                             END;
         vgREC_gir_rh_fdt.tx_mt           := CASE vln_mt_gain
                                                WHEN 0 THEN
                                                   NULL
                                                ELSE
                                                   ABS(vln_mt_gain)
                                             END;
         vgREC_gir_rh_fdt.id_bloc_temps   := REC_CUR_regrp_gains.id_bloc_temps;
         vgREC_gir_rh_fdt.no_versn_objet  := REC_CUR_regrp_gains.no_versn_objet;
         */
         -- fin INC00016215
         --
         -- Quand on a des valeurs négatives, c'est qu'il existe une valeur positive miroir
         --
         IF vln_mt_gain > 0 OR
            vln_nb_hh > 0 THEN
            --
            -- créer gain dans GIR_RH_FDT in_trans_anul = Non
            --
            -- INC00016215
            vltab_fdt(vln_index).nb_hh_signe := vln_nb_hh;
            vltab_fdt(vln_index).tx_mt_signe := vln_mt_gain;
            vltab_fdt(vln_index).cd_actio := cv_cd_actio_creat;
            vltab_fdt(vln_index).in_trans_anul := 'N';
            --
            /* INC00017811 Valider seulement pour les heures à payer
            -- Si le nombre d'heures est plus grand que 99.99 (égale 99h59m)
            IF vln_nb_hh >= 100 THEN*/
            IF vln_nb_hh >= 1000 THEN
               --
               vlb_in_gain_rejt := TRUE;
               --
               -- la formulaire H760 n'accepte pas des heures plus grandes que 99h59m.
               --
               vlv_cd_ereur := 'GIR-100166';
               --
            END IF;
            /* INC00016215
            vgREC_gir_rh_fdt.nb_hh_signe   := vln_nb_hh;
            vgREC_gir_rh_fdt.tx_mt_signe   := vln_mt_gain;
            vgREC_gir_rh_fdt.cd_actio      := cv_cd_actio_creat;
            vgREC_gir_rh_fdt.in_trans_anul := 'N';
            */
            -- fin INC00016215
            --
         ELSIF vln_mt_gain = 0 AND
               vln_nb_hh = 0 THEN
            --
            -- créer gain dans GIR_RH_FDT in_trans_anul = Oui
            --
            -- INC00016215
            vltab_fdt(vln_index).nb_hh_signe := vln_nb_hh;
            vltab_fdt(vln_index).tx_mt_signe := vln_mt_gain;
            vltab_fdt(vln_index).cd_actio := cv_cd_actio_creat;
            vltab_fdt(vln_index).in_trans_anul := 'O';
            /* INC00016215
            vgREC_gir_rh_fdt.nb_hh_signe   := vln_nb_hh;
            vgREC_gir_rh_fdt.tx_mt_signe   := vln_mt_gain;
            vgREC_gir_rh_fdt.cd_actio      := cv_cd_actio_creat;
            vgREC_gir_rh_fdt.in_trans_anul := 'O';
            */
            -- fin INC00016215
            --
         ELSE
            --
            -- Aller chercher l'enregistrement correspondant aux heures modifiées
            --
            -- retouche 118
            /*
            OPEN CUR_gain_fdt(REC_CUR_regrp_gains.id_bloc_temps,
                              REC_CUR_regrp_gains.no_versn_objet);*/
            OPEN CUR_gain_fdt(REC_CUR_regrp_gains.id_bloc_temps,
                              REC_CUR_regrp_gains.dt_gain,
                              (vln_nb_hh * -1),
                              (vln_mt_gain * -1));
            -- fin retouche 118
            --
            FETCH CUR_gain_fdt
               INTO REC_gain_fdt;
            --
            IF CUR_gain_fdt%NOTFOUND THEN
               CLOSE CUR_gain_fdt;
               --
               vlb_in_gain_rejt := TRUE;
               --
               -- Aucune transaction positive existante.
               --
               vlv_cd_ereur := 'GIR-100154';
               --
            ELSE
               CLOSE CUR_gain_fdt;
               --
               /* retouche 118
               IF vln_nb_hh < 0 THEN
                  --
                  IF (vln_nb_hh * -1) <> REC_gain_fdt.nb_hh_signe THEN
                     --
                     vlb_in_gain_rejt := TRUE;
                     --
                     -- Aucune transaction positive existante.
                     --
                     vlv_cd_ereur := 'GIR-100154';
                     --
                  END IF;
               ELSE
                  IF (vln_mt_gain * -1) <> REC_gain_fdt.tx_mt_signe THEN
                     --
                     vlb_in_gain_rejt := TRUE;
                     --
                     -- Aucune transaction positive existante.
                     --
                     vlv_cd_ereur := 'GIR-100154';
                     --
                  END IF;
               END IF;
               fin retouche 118 */
               --
            END IF; -- Cur_gain_fdt notfound
            --
            IF NOT vlb_in_gain_rejt THEN
               --
               -- Récupérer le nombre de repas du gain supprimé.
               --
               -- INC00016215
               vltab_fdt(vln_index).nb_perd_repas := REC_gain_fdt.nb_perd_repas;
               /* INC00016215
               vgREC_gir_rh_fdt.nb_perd_repas := REC_gain_fdt.nb_perd_repas;
               */
               -- fin INC00016215
               --
               IF REC_gain_fdt.statu_sagip = cv_statu_sagip_non_trans AND
                  REC_gain_fdt.cd_actio = cv_cd_actio_creat THEN
                  --
                  -- Mettre l'indicateur de transaction annulée à Oui
                  --
                  -- INC00016215
                  vlvar_liste_id_fdt.extend;
                  vlvar_liste_id_fdt(vlvar_liste_id_fdt.count) := REC_gain_fdt.id_contr_fdt;
                  --
                  /* INC00016215
                  UPDATE gir_rh_fdt
                  SET    in_trans_anul = 'O'
                  WHERE  id_contr_fdt = REC_gain_fdt.id_contr_fdt;
                  */
                  -- fin INC00016215
                  -- INC00016215
                  vltab_fdt(vln_index).nb_hh_signe := vln_nb_hh;
                  vltab_fdt(vln_index).tx_mt_signe := vln_mt_gain;
                  vltab_fdt(vln_index).cd_actio := cv_cd_actio_creat;
                  vltab_fdt(vln_index).in_trans_anul := 'O';
                  /* INC00016215
                  vgREC_gir_rh_fdt.nb_hh_signe   := vln_nb_hh;
                  vgREC_gir_rh_fdt.tx_mt_signe   := vln_mt_gain;
                  vgREC_gir_rh_fdt.cd_actio      := cv_cd_actio_creat;
                  vgREC_gir_rh_fdt.in_trans_anul := 'O';
                  */
                  -- fin INC00016215
                  --
               ELSIF REC_gain_fdt.statu_sagip = cv_statu_sagip_rejt THEN
                  --
                  -- Mettre l'indicateur de transaction annulée à Oui dans fdt
                  --
                  -- INC00016215
                  vlvar_liste_id_fdt.extend;
                  vlvar_liste_id_fdt(vlvar_liste_id_fdt.count) := REC_gain_fdt.id_contr_fdt;
                  --
                  /* INC00016215
                  UPDATE gir_rh_fdt
                  SET    in_trans_anul = 'O'
                  WHERE  id_contr_fdt = REC_gain_fdt.id_contr_fdt;
                  */
                  -- fin INC00016215
                  --
                  -- Mettre l'indicateur de transaction annulée à Oui dans H760
                  --
                  -- INC00016215
                  vlvar_liste_id_760.extend;
                  vlvar_liste_id_760(vlvar_liste_id_760.count) := REC_gain_fdt.id_trans;
                  /* INC00016215
                  UPDATE gir_trans_h760
                  SET    in_trans_anul = 'O'
                  WHERE  id_trans_h760 = REC_gain_fdt.id_trans;
                  */
                  --
                  vltab_fdt(vln_index).nb_hh_signe := vln_nb_hh;
                  vltab_fdt(vln_index).tx_mt_signe := vln_mt_gain;
                  vltab_fdt(vln_index).cd_actio := cv_cd_actio_creat;
                  vltab_fdt(vln_index).in_trans_anul := 'O';
                  --
                  /* INC00016215
                  vgREC_gir_rh_fdt.nb_hh_signe   := vln_nb_hh;
                  vgREC_gir_rh_fdt.tx_mt_signe   := vln_mt_gain;
                  vgREC_gir_rh_fdt.cd_actio      := cv_cd_actio_creat;
                  vgREC_gir_rh_fdt.in_trans_anul := 'O';
                  */
                  -- fin INC00016215
                  --
               ELSIF REC_gain_fdt.statu_sagip = cv_statu_sagip_acept THEN
                  --
                  -- créer gain en suppression dans GIR_RH_FDT in_trans_anul = par défaut = Non
                  --
                  -- INC00016215
                  vltab_fdt(vln_index).nb_hh_signe := vln_nb_hh * -1;
                  vltab_fdt(vln_index).tx_mt_signe := vln_mt_gain * -1;
                  vltab_fdt(vln_index).cd_actio := cv_cd_actio_suprs;
                  vltab_fdt(vln_index).in_trans_anul := 'N';
                  /* INC00016215
                  vgREC_gir_rh_fdt.nb_hh_signe   := vln_nb_hh * -1;
                  vgREC_gir_rh_fdt.tx_mt_signe   := vln_mt_gain * -1;
                  vgREC_gir_rh_fdt.cd_actio      := cv_cd_actio_suprs;
                  vgREC_gir_rh_fdt.in_trans_anul := 'N';
                  */
                  -- fin INC00016215
                  --
               ELSE
                  --
                  vlb_in_gain_rejt := TRUE;
                  --
                  -- Transaction existante mais, avec un statut « Transféré à SAGIP ».
                  --
                  vlv_cd_ereur := 'GIR-100153';
                  --
               END IF; -- statut SAGIP
               --
            END IF; -- in_rejet
            --
         END IF; -- Gain > 0
      --
      END LOOP gains;
      --
      -- INC00016215
      -- Vérifier si il y a eu rejet d'un des enregistrements du dernier gain
      --
      IF vlb_in_gain_rejt THEN
         --
         p_log('60 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_fdt || ', pb_in_rejt => ' || 'TRUE',
               vlv_nm_procd_fonct);
         --
         -- Incrémente le nombre d'enregistrements lus et
         -- le nombre d'enregistrements rejetés.
         --
         p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                    pb_in_rejt  => TRUE);
         --
         p_log('70 - Appel de la procédure P_ajout_rejt. ' || 'pn_id_entre_elemn => ' || vln_id_gain || ', pv_cd_ereur => ' || vlv_cd_ereur ||
               ', pn_id_afect => ' || /* INC00017895 pn_id_afect*/
               vln_id_afect || ', pv_nm_procd => ' || vlv_nm_procd_fonct,
               vlv_nm_procd_fonct);
         --
         p_ajout_rejt(pn_id_entre_elemn => vln_id_gain,
                      pv_cd_ereur       => vlv_cd_ereur,
                      /* INC00017895
                                                                                                                                                                                                   pn_id_afect       => pn_id_afect,*/
                      pn_id_afect      => vln_id_afect,
                      pn_id_trans      => NULL,
                      pd_dt_perd_couvr => vgrec_perd_paie.dt_debut,
                      pv_nm_procd      => vlv_nm_procd_fonct);
         --DDC 209235
         vlv_code_erreur_gir := NVL(vlv_cd_ereur,
                                    'GIR-80398');
         vln_id_entre_elemn  := vln_id_gain;
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                              ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                              ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                              TO_CHAR(vld_dt_gain,
                                      'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                              TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                      'YYYY-MM-DD') || ';';
         vlv_de_mesg_techn := NULL;
         vlv_nm_procd      := vlv_nm_procd;
      
         p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                        pv_token_value     => vlv_token_value,
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => vlv_nm_procd,
                        pv_de_mesg_techn   => vlv_de_mesg_techn);
         --
      ELSE
         --
         -- Donc pas de rejet pour le dernier gain
         -- On met à jour les tables
         --
         IF vltab_fdt.count > 0 THEN
            --
            p_log('80 - Appel de la procédure P_creer_gain_fdt',
                  vlv_nm_procd_fonct);
            --
            <<creer_fdt>>
            FOR vln_cp IN 1 .. vltab_fdt.count LOOP
               --
               p_log('Dernier gain Compteur: ' || vln_cp,
                     vlv_nm_procd_fonct);
               --
               --Edgar Doiron 2016-07-12
               --S'assurer de vider le vecteur global a chaque boucle
               vgrec_gir_rh_fdt := NULL;
            
               vgrec_gir_rh_fdt.elemn_entry_id  := vltab_fdt(vln_cp).elemn_entry_id;
               vgrec_gir_rh_fdt.elemn_type_id   := vltab_fdt(vln_cp).elemn_type_id;
               vgrec_gir_rh_fdt.id_persn        := vltab_fdt(vln_cp).id_persn;
               vgrec_gir_rh_fdt.id_afect        := vltab_fdt(vln_cp).id_afect;
               vgrec_gir_rh_fdt.dt_perd_paie_du := vltab_fdt(vln_cp).dt_perd_paie_du;
               vgrec_gir_rh_fdt.dt_perd_paie_au := vltab_fdt(vln_cp).dt_perd_paie_au;
               vgrec_gir_rh_fdt.unite_admin     := vltab_fdt(vln_cp).unite_admin;
               vgrec_gir_rh_fdt.type_budgt      := vltab_fdt(vln_cp).type_budgt;
               vgrec_gir_rh_fdt.progr           := vltab_fdt(vln_cp).progr;
               vgrec_gir_rh_fdt.captl           := vltab_fdt(vln_cp).captl;
               vgrec_gir_rh_fdt.minst           := vltab_fdt(vln_cp).minst;
               vgrec_gir_rh_fdt.budgt           := vltab_fdt(vln_cp).budgt;
               vgrec_gir_rh_fdt.centr_respn     := vltab_fdt(vln_cp).centr_respn;
               vgrec_gir_rh_fdt.aa_finnc        := vltab_fdt(vln_cp).aa_finnc;
               vgrec_gir_rh_fdt.cd_gain         := vltab_fdt(vln_cp).cd_gain;
               vgrec_gir_rh_fdt.dt_gain         := vltab_fdt(vln_cp).dt_gain;
               vgrec_gir_rh_fdt.dt_debut        := vltab_fdt(vln_cp).dt_debut;
               vgrec_gir_rh_fdt.hh_debut        := vltab_fdt(vln_cp).hh_debut;
               vgrec_gir_rh_fdt.dt_fin          := vltab_fdt(vln_cp).dt_fin;
               vgrec_gir_rh_fdt.hh_fin          := vltab_fdt(vln_cp).hh_fin;
               vgrec_gir_rh_fdt.md_compn        := vltab_fdt(vln_cp).md_compn;
               vgrec_gir_rh_fdt.tx_horr         := vltab_fdt(vln_cp).tx_horr;
               vgrec_gir_rh_fdt.sectn           := vltab_fdt(vln_cp).sectn;
               vgrec_gir_rh_fdt.clas            := vltab_fdt(vln_cp).clas;
               vgrec_gir_rh_fdt.raisn_1         := vltab_fdt(vln_cp).raisn_1;
               vgrec_gir_rh_fdt.raisn_2         := vltab_fdt(vln_cp).raisn_2;
               vgrec_gir_rh_fdt.raisn_3         := vltab_fdt(vln_cp).raisn_3;
               vgrec_gir_rh_fdt.statu_sagip     := vltab_fdt(vln_cp).statu_sagip;
               vgrec_gir_rh_fdt.dt_statu_sagip  := vltab_fdt(vln_cp).dt_statu_sagip;
               vgrec_gir_rh_fdt.nm_fiche        := vltab_fdt(vln_cp).nm_fiche;
               vgrec_gir_rh_fdt.nb_perd_repas   := vltab_fdt(vln_cp).nb_perd_repas;
               vgrec_gir_rh_fdt.hh_payer        := vltab_fdt(vln_cp).hh_payer;
               vgrec_gir_rh_fdt.nb_hh           := vltab_fdt(vln_cp).nb_hh;
               -- Début Edgar Doiron INC70559
               OPEN CUR_nb_hh_derv_signe(vltab_fdt(vln_cp).cd_gain,
                                         vltab_fdt(vln_cp).id_afect,
                                         vltab_fdt(vln_cp).elemn_entry_id);
               FETCH CUR_nb_hh_derv_signe
                  INTO vgrec_gir_rh_fdt.nb_hh_derv_signe;
               CLOSE CUR_nb_hh_derv_signe;
               -- Fin Edgar Doiron INC70559
               vgrec_gir_rh_fdt.tx_mt          := vltab_fdt(vln_cp).tx_mt;
               vgrec_gir_rh_fdt.id_bloc_temps  := vltab_fdt(vln_cp).id_bloc_temps;
               vgrec_gir_rh_fdt.no_versn_objet := vltab_fdt(vln_cp).no_versn_objet;
               vgrec_gir_rh_fdt.nb_hh_signe    := vltab_fdt(vln_cp).nb_hh_signe;
               vgrec_gir_rh_fdt.tx_mt_signe    := vltab_fdt(vln_cp).tx_mt_signe;
               vgrec_gir_rh_fdt.cd_actio       := vltab_fdt(vln_cp).cd_actio;
               vgrec_gir_rh_fdt.in_trans_anul  := vltab_fdt(vln_cp).in_trans_anul;
               --
               p_creer_gain_fdt(vln_id_contr_fdt);
               --
               p_log('Dernier gain id_fdt: ' || vln_id_contr_fdt,
                     vlv_nm_procd_fonct);
               --
               -- retouche 118
               --
               vlv_exist := NULL;
               --
               OPEN CUR_exist_fdt_suivi(vln_id_gain);
               --
               FETCH CUR_exist_fdt_suivi
                  INTO vlv_exist;
               --
               CLOSE CUR_exist_fdt_suivi;
               --
               IF vlv_exist IS NOT NULL THEN
                  --
                  -- Dans le cas d'une fdt séparée, on a un même identifiant gain
                  -- donc inscrire l'identifiant fdt dans le champ 2
                  --
                  UPDATE gir_rh_suivi_elemn rse
                     SET rse.id_contr_fdt_2 = vln_id_contr_fdt
                   WHERE rse.element_entry_id = vln_id_gain
                     AND rse.trans_type = 'I';
                  --
                  -- Début INC-89949
                  UPDATE gir_rh_suivi_entre_elemn_paie rse
                     SET rse.id_contr_fdt_2 = vln_id_contr_fdt
                   WHERE rse.element_entry_id = vln_id_gain
                     AND rse.trans_type = 'I';
                  -- Fin INC-89949
                  --
               ELSE
                  --
                  -- Inscrire l'identifiant de la fdt dans le suivi traité.
                  --
                  UPDATE gir_rh_suivi_elemn rse
                     SET rse.id_contr_fdt = vln_id_contr_fdt
                   WHERE rse.element_entry_id = vln_id_gain
                        -- INC00016215
                     AND rse.trans_type = 'I';
                  --
                  --
                  -- Début INC-89949
                  UPDATE gir_rh_suivi_entre_elemn_paie rse
                     SET rse.id_contr_fdt = vln_id_contr_fdt
                   WHERE rse.element_entry_id = vln_id_gain
                     AND rse.trans_type = 'I';
                  -- Fin INC-89949
                  --
               END IF;
               --
            END LOOP creer_fdt;
            --
         END IF;
         --
         IF vlVAR_liste_id_fdt.EXISTS(1) THEN
            --
            FORALL vln_cp IN INDICES OF vlvar_liste_id_fdt
               UPDATE gir_rh_fdt fdt
                  SET fdt.in_trans_anul = 'O'
                WHERE fdt.id_contr_fdt = vlvar_liste_id_fdt(vln_cp);
            --
         END IF;
         --
         IF vlVAR_liste_id_760.EXISTS(1) THEN
            --
            FORALL vln_cp IN INDICES OF vlvar_liste_id_760
               UPDATE gir_trans_h760
                  SET in_trans_anul = 'O'
                WHERE id_trans_h760 = vlvar_liste_id_760(vln_cp);
            --
         END IF;
         --
      END IF;
      --
      -- Vider les objets
      --
      vlTAB_fdt.DELETE;
      --
      IF vlVAR_liste_id_fdt.EXISTS(1) THEN
         vlVAR_liste_id_fdt.DELETE;
      END IF;
      --
      IF vlVAR_liste_id_760.EXISTS(1) THEN
         vlVAR_liste_id_760.DELETE;
      END IF;
      -- fin INC00016215
      --
      p_log('90 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_liste_gains
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h760 THEN
         --
         -- Fermer les curseurs
         --
         /* INC00017895
         IF CUR_id_corps_emplo%ISOPEN THEN
            CLOSE CUR_id_corps_emplo;
         END IF;
         */
         IF CUR_exist_fdt_suivi%ISOPEN THEN
            CLOSE CUR_exist_fdt_suivi;
         END IF;
         --
         IF CUR_gain_fdt%ISOPEN THEN
            CLOSE CUR_gain_fdt;
         END IF;
         --
         -- Vider les objets pour le nouveau gain
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80398';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
      
         vlTAB_fdt.DELETE;
         --
         IF vlVAR_liste_id_fdt.EXISTS(1) THEN
            vlVAR_liste_id_fdt.DELETE;
         END IF;
         --
         IF vlVAR_liste_id_760.EXISTS(1) THEN
            vlVAR_liste_id_760.DELETE;
         END IF;
         --
         p_log('100 - Exception  du traitement H760.',
               vlv_nm_procd_fonct);
         --
         RAISE vgexc_trait_h760;
         --
      WHEN OTHERS THEN
         --
         -- Vider les objets pour le nouveau gain
         --
         vlTAB_fdt.DELETE;
         --
         IF vlVAR_liste_id_fdt.EXISTS(1) THEN
            vlVAR_liste_id_fdt.DELETE;
         END IF;
         --
         IF vlVAR_liste_id_760.EXISTS(1) THEN
            vlVAR_liste_id_760.DELETE;
         END IF;
         --
         -- Fermer les curseurs
         --
         IF CUR_exist_fdt_suivi%ISOPEN THEN
            CLOSE CUR_exist_fdt_suivi;
         END IF;
         --
         IF CUR_gain_fdt%ISOPEN THEN
            CLOSE CUR_gain_fdt;
         END IF;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('110 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80398';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_trait_liste_gains;

   --
   -- ============================================================================
   -- P_trait_enreg_h760_fdt:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de déterminer si 2 enregistrements de la
   *       feuille de temps font référence au même gain (points 10,11,12 du MD50).
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pn_id_afect       : Identifiant de l'affectation
   *   - pd_dt_debut_afect : Date de début effectivité de l'affectation
   *   - pd_dt_fin_afect   : Date de fin effectivité de l'affectation
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2013-02-19  INC00017310  Date du gain doit être à l'intérieur de l'effectivité de l'affectation
   * Michel Dessureault   2013-03-22  INC00017895  Problème de performance.
   *************************************************************************/
   /* INC00017895
   PROCEDURE P_trait_enreg_h760_fdt(pn_id_afect       IN NUMBER
                                   -- INC00017310
                                   ,pd_dt_debut_afect IN DATE
                                   ,pd_dt_fin_afect   IN DATE) IS
   */
   PROCEDURE p_trait_enreg_h760_fdt(pn_assignment_id   IN NUMBER,
                                    pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                    pv_token_value     OUT NOCOPY VARCHAR2,
                                    pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                    pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_enreg_h760_fdt';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_enreg_h760_fdt';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      -- INC00017895
      vln_id_afect gir_rh_fdt.id_afect%TYPE := 0;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de trouver les regroupements
      -- avec 2 enregistrements dans la feuille de temps au point 11
      ----------------------------------------------------------------------
      CURSOR CUR_regrp_fdt IS
         SELECT fdt.id_afect,
                fdt.cd_gain,
                fdt.dt_gain,
                fdt.hh_debut,
                SUM(1) total
           FROM gir_rh_fdt fdt
                /* INC00017895
                WHERE  fdt.id_afect = pn_id_afect*/,
                xxgir_rh_afect_tempr rat
          WHERE fdt.id_afect = rat.id_afect
               --DDC 209235 par employé (=assignment_id)
            AND rat.id_afect = pn_assignment_id
            AND rat.in_type_paie = cv_id_type_paie_stand
            AND fdt.in_trans_anul = 'N'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.nm_fiche = 'H760'
               /* INC00017895
               -- INC00017310
               AND    fdt.dt_gain BETWEEN pd_dt_debut_afect
                                      AND pd_dt_fin_afect*/
            AND fdt.dt_gain BETWEEN rat.dt_debut AND rat.dt_fin
          GROUP BY fdt.id_afect,
                   fdt.cd_gain,
                   fdt.dt_gain,
                   fdt.hh_debut
         -- INC00017895
          ORDER BY fdt.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour retrouver les enregistrements regroupés
      -- dans CUR_regrp_fdt au point 12 qui sont en annulation
      ----------------------------------------------------------------------
      CURSOR CUR_retrv_fdt_suprs(pv_cd_gain  VARCHAR2,
                                 pd_dt_gain  DATE,
                                 pv_hh_debut VARCHAR2
                                 -- INC00017895
                                ,
                                 pn_id_afect NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.nb_perd_repas
           FROM gir_rh_fdt fdt
          WHERE fdt.id_afect = pn_id_afect
            AND fdt.cd_gain = pv_cd_gain
            AND fdt.dt_gain = pd_dt_gain
            AND fdt.hh_debut = pv_hh_debut
            AND fdt.nm_fiche = 'H760'
            AND fdt.cd_actio = cv_cd_actio_suprs;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour retrouver les enregistrements regroupés
      -- dans CUR_regrp_fdt au point 12 qui sont en création
      ----------------------------------------------------------------------
      CURSOR CUR_retrv_fdt_creat(pv_cd_gain  VARCHAR2,
                                 pd_dt_gain  DATE,
                                 pv_hh_debut VARCHAR2
                                 -- INC00017895
                                ,
                                 pn_id_afect NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.nb_perd_repas
           FROM gir_rh_fdt fdt
          WHERE fdt.id_afect = pn_id_afect
            AND fdt.cd_gain = pv_cd_gain
            AND fdt.dt_gain = pd_dt_gain
            AND fdt.hh_debut = pv_hh_debut
            AND fdt.nm_fiche = 'H760'
            AND fdt.cd_actio = cv_cd_actio_creat;
      --
   BEGIN
      --
      p_log('10 - Début procédure. ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      /*
            11. Ensuite, sélectionner les enregistrements de la table GIR_RH_FDT selon les critères suivants
                et conserver les enregistrements obtenus dans une liste :
                  '   Le statut de l'enregistrement = « Non transféré à SAGIP» ;
                  '   L'indicateur de transaction annulée  = « Non » ;
                  '   Nom de la fiche = « H760 ».
            12. Regrouper les enregistrements de la liste comme suit :
                  '   Identifiant de affectation ;
                  '   Le code du gain ;
                  '   La date du gain ;
                  '   L'heure de début.
            13. Maintenant, pour chacun des regroupements, faire
      */
      <<multiple>>
      FOR REC_CUR_regrp_fdt IN CUR_regrp_fdt LOOP
         --
         -- INC00017895
         IF vln_id_afect <> REC_CUR_regrp_fdt.id_afect THEN
            --
            vln_id_afect := REC_CUR_regrp_fdt.id_afect;
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie.dt_fin,
                          prec_persn  => vgrec_persn);
            --
         END IF;
         --DDC 209235
         vld_dt_gain := REC_CUR_regrp_fdt.dt_gain; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
      
         -- fin
         -- ' Si le regroupement contient 2 enregistrements, faire :
         IF REC_CUR_regrp_fdt.total >= 2 THEN
            /* ' (Dans ce cas, il y a obligatoirement un enregistrement avec un code d'action = Suppression »
            et l'autre avec un code d'action = « Création ». On doit alors envoyer à SAGIP une
            seule transaction H760 à SAGIP avec un code d'action = « Modification ».
            Le but est de modifier la transaction H760 acceptée par SAGIP avec une valeur modifiée
            au lieu d'annuler la transaction et d'en créer une autre afin d'éviter une coupure dans SAGIP)*/
            /* a. Sélectionner l'enregistrement du regroupement qui a un code d'action = « Suppression »
            et rechercher cet enregistrement dans la table GIR_RH_FDT selon son identifiant unique
            (ID_CONTR_FDT). Ensuite, mettre l'indicateur de transaction annulée  = « Oui »
            de l'enregistrement trouvé dans GIR_RH_FDT ;*/
            --
            <<suppression>>
            FOR REC_CUR_suprs_fdt IN CUR_retrv_fdt_suprs(REC_CUR_regrp_fdt.cd_gain,
                                                         REC_CUR_regrp_fdt.dt_gain,
                                                         REC_CUR_regrp_fdt.hh_debut
                                                         -- INC00017895
                                                        ,
                                                         vln_id_afect) LOOP
               --DDC 209235
               vln_id_contr_fdt := REC_CUR_suprs_fdt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
            
               --
               -- Annuler la transaction
               --
               UPDATE gir_rh_fdt fdt
                  SET fdt.in_trans_anul = 'O'
                WHERE fdt.id_contr_fdt = REC_CUR_suprs_fdt.id_contr_fdt;
               --
               /*b. Ensuite, rechercher l'autre enregistrement du regroupement (celui qui a le code
               d'action = « Création ») dans la table GIR_RH_FDT selon son identifiant unique
               (ID_CONTR_FDT). Ensuite, faire :
                   i. Changer le code d'action de l'enregistrement trouvé pour « Modification » ;
                  ii. Inscrire le nombre de période de repas de l'enregistrement sélectionné au
                      point a (celui avec un code d'action = « Suppression ») si existant
                      dans le nombre de période de repas l'enregistrement.*/
               <<creation>>
               FOR REC_CUR_creat_fdt IN CUR_retrv_fdt_creat(REC_CUR_regrp_fdt.cd_gain,
                                                            REC_CUR_regrp_fdt.dt_gain,
                                                            REC_CUR_regrp_fdt.hh_debut
                                                            -- INC00017895
                                                           ,
                                                            vln_id_afect) LOOP
                  --
                  -- Mettre l'action en modification
                  --
                  UPDATE gir_rh_fdt fdt
                     SET fdt.cd_actio      = cv_cd_actio_modfc,
                         fdt.nb_perd_repas = NVL(REC_CUR_suprs_fdt.nb_perd_repas,
                                                 fdt.nb_perd_repas)
                   WHERE fdt.id_contr_fdt = REC_CUR_creat_fdt.id_contr_fdt;
                  --
               END LOOP creation;
               --
            END LOOP suppression;
            --
         END IF; -- Regroupement > = 2
      --
      END LOOP multiple;
      --
      p_log('20 - Fin procédure. ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_enreg_h760_fdt
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80399';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_trait_enreg_h760_fdt;

   --
   -- ============================================================================
   -- P_trait_liste_repas:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de traiter la liste de repas
   *       (point 13 du MD50).
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pn_id_afect       : Identifiant de l'affectation
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2012-10-30  INC00016215  Ajouter trans_type = 'I'
   *                                               pour restreindre au suivi en création
   * Michel Dessureault   2013-01-23  INC00016960  Ajouter l'allocation de repas de prime de nuit (A039) pour le H760.
   * Michel Dessureault   2013-02-27  INC00017310  Date du gain doit être à l'intérieur de l'effectivité de l'affectation
   * Michel Dessureault   2013-03-05  INC00017614  Annuler la transaction H760 si la somme du regroupement est 0.
   * Michel Dessureault   2013-03-22  INC00017895  Problème de performance.
   *************************************************************************/
   /* INC00017895
   PROCEDURE P_trait_liste_repas(pn_id_afect NUMBER
                                 -- INC00017310
                                ,pd_dt_debut_afect IN DATE
                                ,pd_dt_fin_afect   IN DATE) IS
   */
   PROCEDURE p_trait_liste_repas(pn_assignment_id   IN NUMBER,
                                 pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                 pv_token_value     OUT NOCOPY VARCHAR2,
                                 pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                 pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_liste_repas';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_liste_repas';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h760.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant unique de la table.
      vln_id_gain      gir_rh_fdt.elemn_entry_id%TYPE; -- Identifiant du gain
      vlb_in_gain_rejt BOOLEAN; -- Indicateur de l'enregistrement rejeté
      -- INC00017614
      vlrec_cle_compt type_rec_ventl_cout; -- Clé comptable
      -- INC00017895
      vln_id_afect gir_rh_fdt.id_afect%TYPE := 0;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de construire les regroupements
      -- de la liste des repas pour le point 13.
      ----------------------------------------------------------------------
      CURSOR CUR_regrp_repas IS
         SELECT rgt.id_afect,
                rgt.dt_gain
                -- INC00016960
               ,
                rgt.cd_gain_sagip
                --INC00017614
               ,
                rgt.aa_finnc,
                rgt.perd_paie_debut,
                rgt.perd_paie_fin
                -- fin
               ,
                SUM(TO_NUMBER(NVL(rgt.va_entre,
                                  '0'))) nb_perd_repas
           FROM xxgir_rh_gains_tempr rgt
         /* INC00017895
         WHERE  rgt.id_afect      = pn_id_afect
         -- INC00016960
         --AND    rgt.cd_gain_sagip = 'A032'
         AND    rgt.cd_gain_sagip IN ('A032', 'A039')*/
          WHERE rgt.cd_gain_sagip IN ('A032',
                                      'A039')
            AND rgt.nm_entre = cv_nm_unite_repas
               --DDC 209235 par employé (=assignment_id)
            AND rgt.id_afect = pn_assignment_id
         /* INC00017895
         -- INC0017310
         AND    rgt.dt_gain BETWEEN pd_dt_debut_afect
                            AND     pd_dt_fin_afect*/
          GROUP BY rgt.id_afect,
                   rgt.dt_gain
                   -- INC00016960
                  ,
                   rgt.cd_gain_sagip
                   --INC00017614
                  ,
                   rgt.aa_finnc,
                   rgt.perd_paie_debut,
                   rgt.perd_paie_fin
          ORDER BY rgt.id_afect,
                   rgt.dt_gain;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de trouver l'identifiant du gain.
      ----------------------------------------------------------------------
      CURSOR CUR_id_repas(pd_dt_gain DATE
                          -- INC00016960
                         ,
                          pv_cd_gain VARCHAR2
                          -- INC00017895
                         ,
                          pn_id_afect NUMBER) IS
         SELECT rgt.id_gain
           FROM xxgir_rh_gains_tempr rgt
          WHERE rgt.id_afect = pn_id_afect
               -- INC00016960
               --AND    rgt.cd_gain_sagip = 'A032'
            AND rgt.cd_gain_sagip = pv_cd_gain
            AND rgt.dt_gain = pd_dt_gain
            AND rgt.nm_entre = cv_nm_unite_repas;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour retrouver les enregistrements regroupés
      -- dans CUR_regrp_fdt
      ----------------------------------------------------------------------
      CURSOR CUR_trait_repas(pd_dt_gain DATE,
                             pv_statu   VARCHAR2
                             -- INC00016960
                            ,
                             pv_cd_gain VARCHAR2
                             -- INC00017895
                            ,
                             pn_id_afect NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.cd_actio,
                fdt.nb_perd_repas
           FROM gir_rh_fdt fdt
          WHERE fdt.id_afect = pn_id_afect
            AND fdt.statu_sagip = pv_statu
            AND fdt.dt_gain = pd_dt_gain
            AND fdt.nm_fiche = 'H760'
            AND fdt.in_trans_anul = 'N'
               -- INC00016960
               --AND    fdt.cd_gain IN ('A030','A047','A048','A148')
            AND ((pv_cd_gain = 'A032' AND fdt.cd_gain IN ('A030',
                                                          'A047',
                                                          'A048',
                                                          'A148')) OR
                (pv_cd_gain = 'A039' AND fdt.cd_gain IN ('A136',
                                                          'A236',
                                                          'A336')))
          ORDER BY fdt.nb_hh_signe DESC;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour retrouver les enregistrements regroupés
      -- dans CUR_regrp_fdt pour les actions de création et de modification
      ----------------------------------------------------------------------
      CURSOR CUR_trait_repas_actio(pd_dt_gain DATE,
                                   pv_statu   VARCHAR2
                                   -- INC00016960
                                  ,
                                   pv_cd_gain  VARCHAR2,
                                   pn_id_afect NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.cd_actio,
                fdt.nb_perd_repas
           FROM gir_rh_fdt fdt
          WHERE fdt.id_afect = pn_id_afect
            AND fdt.statu_sagip = pv_statu
            AND fdt.dt_gain = pd_dt_gain
            AND fdt.nm_fiche = 'H760'
            AND fdt.in_trans_anul = 'N'
               -- INC00016960
               --AND    fdt.cd_gain IN ('A030','A047','A048','A148')
            AND ((pv_cd_gain = 'A032' AND fdt.cd_gain IN ('A030',
                                                          'A047',
                                                          'A048',
                                                          'A148')) OR
                (pv_cd_gain = 'A039' AND fdt.cd_gain IN ('A136',
                                                          'A236',
                                                          'A336')))
            AND fdt.cd_actio IN (cv_cd_actio_creat,
                                 cv_cd_actio_modfc)
          ORDER BY fdt.nb_hh_signe,
                   fdt.cd_actio DESC;
      --
      REC_trait_repas CUR_trait_repas%ROWTYPE; -- Enregistrement de type CUR_trait_repas
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour récupérer les données de
      -- la feuille de temps pour insérer dans vgREC_gir_rh_fdt
      ----------------------------------------------------------------------
      CURSOR CUR_fdt(pn_id_contr_fdt NUMBER) IS
         SELECT fdt.*
           FROM gir_rh_fdt fdt
          WHERE fdt.id_contr_fdt = pn_id_contr_fdt;
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- Pour chacun des regroupements de la liste des repas faire :
      --
      <<repas>>
      FOR REC_CUR_regrp_repas IN CUR_regrp_repas LOOP
         --
         -- INC00017895
         --
         IF vln_id_afect <> REC_CUR_regrp_repas.id_afect THEN
            --
            vln_id_afect := REC_CUR_regrp_repas.id_afect;
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie.dt_fin,
                          prec_persn  => vgrec_persn);
            --
         END IF;
         --
         --DDC 209235
         vld_dt_gain := REC_CUR_regrp_repas.dt_gain;
         --
         -- Initialiser les valeurs pour le gain en traitement
         --
         vln_id_contr_fdt := NULL;
         vlb_in_gain_rejt := FALSE;
         vln_id_gain      := NULL;
         --
         -- INC00017614
         --
         IF REC_CUR_regrp_repas.nb_perd_repas = 0 THEN
            --
            -- Créer un enregistrement annulé à 0
            --
            vgrec_gir_rh_fdt := NULL;
            --
            p_obten_ventl_cout(pn_id_afect     => REC_CUR_regrp_repas.id_afect,
                               pd_dt_afect     => REC_CUR_regrp_repas.dt_gain,
                               pv_id_type_paie => cv_id_type_paie_stand,
                               prec_ventl_cout => vlrec_cle_compt);
            --
            vgrec_gir_rh_fdt.elemn_entry_id  := NULL;
            vgrec_gir_rh_fdt.elemn_type_id   := NULL;
            vgrec_gir_rh_fdt.id_persn        := vgrec_persn.id_persn;
            vgrec_gir_rh_fdt.id_afect        := REC_CUR_regrp_repas.id_afect;
            vgrec_gir_rh_fdt.dt_perd_paie_du := REC_CUR_regrp_repas.perd_paie_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au := REC_CUR_regrp_repas.perd_paie_fin;
            vgrec_gir_rh_fdt.unite_admin     := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt      := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr           := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl           := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.minst           := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.budgt           := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn     := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.aa_finnc        := REC_CUR_regrp_repas.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain         := REC_CUR_regrp_repas.cd_gain_sagip;
            vgrec_gir_rh_fdt.dt_gain         := REC_CUR_regrp_repas.dt_gain;
            vgrec_gir_rh_fdt.dt_debut        := REC_CUR_regrp_repas.dt_gain;
            vgrec_gir_rh_fdt.hh_debut        := NULL;
            vgrec_gir_rh_fdt.dt_fin          := REC_CUR_regrp_repas.dt_gain;
            vgrec_gir_rh_fdt.hh_fin          := NULL;
            vgrec_gir_rh_fdt.md_compn        := NULL;
            vgrec_gir_rh_fdt.tx_horr         := NULL;
            vgrec_gir_rh_fdt.sectn           := NULL;
            vgrec_gir_rh_fdt.clas            := NULL;
            vgrec_gir_rh_fdt.raisn_1         := NULL;
            vgrec_gir_rh_fdt.raisn_2         := NULL;
            vgrec_gir_rh_fdt.raisn_3         := NULL;
            vgrec_gir_rh_fdt.statu_sagip     := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.dt_statu_sagip  := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.nm_fiche        := 'H760';
            vgrec_gir_rh_fdt.nb_perd_repas   := REC_CUR_regrp_repas.nb_perd_repas;
            vgrec_gir_rh_fdt.hh_payer        := '00000';
            vgrec_gir_rh_fdt.nb_hh           := NULL;
            --INC70559
            vgrec_gir_rh_fdt.nb_hh_derv_signe := NULL;
            vgrec_gir_rh_fdt.tx_mt            := NULL;
            vgrec_gir_rh_fdt.id_bloc_temps    := NULL;
            vgrec_gir_rh_fdt.no_versn_objet   := NULL;
            vgrec_gir_rh_fdt.nb_hh_signe      := 0;
            vgrec_gir_rh_fdt.tx_mt_signe      := 0;
            vgrec_gir_rh_fdt.cd_actio         := cv_cd_actio_creat;
            vgrec_gir_rh_fdt.in_trans_anul    := 'O';
            --
            p_creer_gain_fdt(vln_id_contr_fdt);
            --
            -- Inscrire l'identifiant de la fdt dans les suivis traités.
            --
            FOR REC_CUR_id_repas IN CUR_id_repas(REC_CUR_regrp_repas.dt_gain,
                                                 REC_CUR_regrp_repas.cd_gain_sagip
                                                 -- INC00017895
                                                ,
                                                 vln_id_afect) LOOP
               --
               UPDATE gir_rh_suivi_elemn
                  SET id_contr_fdt = vln_id_contr_fdt
                WHERE element_entry_id = REC_CUR_id_repas.id_gain
                  AND trans_type = 'I';
               --
               -- Début INC-89949
               UPDATE gir_rh_suivi_entre_elemn_paie
                  SET id_contr_fdt = vln_id_contr_fdt
                WHERE element_entry_id = REC_CUR_id_repas.id_gain
                  AND trans_type = 'I';
               -- Fin INC-89949
            --
            END LOOP;
            --
         ELSE
            -- Fin INC0017614
            --
            -- Aller chercher le 1er identifiant du gain regroupé de type repas
            --
            OPEN CUR_id_repas(REC_CUR_regrp_repas.dt_gain
                              -- INC00016960
                             ,
                              REC_CUR_regrp_repas.cd_gain_sagip
                              -- INC00017895
                             ,
                              vln_id_afect);
            --
            FETCH CUR_id_repas
               INTO vln_id_gain;
            --
            CLOSE CUR_id_repas;
            --
            --DDC 209235
            vgv_id_entre_elemn := vln_id_gain; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
            --
            OPEN CUR_trait_repas(REC_CUR_regrp_repas.dt_gain,
                                 cv_statu_sagip_non_trans
                                 -- INC00016960
                                ,
                                 REC_CUR_regrp_repas.cd_gain_sagip
                                 -- INC00017895
                                ,
                                 vln_id_afect);
            --
            FETCH CUR_trait_repas
               INTO REC_trait_repas;
            --
            --DDC 209235
            vln_id_contr_fdt := REC_trait_repas.id_contr_fdt;
            --
            IF CUR_trait_repas%FOUND THEN
               CLOSE CUR_trait_repas;
               --
               CASE
                  WHEN REC_trait_repas.cd_actio IN (cv_cd_actio_creat,
                                                    cv_cd_actio_modfc) THEN
                     --
                     UPDATE gir_rh_fdt fdt
                        SET fdt.nb_perd_repas = NVL(fdt.nb_perd_repas,
                                                    0) + NVL(REC_CUR_regrp_repas.nb_perd_repas,
                                                             0)
                      WHERE fdt.id_contr_fdt = REC_trait_repas.id_contr_fdt;
                     --
                  ELSE
                     -- suppression
                     -- rien de spécial à faire
                     NULL;
                     --
               END CASE;
               --
               -- Inscrire l'identifiant de la fdt dans le suivi traité.
               --
               UPDATE gir_rh_suivi_elemn
                  SET id_contr_fdt = REC_trait_repas.id_contr_fdt
                WHERE element_entry_id = vln_id_gain
                     -- INC00016215
                  AND trans_type = 'I';
               --
               -- Début INC-89949
               UPDATE gir_rh_suivi_entre_elemn_paie
                  SET id_contr_fdt = REC_trait_repas.id_contr_fdt
                WHERE element_entry_id = vln_id_gain
                  AND trans_type = 'I';
               -- Fin INC-89949
               --
               p_log('20 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_fdt,
                     vlv_nm_procd_fonct);
               --
               -- Incrémente le nombre d'enregistrements lus. Aucune insertion ni rejet
               --
               p_incre_cp(pv_nm_table => cv_nm_table_fdt);
               --
            ELSE
               CLOSE CUR_trait_repas;
               --
               -- Pour les créations ou modifications acceptées par SAGIP
               --
               OPEN CUR_trait_repas_actio(REC_CUR_regrp_repas.dt_gain,
                                          cv_statu_sagip_acept
                                          -- INC00016960
                                         ,
                                          REC_CUR_regrp_repas.cd_gain_sagip
                                          -- INC00017895
                                         ,
                                          vln_id_afect);
               --
               FETCH CUR_trait_repas_actio
                  INTO REC_trait_repas;
               --
               --DDC 209235
               vln_id_contr_fdt := REC_trait_repas.id_contr_fdt;
               --
               IF CUR_trait_repas_actio%FOUND THEN
                  CLOSE CUR_trait_repas_actio;
                  --
                  -- On crée un nouvel enregistrement dans la table
                  -- de contrôle des feuilles de temps en modification
                  -- non transféré à SAGIP
                  --
                  vgrec_gir_rh_fdt := NULL;
                  --
                  OPEN CUR_fdt(REC_trait_repas.id_contr_fdt);
                  --
                  FETCH CUR_fdt
                     INTO vgrec_gir_rh_fdt;
                  --
                  --DDC 209235
                  vgv_id_entre_elemn := vgrec_gir_rh_fdt.elemn_entry_id; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
                  vln_id_trans       := vgrec_gir_rh_fdt.id_trans;
                  vln_id_contr_fdt   := vgrec_gir_rh_fdt.id_contr_fdt;
                  --
                  IF CUR_fdt%FOUND THEN
                     CLOSE CUR_fdt;
                     --
                     vgrec_gir_rh_fdt.nb_perd_repas  := NVL(vgrec_gir_rh_fdt.nb_perd_repas,
                                                            0) + NVL(REC_CUR_regrp_repas.nb_perd_repas,
                                                                     0);
                     vgrec_gir_rh_fdt.cd_actio       := cv_cd_actio_modfc;
                     vgrec_gir_rh_fdt.statu_sagip    := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.dt_statu_sagip := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.nm_fiche       := 'H760';
                     vgrec_gir_rh_fdt.id_persn       := vgrec_persn.id_persn;
                     p_log('30 - Appel de la procédure P_creer_gain_fdt.',
                           vlv_nm_procd_fonct);
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                     -- Inscrire l'identifiant de la fdt dans le suivi traité.
                     --
                     UPDATE gir_rh_suivi_elemn
                        SET id_contr_fdt = vln_id_contr_fdt
                      WHERE element_entry_id = vln_id_gain
                           -- INC00016215
                        AND trans_type = 'I';
                     --
                     -- Début INC-89949
                     UPDATE gir_rh_suivi_entre_elemn_paie
                        SET id_contr_fdt = vln_id_contr_fdt
                      WHERE element_entry_id = vln_id_gain
                        AND trans_type = 'I';
                     -- Fin INC-89949
                     --
                  ELSE
                     --
                     CLOSE CUR_fdt;
                     --
                     -- Normalement on ne devrait jamais arriver ici mais...
                     --
                     vgv_texte_ereur := 'Le SELECT sur la table GIR_RH_FDT n''a rien trouvé ' || 'pour la clef ' || REC_trait_repas.id_contr_fdt ||
                                        ' - Employé : ' || vgv_no_emplo;
                     --
                     RAISE vgexc_trait_h760;
                     --
                  END IF;
                  --
               ELSE
                  CLOSE CUR_trait_repas_actio;
                  --
                  vlb_in_gain_rejt := TRUE;
                  --
               END IF;
               --
               IF vlb_in_gain_rejt THEN
                  --
                  p_log('50 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_fdt || ', pb_in_rejt => ' || 'TRUE',
                        vlv_nm_procd_fonct);
                  --
                  -- Incrémente le nombre d'enregistrements lus et rejetés.
                  --
                  p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                             pb_in_rejt  => TRUE);
                  --
                  p_log('60 - Appel de la procédure P_ajout_rejt. ' || 'pn_id_entre_elemn => ' || vln_id_gain || ', pv_cd_ereur => ' || 'GIR-100147' ||
                        ', pn_id_afect => ' || vln_id_afect || ', pv_nm_procd => ' || vlv_nm_procd_fonct,
                        vlv_nm_procd_fonct);
                  --
                  p_ajout_rejt(pn_id_entre_elemn => vln_id_gain,
                               pv_cd_ereur       => 'GIR-100147',
                               /* INC00017895
                                                                                                                                                                                                                                                                                    pn_id_afect       => pn_id_afect,*/
                               pn_id_afect      => vln_id_afect,
                               pn_id_trans      => NULL,
                               pd_dt_perd_couvr => vgrec_perd_paie.dt_debut,
                               pv_nm_procd      => vlv_nm_procd_fonct);
                  --DDC 209235
                  vlv_code_erreur_gir := 'GIR-100147';
                  vln_id_entre_elemn  := vln_id_gain;
                  --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                  vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                       ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                       ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                       TO_CHAR(vld_dt_gain,
                                               'YYYY-MM-DD') || ';';
                  vlv_de_mesg_techn := NULL;
                  vlv_nm_procd      := vlv_nm_procd;
               
                  p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                 pv_token_value     => vlv_token_value,
                                 pn_id_demnd        => vgn_id_demnd,
                                 pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                 pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                 pv_nm_procd        => vlv_nm_procd,
                                 pv_de_mesg_techn   => vlv_de_mesg_techn);
                  --
               END IF;
               --
            END IF;
            --
         END IF;
         --
      END LOOP repas;
      --
      p_log('70 - fin procédure. ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_liste_repas
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h760 THEN
         --
         p_log('80 - Exception du traitement H760.',
               vlv_nm_procd_fonct);
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80400';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs ouverts
         --
         IF CUR_trait_repas%ISOPEN THEN
            CLOSE CUR_trait_repas;
         END IF;
         --
         IF CUR_trait_repas_actio%ISOPEN THEN
            CLOSE CUR_trait_repas_actio;
         END IF;
         --
         IF CUR_fdt%ISOPEN THEN
            CLOSE CUR_fdt;
         END IF;
         --
         IF CUR_id_repas%ISOPEN THEN
            CLOSE CUR_id_repas;
         END IF;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('90 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80400';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_trait_liste_repas;

   --
   -- ============================================================================
   -- P_const_liste_gains_repas:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de constituer la liste des gains
   *       déclaratoires et des repas (point 6 et 7 du MD50).
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pn_id_afect       : Identifiant de l'affectation de l'employé
   *   - pd_dt_debut_afect : Date de début effectivité de l'affectation
   *   - pd_dt_fin_afect   : Date de fin effectivité de l'affectation
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-12  Création
   * Michel Dessureault   2012-10-30  INC00016215  Ajouter trans_type = 'I'
   *                                               pour restreindre au suivi en création
   * Michel Dessureault   2012-11-13  INC00016215  Utiliser xxgir_rh_elemn_h620_tempr
   *                                               pour améliorer la performance et la clarté
   *                                               Corriger erreur dans le select de
   *                                               constitution de la liste des gains H760.
   * Michel Dessureault   2013-01-15  INC00016849  Ne pas utiliser les heures converties
   * Michel Dessureault   2013-01-23  INC00016960  Ajouter l'allocation de repas de prime de nuit (A039) pour le H760.
   * Michel Dessureault   2013-02-19  INC00017310  Date du gain doit être à l'intérieur de l'effectivité de l'affectation
   * Michel Dessureault   2013-03-22  INC00017895  Problème de performance.
   * Michel Dessureault   2013-06-05  INC00018447  Retouche 230. Il faut exclure de la liste les types de création A(absence) et F(PGI)
   * Frédéric Aubin       2014-02-22  Performance : un looping de trop
   * Frédéric Aubin       2014-02-22  Performance : Faire gather stats pour global temporary après les insert de
   *                                  gir_rh_elemn_h620_tempr, gir_rh_afect_tempr, gir_rh_suplm_h620_tempr,
   *                                  gir_rh_gains_tempr, gir_rh_h620_pc_tx_tempr
   * Frédéric Aubin       2014-02-25  INC-19168 : la date de gain doit être inférieure à la date d'exécution
   * Geneviève Bélanger   2016-01-29  CHG204574 - Ne pas traiter les gains A030 et A029 de type I dont les sommes sont <= 0
   * Geneviève Bélanger   2016-04-05  CHG204574 - Revoir l'utilisation d'un NOT EXISTS, pour la performance
   *************************************************************************/
   /* INC00017895
   PROCEDURE P_const_liste_gains_repas(pn_id_afect       IN NUMBER
                                       -- INC00017310
                                      ,pd_dt_debut_afect IN DATE
                                      ,pd_dt_fin_afect   IN DATE) IS
   */
   PROCEDURE p_const_liste_gains_repas(pn_assignment_id   IN NUMBER,
                                       pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                       pv_token_value     OUT NOCOPY VARCHAR2,
                                       pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                       pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_const_liste_gains_repas';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_const_liste_gains_repas';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      -- INC00017895
      vltab_liste_elemn tab_elemn; -- Table PL/SQL pour les numéros d'éléments.
      vln_id_afect      gir_rh_suivi_entre_elemn_paie.assignment_id%TYPE := 0; -- INC-89949
      vln_aa_finc       NUMBER;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant d'extraire les valeurs du suivi
      -- des éléments en création non traités pour les périodes ciblées
      -- pour construire la liste des gains déclaratoires
      ----------------------------------------------------------------------
      CURSOR CUR_suivi IS
         WITH liste_elemn AS
          (SELECT id_afect,
                  id_entre_elemn,
                  id_type_elemn,
                  dt_gain
             FROM (SELECT rea.id_afect,
                          rea.id_entre_elemn,
                          rea.id_type_elemn,
                          FND_DATE.CANONICAL_TO_DATE(rse.new_screen_entry_value) dt_gain,
                          COUNT(*) over(PARTITION BY rea.id_entre_elemn) nb_elemn
                     FROM xxgir_rh_elemn_afect_v        rea,
                          gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                          -- Début SAGIR F.Aubin 2014-02-22 Performance : un looping de trop
                         ,
                          (SELECT id_type_elemn,
                                  nm_elemn,
                                  cd_sagip,
                                  va_entre_elemn md_compn
                             FROM xxgir_rh_elemn_h620_tempr reht
                            WHERE reht.nm_liste = 'jeu_H760') h760
                   -- Fin SAGIR F.Aubin 2014-02-22 Performance
                    WHERE rea.nm_va_entre_elemn = cv_nm_dt_efect
                      AND rea.id_type_elemn = h760.id_type_elemn
                      AND rse.assignment_id = rea.id_afect
                         --DDC 209235 par employé (=assignment_id)
                      AND rea.id_afect = pn_assignment_id
                      AND rse.element_entry_id = rea.id_entre_elemn
                      AND rse.element_type_id = rea.id_type_elemn
                      AND rse.input_value_id = rea.id_va_entre_elemn
                      AND rse.input_value_id IS NOT NULL
                      AND rse.new_screen_entry_value IS NOT NULL
                      AND rse.trans_type = 'I'
                      AND rse.in_trait = 'N'
                         -- Retouche 230
                      AND rea.cd_type_creat NOT IN (cv_cd_type_creat_absen,
                                                    cv_cd_type_creat_pgi)
                         -- CHG204574 Début 2016-04-01
                      AND NOT EXISTS (SELECT 1
                             FROM xxgir_rh_elemn_afect_v        v,
                                  gir_rh_suivi_entre_elemn_paie g
                            WHERE v.id_bloc_temps = rea.id_bloc_temps
                              AND v.id_afect = g.assignment_id
                              AND v.id_afect = rea.id_afect
                              AND g.element_entry_id = v.id_entre_elemn
                              AND g.input_value_id = v.id_va_entre_elemn
                              AND g.in_trait = 'N'
                              AND g.trans_type = 'I'
                              AND v.cd_elemn IN (cv_cd_elemn_suplm_rembr,
                                                 cv_cd_elemn_inter_rembr)
                              AND v.nm_va_entre_elemn = cv_nm_hh HAVING SUM(TO_NUMBER(v.va_entre_elemn)) <= 0)
                         -- CHG204574 Fin 2016-04-01
                         -- les éléments I pour lesquels il existe un D (même id) ne doivent pas être considérés
                         -- comme des gains
                      AND NOT EXISTS (SELECT 1
                             FROM gir_rh_suivi_entre_elemn_paie ep,
                                  pay_element_types_f           et
                            WHERE ep.trans_type = 'D'
                              AND ep.in_trait = 'N'
                              AND ep.element_type_id = et.element_type_id
                              AND et.attribute3 IN (cv_cd_elemn_suplm_rembr,
                                                    cv_cd_elemn_inter_rembr)
                              AND et.attribute1 IN ('029',
                                                    '030')
                              AND et.effective_start_date <= vgrec_perd_paie.dt_fin
                              AND et.effective_end_date >= cd_dt_prodc
                              AND ep.element_entry_id = rea.id_entre_elemn))
            WHERE nb_elemn = 1
                 -- C'est ici qu'on filtre la date
              AND dt_gain BETWEEN cd_dt_prodc AND vgrec_perd_paie.dt_fin)
         SELECT rht.id_afect,
                rht.id_entre_elemn,
                rht.id_va_entre_elemn,
                rht.id_suivi_elemn,
                rht.va_entre_elemn,
                rht.perd_paie_debut,
                rht.perd_paie_fin,
                rht.id_type_elemn,
                rht.cd_gain_sagip,
                rht.md_compn,
                rht.dt_gain,
                rht.cd_elemn,
                rht.id_corps_emplo,
                rht.id_bloc_temps,
                rht.no_versn_objet,
                rht.dt_debut,
                rht.hh_debut,
                rht.dt_fin,
                rht.hh_fin,
                rht.nm_entre,
                rht.aa_finnc,
                rht.nb_hh_convr
           FROM (SELECT grse.suivi_elemn_record_id id_suivi_elemn,
                        grse.assignment_id id_afect,
                        grse.element_entry_id id_entre_elemn,
                        le.dt_gain dt_gain,
                        grse.element_type_id id_type_elemn,
                        h760.cd_sagip cd_gain_sagip,
                        grse.input_value_id id_va_entre_elemn,
                        grse.new_screen_entry_value va_entre_elemn,
                        grse.new_effective_start_date perd_paie_debut,
                        grse.new_effective_end_date perd_paie_fin,
                        vgrec_perd_paie.aa_finnc aa_finnc,
                        h760.md_compn md_compn,
                        NULL nb_hh_convr,
                        (SELECT tbb.start_time
                           FROM hxc_time_building_blocks tbb,
                                pay_element_entries_f    peef
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN peef.effective_start_date AND peef.effective_end_date
                            AND peef.element_entry_id = grse.element_entry_id
                            AND peef.assignment_id = grse.assignment_id
                            AND tbb.time_building_block_id = peef.attribute5
                            AND tbb.object_version_number = peef.attribute6) dt_debut,
                        (SELECT TO_CHAR(tbb.start_time,
                                        'HH24MI')
                           FROM hxc_time_building_blocks tbb,
                                pay_element_entries_f    peef
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN peef.effective_start_date AND peef.effective_end_date
                            AND peef.element_entry_id = grse.element_entry_id
                            AND peef.assignment_id = grse.assignment_id
                            AND tbb.time_building_block_id = peef.attribute5
                            AND tbb.object_version_number = peef.attribute6) hh_debut,
                        (SELECT tbb.stop_time
                           FROM hxc_time_building_blocks tbb,
                                pay_element_entries_f    peef
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN peef.effective_start_date AND peef.effective_end_date
                            AND peef.element_entry_id = grse.element_entry_id
                            AND peef.assignment_id = grse.assignment_id
                            AND tbb.time_building_block_id = peef.attribute5
                            AND tbb.object_version_number = peef.attribute6) dt_fin,
                        (SELECT TO_CHAR(tbb.stop_time,
                                        'HH24MI')
                           FROM hxc_time_building_blocks tbb,
                                pay_element_entries_f    peef
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN peef.effective_start_date AND peef.effective_end_date
                            AND peef.element_entry_id = grse.element_entry_id
                            AND peef.assignment_id = grse.assignment_id
                            AND tbb.time_building_block_id = peef.attribute5
                            AND tbb.object_version_number = peef.attribute6) hh_fin,
                        (SELECT pivtl.name
                           FROM pay_input_values_f_tl pivtl,
                                pay_input_values_f    piv
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN piv.effective_start_date AND piv.effective_end_date
                            AND piv.element_type_id = grse.element_type_id
                            AND piv.input_value_id = grse.input_value_id
                            AND pivtl.language = USERENV('LANG')
                            AND pivtl.input_value_id = piv.input_value_id) nm_entre,
                        (SELECT peef.attribute5
                           FROM pay_element_entries_f peef
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN peef.effective_start_date AND peef.effective_end_date
                            AND peef.element_entry_id = grse.element_entry_id
                            AND peef.assignment_id = grse.assignment_id) id_bloc_temps,
                        (SELECT peef.attribute6
                           FROM pay_element_entries_f peef
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN peef.effective_start_date AND peef.effective_end_date
                            AND peef.element_entry_id = grse.element_entry_id
                            AND peef.assignment_id = grse.assignment_id) no_versn_objet,
                        (SELECT petf.attribute3
                           FROM pay_element_types_f petf
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN petf.effective_start_date AND petf.effective_end_date
                            AND petf.element_type_id = grse.element_type_id) cd_elemn,
                        (SELECT peef.attribute3
                           FROM pay_element_entries_f peef
                          WHERE TRUNC(grse.new_effective_start_date) BETWEEN peef.effective_start_date AND peef.effective_end_date
                            AND peef.element_entry_id = grse.element_entry_id
                            AND peef.assignment_id = grse.assignment_id) id_corps_emplo
                   FROM gir_rh_suivi_entre_elemn_paie grse -- INC-89949
                        -- Début SAGIR F.Aubin 2014-02-22 Performance : un looping de trop
                       ,
                        (SELECT id_type_elemn,
                                nm_elemn,
                                cd_sagip,
                                va_entre_elemn md_compn
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = 'jeu_H760') h760
                        -- Fin SAGIR F.Aubin 2014-02-22 Performance
                       ,
                        liste_elemn le
                  WHERE grse.element_type_id = h760.id_type_elemn
                    AND grse.assignment_id = le.id_afect
                       --DDC 209235 par employé (=assignment_id)
                    AND grse.assignment_id = pn_assignment_id
                    AND grse.element_entry_id = le.id_entre_elemn
                    AND grse.element_type_id = le.id_type_elemn
                    AND grse.trans_type = 'I'
                    AND grse.in_trait = 'N'
                    AND grse.input_value_id IS NOT NULL) rht,
                xxgir_rh_afect_tempr rat
          WHERE rat.id_afect = rht.id_afect
               --DDC 209235 par employé (=assignment_id)
            AND rat.id_afect = pn_assignment_id
            AND rat.in_type_paie = cv_id_type_paie_stand
            AND rht.dt_gain BETWEEN rat.dt_debut AND rat.dt_fin
               -- F.Aubin 2014-02-25 INC-19168 : la date de gain doit être inférieure à la date d'exécution
            AND rht.dt_gain <= TRUNC(vgd_dt_exect)
         -- Fin F.Aubin 2014-02-25 INC-19168
          ORDER BY rht.id_afect,
                   rht.id_entre_elemn;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur regroupant les éléments traités
      ----------------------------------------------------------------------
      CURSOR CUR_elemn IS
         SELECT rgt.id_gain
           FROM xxgir_rh_gains_tempr rgt
         --DDC 209235 par employé (=assignment_id)
          WHERE rgt.id_afect = pn_assignment_id
          GROUP BY rgt.id_gain;
      --
      -- INC 82003
      vlrec_perd_paie_gain type_rec_plage;
      --
   BEGIN
      --
      /* INC00017895
      p_log('10 - Début procédure. pn_id_afect -> ' || pn_id_afect, vlv_nm_procd_fonct);*/
      p_log('10 - Début procédure. ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<suivi>>
      FOR REC_CUR_suivi IN CUR_suivi LOOP
         --
         -- INC00017895
         IF vln_id_afect <> REC_CUR_suivi.id_afect THEN
            --
            vln_id_afect := REC_CUR_suivi.id_afect;
            --
         END IF;
         -- fin
         --DDC 209235
         vld_dt_gain        := REC_CUR_suivi.dt_gain; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vgv_id_entre_elemn := REC_CUR_suivi.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         --
         /* 6. Maintenant, on doit vérifier s'il existe des regroupements de la liste qui correspondent
               à des unités de repas (code SAGIP « A032 » ou « A039 »). Les unités de repas doivent être inscrites
               dans une transaction H760 qui correspond à des heures supplémentaires (codes SAGIP A030,
               A047, A048 et A148 pour A032 ou A136, A236 et A336 pour A039). C'est-à-dire, que l'on ne peut pas générer une transaction H760
               seulement pour des unités de repas. Il faut générer une transaction H760 d'heures
               supplémentaires (codes SAGIP A030, A047, A048 et A148 pour A032 ou A136, A236 et A336 pour A039) incluant les unités de repas.
               Lors de la saisie de repas dans la feuille de temps de l'employé du « Libre-service employé »
               de SAGIR, il y a une validation dans ce sens. C'est-à-dire, qu'un employé ne peut pas saisir
               un repas s'il n'a pas au préalable saisi des heures supplémentaires pour la journée du repas
               demandé.
               Alors, sélectionner de la liste les regroupements qui correspondent à l'élément « Repas ».
               Enlever ces regroupements de la liste des gains déclaratoires et les conserver dans
               une liste de repas.
         */
         --
         -- liste de gains déclaratoires avec repas
         -- INC 82003
         vln_aa_finc := NULL;
         IF vgrec_perd_paie.no_perd IN ('01',
                                        '02') AND
            REC_CUR_suivi.dt_gain < TO_DATE(EXTRACT(YEAR FROM vgd_dt_exect /*Enlever SYSDATE*/) || '-04-01',
                                            'YYYY-MM-DD') THEN
            /*P_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_stand,
            pd_dt_gain      => REC_CUR_suivi.dt_gain,
            pREC_perd_paie  => vlREC_perd_paie_gain);*/
            vln_aa_finc := EXTRACT(YEAR FROM vgd_dt_exect /*Enlever SYSDATE*/) - 1;
         END IF;
         --
         INSERT INTO xxgir_rh_gains_tempr
            (id_suivi_elemn,
             id_afect,
             id_gain,
             dt_gain,
             cd_gain_sagip,
             id_type_gain,
             id_va_entre,
             va_entre,
             perd_paie_debut,
             perd_paie_fin,
             aa_finnc,
             md_compn,
             dt_debut,
             dt_fin,
             hh_debut,
             hh_fin,
             nb_hh_convr,
             nm_entre,
             id_corps_emplo,
             id_bloc_temps,
             no_versn_objet,
             cd_elemn)
         VALUES
            (REC_CUR_suivi.id_suivi_elemn,
             REC_CUR_suivi.id_afect,
             REC_CUR_suivi.id_entre_elemn,
             REC_CUR_suivi.dt_gain,
             REC_CUR_suivi.cd_gain_sagip,
             REC_CUR_suivi.id_type_elemn,
             REC_CUR_suivi.id_va_entre_elemn,
             REC_CUR_suivi.va_entre_elemn,
             REC_CUR_suivi.perd_paie_debut,
             REC_CUR_suivi.perd_paie_fin,
             NVL(vln_aa_finc,
                 REC_CUR_suivi.aa_finnc), -- INC 82003
             REC_CUR_suivi.md_compn,
             REC_CUR_suivi.dt_debut,
             REC_CUR_suivi.dt_fin,
             REC_CUR_suivi.hh_debut,
             REC_CUR_suivi.hh_fin,
             REC_CUR_suivi.nb_hh_convr,
             REC_CUR_suivi.nm_entre,
             REC_CUR_suivi.id_corps_emplo,
             REC_CUR_suivi.id_bloc_temps,
             REC_CUR_suivi.no_versn_objet,
             REC_CUR_suivi.cd_elemn);
         --
      END LOOP suivi;
      -- F.Aubin 2014-02-22 Performance : faire gather stats.
      /*DBMS_STATS.gather_table_stats (ownname            => 'XXGIR',
      tabname            => 'GIR_RH_GAINS_TEMPR', -- le nom de ta table
      cascade            => TRUE,
      estimate_percent   => 10);*/
      --
      --
      -- INC00017895
      -- Le gain en suivi est traité
      --
      OPEN CUR_elemn;
      --
      FETCH CUR_elemn BULK COLLECT
         INTO vltab_liste_elemn;
      --
      CLOSE CUR_elemn;
   
      p_log('15 - afect = ' || pn_assignment_id || ', nb gains xxgir_rh_gains_tempr = ' || vltab_liste_elemn.count,
            vlv_nm_procd_fonct);
      --
      FORALL vln_cp IN INDICES OF vltab_liste_elemn
         UPDATE gir_rh_suivi_elemn rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
            AND rse.trans_type = 'I'
            AND rse.in_trait = 'N';
      --
      -- Début INC-89949
      FORALL vln_cp IN INDICES OF vltab_liste_elemn
         UPDATE gir_rh_suivi_entre_elemn_paie rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
            AND rse.trans_type = 'I'
            AND rse.in_trait = 'N';
      -- Fin INC-89949
      --
      vlTAB_liste_elemn.DELETE;
      -- fin INC00017895
      --
      -- 7. Ensuite, enlever de la liste de repas les enregistrements qui ont une période de repas = 0.
      --
      p_log('20 - Enlever de la liste de repas les enregistrements qui ont une période de repas = 0.',
            vlv_nm_procd_fonct);
      --
      DELETE FROM xxgir_rh_gains_tempr
      --Popol 2019-06-05 INC00145348 ajout distinct
       WHERE id_gain IN (SELECT DISTINCT rgt.id_gain
                         --fin
                           FROM xxgir_rh_gains_tempr rgt
                          WHERE rgt.cd_gain_sagip IN ('A032',
                                                      'A039')
                            AND NVL(rgt.va_entre,
                                    '0') = '0'
                            AND rgt.nm_entre = cv_nm_unite_repas
                               --DDC 209235 par employé (=assignment_id)
                            AND rgt.id_afect = pn_assignment_id);
      --
      p_log('30 - Fin procédure P_const_liste_gains_repas.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_const_liste_gains_repas
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- INC00017895
         vlTAB_liste_elemn.DELETE;
         --
         IF vln_id_afect > 0 THEN
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie.dt_fin,
                          prec_persn  => vgrec_persn);
            --
         END IF;
         -- fin
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('40 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80396';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_const_liste_gains_repas;

   --
   -- ============================================================================
   -- P_trait_rembr_h760:
   -- ============================================================================
   /****************************************************************************
   * But : Cette procédure permet de traiter les remboursements saisis par le RAR
   *       pour les heures intermédiaires et supplémentaires
   *       pour les paies standards (fiche H760).
   *****************************************************************************
   *
   * Paramètres entrée    :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Par                  Date        Description
   * ---------------      ----------  -------------
   * Michel Dessureault   2013-06-06  Création   Retouche 230(INC00018447)
   * Geneviève Bélanger   2016-01-29  Modification
   *                                  CHG204574 - Ne pas traiter les gains A030 et A029 de type I dont les sommes sont <= 0
   * Geneviève Bélanger   2016-04-05  CHG204574 - Revoir l'utilisation d'un NOT EXISTS, pour la performance
   * Geneviève Bélanger   2016-05-13  INC00103230 - ne plus annuler FDT si IN_TRANS_ANUL déjà à 'O'
   * Geneviève Bélanger   2016-05-17  Ajout du hint PARALLEL (rse, 1)
   * Geneviève Bélanger   2016-08-22  INC00103450 - pour les éléments supprimés, ne plus inscrire le id_contr_fdt dans
   *                                  l'historique des entrées d'éléments, car cela fausse les données du zoom
   * Geneviève Bélanger   2016-08-22  INC00104183 - ne pas annuler les gains dont la dt_trans = end_of_time
   *************************************************************************/
   PROCEDURE p_trait_rembr_h760(pn_assignment_id   IN NUMBER,
                                pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                pv_token_value     OUT NOCOPY VARCHAR2,
                                pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_rembr_h760';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_trait_rembr_h760';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h760.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_index       PLS_INTEGER;
      vlrec_cle_compt type_rec_ventl_cout; -- Clé comptable
      vltab_fdt       tab_fdt; -- Table associative PL/SQL contenant les enregistrements à créer dans GIR_RH_FDT
      --CHG204574 Début créer 2 tables, une pour I et l'autre pour D
      --vltab_contr_fdt    tab_elemn_rembr;
      vltab_contr_fdt_d tab_elemn_rembr; -- Table associative PL/SQL contenant les gains liés au contrôle de feuille de temps
      vltab_contr_fdt_i tab_elemn_rembr; -- Table associative PL/SQL contenant les gains liés au contrôle de feuille de temps
      --CHG204574 Fin
      --INC 87341
      vltab_contr_fdt_inc87341 tab_elemn_rembr;
      -- CHG204574 Remplacer par un tableau contenant le element_entry_id et le id_contr_fdt
      --vlvar_elemn_suprm      sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les éléments supprimés
      vltab_elemn_suprm     tab_elemn_rembr; -- Table associative PL/SQL contenant les id_contr_fdt des transactions déjà Acceptées ou Tranférées à SAGIP
      vln_compt_rembr_suprm NUMBER;
   
      --CHG204574 Début créer 2 VARRAY, un pour I et l'autre pour D
      --vlvar_fdt_anul     sys.odcinumberlist := sys.odcinumberlist();
      vlvar_fdt_anul_d sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les feuille de temps annulées
      vlvar_fdt_anul_i sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les feuille de temps annulées
      --CHG204574 Fin
      --
      vln_aa_finc NUMBER;
      -- INC 82003
      vlrec_perd_paie_gain type_rec_plage;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      --------------------------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir la liste des heures à rembourser
      -- pour la période courante
      --------------------------------------------------------------------------------
      CURSOR CUR_rembr_pgi(pd_dt_debut pay_element_entries_f.effective_start_date%TYPE,
                           pd_dt_fin   pay_element_entries_f.effective_end_date%TYPE) IS
         SELECT rembr.id_afect,
                rat.id_emplo id_persn,
                rembr.id_type_elemn,
                rembr.id_entre_elemn,
                rembr.nm_elemn,
                rembr.cd_sagip,
                rembr.dt_gain,
                rembr.nb_hh
           FROM (SELECT id_afect,
                        id_type_elemn,
                        id_entre_elemn,
                        nm_elemn,
                        cd_sagip,
                        NVL(FND_DATE.CANONICAL_TO_DATE(dt_efect),
                            DECODE(GREATEST(pd_dt_debut,
                                            cd_dt_prodc),
                                   cd_dt_prodc,
                                   cd_dt_prodc + 1,
                                   pd_dt_debut)) dt_gain,
                        FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh,
                        id_bloc_temps -- CHG204574 2016-04-05
                   FROM (SELECT id_afect,
                                id_type_elemn,
                                id_entre_elemn,
                                nm_elemn,
                                cd_sagip,
                                nm_va_entre_elemn,
                                va_entre_elemn,
                                id_bloc_temps -- CHG204574 2016-04-05
                           FROM (SELECT rea.id_afect,
                                         rea.id_type_elemn,
                                         rea.id_entre_elemn,
                                         rea.nm_elemn,
                                         rea.cd_elemn,
                                         rea.cd_sagip,
                                         rea.nm_va_entre_elemn,
                                         rea.id_va_entre_elemn,
                                         DECODE(rea.va_entre_elemn,
                                                NULL,
                                                DECODE(rea.in_va_entre_deft,
                                                       'Y',
                                                       rea.va_entre_deft),
                                                rea.va_entre_elemn) va_entre_elemn,
                                         rea.id_bloc_temps, -- CHG204574 2016-04-05
                                         COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre
                                    FROM xxgir_rh_elemn_afect_v    rea,
                                         xxgir_rh_elemn_h620_tempr reht,
                                         pay_element_entries_f     pee
                                   WHERE -- Gain présent dans le jeu d'éléments pour H760
                                     rea.id_type_elemn = reht.id_type_elemn
                                    --DDC 209235 par employé (=assignment_id)
                                  AND rea.id_afect = pn_assignment_id
                                  AND reht.nm_liste = 'jeu_H760'
                                    -- Gain non récurrent
                                  AND rea.type_procs_elemn = 'N'
                                    -- Gains ayant un CREATOR_TYPE = « F »
                                    --INC 72857
                                  AND pee.element_entry_id = rea.id_entre_elemn
                                  AND pee.creation_date BETWEEN cd_dt_infer AND pd_dt_fin
                                    
                                    --AND rea.cd_type_creat = cv_cd_type_creat_pgi
                                    --
                                    -- Gain en vigueur pour la période de paie courante
                                  AND rea.peev_dt_debut_efect <= pd_dt_fin
                                    --INC 72857
                                    --AND rea.peev_dt_fin_efect >= pd_dt_debut
                                  AND rea.peev_dt_fin_efect >= cd_dt_prodc
                                    --
                                  AND rea.pee_dt_debut_efect <= pd_dt_fin
                                    --INC 72857
                                    --AND rea.pee_dt_fin_efect >= pd_dt_debut
                                  AND rea.pee_dt_fin_efect >= cd_dt_prodc
                                    --
                                  AND rea.pel_dt_debut_efect <= pd_dt_fin
                                    --INC 72857
                                    --AND rea.pel_dt_fin_efect >= pd_dt_debut
                                  AND rea.pel_dt_fin_efect >= cd_dt_prodc
                                    --
                                  AND rea.pet_dt_debut_efect <= pd_dt_fin
                                    --INC 72857
                                    --AND rea.pet_dt_fin_efect >= pd_dt_debut
                                  AND rea.pet_dt_fin_efect >= cd_dt_prodc
                                    --
                                  AND rea.piv_dt_debut_efect <= pd_dt_fin
                                    --INC 72857
                                    --AND rea.piv_dt_fin_efect >= pd_dt_debut
                                  AND rea.piv_dt_fin_efect >= cd_dt_prodc
                                    --
                                    -- Gain correspondant à des heures à rembourser
                                  AND rea.cd_elemn IN (cv_cd_elemn_suplm_rembr,
                                                      cv_cd_elemn_inter_rembr)
                                    -- Gain ayant le code SAGIP « A030 » ou « A029 »
                                  AND rea.cd_sagip IN ('029',
                                                      '030')
                                    
                                    -- On cherche seulement les lignes qui ont les valeurs qui nous intéressent
                                  AND ((rea.nm_va_entre_elemn = cv_nm_hh AND rea.va_entre_elemn IS NOT NULL) OR (rea.nm_va_entre_elemn = cv_nm_dt_efect)))
                           -- 2 confirme que le mappage de l'élément est conforme au Gain correspondant à des heures à rembourser
                          WHERE nbr_va_entre = 2)
                 -- On pivote les rangées en colonne pour chaque gain
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_efect,
                                            'Heures' nb_hh))
                 -- Gain en vigueur après la date d'implantation
                   WHERE NVL(FND_DATE.CANONICAL_TO_DATE(dt_efect),
                             -- additionner +1 car la date de fin est plus grande que date implan dans ce cas
                             GREATEST(pd_dt_debut,
                                      cd_dt_prodc) + 1) > cd_dt_prodc
                  UNION -- Le plan résiduel
                  SELECT id_afect,
                         id_type_elemn,
                         id_entre_elemn,
                         nm_elemn,
                         cd_sagip,
                         FND_DATE.CANONICAL_TO_DATE(dt_efect) dt_gain,
                         FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh,
                         id_bloc_temps -- CHG204574 2016-04-05
                    FROM (SELECT id_afect,
                                 id_type_elemn,
                                 id_entre_elemn,
                                 nm_elemn,
                                 cd_sagip,
                                 nm_va_entre_elemn,
                                 va_entre_elemn,
                                 id_bloc_temps -- CHG204574 2016-04-05
                            FROM (SELECT rea.id_afect,
                                          rea.id_type_elemn,
                                          rea.id_entre_elemn,
                                          rea.nm_elemn,
                                          rea.cd_elemn,
                                          rea.cd_sagip,
                                          rea.nm_va_entre_elemn,
                                          rea.id_va_entre_elemn,
                                          DECODE(rea.va_entre_elemn,
                                                 NULL,
                                                 DECODE(rea.in_va_entre_deft,
                                                        'Y',
                                                        rea.va_entre_deft),
                                                 rea.va_entre_elemn) va_entre_elemn,
                                          rea.id_bloc_temps, -- CHG204574
                                          COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre
                                     FROM xxgir_rh_elemn_afect_v    rea,
                                          xxgir_rh_elemn_h620_tempr reht,
                                          pay_element_entries_f     pee
                                    WHERE -- Gain présent dans le jeu d'éléments pour H760
                                    rea.id_type_elemn = reht.id_type_elemn
                                   --DDC 209235 par employé (=assignment_id)
                                 AND rea.id_afect = pn_assignment_id
                                 AND reht.nm_liste = 'jeu_H760'
                                   -- Gain non récurrent
                                 AND rea.type_procs_elemn = 'N'
                                   -- Gains ayant un CREATOR_TYPE = « F »
                                   --INC 72857
                                 AND pee.element_entry_id = rea.id_entre_elemn
                                 AND pee.creation_date BETWEEN cd_dt_infer AND pd_dt_fin
                                   --AND rea.cd_type_creat = cv_cd_type_creat_pgi
                                   -- Gain en vigueur pour la période de paie courante
                                 AND rea.peev_dt_debut_efect <= pd_dt_fin
                                   --INC 72857
                                   --AND rea.peev_dt_fin_efect >= pd_dt_debut
                                 AND rea.peev_dt_fin_efect >= cd_dt_prodc
                                   --
                                 AND rea.pee_dt_debut_efect <= pd_dt_fin
                                   --INC 72857
                                   --AND rea.pee_dt_fin_efect >= pd_dt_debut
                                 AND rea.pee_dt_fin_efect >= cd_dt_prodc
                                   --
                                 AND rea.pel_dt_debut_efect <= pd_dt_fin
                                   --INC 72857
                                   --AND rea.pel_dt_fin_efect >= pd_dt_debut
                                 AND rea.pel_dt_fin_efect >= cd_dt_prodc
                                   --
                                 AND rea.pet_dt_debut_efect <= pd_dt_fin
                                   --INC 72857
                                   --AND rea.pet_dt_fin_efect >= pd_dt_debut
                                 AND rea.pet_dt_fin_efect >= cd_dt_prodc
                                   --
                                 AND rea.piv_dt_debut_efect <= pd_dt_fin
                                   --INC 72857
                                   --AND rea.piv_dt_fin_efect >= pd_dt_debut
                                 AND rea.piv_dt_fin_efect >= cd_dt_prodc
                                   --
                                   -- Gain correspondant à des heures à rembourser
                                 AND rea.cd_elemn IN (cv_cd_elemn_suplm_rembr,
                                                     cv_cd_elemn_inter_rembr)
                                   -- Gain ayant le code SAGIP « A030 » ou « A029 »
                                 AND rea.cd_sagip IN ('029',
                                                     '030')
                                   -- On cherche seulement les lignes qui ont les valeurs qui nous intéressent
                                 AND ((rea.nm_va_entre_elemn = cv_nm_hh_plan AND rea.va_entre_elemn IS NOT NULL) OR
                                    (rea.nm_va_entre_elemn = cv_nm_dt_entre_vigr AND rea.nm_va_entre_elemn IS NOT NULL)))
                          -- 3 confirme que le mappage de l'élément est conforme au Gain correspondant à des heures à rembourser
                           WHERE nbr_va_entre = 2)
                  -- On pivote les rangées en colonne pour chaque gain
                  pivot(MAX(va_entre_elemn)
                     FOR nm_va_entre_elemn IN('Date d''entrée en vigueur' dt_efect,
                                             'Heures du plan' nb_hh))
                  -- Gain en vigueur après la date d'implantation
                  WHERE FND_DATE.CANONICAL_TO_DATE(dt_efect) > cd_dt_prodc) rembr
                -- Gain lié à l'affectation
               ,
                xxgir_rh_afect_tempr rat
          WHERE rembr.id_afect = rat.id_afect
               --DDC 209235 par employé (=assignment_id)
            AND rat.id_afect = pn_assignment_id
            AND rat.in_type_paie = cv_id_type_paie_stand
            AND rembr.dt_gain BETWEEN rat.dt_debut AND rat.dt_fin
               --INC87341
            AND NOT EXISTS
          (SELECT 'X'
                   FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE rembr.id_entre_elemn = rse.element_entry_id
                    AND rat.id_afect = rse.assignment_id
                       -- Début CHG204574
                       -- Les transactions I dont la somme est <= 0 ne doivent pas
                       -- être considérées comme un remboursement, il faut les exclure
                       --AND    rse.in_trait = 'O');
                    AND (rse.in_trait = 'O' OR (rse.in_trait = 'N' AND rse.trans_type = 'I'
                        -- CHG204574 2016-04-05
                        AND EXISTS (SELECT 1
                                                             FROM xxgir_rh_elemn_afect_v        v,
                                                                  gir_rh_suivi_entre_elemn_paie g
                                                            WHERE v.id_bloc_temps = rembr.id_bloc_temps
                                                              AND v.id_afect = g.assignment_id
                                                              AND v.id_afect = rembr.id_afect
                                                              AND g.element_entry_id = v.id_entre_elemn
                                                              AND g.input_value_id = v.id_va_entre_elemn
                                                              AND g.in_trait = 'N'
                                                              AND g.trans_type = 'I'
                                                              AND v.cd_elemn IN (cv_cd_elemn_suplm_rembr,
                                                                                 cv_cd_elemn_inter_rembr)
                                                              AND v.nm_va_entre_elemn = cv_nm_hh HAVING SUM(TO_NUMBER(v.va_entre_elemn)) <= 0
                                                           -- CHG204574 2016-04-05
                                                           )))
                 -- Fin CHG204574
                 )
               -- CHG204574
               -- les id_elemn pour lesquels il existe un D ne doivent pas être traités
               -- comme des remboursements
            AND NOT EXISTS (SELECT 1
                   FROM gir_rh_suivi_entre_elemn_paie ep,
                        pay_element_types_f           et
                  WHERE ep.trans_type = 'D'
                    AND ep.in_trait = 'N'
                    AND ep.element_type_id = et.element_type_id
                    AND et.attribute3 IN (cv_cd_elemn_suplm_rembr,
                                          cv_cd_elemn_inter_rembr)
                    AND et.attribute1 IN ('029',
                                          '030')
                    AND et.effective_start_date <= pd_dt_fin
                    AND et.effective_end_date >= cd_dt_prodc
                    AND ep.element_entry_id = rembr.id_entre_elemn
                       -- CHG209235 traitement par affectation
                    AND ep.assignment_id = rembr.id_afect);
      -- Fin CHG204574
      --
      --------------------------------------------------------------------------------
      -- Déclaration du curseur permettant de valider la présence dans GIR_RH_FDT
      --------------------------------------------------------------------------------
      CURSOR CUR_rembr_fdt(pn_id_entre_elemn gir_rh_fdt.elemn_entry_id%TYPE) IS
         SELECT fdt.statu_sagip,
                fdt.cd_actio,
                fdt.nb_hh_signe,
                fdt.dt_gain,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H760'
            AND fdt.in_trans_anul = 'N'
            AND fdt.elemn_entry_id = pn_id_entre_elemn
         -- Prendre la fiche créée le plus récemment
          ORDER BY fdt.creation_date DESC;
      --
      REC_rembr_fdt CUR_rembr_fdt%ROWTYPE; -- Enregistrement de type CUR_rembr_fdt
      --
      --------------------------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir la liste des heures à rembourser
      -- qui ont été supprimées dans la période courante
      --------------------------------------------------------------------------------
      CURSOR CUR_rembr_suprm_pgi(pd_dt_debut gir_rh_suivi_entre_elemn_paie.old_effective_start_date%TYPE, -- INC-89949
                                 pd_dt_fin   gir_rh_suivi_entre_elemn_paie.old_effective_end_date%TYPE) IS -- INC-89949
      -- Traiter les trans_type = D
         SELECT rse.element_entry_id id_entre_elemn,
                NULL                 id_bloc_temps --CHG204574
           FROM gir_rh_suivi_entre_elemn_paie rse, -- INC-89949
                -- Table temporaire contenant la liste des affectations principales à paie standard en vigueur à la période de paie courante.
                -- CHG204574 Début
                -- ne plus utiliser xxgir_rh_afect_tempr qui ne contient que des trans_type=I
                --xxgir_rh_afect_tempr rat
                per_all_assignments_f paaf
         -- CHG204574 Fin
          WHERE -- Élément lié à l'affectation.
         -- CHG204574 Début enlever les références à xxgir_rh_afect_tempr(rat)
         --  rse.assignment_id = rat.id_afect
         --AND rat.in_type_paie = cv_id_type_paie_stand
         --AND rat.dt_debut <= pd_dt_fin
         --AND rat.dt_fin >= pd_dt_debut
          rse.assignment_id = paaf.assignment_id
         
         --DDC 209235 par employé (=assignment_id)
          AND rse.assignment_id = pn_assignment_id
          AND paaf.payroll_id = vgn_id_paie_stand
          AND paaf.effective_start_date <= pd_dt_fin
          AND paaf.effective_end_date >= pd_dt_debut
         -- CHG204574 Fin
         -- avec un type de transaction = « Supprimé »
          AND rse.trans_type = 'D'
         -- non traité
          AND rse.in_trait = 'N'
         -- Élément supprimé en vigueur dans la période de paie courante
          AND rse.old_effective_start_date <= pd_dt_fin
         --INC 72857
         --AND rse.old_effective_end_date >= pd_dt_debut
          AND rse.old_effective_end_date >= TO_DATE(FND_PROFILE.VALUE('GIR_DT_MISE_EN_PRODC_LIVRS_2'),
                                                'YYYY-MM-DD')
         --
         -- présent dans le jeu d'éléments pour H760
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht,
                  pay_element_types_f       pet
            WHERE reht.nm_liste = 'jeu_H760'
              AND reht.id_type_elemn = rse.element_type_id
              AND pet.element_type_id = reht.id_type_elemn
              AND pet.processing_type = 'N'
                 -- Gain ayant le code SAGIP « A030 » ou « A029 »
              AND pet.attribute1 IN ('029',
                                     '030')
                 -- Gain correspondant à des heures à rembourser
              AND pet.attribute3 IN (cv_cd_elemn_suplm_rembr,
                                     cv_cd_elemn_inter_rembr)
              AND pet.effective_start_date <= pd_dt_fin
                 --INC 72857
                 --AND pet.effective_end_date >= pd_dt_debut)
              AND pet.effective_end_date >= TO_DATE(FND_PROFILE.VALUE('GIR_DT_MISE_EN_PRODC_LIVRS_2'),
                                                    'YYYY-MM-DD'))
         --
          GROUP BY rse.element_entry_id
         -- CHG204574 Début
         -- faire un UNION pour les transactions I qu'il faut annuler
         UNION
         -- Traiter les trans_type = I avec une somme <= 0
         SELECT rse.element_entry_id id_entre_elemn,
                bloc_temps.id_bloc_temps
           FROM gir_rh_suivi_entre_elemn_paie rse,
                xxgir_rh_afect_tempr rat,
                (SELECT DISTINCT ea.id_bloc_temps,
                                 ea.id_entre_elemn
                   FROM xxgir_rh_elemn_afect_v        ea,
                        gir_rh_suivi_entre_elemn_paie see
                  WHERE ea.nm_va_entre_elemn = cv_nm_dt_efect
                    AND ea.id_entre_elemn = see.element_entry_id
                    AND ea.id_va_entre_elemn = see.input_value_id
                    AND see.trans_type = 'I'
                    AND see.in_trait = 'N'
                    AND ea.id_bloc_temps IS NOT NULL
                       -- utiliser la date du gain (see.new_screen_entry_value) pour vérifier les dates
                    AND DECODE(TRANSLATE(see.new_screen_entry_value,
                                         '0123456789/-',
                                         '0000000000--'),
                               '0000-00-00 00:00:00',
                               FND_DATE.CANONICAL_TO_DATE(see.new_screen_entry_value)) BETWEEN ea.pet_dt_debut_efect AND ea.pet_dt_fin_efect
                    AND DECODE(TRANSLATE(see.new_screen_entry_value,
                                         '0123456789/-',
                                         '0000000000--'),
                               '0000-00-00 00:00:00',
                               FND_DATE.CANONICAL_TO_DATE(see.new_screen_entry_value)) BETWEEN ea.piv_dt_debut_efect AND ea.piv_dt_fin_efect
                    AND DECODE(TRANSLATE(see.new_screen_entry_value,
                                         '0123456789/-',
                                         '0000000000--'),
                               '0000-00-00 00:00:00',
                               FND_DATE.CANONICAL_TO_DATE(see.new_screen_entry_value)) BETWEEN ea.pel_dt_debut_efect AND ea.pel_dt_fin_efect
                    AND DECODE(TRANSLATE(see.new_screen_entry_value,
                                         '0123456789/-',
                                         '0000000000--'),
                               '0000-00-00 00:00:00',
                               FND_DATE.CANONICAL_TO_DATE(see.new_screen_entry_value)) BETWEEN ea.pee_dt_debut_efect AND ea.pee_dt_fin_efect
                    AND DECODE(TRANSLATE(see.new_screen_entry_value,
                                         '0123456789/-',
                                         '0000000000--'),
                               '0000-00-00 00:00:00',
                               FND_DATE.CANONICAL_TO_DATE(see.new_screen_entry_value)) BETWEEN ea.peev_dt_debut_efect AND ea.peev_dt_fin_efect) bloc_temps
          WHERE
         --DDC 209235 par employé (=assignment_id)
          rse.assignment_id = pn_assignment_id
          AND rse.assignment_id = rat.id_afect
          AND rat.in_type_paie = cv_id_type_paie_stand
          AND rat.dt_debut <= pd_dt_fin
          AND rat.dt_fin >= pd_dt_debut
          AND rse.trans_type = 'I'
         -- CHG204574 2016-04-05
          AND EXISTS (SELECT 1
             FROM xxgir_rh_elemn_afect_v        v,
                  gir_rh_suivi_entre_elemn_paie g
            WHERE v.id_bloc_temps = bloc_temps.id_bloc_temps
              AND v.id_afect = g.assignment_id
              AND v.id_afect = rse.assignment_id
              AND g.element_entry_id = v.id_entre_elemn
              AND g.input_value_id = v.id_va_entre_elemn
              AND g.in_trait = 'N'
              AND g.trans_type = 'I'
              AND v.cd_elemn IN (cv_cd_elemn_suplm_rembr,
                                 cv_cd_elemn_inter_rembr)
              AND v.nm_va_entre_elemn = cv_nm_hh HAVING SUM(TO_NUMBER(v.va_entre_elemn)) <= 0)
         -- CHG204574 2016-04-05
          AND rse.in_trait = 'N'
          AND bloc_temps.id_entre_elemn = rse.element_entry_id
          AND rse.old_effective_start_date <= pd_dt_fin
          AND rse.old_effective_end_date >= cd_dt_prodc
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht,
                  pay_element_types_f       pet
            WHERE reht.nm_liste = 'jeu_H760'
              AND reht.id_type_elemn = rse.element_type_id
              AND pet.element_type_id = reht.id_type_elemn
              AND pet.processing_type = 'N'
              AND pet.attribute1 IN ('029',
                                     '030')
              AND pet.attribute3 IN (cv_cd_elemn_suplm_rembr,
                                     cv_cd_elemn_inter_rembr)
              AND pet.effective_start_date <= pd_dt_fin
              AND pet.effective_end_date >= cd_dt_prodc)
          GROUP BY rse.element_entry_id,
                   bloc_temps.id_bloc_temps
         UNION
         -- Traiter les trans_type = I dont le lot a été annulé (Traitement par les lots BEE (Repositionnement))
         SELECT rse.element_entry_id id_entre_elemn,
                NULL                 id_bloc_temps
           FROM gir_rh_suivi_entre_elemn_paie rse,
                xxgir_rh_afect_tempr          rat
          WHERE --DDC 209235 par employé (=assignment_id)
          rse.assignment_id = pn_assignment_id
          AND rse.assignment_id = rat.id_afect
          AND rat.in_type_paie = cv_id_type_paie_stand
          AND rat.dt_debut <= pd_dt_fin
          AND rat.dt_fin >= pd_dt_debut
          AND rse.trans_type = 'I'
          AND EXISTS (SELECT 1
             FROM gir_rh_suivi_entre_elemn_paie ep
            WHERE ep.trans_type = 'D'
              AND ep.in_trait = 'N'
              AND ep.element_entry_id = rse.element_entry_id)
          AND rse.in_trait = 'N'
          AND rse.old_effective_start_date <= pd_dt_fin
          AND rse.old_effective_end_date >= cd_dt_prodc
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht,
                  pay_element_types_f       pet
            WHERE reht.nm_liste = 'jeu_H760'
              AND reht.id_type_elemn = rse.element_type_id
              AND pet.element_type_id = reht.id_type_elemn
              AND pet.processing_type = 'N'
              AND pet.attribute1 IN ('029',
                                     '030')
              AND pet.attribute3 IN (cv_cd_elemn_suplm_rembr,
                                     cv_cd_elemn_inter_rembr)
              AND pet.effective_start_date <= pd_dt_fin
              AND pet.effective_end_date >= cd_dt_prodc)
          GROUP BY rse.element_entry_id;
      -- CHG204574 Fin
      --
      --------------------------------------------------------------------------------
      -- Déclaration du curseur permettant de valider la présence du remboursement
      -- rejeté dans GIR_RH_FDT et GIR_TRANS_H760
      --------------------------------------------------------------------------------
      CURSOR CUR_rembr_rejt(pn_id_entre_elemn gir_rh_fdt.elemn_entry_id%TYPE) IS
         SELECT fdt.id_contr_fdt
                --CHG204574 obtenir le statut, l'affectation et l'id_trans_h760
               ,
                fdt.statu_sagip,
                fdt.id_afect,
                h760.id_trans_h760,
                fdt.in_trans_anul  in_trans_anul_fdt,
                h760.in_trans_anul in_trans_anul_h760
                --CHG204574
                --INC00104183 vérifier si c'est un gain dans le futur -> 4712-12-31, dans ce cas il ne doit pas être annulé
               ,
                h760.dt_trans
                --INC00104183
               ,
                fdt.dt_gain -- CHG209238
           FROM gir_rh_fdt     fdt,
                gir_trans_h760 h760
          WHERE fdt.nm_fiche = 'H760'
               --CHG204574 Début - obtenir tous les statuts
               --AND fdt.statu_sagip = cv_statu_sagip_rejt
               --AND h760.in_trans_anul = 'N'
               --AND fdt.in_trans_anul  = 'N'
               --CHG204574 Fin
            AND fdt.elemn_entry_id = pn_id_entre_elemn
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND h760.id_trans_h760 = fdt.id_trans
         -- Prendre la fiche créée la plus récente
          ORDER BY fdt.creation_date DESC;
      --
      REC_rembr_rejt CUR_rembr_rejt%ROWTYPE; -- Enregistrement de type CUR_rembr_rejt
   
      -- CHG204574 Geneviève Bélanger 2016-01-20
      -- Vérifier si une transaction au statut Rejeté ou Non transféré à SAGIP existe
      -- concernant le même bloc de temps
      CURSOR CUR_trans_bloc_temps(pn_id_bloc_temps gir_rh_fdt.id_bloc_temps%TYPE) IS
         SELECT fdt.id_contr_fdt,
                fdt.statu_sagip,
                fdt.id_afect,
                h760.id_trans_h760,
                fdt.in_trans_anul  in_trans_anul_fdt,
                h760.in_trans_anul in_trans_anul_h760
                --INC00104183 vérifier si c'est un gain dans le futur -> 4712-12-31, dans ce cas il ne doit pas être annulé
               ,
                h760.dt_trans
                --INC00104183
               ,
                fdt.dt_gain -- CHG209238
           FROM gir_rh_fdt     fdt,
                gir_trans_h760 h760
          WHERE fdt.nm_fiche = 'H760'
               --AND fdt.in_trans_anul  = 'N'
               --AND h760.in_trans_anul = 'N'
            AND fdt.id_bloc_temps = pn_id_bloc_temps
            AND h760.id_trans_h760 = fdt.id_trans
         -- Prendre la fiche créée la plus récente
          ORDER BY fdt.creation_date DESC;
   
      REC_trans_bloc_temps CUR_trans_bloc_temps%ROWTYPE;
      -- CHG204574
      -- Début Edgar Doiron INC70559
      -- Curseur pour obtenir les heures dérivées d'un entré d'élément de paie
      CURSOR CUR_nb_hh_derv_signe(pv_cd_gain          IN VARCHAR2,
                                  pn_assignment_id    IN NUMBER,
                                  pn_element_entry_id IN NUMBER) IS
      -- éléments de l'EFFECTUÉ du régime 'Heures supplémentaires'
         SELECT reav.va_entre_elemn
           FROM xxgir_rh_elemn_afect_v reav,
                pay_accrual_plans p,
                pay_net_calculation_rules c,
                pay_input_values_f i,
                pay_element_types_f e,
                (SELECT fvl.flex_value_meaning valeur,
                        fv.flex_value          fvalue
                   FROM fnd_flex_values_tl  fvl,
                        fnd_flex_values     fv,
                        fnd_flex_value_sets vs
                  WHERE (fv.flex_value_id = fvl.flex_value_id AND vs.flex_value_set_id = fv.flex_value_set_id AND fvl.language = USERENV('LANG') AND
                        vs.flex_value_set_name = 'GIR_RH_TYPE_ELEMN_ACUML')) col_ls
          WHERE p.accrual_plan_id = c.accrual_plan_id
            AND c.input_value_id = i.input_value_id
            AND col_ls.fvalue = e.attribute2
            AND i.element_type_id = e.element_type_id
            AND TRUNC(vgd_dt_exect /*Enlever SYSDATE*/) BETWEEN i.effective_start_date AND i.effective_end_date
            AND TRUNC(vgd_dt_exect /*Enlever SYSDATE*/) BETWEEN e.effective_start_date AND e.effective_end_date
            AND p.accrual_plan_name = 'Heures supplémentaires' -- régime
            AND col_ls.valeur = 'Effectué'
            AND e.attribute1 IS NOT NULL -- cd sagip
            AND reav.cd_sagip = e.attribute1
            AND reav.id_entre_elemn = pn_element_entry_id
            AND nm_va_entre_elemn = cv_nm_hh_compn_derv
            AND reav.id_afect = pn_assignment_id
            AND reav.cd_sagip = SUBSTR(pv_cd_gain,
                                       2);
      -- Fin Edgar Doiron INC70559
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<hh_rembr>>
      FOR REC_CUR_rembr_pgi IN CUR_rembr_pgi(vgrec_perd_paie.dt_debut,
                                             vgrec_perd_paie.dt_fin) LOOP
         --
         p_log('Remboursement - CUR_rembr_pgi',
               vlv_nm_procd_fonct);
         p_log('Index: ' || vltab_fdt.count,
               vlv_nm_procd_fonct);
         p_log('Elemn: ' || REC_CUR_rembr_pgi.id_entre_elemn,
               vlv_nm_procd_fonct);
         p_log('Afect: ' || REC_CUR_rembr_pgi.id_afect,
               vlv_nm_procd_fonct);
         p_log('Gain : ' || REC_CUR_rembr_pgi.cd_sagip,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_rembr_pgi.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_rembr_pgi.dt_gain; -- INC00106352 : toujours avoir le dt_gain lorsque possible.
      
         --
         vln_index := vltab_fdt.count + 1;
         --
         p_obten_ventl_cout(pn_id_afect       => REC_CUR_rembr_pgi.id_afect,
                            pd_dt_afect       => REC_CUR_rembr_pgi.dt_gain,
                            pv_id_type_paie   => cv_id_type_paie_stand,
                            pn_id_entre_elemn => REC_CUR_rembr_pgi.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         -- Vérifier l'existence d'une fiche H760
         --
         OPEN CUR_rembr_fdt(REC_CUR_rembr_pgi.id_entre_elemn);
         --
         FETCH CUR_rembr_fdt
            INTO REC_rembr_fdt;
         --
         --DDC 209235
         vln_id_contr_fdt := REC_rembr_fdt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         IF CUR_rembr_fdt%NOTFOUND THEN
            CLOSE CUR_rembr_fdt;
            --
            p_log('Élément: ' || REC_CUR_rembr_pgi.id_entre_elemn,
                  vlv_nm_procd_fonct);
            p_log('Création: ' || REC_CUR_rembr_pgi.nb_hh || ' heures',
                  vlv_nm_procd_fonct);
            -- INC 82003
            vln_aa_finc := NULL;
            IF vgrec_perd_paie.no_perd IN ('01',
                                           '02') AND
               REC_CUR_rembr_pgi.dt_gain < TO_DATE(EXTRACT(YEAR FROM vgd_dt_exect /*Enlever SYSDATE*/) || '-04-01',
                                                   'YYYY-MM-DD') THEN
               /*P_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_stand,
               pd_dt_gain      => REC_CUR_rembr_pgi.dt_gain,
               pREC_perd_paie  => vlREC_perd_paie_gain);*/
               vln_aa_finc := EXTRACT(YEAR FROM vgd_dt_exect /*Enlever SYSDATE*/) - 1;
            END IF;
            --
            --
            -- Stocker les valeurs pour la création massive des transactions H760 dans gir_rh_fdt
            --
            vltab_fdt(vln_index).cd_actio := cv_cd_actio_creat;
            vltab_fdt(vln_index).nm_fiche := 'H760';
            vltab_fdt(vln_index).statu_sagip := cv_statu_sagip_non_trans;
            vltab_fdt(vln_index).dt_statu_sagip := TRUNC(vgd_dt_exect);
            vltab_fdt(vln_index).in_trans_anul := 'N';
            vltab_fdt(vln_index).elemn_entry_id := REC_CUR_rembr_pgi.id_entre_elemn;
            vltab_fdt(vln_index).elemn_type_id := REC_CUR_rembr_pgi.id_type_elemn;
            vltab_fdt(vln_index).id_persn := REC_CUR_rembr_pgi.id_persn;
            vltab_fdt(vln_index).id_afect := REC_CUR_rembr_pgi.id_afect;
            vltab_fdt(vln_index).aa_finnc := NVL(vln_aa_finc,
                                                 vgrec_perd_paie.aa_finnc);
            vltab_fdt(vln_index).dt_perd_paie_du := vgrec_perd_paie.dt_debut;
            vltab_fdt(vln_index).dt_perd_paie_au := vgrec_perd_paie.dt_fin;
            vltab_fdt(vln_index).unite_admin := vlrec_cle_compt.unite_admin;
            vltab_fdt(vln_index).type_budgt := vlrec_cle_compt.type_budgt;
            vltab_fdt(vln_index).progr := vlrec_cle_compt.progr;
            vltab_fdt(vln_index).captl := vlrec_cle_compt.captl;
            vltab_fdt(vln_index).minst := NVL(vlrec_cle_compt.minst,
                                              '000');
            vltab_fdt(vln_index).budgt := vlrec_cle_compt.budgt;
            vltab_fdt(vln_index).centr_respn := vlrec_cle_compt.centr_respn;
            vltab_fdt(vln_index).cd_gain := 'A' || REC_CUR_rembr_pgi.cd_sagip;
            vltab_fdt(vln_index).dt_gain := REC_CUR_rembr_pgi.dt_gain;
            -- Début Edgar Doiron INC70559
            OPEN CUR_nb_hh_derv_signe(REC_CUR_rembr_pgi.cd_sagip,
                                      REC_CUR_rembr_pgi.id_afect,
                                      REC_CUR_rembr_pgi.id_entre_elemn);
            FETCH CUR_nb_hh_derv_signe
               INTO vltab_fdt(vln_index).nb_hh_derv_signe;
            CLOSE CUR_nb_hh_derv_signe;
            -- Fin Edgar Doiron INC70559
            vltab_fdt(vln_index).nb_hh_signe := REC_CUR_rembr_pgi.nb_hh;
            vltab_fdt(vln_index).nb_hh := CASE NVL(REC_CUR_rembr_pgi.nb_hh,
                                               0)
                                             WHEN 0 THEN
                                              NULL
                                             ELSE
                                              xxgir_rh_23000_convr_du.fv_selct_hh_sagir_unite_sagip(pn_id_afect    => REC_CUR_rembr_pgi.id_afect,
                                                                                                    pd_dt_prodc    => vgd_dt_exect,
                                                                                                    pv_formt_unite => 'HHHMM',
                                                                                                    pn_hh_sagir    => ABS(REC_CUR_rembr_pgi.nb_hh))
                                          /*xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                                                                                                                                                          pn_temps_reel => ABS(REC_CUR_rembr_pgi.nb_hh),
                                                                                                                                                                                                                                                                                                                                                                                                          pv_formt      => 'HHHMM')*/
                                          END;
            vltab_fdt(vln_index).hh_payer := xxgir_rh_23000_convr_du.fv_selct_hh_sagir_unite_sagip(pn_id_afect    => REC_CUR_rembr_pgi.id_afect,
                                                                                                   pd_dt_prodc    => vgd_dt_exect,
                                                                                                   pv_formt_unite => 'HHHMM',
                                                                                                   pn_hh_sagir    => ABS(REC_CUR_rembr_pgi.nb_hh));
            /*xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
            pn_temps_reel => ABS(REC_CUR_rembr_pgi.nb_hh),
            pv_formt      => 'HHHMM');*/
            --
         ELSE
            CLOSE CUR_rembr_fdt;
            --
            p_log('Ne rien faire',
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP hh_rembr;
      --
      p_log('20 - Suppression.',
            vlv_nm_procd_fonct);
      --
      -- Vérifier les gains à rembourser supprimés(D) ou à supprimer(I, <=0)
      --
      <<hh_rembr_suprm>>
      FOR REC_CUR_rembr_suprm IN CUR_rembr_suprm_pgi(vgrec_perd_paie.dt_debut,
                                                     vgrec_perd_paie.dt_fin) LOOP
         --
         p_log('22 - Elemn: ' || REC_CUR_rembr_suprm.id_entre_elemn || ', ID bloc temps: ' || REC_CUR_rembr_suprm.id_bloc_temps,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_rembr_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         -- CHG204574 conserver les éléments qui ne sont pas des remboursements
         vln_compt_rembr_suprm := vltab_elemn_suprm.count + 1;
         vltab_elemn_suprm(vln_compt_rembr_suprm).id_entre_elemn := REC_CUR_rembr_suprm.id_entre_elemn;
         --
         -- Vérifier l'existence d'une fiche H760 retenue
         --
         OPEN CUR_rembr_rejt(REC_CUR_rembr_suprm.id_entre_elemn);
         --
         FETCH CUR_rembr_rejt
            INTO REC_rembr_rejt;
         --
         --DDC 209235
         vln_id_contr_fdt := REC_rembr_rejt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         IF CUR_rembr_rejt%FOUND THEN
            CLOSE CUR_rembr_rejt;
         
            -- CHG204574 conserver le id_contr_fdt pour l'associer à l'élément
            vltab_elemn_suprm(vln_compt_rembr_suprm).id_contr_fdt := REC_rembr_rejt.id_contr_fdt;
         
            p_log('23 - statut_sagip: ' || REC_rembr_rejt.statu_sagip || ', dt_trans: ' || REC_rembr_rejt.dt_trans || ', in_trans_anul_fdt: ' ||
                  REC_rembr_rejt.in_trans_anul_fdt,
                  vlv_nm_procd_fonct);
         
            --CHG204574 Début - ne plus considérer uniquement les "Rejeté", traiter aussi les "Non transféré à SAGIP"
            IF REC_rembr_rejt.statu_sagip IN (cv_statu_sagip_rejt,
                                              cv_statu_sagip_non_trans) AND
              -- INC00104183 Début 2016-08-22 - ne pas annuler les gains du futur -> dt_trans = 4712-12-31
               REC_rembr_rejt.dt_trans <> HR_GENERAL.END_OF_TIME AND
              -- INC00104183 Fin
              -- INC00103230 Début 2016-05-13
              -- si déjà annulé, ne rien faire
               REC_rembr_rejt.in_trans_anul_fdt = 'N' THEN
               -- INC00103230 Fin
            
               vlvar_fdt_anul_d.extend;
               vlvar_fdt_anul_d(vlvar_fdt_anul_d.count) := REC_rembr_rejt.id_contr_fdt;
            
               p_log('25 - Curseur CUR_rembr_rejt, annuler id_contr_fdt: ' || REC_rembr_rejt.id_contr_fdt,
                     vlv_nm_procd_fonct);
            
            ELSE
               p_log('27 - Curseur CUR_rembr_rejt, aucune annulation à faire',
                     vlv_nm_procd_fonct);
            END IF;
         
            -- CHG204574
            -- Si "Transféré à SAGIP" ou "Accepté", inscrire dans le journal
            IF REC_rembr_rejt.statu_sagip IN (cv_statu_sagip_trans,
                                              cv_statu_sagip_acept) AND
               REC_rembr_rejt.in_trans_anul_fdt = 'N' AND
               REC_rembr_rejt.in_trans_anul_h760 = 'N' THEN
               p_log('30 - Appel de la procédure P_ajout_rejt. ' || 'pn_id_entre_elemn => ' || REC_CUR_rembr_suprm.id_entre_elemn ||
                     ', pv_cd_ereur => ' || 'GIR-80370' || ', pn_id_afect => ' || REC_rembr_rejt.id_afect || ', pn_id_trans => ' ||
                     REC_rembr_rejt.id_trans_h760 || ', pv_nm_procd => ' || vlv_nm_procd_fonct,
                     vlv_nm_procd_fonct);
            
               p_incre_cp(pv_nm_table => cv_nm_table_h760,
                          pb_in_rejt  => TRUE);
            
               p_ajout_rejt(pn_id_entre_elemn => REC_CUR_rembr_suprm.id_entre_elemn,
                            pv_cd_ereur       => 'GIR-80370',
                            pn_id_afect       => REC_rembr_rejt.id_afect,
                            pn_id_trans       => REC_rembr_rejt.id_trans_h760,
                            pd_dt_perd_couvr  => vgrec_perd_paie.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct);
            
               --DDC 209235
               vln_id_entre_elemn  := REC_CUR_rembr_suprm.id_entre_elemn;
               vln_id_trans        := REC_rembr_rejt.id_trans_h760;
               vln_id_contr_fdt    := REC_rembr_rejt.id_contr_fdt;
               vlv_code_erreur_gir := 'GIR-80370';
               vld_dt_gain         := REC_rembr_rejt.dt_gain;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || REC_rembr_rejt.id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            
            END IF;
            --vlvar_fdt_anul.extend;
            --vlvar_fdt_anul(vlVAR_fdt_anul.COUNT) := REC_rembr_rejt.id_contr_fdt;
            -- CHG204574 Fin
            --
         ELSE
            CLOSE CUR_rembr_rejt;
            p_log('40 - Curseur CUR_rembr_rejt, aucune annulation à faire',
                  vlv_nm_procd_fonct);
         END IF;
         --
      
         -- CHG204574 obtenir les transactions H760/fdt ayant eu lieu pour ce même bloc de temps
         OPEN CUR_trans_bloc_temps(REC_CUR_rembr_suprm.id_bloc_temps);
         FETCH CUR_trans_bloc_temps
            INTO REC_trans_bloc_temps;
         IF CUR_trans_bloc_temps%FOUND THEN
            CLOSE CUR_trans_bloc_temps;
         
            -- CHG204574 conserver le id_contr_fdt pour l'associer à l'élément
            vltab_elemn_suprm(vln_compt_rembr_suprm).id_contr_fdt := REC_trans_bloc_temps.id_contr_fdt;
         
            p_log('41 - statut_sagip: ' || REC_trans_bloc_temps.statu_sagip || ', dt_trans: ' || REC_trans_bloc_temps.dt_trans ||
                  ', in_trans_anul_fdt: ' || REC_trans_bloc_temps.in_trans_anul_fdt,
                  vlv_nm_procd_fonct);
         
            -- puisqu'il ne s'agissait pas d'un remboursement, mettre l'indicateur d'annulation à Oui
            -- de la transaction initiale qui avait été rejetée ou non transférée à SAGIP
            IF REC_trans_bloc_temps.statu_sagip IN (cv_statu_sagip_rejt,
                                                    cv_statu_sagip_non_trans) AND
              -- INC00104183 Début 2016-08-22 - ne pas annuler les gains du futur -> dt_trans = 4712-12-31
               REC_trans_bloc_temps.dt_trans <> HR_GENERAL.END_OF_TIME AND
              -- INC00104183 Fin
              -- INC00103230 Début 2016-05-13
              -- si déjà annulé, ne rien faire
               REC_trans_bloc_temps.in_trans_anul_fdt = 'N' THEN
               -- INC00103230 Fin
            
               vlvar_fdt_anul_i.extend;
               vlvar_fdt_anul_i(vlvar_fdt_anul_i.count) := REC_trans_bloc_temps.id_contr_fdt;
            
               p_log('42 - Curseur CUR_trans_bloc_temps annuler id_contr_fdt: ' || REC_trans_bloc_temps.id_contr_fdt,
                     vlv_nm_procd_fonct);
            ELSE
               p_log('45 - Curseur CUR_trans_bloc_temps, aucune annulation à faire',
                     vlv_nm_procd_fonct);
            END IF;
         
            -- Si "Transféré à SAGIP" ou "Accepté", inscrire dans le journal
            IF REC_trans_bloc_temps.statu_sagip IN (cv_statu_sagip_trans,
                                                    cv_statu_sagip_acept) AND
               REC_trans_bloc_temps.in_trans_anul_fdt = 'N' AND
               REC_trans_bloc_temps.in_trans_anul_h760 = 'N' THEN
               p_log('50 - Appel de la procédure P_ajout_rejt. ' || 'pn_id_entre_elemn => ' || REC_CUR_rembr_suprm.id_entre_elemn ||
                     ', pv_cd_ereur => ' || 'GIR-80370' || ', pn_id_afect => ' || REC_trans_bloc_temps.id_afect || ', pn_id_trans => ' ||
                     REC_trans_bloc_temps.id_trans_h760 || ', pv_nm_procd => ' || vlv_nm_procd_fonct,
                     vlv_nm_procd_fonct);
            
               p_incre_cp(pv_nm_table => cv_nm_table_h760,
                          pb_in_rejt  => TRUE);
            
               p_ajout_rejt(pn_id_entre_elemn => REC_CUR_rembr_suprm.id_entre_elemn,
                            pv_cd_ereur       => 'GIR-80370',
                            pn_id_afect       => REC_trans_bloc_temps.id_afect,
                            pn_id_trans       => REC_trans_bloc_temps.id_trans_h760,
                            pd_dt_perd_couvr  => vgrec_perd_paie.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct);
            
               --DDC 209235
               vln_id_entre_elemn  := REC_CUR_rembr_suprm.id_entre_elemn;
               vln_id_trans        := REC_trans_bloc_temps.id_trans_h760;
               vln_id_contr_fdt    := REC_trans_bloc_temps.id_contr_fdt;
               vlv_code_erreur_gir := 'GIR-80370';
               vld_dt_gain         := REC_trans_bloc_temps.dt_gain;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' ||
                                    REC_trans_bloc_temps.id_afect || ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            END IF;
         
         ELSE
            CLOSE CUR_trans_bloc_temps;
            p_log('60 - Curseur CUR_trans_bloc_temps, aucune annulation à faire',
                  vlv_nm_procd_fonct);
         END IF;
         -- Fin CHG204574
      
      -- CHG204574 Remplacer la variable vlvar_elemn_suprm par vltab_elemn_suprm (au début de la boucle)
      -- La suppression est traitée
      -- vlvar_elemn_suprm.extend;
      -- vlvar_elemn_suprm(vlVAR_elemn_suprm.COUNT) := REC_CUR_rembr_suprm.id_entre_elemn;
      --
      END LOOP hh_rembr_suprm;
      --
      -- Annuler les transactions H760 rejetées
      --
      --CHG204574 Début
      --Traiter les types D et les types I distinctement
      /*IF vlVAR_fdt_anul.EXISTS(1) THEN
         --
         p_log('On annule',
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vlvar_fdt_anul
            UPDATE gir_rh_fdt fdt
               SET fdt.in_trans_anul = 'O'
             WHERE fdt.id_contr_fdt = vlvar_fdt_anul(vln_cp)
            RETURNING elemn_entry_id, id_contr_fdt, NULL BULK COLLECT INTO vltab_contr_fdt;
         --
         FORALL vln_cp IN INDICES OF vlvar_fdt_anul
            UPDATE gir_trans_h760 h760
               SET h760.in_trans_anul = 'O'
             WHERE h760.id_trans_h760 = (SELECT fdt.id_trans
                                           FROM gir_rh_fdt fdt
                                          WHERE fdt.id_contr_fdt = vlvar_fdt_anul(vln_cp));
         --
      END IF;
      --
      vlVAR_fdt_anul.DELETE;*/
      IF vlVAR_fdt_anul_D.EXISTS(1) THEN
         --
         p_log('On annule les D',
               vlv_nm_procd_fonct);
      
         FOR i IN 1 .. vlvar_fdt_anul_d.count LOOP
            p_log('annuler id_contr_fdt ' || vlvar_fdt_anul_d(i),
                  vlv_nm_procd_fonct);
         END LOOP;
         --
         FORALL vln_cp IN INDICES OF vlvar_fdt_anul_d
            UPDATE gir_rh_fdt fdt
               SET fdt.in_trans_anul = 'O'
             WHERE fdt.id_contr_fdt = vlvar_fdt_anul_d(vln_cp)
            RETURNING elemn_entry_id, id_contr_fdt, NULL BULK COLLECT INTO vltab_contr_fdt_d;
         --
         FORALL vln_cp IN INDICES OF vlvar_fdt_anul_d
            UPDATE gir_trans_h760 h760
               SET h760.in_trans_anul = 'O'
             WHERE h760.id_trans_h760 = (SELECT fdt.id_trans
                                           FROM gir_rh_fdt fdt
                                          WHERE fdt.id_contr_fdt = vlvar_fdt_anul_d(vln_cp));
         --
      END IF;
      --
      vlVAR_fdt_anul_D.DELETE;
   
      IF vlVAR_fdt_anul_I.EXISTS(1) THEN
         --
         p_log('On annule les I',
               vlv_nm_procd_fonct);
      
         FOR i IN 1 .. vlvar_fdt_anul_i.count LOOP
            p_log('annuler id_contr_fdt ' || vlvar_fdt_anul_i(i),
                  vlv_nm_procd_fonct);
         END LOOP;
         --
         FORALL vln_cp IN INDICES OF vlvar_fdt_anul_i
            UPDATE gir_rh_fdt fdt
               SET fdt.in_trans_anul = 'O'
             WHERE fdt.id_contr_fdt = vlvar_fdt_anul_i(vln_cp)
            RETURNING elemn_entry_id, id_contr_fdt, NULL BULK COLLECT INTO vltab_contr_fdt_i;
         --
         FORALL vln_cp IN INDICES OF vlvar_fdt_anul_i
            UPDATE gir_trans_h760 h760
               SET h760.in_trans_anul = 'O'
             WHERE h760.id_trans_h760 = (SELECT fdt.id_trans
                                           FROM gir_rh_fdt fdt
                                          WHERE fdt.id_contr_fdt = vlvar_fdt_anul_i(vln_cp));
         --
      END IF;
      --
      vlVAR_fdt_anul_I.DELETE;
      --CHG204574 Fin
      --
      -- Inscrire traité à Oui pour tous les éléments supprimés traités
      --
      -- CHG204574 Remplacer ce tableau par vltab_elemn_suprm
      --IF vlVAR_elemn_suprm.EXISTS(1) THEN
      IF vltab_elemn_suprm.count > 0 THEN
         --
         p_log('On supprime -> in_trait=O',
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_elemn_suprm --vlvar_elemn_suprm
            UPDATE gir_rh_suivi_elemn rse
               SET rse.in_trait = 'O'
            --INC00103450 Début 2016-08-22 ne plus mettre à jour le id_contr_fdt, cela fausse le zoom
            --,rse.id_contr_fdt = vltab_elemn_suprm(vln_cp).id_contr_fdt -- CHG204574 mettre à jour le id_contr_fdt
            --INC00103450 Fin
             WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp).id_entre_elemn --vlvar_elemn_suprm(vln_cp)
               AND rse.in_trait = 'N'
                  --CHG204574 Début - traiter aussi les I
                  --AND rse.trans_type = 'D'
               AND rse.trans_type IN ('D',
                                      'I');
         --CHG204574 Fin
         --
         -- Début INC-89949
         FORALL vln_cp IN INDICES OF vltab_elemn_suprm --vlvar_elemn_suprm
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.in_trait = 'O'
            --INC00103450 Début 2016-08-22 ne plus mettre à jour le id_contr_fdt, cela fausse le zoom
            --,rse.id_contr_fdt = vltab_elemn_suprm(vln_cp).id_contr_fdt -- CHG204574 mettre à jour le id_contr_fdt
            --INC00103450 Fin
             WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp).id_entre_elemn --vlvar_elemn_suprm(vln_cp)
               AND rse.in_trait = 'N'
                  --CHG204574 Début - traiter aussi les I
                  --AND rse.trans_type = 'D'
               AND rse.trans_type IN ('D',
                                      'I');
         --CHG204574 Fin
         -- Fin INC-89949
         --
      END IF;
   
      -- CHG204574 Remplacer ce tableau par vltab_elemn_suprm
      --vlVAR_elemn_suprm.DELETE;
      vltab_elemn_suprm.DELETE;
   
      --
      -- On insère les nouvelles fiches H760 pour l'envoi vers SAGIP
      --
      IF vlTAB_fdt.EXISTS(1) THEN
         --
         p_log('On crée',
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_fdt
            INSERT INTO gir_rh_fdt
            VALUES vltab_fdt
               (vln_cp)
            --INC 87341
            RETURNING elemn_entry_id, id_contr_fdt, NULL BULK COLLECT INTO vltab_contr_fdt_inc87341;
         --
         --INC 87341
         FORALL vln_cp IN INDICES OF vltab_contr_fdt_inc87341
            UPDATE gir_rh_suivi_elemn rse
               SET rse.in_trait     = 'O',
                   rse.id_contr_fdt = vltab_contr_fdt_inc87341(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt_inc87341(vln_cp).id_entre_elemn
               AND rse.trans_type = 'I'
               AND rse.in_trait = 'N';
         --
         -- Début INC-89949
         FORALL vln_cp IN INDICES OF vltab_contr_fdt_inc87341
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.in_trait     = 'O',
                   rse.id_contr_fdt = vltab_contr_fdt_inc87341(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt_inc87341(vln_cp).id_entre_elemn
               AND rse.trans_type = 'I'
               AND rse.in_trait = 'N';
         -- Fin INC-89949
         --
         p_log('20 - Appel de la procédure P_incre_cp. ' || 'pv_nm_table => ' || cv_nm_table_fdt || ', pb_in_inser => ' || 'TRUE',
               vlv_nm_procd_fonct);
         --
         -- Incrémente le nombre d'enregistrements lus et
         -- le nombre d'enregistrements insérés.
         --
         FOR vln_cp IN 1 .. vltab_fdt.count LOOP
            p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                       pb_in_inser => TRUE);
         END LOOP;
         --
      END IF;
      --
      vlTAB_fdt.DELETE;
      --
      -- Inscrire l'identifiant de contrôle de temps pour tous les éléments supprimés traités
      --
      --CHG204574 Début
      --Ne pas toucher à ce qui était fait pour les trans_type = D
      --Utiliser un tableau qui traite les D, et un autre qui traite les I
      /*IF vlTAB_contr_fdt.EXISTS(1) THEN
         --
         p_log('On met à jour',
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_contr_fdt
            UPDATE gir_rh_suivi_elemn rse
               SET rse.id_contr_fdt = vltab_contr_fdt(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type = 'D'
               AND rse.id_contr_fdt IS NULL;
         --
         -- Début INC-89949
         FORALL vln_cp IN INDICES OF vltab_contr_fdt
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.id_contr_fdt = vltab_contr_fdt(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type = 'D'
               AND rse.id_contr_fdt IS NULL;
         -- Fin INC-89949
         --
      END IF;
      --
      vlTAB_contr_fdt.DELETE;*/
      IF vlTAB_contr_fdt_D.EXISTS(1) THEN
      
         p_log('On met à jour trans_type = D',
               vlv_nm_procd_fonct);
      
         FORALL vln_cp IN INDICES OF vltab_contr_fdt_d
            UPDATE gir_rh_suivi_elemn rse
               SET rse.id_contr_fdt = vltab_contr_fdt_d(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt_d(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type = 'D'
               AND rse.id_contr_fdt IS NULL;
      
         FORALL vln_cp IN INDICES OF vltab_contr_fdt_d
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.id_contr_fdt = vltab_contr_fdt_d(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt_d(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type = 'D'
               AND rse.id_contr_fdt IS NULL;
      
      END IF;
      --
      vlTAB_contr_fdt_D.DELETE;
   
      IF vlTAB_contr_fdt_I.EXISTS(1) THEN
      
         p_log('On met à jour trans_type = I',
               vlv_nm_procd_fonct);
      
         FORALL vln_cp IN INDICES OF vltab_contr_fdt_i
            UPDATE gir_rh_suivi_elemn rse
               SET rse.id_contr_fdt = vltab_contr_fdt_i(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt_i(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type = 'I'
               AND rse.id_contr_fdt IS NULL;
      
         FORALL vln_cp IN INDICES OF vltab_contr_fdt_i
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.id_contr_fdt = vltab_contr_fdt_i(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_contr_fdt_i(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type = 'I'
               AND rse.id_contr_fdt IS NULL;
      
      END IF;
      --
      vlTAB_contr_fdt_I.DELETE;
      --CHG204574 Fin
   
      --
      p_log('30 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_rembr_h760
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         --CHG204574 Début
         --vlVAR_fdt_anul.DELETE;
         vlVAR_fdt_anul_D.DELETE;
         vlVAR_fdt_anul_I.DELETE;
         --CHG204574 Fin
      
         vltab_elemn_suprm.DELETE; --vlVAR_elemn_suprm.DELETE;
         vlTAB_fdt.DELETE;
      
         --CHG204574 Début
         --vlTAB_contr_fdt.DELETE;
         vlTAB_contr_fdt_D.DELETE;
         vlTAB_contr_fdt_I.DELETE;
         --CHG204574 Fin
      
         --
         IF CUR_rembr_fdt%ISOPEN THEN
            CLOSE CUR_rembr_fdt;
         END IF;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         p_log('40 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80401';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         RAISE vgexc_trait_h760;
         --
   END p_trait_rembr_h760;

   --
   -- ============================================================================
   -- P_obten_jeu_elemn_h620:
   -- ============================================================================
   /****************************************************************************
   * But : Cette procédure permet d'obtenir la liste des gains pour le jeu
   *       d'éléments H620 passé en paramètre.
   *****************************************************************************
   *
   * Paramètres entrée    :
   *   - pv_nm_jeu_elemn  : Nom du jeu d'éléments
   *   - pv_dt_exect      : Date de la dernière exécution réussie de l'adaptation
   *   - pv_nm_liste      : Nom de la liste créée
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Par                  Date        Description
   * ---------------      ----------  -------------
   * Michel Dessureault   2012-11-08  Créationà
   * Frédéric Aubin       2014-02-22  Performance : Faire gather stats pour global temporary après les insert de
   *                                  gir_rh_elemn_h620_tempr, gir_rh_afect_tempr, gir_rh_suplm_h620_tempr,
   *                                  gir_rh_gains_tempr, gir_rh_h620_pc_tx_tempr
   *
   *************************************************************************/
   PROCEDURE p_obten_jeu_elemn_h620(pv_nm_jeu_elemn IN VARCHAR2,
                                    pd_dt_exect     IN DATE,
                                    pv_nm_liste     IN VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_jeu_elemn_h620';
      vltab_jeu_elemn    tab_jeu_elemn_h620;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ---------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir le jeu d'éléments
      ---------------------------------------------------------------
      CURSOR CUR_jeu_elemn IS
         SELECT mje.id_type_elemn,
                mje.nm_elemn,
                (SELECT pet.attribute1
                   FROM pay_element_types_f pet
                  WHERE pet.element_type_id = mje.id_type_elemn
                    AND pet.effective_start_date = mje.dt_debut_efect
                    AND pet.effective_end_date = mje.dt_fin_efect) cd_sagip
           FROM xxgir_rh_membr_jeu_elemn_v mje
          WHERE mje.nm_jeu_elemn = pv_nm_jeu_elemn
            AND TRUNC(pd_dt_exect) BETWEEN mje.dt_debut_efect AND mje.dt_fin_efect;
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_nm_jeu_elemn=' || pv_nm_jeu_elemn || '  --> pd_dt_exect=' || pd_dt_exect || '  --> pv_nm_liste=' || pv_nm_liste,
            vlv_nm_procd_fonct);
      --
      -- Initialiser la liste
      --
      OPEN CUR_jeu_elemn;
      --
      FETCH CUR_jeu_elemn BULK COLLECT
         INTO vltab_jeu_elemn;
      --
      CLOSE CUR_jeu_elemn;
      --
      IF vltab_jeu_elemn.count > 0 THEN
         --
         FORALL vln_cp IN INDICES OF vltab_jeu_elemn
            INSERT INTO xxgir_rh_elemn_h620_tempr
               (id_type_elemn,
                nm_elemn,
                cd_sagip,
                nm_liste)
            VALUES
               (vltab_jeu_elemn(vln_cp).id_type_elemn,
                vltab_jeu_elemn(vln_cp).nm_elemn,
                vltab_jeu_elemn(vln_cp).cd_sagip,
                pv_nm_liste);
         --
      END IF;
      -- F.Aubin 2014-02-22 Performance : faire gather stats.
      /*DBMS_STATS.gather_table_stats (ownname            => 'XXGIR',
      tabname            => 'GIR_RH_ELEMN_H620_TEMPR', -- le nom de ta table
      cascade            => TRUE,
      estimate_percent   => 10);*/
      --
      --
      vlTAB_jeu_elemn.DELETE;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_jeu_elemn_h620.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         IF CUR_jeu_elemn%ISOPEN THEN
            CLOSE CUR_jeu_elemn;
         END IF;
         --
         vlTAB_jeu_elemn.DELETE;
         --
         p_log('30 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_jeu_elemn_h620 pour le jeu d''éléments ' || pv_nm_jeu_elemn);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80433',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';DT_GAIN:' ||
                                              TO_CHAR(pd_dt_exect,
                                                      'YYYY-MM-DD') || ';NM_JEU_ELEMN:' || pv_nm_jeu_elemn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_jeu_elemn_h620',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
      --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
      --
      --
   END p_obten_jeu_elemn_h620;

   --
   -- ============================================================================
   -- P_obten_jeu_elemn_specl_input:
   -- ============================================================================
   /****************************************************************************
   * But : Cette procédure permet d'obtenir la liste des gains special inputs
   *       pour le jeu d'éléments passé en paramètre.
   *****************************************************************************
   *
   * Paramètres entrée    :
   *   - pv_nm_jeu_elemn  : Nom du jeu d'éléments
   *   - pv_dt_exect      : Date de la dernière exécution réussie de l'adaptation
   *   - pv_nm_liste      : Nom de la liste créée
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   * Frédéric Aubin      2014-02-22  Performance : Faire gather stats pour global temporary après les insert de
   *                                 gir_rh_elemn_h620_tempr, gir_rh_afect_tempr, gir_rh_suplm_h620_tempr,
   *                                 gir_rh_gains_tempr, gir_rh_h620_pc_tx_tempr
   *
   *************************************************************************/
   PROCEDURE p_obten_jeu_elemn_specl_input(pv_nm_jeu_elemn IN VARCHAR2,
                                           pd_dt_exect     IN DATE,
                                           pv_nm_liste     IN VARCHAR2
                                           --                                    ,pTAB_jeu_elemn       OUT NOCOPY TAB_jeu_elemn_h620
                                           ) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_jeu_elemn_specl_input';
      vltab_jeu_elemn    tab_jeu_elemn_h620;
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ---------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir le jeu d'éléments
      ---------------------------------------------------------------
      CURSOR CUR_jeu_elemn IS
         WITH h620_recrn AS
          (SELECT mje.id_type_elemn,
                  mje.nm_elemn,
                  (SELECT pet.attribute1
                     FROM pay_element_types_f pet
                    WHERE pet.element_type_id = mje.id_type_elemn
                      AND pet.effective_start_date = mje.dt_debut_efect
                      AND pet.effective_end_date = mje.dt_fin_efect) cd_sagip,
                  mje.dt_debut_efect,
                  mje.dt_fin_efect
             FROM xxgir_rh_membr_jeu_elemn_v mje
            WHERE mje.nm_jeu_elemn = pv_nm_jeu_elemn
              AND mje.type_trait = 'R'
              AND TRUNC(pd_dt_exect) BETWEEN mje.dt_debut_efect AND mje.dt_fin_efect)
         SELECT pet.element_type_id id_type_elemn,
                pet.element_name    nm_elemn,
                h620_recrn.cd_sagip cd_sagip
           FROM pay_element_types_f_vl pet,
                h620_recrn
          WHERE REGEXP_INSTR(pet.element_name,
                             cv_nm_specl_input,
                             1,
                             1,
                             0,
                             'i') > 0
            AND REGEXP_INSTR(pet.element_name,
                             h620_recrn.nm_elemn,
                             1,
                             1,
                             0,
                             'i') > 0
            AND pet.effective_start_date <= h620_recrn.dt_fin_efect
            AND pet.effective_end_date >= h620_recrn.dt_debut_efect
          GROUP BY pet.element_type_id,
                   pet.element_name,
                   h620_recrn.cd_sagip;
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_nm_jeu_elemn=' || pv_nm_jeu_elemn || '  --> pd_dt_exect=' || pd_dt_exect || '  --> pv_nm_liste=' || pv_nm_liste,
            vlv_nm_procd_fonct);
      --
      -- Initialiser la liste
      --
      OPEN CUR_jeu_elemn;
      --
      FETCH CUR_jeu_elemn BULK COLLECT
         INTO vltab_jeu_elemn;
      --
      CLOSE CUR_jeu_elemn;
      --
      IF vltab_jeu_elemn.count > 0 THEN
         --
         FORALL vln_cp IN INDICES OF vltab_jeu_elemn
            INSERT INTO xxgir_rh_elemn_h620_tempr
               (id_type_elemn,
                nm_elemn,
                cd_sagip,
                nm_liste)
            VALUES
               (vltab_jeu_elemn(vln_cp).id_type_elemn,
                vltab_jeu_elemn(vln_cp).nm_elemn,
                vltab_jeu_elemn(vln_cp).cd_sagip,
                pv_nm_liste);
         --
      END IF;
      -- F.Aubin 2014-02-22 Performance : faire gather stats.
      /*DBMS_STATS.gather_table_stats (ownname            => 'XXGIR',
      tabname            => 'GIR_RH_ELEMN_H620_TEMPR', -- le nom de ta table
      cascade            => TRUE,
      estimate_percent   => 10);*/
      --
      --
      vlTAB_jeu_elemn.DELETE;
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_jeu_elemn_specl_input.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         IF CUR_jeu_elemn%ISOPEN THEN
            CLOSE CUR_jeu_elemn;
         END IF;
         --
         vlTAB_jeu_elemn.DELETE;
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_jeu_elemn_specl_input pour le jeu d''éléments ' || pv_nm_jeu_elemn);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80439',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';DT_GAIN:' ||
                                              TO_CHAR(pd_dt_exect,
                                                      'YYYY-MM-DD') || ';NM_JEU_ELEMN:' || pv_nm_jeu_elemn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_jeu_elemn_specl_input',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_obten_jeu_elemn_specl_input;

   --
   -- ============================================================================
   -- P_initl_objet_memr:
   -- ============================================================================
   /*************************************************************************
   * But : Retourne un vecteur d'entrée d'éléments
   *
   * Paramètres entrée :
   *   - pTAB_jeu_elemn        : Table du jeu d'élément
   *
   * Paramètres de sortie :
   *   - pVAR_liste_elemn_memr : Vecteur des entrées d'élément du jeu
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   *************************************************************************/
   PROCEDURE p_initl_objet_memr(ptab_jeu_elemn        IN tab_elemn,
                                pvar_liste_elemn_memr OUT sys.odcinumberlist) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct     VARCHAR2(100) := 'apps.xxgir_rh_28045.P_initl_objet_memr';
      vlvar_liste_elemn_memr sys.odcinumberlist := sys.odcinumberlist();
      vln_id_entre_elemn     NUMBER(15);
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      IF ptab_jeu_elemn.count > 0 THEN
         --
         FOR vln_cp IN 1 .. ptab_jeu_elemn.count LOOP
            -- Garder le numéro de l'élément.
            vgv_id_entre_elemn := ptab_jeu_elemn(vln_cp).id_entre_elemn;
            vlvar_liste_elemn_memr.extend;
            vlvar_liste_elemn_memr(vlvar_liste_elemn_memr.count) := ptab_jeu_elemn(vln_cp).id_entre_elemn;
            --
         END LOOP;
         --
      END IF;
      --
      -- Initialiser l'objet en sortie.
      --
      pvar_liste_elemn_memr := vlvar_liste_elemn_memr;
      --
      -- Effacer l'objet
      --
      vlVAR_liste_elemn_memr.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_initl_objet_memr.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         IF vlVAR_liste_elemn_memr.EXISTS(1) THEN
            vlVAR_liste_elemn_memr.DELETE;
         END IF;
         IF pVAR_liste_elemn_memr.EXISTS(1) THEN
            pVAR_liste_elemn_memr.DELETE;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         fnd_file.put_line(fnd_file.log,
                           ' est en erreur dans la procédure P_initl_objet_memr');
         fnd_file.put_line(fnd_file.log,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
      
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80438',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_initl_objet_memr',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_initl_objet_memr;

   --
   -- ============================================================================
   -- P_obten_dt_hh:
   -- ============================================================================
   /*************************************************************************
   * But : Obtenir les dates et heures de début et fin pour un élément et le corps d'emploi du DFF.
   *
   * Paramètres entrée :
   *   - pn_id_entre_elemn   : Identifiant de l'entrée d'élément
   *   - pd_dt_efect         : Date effective de l'entrée d'élément
   *
   * Paramètres de sortie :
   *   - pREC_dt_hh          : Enregistrement contenant la valeur des dates et heures de début et fin.
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   * Michel Dessureault  2013-03-27  Retouche 170 Cibler le bon corps d'emploi
   * Geneviève Bélanger  2016-06-13  INC00104155 - Obtenir les dates de début et de fin des absences dans per_absence_attendances
   * Lucie Côté          2021-03-24  DDC.292818 : Remplacer le « SUBSTR... » du Select de la « clas » par « pg.ATTRIBUTE2 » .
   *************************************************************************/
   PROCEDURE p_obten_dt_hh(pn_id_entre_elemn IN NUMBER,
                           pd_dt_efect       IN DATE,
                           prec_dt_hh        OUT type_rec_dt_hh) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_dt_hh';
      vln_id_corps_emplo NUMBER; -- Identifiant du corps d'emploi de l'affectation
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour aller chercher les dates et heures
      -- de début et fin pour un élément.
      ----------------------------------------------------------------------
      CURSOR CUR_dt_hh IS
         SELECT tbb.start_time dt_debut,
                tbb.stop_time dt_fin,
                tbb.time_building_block_id id_bloc_temps,
                tbb.object_version_number no_versn_objet,
                FND_NUMBER.CANONICAL_TO_NUMBER(peef.attribute3) id_corps_emplo
           FROM hxc_time_building_blocks tbb,
                pay_element_entries_f    peef
          WHERE peef.element_entry_id = pn_id_entre_elemn
            AND tbb.time_building_block_id = peef.attribute5
            AND tbb.object_version_number = peef.attribute6
         -- Début INC00104155 2016-06-13
         /*UNION
         SELECT TO_DATE(TO_CHAR(paa.date_start, 'YYYYMMDD') || ' ' || paa.time_start ,'YYYYMMDD HH24:MI'),
                TO_DATE(TO_CHAR(paa.date_end, 'YYYYMMDD')   || ' ' || paa.time_end, 'YYYYMMDD HH24:MI'),
                NULL,
                fnd_number.canonical_to_number(pe.attribute6) no_versn_objet,
                fnd_number.canonical_to_number(pe.attribute3) id_corps_emplo
           FROM per_absence_attendances paa,
                pay_element_entries_f   pe
          WHERE paa.absence_attendance_id = pe.creator_id
            AND pd_dt_efect BETWEEN pe.effective_start_date
                                AND pe.effective_end_date
            AND pe.element_entry_id = pn_id_entre_elemn*/
         ;
      -- Fin INC00104155
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour aller chercher la section et la classe
      -- du corps d'emploi.
      ----------------------------------------------------------------------
      CURSOR CUR_sectn_clas(pn_id_corps_emplo IN NUMBER) IS
         SELECT SUBSTR(pg.name,
                       REGEXP_INSTR(pg.name,
                                    '[\.]',
                                    1,
                                    1) + 1,
                       3) sectn,
                -- ddc.292818: remplacer « SUBSTR » par « pg.ATTRIBUTE2 »
                --SUBSTR(pg.name,
                --       regexp_instr(pg.name,
                --                    '[\.]',
                --                    1,
                --                    2) + 1,
                --       2) clas
                pg.attribute2 clas
           FROM per_grades pg
          WHERE pg.grade_id = pn_id_corps_emplo
               -- Retouche 170
            AND TRUNC(pd_dt_efect) BETWEEN pg.date_from AND NVL(pg.date_to,
                                                                HR_GENERAL.END_OF_TIME);
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pn_id_entre_elemn=' || pn_id_entre_elemn || '  --> pd_dt_efect=' || pd_dt_efect,
            vlv_nm_procd_fonct);
      --
      prec_dt_hh := NULL;
      --
      <<temps>>
      FOR REC_CUR_dt_hh IN CUR_dt_hh LOOP
         --
         prec_dt_hh.dt_debut       := TRUNC(REC_CUR_dt_hh.dt_debut);
         prec_dt_hh.dt_fin         := TRUNC(REC_CUR_dt_hh.dt_fin);
         prec_dt_hh.hh_debut       := TO_CHAR(REC_CUR_dt_hh.dt_debut,
                                              'HH24MI');
         prec_dt_hh.hh_fin         := TO_CHAR(REC_CUR_dt_hh.dt_fin,
                                              'HH24MI');
         prec_dt_hh.id_bloc_temps  := REC_CUR_dt_hh.id_bloc_temps;
         prec_dt_hh.no_versn_objet := REC_CUR_dt_hh.no_versn_objet;
         vln_id_corps_emplo        := REC_CUR_dt_hh.id_corps_emplo;
         --
         p_log('20 - dt_debut=' || TRUNC(REC_CUR_dt_hh.dt_debut) || ', dt_fin=' || TRUNC(REC_CUR_dt_hh.dt_fin) || ', hh_debut=' ||
               TO_CHAR(REC_CUR_dt_hh.dt_debut,
                       'HH24MI') || ', hh_fin=' || TO_CHAR(REC_CUR_dt_hh.dt_fin,
                                                           'HH24MI') || ', id_bloc_temps=' || REC_CUR_dt_hh.id_bloc_temps,
               vlv_nm_procd_fonct);
      END LOOP temps;
      --
      IF vln_id_corps_emplo IS NOT NULL THEN
         --
         OPEN CUR_sectn_clas(vln_id_corps_emplo);
         --
         FETCH CUR_sectn_clas
            INTO prec_dt_hh.sectn,
                 prec_dt_hh.clas;
         --
         CLOSE CUR_sectn_clas;
         --
      END IF;
      --
      p_log('25 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_dt_hh.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         IF CUR_sectn_clas%ISOPEN THEN
            CLOSE CUR_sectn_clas;
         END IF;
         --
         prec_dt_hh := NULL;
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'La procédure P_obten_dt_hh est en erreur ');
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80441',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vgv_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              pn_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(pd_dt_efect,
                                                                                          'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_dt_hh',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_obten_dt_hh;

   --
   -- ============================================================================
   -- P_obten_statu_afect:
   -- ============================================================================
   /*******************************************************************************
   * But: Obtenir les informations sur le statut de l'affectation.
   *
   * Paramètres entrée :
   *   - pn_id_afect       : Identifiant de l'affectation
   *   - pd_perd_fin       : Date de fin de la période
   *
   * Paramètres de sortie :
   *   - pREC_statu        : Contenant des infos recherchées
   *
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   *
   **************************************************************************/
   PROCEDURE p_obten_statu_afect(pn_id_afect IN NUMBER,
                                 pd_perd_fin IN DATE,
                                 prec_statu  OUT type_rec_statu) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_statu_afect';
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les informations
      -- sur l'affectation.
      ----------------------------------------------------------------------
      CURSOR CUR_statu_afect IS
         SELECT paf.assignment_id id_afect,
                pastl.user_status statu,
                FND_DATE.CANONICAL_TO_DATE(paf.ass_attribute3) dt_fin_prevu_contr,
                paf.effective_start_date paf_dt_debut_efect,
                paf.effective_end_date paf_dt_fin_efect,
                paf.employment_category categ_afect
           FROM per_assignments_f              paf,
                per_grade_definitions          pgd,
                per_grades                     pg,
                per_job_definitions            pjd,
                per_jobs                       pj,
                pay_payrolls_f                 ppf,
                per_assignment_status_types    past,
                per_assignment_status_types_tl pastl,
                pay_people_groups              ppg,
                per_people_f                   pap,
                per_person_types               ppt,
                per_person_type_usages_f       ptu,
                per_person_types_tl            ppttl,
                per_people_extra_info          ppei_acces_egalt,
                per_people_extra_info          ppei_role_avis,
                per_assignment_extra_info      paei_cd_emisn,
                per_assignment_extra_info      paei_horr_travl,
                per_assignment_extra_info      paei_statu_partc
          WHERE pg.grade_definition_id = pgd.grade_definition_id
            AND pg.grade_id = paf.grade_id
            AND pj.job_definition_id = pjd.job_definition_id
            AND pj.job_id = paf.job_id
            AND paf.payroll_id = ppf.payroll_id
            AND paf.assignment_status_type_id = past.assignment_status_type_id
            AND paf.assignment_status_type_id = pastl.assignment_status_type_id
            AND pastl.language = USERENV('LANG')
            AND paf.people_group_id = ppg.people_group_id
            AND paf.person_id = pap.person_id
            AND pap.person_id = ptu.person_id
            AND ptu.person_type_id = ppt.person_type_id
            AND ppt.person_type_id = ppttl.person_type_id
            AND ppttl.language = USERENV('LANG')
            AND pap.person_id = ppei_acces_egalt.person_id(+)
            AND ppei_acces_egalt.information_type(+) = 'GIR_RH_ACCES_EGALITE'
            AND pap.person_id = ppei_role_avis.person_id(+)
            AND ppei_role_avis.information_type(+) = 'GIR_RH_ROLE_AVIS'
            AND paf.assignment_id = paei_cd_emisn.assignment_id(+)
            AND paei_cd_emisn.information_type(+) = 'GIR_RH_CODE_EMISSION'
            AND paf.assignment_id = paei_horr_travl.assignment_id(+)
            AND paei_horr_travl.information_type(+) = 'GIR_RH_HOR_TRAV'
            AND paf.assignment_id = paei_statu_partc.assignment_id(+)
            AND paei_statu_partc.information_type(+) = 'GIR_RH_STATUT_PARTICULIER'
               --     critères de sélection
            AND paf.assignment_id = pn_id_afect
            AND TRUNC(pd_perd_fin) BETWEEN paf.effective_start_date AND paf.effective_end_date
            AND TRUNC(pd_perd_fin) BETWEEN ppf.effective_start_date AND ppf.effective_end_date
            AND TRUNC(pd_perd_fin) BETWEEN pap.effective_start_date AND pap.effective_end_date
            AND TRUNC(pd_perd_fin) BETWEEN ptu.effective_start_date AND ptu.effective_end_date
            AND TRUNC(pd_perd_fin) BETWEEN pgd.start_date_active AND NVL(pgd.end_date_active,
                                                                         TRUNC(pd_perd_fin));
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      p_log('15   --> pn_id_afect=' || pn_id_afect || '  --> pd_perd_fin=' || pd_perd_fin,
            vlv_nm_procd_fonct);
      --
      OPEN CUR_statu_afect;
      --
      FETCH CUR_statu_afect
         INTO prec_statu;
      --
      CLOSE CUR_statu_afect;
      --
      p_log('id_afect:' || prec_statu.id_afect,
            vlv_nm_procd_fonct);
      p_log('Statut  :' || prec_statu.statu_afect,
            vlv_nm_procd_fonct);
      p_log('Catégori:' || prec_statu.catgr_afect,
            vlv_nm_procd_fonct);
      p_log('Date fin contrat:' || fnd_date.date_to_displaydate(prec_statu.dt_fin_prevu_contr),
            vlv_nm_procd_fonct);
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_statu_afect
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         IF CUR_statu_afect%ISOPEN THEN
            CLOSE CUR_statu_afect;
         END IF;
         --
         prec_statu := NULL;
         --
         p_log('30 - Erreur: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_statu_afect pour l''identifiant d''affectation ' || pn_id_afect);
         fnd_file.put_line(fnd_file.log,
                           'Code d''erreur' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80440',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(pd_perd_fin,
                                                                                           'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo ||
                                              ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                                              TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                      'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_statu_afect',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_obten_statu_afect;

   --
   -- Étape 5.
   -- ============================================================================
   -- P_obten_afect_princ_paie_varbl
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet d'obtenir les affectations principales à paie variable
   *       en vigueur à la période de paie courante.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-02-19  INC00017310  Ajouter les dates de début et fin de l'affectation
   * Frédéric Aubin       2014-02-22  Performance : Faire gather stats pour global temporary après les insert de
   *                                  gir_rh_elemn_h620_tempr, gir_rh_afect_tempr, gir_rh_suplm_h620_tempr,
   *                                  gir_rh_gains_tempr, gir_rh_h620_pc_tx_tempr
   * Edgar Doiron         2014-07-31  INC71083
   *************************************************************************/
   PROCEDURE p_obten_afect_princ_paie_varbl(pn_person_id_debut IN NUMBER,
                                            pn_person_id_fin   IN NUMBER) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_obten_afect_princ_paie_varbl';
      vln_id_afect       NUMBER(15);
      vld_dt_debut       DATE;
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant d'obtenir les affectations principales
      -- à paie variable en vigueur à la période de paie courante.
      ----------------------------------------------------------------------
      CURSOR CUR_afect_princ_paie_varbl IS
         SELECT paaf.assignment_id id_afect,
                paaf.person_id id_emplo,
                MIN(paaf.effective_start_date) dt_debut,
                MAX(paaf.effective_end_date) dt_fin
           FROM per_all_assignments_f paaf,
                pay_all_payrolls_f    papf,
                per_all_people_f      pepf
          WHERE paaf.payroll_id = papf.payroll_id
            AND paaf.primary_flag = 'Y'
               -- Paie variable
            AND papf.attribute1 = cv_id_type_paie_varbl
               -- Date de fin de la période de paie variable courante
            AND paaf.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
               --INC71083 Ajout des affectations terminées à partir du lancement de la SGR2L2
               --AND paaf.effective_end_date   >= vgREC_perd_paie_varbl.dt_debut
            AND (paaf.effective_end_date >= vgrec_perd_paie_varbl.dt_debut OR
                TRUNC(paaf.effective_end_date) >= TRUNC(TO_DATE('2014-05-19',
                                                                 'YYYY-MM-DD')))
               --Fin INC71083
               -- Si on doit aller chercher des employés actifs dans le passé pour traiter leurs feuilles d'il y a 3 mois
               --AND    paaf.effective_end_date   >= ADD_MONTHS(vgREC_perd_paie_varbl.dt_debut, -3)
            AND paaf.effective_start_date BETWEEN papf.effective_start_date AND papf.effective_end_date
               -- INC00016215 Ne pas prendre les employés sans NAS
            AND pepf.person_id = paaf.person_id
            AND pepf.national_identifier IS NOT NULL
            AND pepf.effective_start_date BETWEEN papf.effective_start_date AND papf.effective_end_date
               -- fin INC00016215
               --DS-CHG00182096
            AND pepf.person_id BETWEEN pn_person_id_debut AND pn_person_id_fin
          GROUP BY paaf.assignment_id,
                   paaf.person_id;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      /*
       5 Sélectionner les affectations principales à paie variable en vigueurs à la période de paie courante.
      */
      FOR REC_CUR_afect_princ_paie_varbl IN CUR_afect_princ_paie_varbl LOOP
         --
         -- Insérer l'affectation dans la table temporaire d'affectation
         --
         vln_id_afect := REC_CUR_afect_princ_paie_varbl.id_afect;
         vld_dt_debut := REC_CUR_afect_princ_paie_varbl.dt_debut;
         --
         INSERT INTO xxgir_rh_afect_tempr
         VALUES
            (REC_CUR_afect_princ_paie_varbl.id_afect,
             REC_CUR_afect_princ_paie_varbl.id_emplo,
             REC_CUR_afect_princ_paie_varbl.dt_debut,
             REC_CUR_afect_princ_paie_varbl.dt_fin,
             cv_id_type_paie_varbl);
         --
      END LOOP;
      -- F.Aubin 2014-02-22 Performance : faire gather stats.
      /*DBMS_STATS.gather_table_stats (ownname            => 'XXGIR',
      tabname            => 'GIR_RH_AFECT_TEMPR', -- le nom de ta table
      cascade            => TRUE,
      estimate_percent   => 10);*/
      --
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_obten_afect_princ_paie_varbl.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Erreur dans la procédure P_obten_afect_princ_paie_varbl du programme de transfert des heures et unités vers SAGIP (RH_28045)');
         fnd_file.put_line(fnd_file.log,
                           SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
      
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80435',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_debut,
                                                                                           'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_obten_afect_princ_paie_varbl',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_obten_afect_princ_paie_varbl;

   --
   -- ============================================================================
   -- P_anulr_trans_h620:
   -- ============================================================================
   /*************************************************************************
   * But : Annuler les enregistrements des transactions H620 dans GIR_RH_FDT et GIR_TRANS_H620
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par               Date        Description
   * ---------------   ------      -------------
   * Michel Dessureault  2012-11-08  Création
   *************************************************************************/
   PROCEDURE p_anulr_trans_h620(pn_assignment_id IN NUMBER DEFAULT NULL) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_anulr_trans_h620';
      vln_nb_ereur       NUMBER;
      vln_no_ereur       NUMBER;
      vlv_mesg           VARCHAR2(4000);
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      /*
       6.1.2.2.2 Changer la valeur de l'indicateur de transaction annulée de "Non" à "Oui" de la transaction H620
      */
      BEGIN
         --
         FORALL vln_cp IN INDICES OF vgtab_trans_anul_h620 SAVE EXCEPTIONS
            UPDATE gir_trans_h620
               SET in_trans_anul = 'O'
             WHERE id_trans_h620 = vgtab_trans_anul_h620(vln_cp)
               AND in_trans_anul = 'N'
               AND id_afect = NVL(pn_assignment_id,
                                  id_afect);
         --
      EXCEPTION
         WHEN vgexc_dml_ereur THEN
            --
            /*vln_nb_ereur := SQL%BULK_EXCEPTIONS.COUNT;
            --
            FOR vln_cp IN 1 .. vln_nb_ereur LOOP
               --
               vln_no_ereur := SQL%BULK_EXCEPTIONS(vln_cp).error_code;
               vlv_mesg     := SQLERRM(-vln_no_ereur);
               --
               fnd_file.put_line(fnd_file.log,
                                 'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
               fnd_file.put_line(fnd_file.log,
                                 ' est en erreur dans la procédure ' || vlv_nm_procd_fonct);
               fnd_file.put_line(fnd_file.log,
                                 ' Code d''erreur:' || vln_no_ereur || '  ' || vlv_mesg);
               --
            END LOOP;*/
            --
            vgv_texte_ereur := SUBSTR(vlv_mesg,
                                      1,
                                      300) || ' - Employé : ' || vgv_no_emplo;
            --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
            p_creer_erreur(pv_code_erreur_gir => 'GIR-80434',
                           pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_assignment_id || ';',
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => 'p_anulr_trans_h620',
                           pv_de_mesg_techn   => vgv_texte_ereur);
         
            --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
            --
            RAISE vgexc_trait_h620;
            --
      END;
      --
      /*
       6.1.2.2.4 Changer la valeur de l'indicateur de transaction annulée de "Non" à "Oui" de la transaction H620
      */
      BEGIN
         FORALL vln_cp IN INDICES OF vgtab_trans_anul_h620 SAVE EXCEPTIONS
         -- 6.1.2.2.3 Obtenir tous les enregistrements dans la table GIR_RH_FDT qui ont été utilisés pour créer la transaction H620 en traitement
            UPDATE gir_rh_fdt
               SET in_trans_anul = 'O'
            -- 6.1.2.2.3.1 Numéro de transaction = Numéro de transaction H620
             WHERE id_trans = vgtab_trans_anul_h620(vln_cp)
                  -- 6.1.2.2.3.2 Indicateur de transaction annulée = « Non »
               AND nm_fiche = 'H620'
               AND in_trans_anul = 'N'
               AND id_afect = NVL(pn_assignment_id,
                                  id_afect);
         --
      EXCEPTION
         WHEN vgexc_dml_ereur THEN
            --
            vln_nb_ereur := SQL%bulk_exceptions.count;
            --
            /*FOR vln_cp IN 1 .. vln_nb_ereur LOOP
               --
               vln_no_ereur := SQL%BULK_EXCEPTIONS(vln_cp).error_code;
               vlv_mesg     := SQLERRM(-vln_no_ereur);
               --
               fnd_file.put_line(fnd_file.log,
                                 'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
               fnd_file.put_line(fnd_file.log,
                                 ' est en erreur dans la procédure ' || vlv_nm_procd_fonct);
               fnd_file.put_line(fnd_file.log,
                                 ' Code d''erreur:' || vln_no_ereur || '  ' || vlv_mesg);
               --
            END LOOP;*/
         
            --
            vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                      1,
                                      300) || ' - Employé : ' || vgv_no_emplo;
            --
            --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
            p_creer_erreur(pv_code_erreur_gir => 'GIR-80434',
                           pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_assignment_id || ';',
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => 'p_anulr_trans_h620',
                           pv_de_mesg_techn   => vgv_texte_ereur);
         
            --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
            --
            --
            RAISE vgexc_trait_h620;
            --
      END;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_anulr_trans_h620.
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h620 THEN
         --
         RAISE vgexc_trait_h620;
         --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         fnd_file.put_line(fnd_file.log,
                           ' est en erreur dans la procédure P_anulr_trans_h620');
         fnd_file.put_line(fnd_file.log,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);
         --
         vgv_texte_ereur := SUBSTR(dbms_utility.format_error_backtrace,
                                   1,
                                   300);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80434',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || pn_assignment_id || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_anulr_trans_h620',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_anulr_trans_h620;

   --
   -- ============================================================================
   -- P_creer_enreg_fdt_h010:
   -- ============================================================================
   /*************************************************************************
   * But : Créer les enregistrements des transactions H010 dans GIR_RH_FDT.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                 Date        Description
   * ---------------     ----------  -------------
   * Michel Dessureault  2012-11-08  Création
   *************************************************************************/
   PROCEDURE p_creer_enreg_fdt_h010(pn_assignment_id IN NUMBER DEFAULT NULL) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_enreg_fdt_h010';
      --
      vln_id_trans NUMBER(15);
      vln_id_afect NUMBER(15);
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les données pour la
      -- création de la fiche H010 qui annule la H620.
      ----------------------------------------------------------------------
      CURSOR CUR_fdt_h010 IS
         WITH liste_id_620 AS
          (SELECT column_value id_trans
             FROM TABLE(vgvar_liste_id_h620_h010))
         SELECT fdt.id_trans,
                fdt.id_persn,
                fdt.id_afect,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                fdt.no_docmn,
                fdt.dt_trans,
                fdt.dt_statu_sagip,
                fdt.minst
           FROM gir_rh_fdt   fdt,
                liste_id_620 h620
          WHERE fdt.id_trans = h620.id_trans
            AND fdt.nm_fiche = 'H620'
            AND id_afect = NVL(pn_assignment_id,
                               id_afect)
          GROUP BY fdt.id_trans,
                   fdt.id_persn,
                   fdt.id_afect,
                   fdt.dt_perd_paie_du,
                   fdt.dt_perd_paie_au,
                   fdt.no_docmn,
                   fdt.dt_trans,
                   fdt.dt_statu_sagip,
                   fdt.minst;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- créer la transaction H010 dans GIR_RH_FDT qui annule la H620
      --
      FOR REC_CUR_fdt_h010 IN CUR_fdt_h010 LOOP
         --
         p_log('   id_trans = ' || REC_CUR_fdt_h010.id_trans,
               vlv_nm_procd_fonct);
         p_log('   id_afect = ' || REC_CUR_fdt_h010.id_afect,
               vlv_nm_procd_fonct);
         p_log('   dt_perd_paie_du = ' || REC_CUR_fdt_h010.dt_perd_paie_du,
               vlv_nm_procd_fonct);
         p_log('   dt_perd_paie_au = ' || REC_CUR_fdt_h010.dt_perd_paie_au,
               vlv_nm_procd_fonct);
         p_log('   no_docmn_anulr = ' || REC_CUR_fdt_h010.no_docmn,
               vlv_nm_procd_fonct);
         p_log('   dt_sais_docmn = ' || REC_CUR_fdt_h010.dt_trans,
               vlv_nm_procd_fonct);
         p_log('   dt_statu_sagip = ' || REC_CUR_fdt_h010.dt_statu_sagip,
               vlv_nm_procd_fonct);
         p_log('   dt_trans = ' || vgd_dt_exect,
               vlv_nm_procd_fonct);
         p_log('   statu_sagip = ' || cv_statu_sagip_non_trans,
               vlv_nm_procd_fonct);
         p_log('   in_trans_anul = ' || 'N',
               vlv_nm_procd_fonct);
         p_log('   minst = ' || REC_CUR_fdt_h010.minst,
               vlv_nm_procd_fonct);
         --
         vln_id_trans := REC_CUR_fdt_h010.id_trans;
         vln_id_afect := REC_CUR_fdt_h010.id_afect;
         --
         INSERT INTO gir_rh_fdt
            (id_persn,
             id_afect,
             dt_perd_paie_du,
             dt_perd_paie_au,
             no_docmn_anulr,
             dt_sais_docmn,
             dt_statu_sagip,
             nm_fiche,
             dt_trans,
             statu_sagip,
             in_trans_anul,
             minst)
         VALUES
            (REC_CUR_fdt_h010.id_persn,
             REC_CUR_fdt_h010.id_afect,
             REC_CUR_fdt_h010.dt_perd_paie_du,
             REC_CUR_fdt_h010.dt_perd_paie_au,
             REC_CUR_fdt_h010.no_docmn,
             REC_CUR_fdt_h010.dt_trans,
             REC_CUR_fdt_h010.dt_statu_sagip,
             'H010',
             vgd_dt_exect,
             cv_statu_sagip_non_trans,
             'N',
             REC_CUR_fdt_h010.minst);
         --
         -- Incrémente le nombre d'enregistrements lus et
         -- le nombre d'enregistrements insérés.
         --
         p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                    pb_in_inser => TRUE);
         --
      END LOOP;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_enreg_fdt_h010.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         fnd_file.put_line(fnd_file.log,
                           ' est en erreur dans la procédure P_creer_enreg_fdt_h010');
         fnd_file.put_line(fnd_file.log,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80419',
                        pv_token_value     => 'TYPE_TRANS:H010' || ';ID_AFECT:' || vln_id_afect || ';ID_TRANS:' || vln_id_trans || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_creer_enreg_fdt_h010',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_enreg_fdt_h010;

   --
   -- Étape 6.1
   -- ============================================================================
   -- P_chang_type_paie_etape_6_1
   -- ============================================================================
   /**************************************************************************
   * But : Vérifier si l'employé change de paie variable à paie standard dans
   *       la période de paie courante.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   *
   *************************************************************************/
   PROCEDURE p_chang_type_paie_etape_6_1(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                         pv_token_value     OUT NOCOPY VARCHAR2,
                                         pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                         pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_chang_type_paie_etape_6_1';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_chang_type_paie_etape_6_1';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      vlb_exist        BOOLEAN := FALSE; -- Pour savoir si un employé à paie standard existe
      vltab_trans_h620 tab_trans_h620; -- Variable de type table plsql pour les transactions H620.
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de vérifier si l'employé a changé
      -- de type de paie de variable à standard.
      ----------------------------------------------------------------------
      CURSOR CUR_afect_paie_varbl_stand IS
         SELECT paaf.assignment_id        id_afect,
                paaf.person_id            id_emplo,
                paaf.effective_start_date dt_debut,
                paaf.effective_end_date   dt_fin
           FROM -- Table temporaire contenant la liste des affectations principales à paie variable
                xxgir_rh_afect_tempr  rat,
                per_all_assignments_f paaf,
                pay_all_payrolls_f    papf,
                per_all_people_f      pepf
          WHERE paaf.assignment_id = rat.id_afect
            AND cv_id_type_paie_varbl = rat.in_type_paie
               -- Changement de type de paie dans le futur.
            AND paaf.effective_start_date > rat.dt_fin
            AND paaf.payroll_id = papf.payroll_id
            AND paaf.primary_flag = 'Y'
               -- Paie standard
            AND papf.attribute1 = cv_id_type_paie_stand
            AND paaf.effective_start_date BETWEEN papf.effective_start_date AND papf.effective_end_date
               -- Affectation en date de fin de la période de paie standard.
            AND vgrec_perd_paie_stand.dt_fin BETWEEN paaf.effective_start_date AND paaf.effective_end_date
            AND pepf.person_id = paaf.person_id
            AND pepf.national_identifier IS NOT NULL
            AND pepf.effective_start_date BETWEEN papf.effective_start_date AND papf.effective_end_date;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de sélectionner toutes les transactions H620
      -- qui son à annuler suite au changement de type de paie.
      ----------------------------------------------------------------------
      -- 6.1.2.1
      CURSOR CUR_trans_h620 IS
         SELECT h620.id_trans_h620,
                h620.statu_trans
           FROM xxgir_rh_afect_tempr rat,
                gir_trans_h620       h620
         -- 6.1.2.1.1 Transaction H620 lié à l'affectation.
          WHERE h620.id_afect = rat.id_afect
            AND cv_id_type_paie_stand = rat.in_type_paie
               -- 6.1.2.1.2 Transaction pour la période de paie variable courante.
            AND h620.perd_paie_varbl_du <= vgrec_perd_paie_varbl.dt_fin
            AND h620.perd_paie_varbl_au >= vgrec_perd_paie_varbl.dt_debut
               -- 6.1.2.1.3 Indicateur de transaction annulée.
            AND h620.in_trans_anul = 'N';
      --
   BEGIN
      --
      vgv_etape := '6.1.1';
      --
      FOR REC_CUR_afect_paie_varbl_stand IN CUR_afect_paie_varbl_stand LOOP
         --
         -- Indiquer les affectations qui passent de paie variable à standard.
         --
         UPDATE xxgir_rh_afect_tempr rat
            SET rat.dt_debut     = REC_CUR_afect_paie_varbl_stand.dt_debut,
                rat.id_emplo     = REC_CUR_afect_paie_varbl_stand.id_emplo,
                rat.in_type_paie = cv_id_type_paie_stand
          WHERE rat.id_afect = REC_CUR_afect_paie_varbl_stand.id_afect;
         --
         vlb_exist := TRUE;
         --
      END LOOP;
      --
      vgv_etape := '6.1.2';
      /*
       6.1.2
       Si le type de paie dans l'affectation principale de l'employé en date de fin de la période de paie standard est 'STANDARD'
       alors, il faut annuler toutes les transactions H620 concernant l'employé dans la période de paie variable courante.
      */
      IF vlb_exist THEN
         --
         vgv_etape := '6.1.2.2';
         --
         OPEN CUR_trans_h620;
         FETCH CUR_trans_h620 BULK COLLECT
            INTO vltab_trans_h620;
         CLOSE CUR_trans_h620;
         --
         IF vltab_trans_h620.count > 0 THEN
            --
            FOR vln_cp IN 1 .. vltab_trans_h620.count LOOP
               --
               IF vltab_trans_h620(vln_cp).statu_trans = cv_cd_statu_sagip_acept THEN
                  --
                  /*
                   6.1.2.2.1
                   Création d'enregistrement H010 dans la table GIR_RH_FDT.
                  */
                  vgv_etape := '6.1.2.2.1';
                  --
                  p_log('123 - id_trans=' || vltab_trans_h620(vln_cp).id_trans_h620,
                        vlv_nm_procd_fonct);
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := vltab_trans_h620(vln_cp).id_trans_h620;
                  --
               END IF;
               --
               /*
                6.1.2.2.2
                Changer la valeur de l'indicateur de transaction annulée de "Non" à "Oui" de la transaction H620
               */
               vgv_etape := '6.1.2.2.2';
               --
               vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := vltab_trans_h620(vln_cp).id_trans_h620;
               --
               /*
                6.1.2.2.4
                Changer la valeur de l'indicateur de transaction annulée de "Non" à "Oui" de la transaction H620
               */
               vgv_etape := '6.1.2.2.4';
               --
               -- On doit mettre immédiatement à jour l'indicateur de transaction annulée à jour pour ne pas le retraiter.
               --
               UPDATE gir_rh_fdt fdt
                  SET fdt.in_trans_anul = 'O'
                WHERE fdt.id_trans = vltab_trans_h620(vln_cp).id_trans_h620
                  AND fdt.nm_fiche = 'H620'
                  AND fdt.in_trans_anul = 'N';
               --
            END LOOP;
            --
            -- INC00016333  2012-12-06  Pour être sûr de ne pas rappeler des transactions qui devraient être annulées
            --
            p_anulr_trans_h620;
            --
            -- Créer les H010 annulant les H620 acceptées dans la table GIR_RH_FDT s'il y a lieu
            --
            IF vgvar_liste_id_h620_h010.count > 0 THEN
               --
               p_creer_enreg_fdt_h010;
               --
               vgVAR_liste_id_h620_h010.DELETE;
               --
            END IF;
            --
            vgTAB_trans_anul_h620.DELETE;
            --
         END IF;
         --
      END IF;
      --
      /*
       6.1.3
       Plutôt que d'utiliser la boucle de parcours de chaque affectation décrite au point 6,
       la liste d'affectations est intégrée aux SELECT pour question de performance
       (xxgir_rh_afect_tempr).
      */
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_chang_type_paie_etape_6_1.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80403';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_chang_type_paie_etape_6_1;

   --
   -- Étape 6.2
   -- ============================================================================
   -- P_creer_elemn_etape_6_2_6_12
   -- ============================================================================
   /**************************************************************************
   * But :  Création de la liste des éléments récurrents à pourcentage.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-07  INC00016333 Aller chercher la valeur par défaut si la valeur est nulle
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On utilise le code sagip au lieu du id_type pour tenir compte des sélections de special input ou remplacement
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Frédéric Aubin       2013-04-25  INC00018238: enlevé les canonicals plus besoin
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_2_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_2_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_2_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      vltab_liste_recrn_pc tab_jeu_elemn_6_2_6_3 := tab_jeu_elemn_6_2_6_3(); -- Table pour la liste des éléments récurrents à pourcentage.
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des éléments récurrents à pourcentage.
      ----------------------------------------------------------------------
      CURSOR CUR_liste_elemn_recrn_pc IS
         WITH elemn_recrn_pc AS
          (SELECT rea.id_afect,
                  rea.id_type_elemn,
                  rea.id_entre_elemn,
                  rea.nm_elemn,
                  rea.cd_elemn,
                  rea.cd_sagip,
                  rea.nm_va_entre_elemn,
                  DECODE(rea.va_entre_elemn,
                         NULL,
                         DECODE(rea.in_va_entre_deft,
                                'Y',
                                rea.va_entre_deft),
                         rea.va_entre_elemn) va_entre_elemn,
                  rea.peev_dt_debut_efect dt_debut,
                  rea.peev_dt_fin_efect dt_fin
             FROM xxgir_rh_elemn_afect_v rea
                  -- Table temporaire contenant la liste des affectations principales à paie variable en vigueurs à la période de paie courante.
                 ,
                  xxgir_rh_afect_tempr rat
            WHERE -- 6.2.1 Élément lié à l'affectation
            rea.id_afect = rat.id_afect
         AND rat.in_type_paie = cv_id_type_paie_varbl
           -- 6.2.2 Élément n'est lié à aucun élément non récurrent 'special inputs' qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie courante
         AND NOT EXISTS
            (SELECT specl.nm_elemn
               FROM (SELECT TRIM(REGEXP_REPLACE(rea.nm_elemn,
                                                cv_nm_specl_input,
                                                '',
                                                1,
                                                1,
                                                'i')) nm_elemn
                            -- retouche 132
                           ,
                            rea.id_afect,
                            COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
                       FROM xxgir_rh_elemn_afect_v rea
                      WHERE rea.type_procs_elemn = 'N'
                        AND REGEXP_INSTR(rea.nm_elemn,
                                         cv_nm_specl_input,
                                         1,
                                         1,
                                         0,
                                         'i') > 0
                        AND ( -- possède une date de début à l'intérieur de la période de paie.
                              (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                            cv_nm_dt_debut,
                                            1,
                                            1,
                                            0,
                                            'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                             -- possède une date de fin à l'intérieur de la période de paie.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_dt_fin,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                            -- possède un montant de remplacement.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_mt_rempl,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                           -- dans la période courante
                        AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut) specl
              WHERE rea.nm_elemn = specl.nm_elemn
                   -- Retouche 132 pour affectation traitée
                AND rea.id_afect = specl.id_afect
                   /*
                    Le chiffre 3 équivaut aux conditions ,
                    c'est à dire que l'élément contient trois valeurs d'entrée,
                    une date de début,
                    une date de fin
                    et un montant de remplacement.
                   */
                   -- Exclure l'élément non récurrent qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie.
                AND 3 = specl.nbr_va_entre_specl_input)
           -- 6.2.3 Valide pour la période de paie courante ou antérieure.
         AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pee_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
         AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.peev_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                           vgrec_perd_paie_varbl.dt_debut)
         AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pel_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
         AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pet_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
         AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.piv_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
           -- 6.2.4 Élément récurrent
         AND rea.type_procs_elemn = 'R'
           -- 6.2.5 Élément présent dans le jeu d'éléments pour H620 déterminé au point 2
         AND EXISTS (SELECT 'X'
               FROM xxgir_rh_elemn_h620_tempr reht
              WHERE reht.nm_liste = 'jeu_h620'
                   -- retouche 132
                   --AND    reht.id_type_elemn = rea.id_type_elemn
                AND reht.cd_sagip = rea.cd_sagip
                   -- INC00017528
                AND reht.nm_elemn = rea.nm_elemn)
           -- Pour isoler la valeur servant aux calculs
         AND rea.nm_va_entre_elemn = cv_nm_pc)
         SELECT id_afect,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_debut,
                NVL(dt_fin,
                    vgrec_perd_paie_varbl.dt_fin) dt_fin,
                FND_NUMBER.CANONICAL_TO_NUMBER(va_pc) va_pc,
                NULL va_tx,
                NULL va_factr,
                'P' in_type_liste
           FROM (SELECT -- 6.12.1.2 Obtenir toutes les valeurs d'entrée de chacun des éléments de la liste pour permettre le traitement des H620
                  erp.id_afect,
                  erp.id_type_elemn,
                  erp.id_entre_elemn,
                  erp.nm_elemn,
                  erp.cd_elemn,
                  erp.cd_sagip,
                  erp.nm_va_entre_elemn,
                  erp.va_entre_elemn,
                  erp.dt_debut,
                  erp.dt_fin
                   FROM elemn_recrn_pc erp)
         pivot (MAX(va_entre_elemn) FOR nm_va_entre_elemn IN('Pourcentage' va_pc))
         -- 6.2.6 Élément possède un pourcentage
          WHERE va_pc IS NOT NULL
            AND cd_sagip IS NOT NULL;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.2 création de la liste des éléments récurrents à pourcentage.
      --
      OPEN CUR_liste_elemn_recrn_pc;
      FETCH CUR_liste_elemn_recrn_pc BULK COLLECT
         INTO vltab_liste_recrn_pc;
      CLOSE CUR_liste_elemn_recrn_pc;
      --
      IF vlTAB_liste_recrn_pc.EXISTS(1) THEN
         --
         p_log('15 - Nb enregistrements: ' || vltab_liste_recrn_pc.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_recrn_pc
            INSERT INTO xxgir_rh_h620_pc_tx_tempr
               (id_afect,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_debut,
                dt_fin,
                va_pc,
                va_tx,
                va_factr,
                in_type_liste)
            VALUES
               (vltab_liste_recrn_pc(vln_cp).id_afect,
                vltab_liste_recrn_pc(vln_cp).id_type_elemn,
                vltab_liste_recrn_pc(vln_cp).id_entre_elemn,
                vltab_liste_recrn_pc(vln_cp).nm_elemn,
                vltab_liste_recrn_pc(vln_cp).cd_elemn,
                vltab_liste_recrn_pc(vln_cp).cd_sagip,
                vltab_liste_recrn_pc(vln_cp).dt_debut,
                vltab_liste_recrn_pc(vln_cp).dt_fin,
                vltab_liste_recrn_pc(vln_cp).va_pc,
                vltab_liste_recrn_pc(vln_cp).va_tx,
                vltab_liste_recrn_pc(vln_cp).va_factr,
                vltab_liste_recrn_pc(vln_cp).in_type_liste);
         --
      END IF;
      --
      -- Vider les objets
      --
      vlTAB_liste_recrn_pc.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_2_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_liste_recrn_pc.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_liste_elemn_recrn_pc%ISOPEN THEN
            CLOSE CUR_liste_elemn_recrn_pc;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80404';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_2_6_12;

   --
   -- Étape 6.3
   -- ============================================================================
   -- P_creer_elemn_etape_6_3_6_12
   -- ============================================================================
   /**************************************************************************
   * But :  Création de la liste des éléments récurrents basée sur le taux annuel - prorata en fonction des heures.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-07  INC00016333  Aller chercher la valeur par défaut si la valeur est nulle
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On utilise le code sagip au lieu du id_type pour tenir compte des sélections de special input ou remplacement
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_3_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_3_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_3_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      vltab_liste_tx_anuel tab_jeu_elemn_6_2_6_3 := tab_jeu_elemn_6_2_6_3(); -- Table pour la liste des éléments récurrents basées sur le taux annuel au prorata en fonction des heures
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des éléments récurrents basés sur le taux annuel - prorata en fonction des heures.
      ----------------------------------------------------------------------
      CURSOR CUR_liste_elemn_recrn_tx_anuel IS
         WITH elemn_recrn_tx AS
          (SELECT rea.id_afect,
                  rea.id_type_elemn,
                  rea.id_entre_elemn,
                  rea.nm_elemn,
                  rea.cd_elemn,
                  rea.cd_sagip,
                  rea.nm_va_entre_elemn,
                  DECODE(rea.va_entre_elemn,
                         NULL,
                         DECODE(rea.in_va_entre_deft,
                                'Y',
                                rea.va_entre_deft),
                         rea.va_entre_elemn) va_entre_elemn,
                  rea.peev_dt_debut_efect dt_debut,
                  rea.peev_dt_fin_efect dt_fin
             FROM xxgir_rh_elemn_afect_v rea
                  -- Table temporaire contenant la liste des affectations principales à paie variable en vigueurs à la période de paie courante.
                 ,
                  xxgir_rh_afect_tempr rat
            WHERE -- 6.3.1 Élément lié à l'affectation
            rea.id_afect = rat.id_afect
         AND rat.in_type_paie = cv_id_type_paie_varbl
           -- 6.3.2 Élément n'est lié à aucun élément non récurrent 'special inputs' qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie courante
         AND NOT EXISTS
            (SELECT specl.nm_elemn
               FROM (SELECT TRIM(REGEXP_REPLACE(rea.nm_elemn,
                                                cv_nm_specl_input,
                                                '',
                                                1,
                                                1,
                                                'i')) nm_elemn
                            -- Retouche 132 pour affectation traitée
                           ,
                            rea.id_afect,
                            COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
                       FROM xxgir_rh_elemn_afect_v rea
                      WHERE rea.type_procs_elemn = 'N'
                        AND REGEXP_INSTR(rea.nm_elemn,
                                         cv_nm_specl_input,
                                         1,
                                         1,
                                         0,
                                         'i') > 0
                        AND ( -- possède une date de début à l'intérieur de la période de paie.
                              (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                            cv_nm_dt_debut,
                                            1,
                                            1,
                                            0,
                                            'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                             -- possède une date de fin à l'intérieur de la période de paie.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_dt_fin,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                            -- possède un montant de remplacement.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_mt_rempl,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                           -- dans la période courante
                        AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut) specl
              WHERE rea.nm_elemn = specl.nm_elemn
                   -- retouche 132 Pour affectation traitée
                AND rea.id_afect = specl.id_afect
                   /*
                    Le chiffre 3 équivaut aux conditions ,
                    c'est à dire que l'élément contient trois valeurs d'entrée,
                    une date de début,
                    une date de fin
                    et un montant de remplacement.
                   */
                   -- Exclure l'élément non récurrent qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie.
                AND 3 = specl.nbr_va_entre_specl_input)
           -- 6.3.3 Valide pour la période de paie courante ou antérieure.
         AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pee_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
         AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.peev_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                           vgrec_perd_paie_varbl.dt_debut)
         AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pel_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
         AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pet_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
         AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.piv_dt_fin_efect >= LEAST(TRUNC(cd_dt_prodc),
                                          vgrec_perd_paie_varbl.dt_debut)
           -- 6.3.4 Élément récurrent
         AND rea.type_procs_elemn = 'R'
           -- 6.3.5 Élément présent dans le jeu d'éléments basés sur le taux annuel au prorata du point 4
         AND EXISTS (SELECT 'X'
               FROM xxgir_rh_elemn_h620_tempr reht
              WHERE reht.nm_liste = 'jeu_tx_anuel'
                   -- Retouche 132
                   --AND    reht.id_type_elemn = rea.id_type_elemn
                AND reht.cd_sagip = rea.cd_sagip
                   -- INC00017528
                AND reht.nm_elemn = rea.nm_elemn)
         AND -- Pour isoler les 2 valeurs servant aux calculs
            rea.nm_va_entre_elemn IN (cv_nm_tx,
                                      cv_nm_factr))
         SELECT id_afect,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_debut,
                NVL(dt_fin,
                    vgrec_perd_paie_varbl.dt_fin) dt_fin,
                NULL va_pc,
                NVL(FND_NUMBER.CANONICAL_TO_NUMBER(va_tx),
                    1) va_tx,
                NVL(FND_NUMBER.CANONICAL_TO_NUMBER(va_factr),
                    1) va_factr,
                'T' in_type_liste
           FROM (SELECT -- 6.12.1.2 Obtenir toutes les valeurs d'entrée de chacun des éléments de la liste pour permettre le traitement des H620
                  ert.id_afect,
                  ert.id_type_elemn,
                  ert.id_entre_elemn,
                  ert.nm_elemn,
                  ert.cd_elemn,
                  ert.cd_sagip,
                  ert.nm_va_entre_elemn,
                  ert.va_entre_elemn,
                  ert.dt_debut,
                  ert.dt_fin
                   FROM elemn_recrn_tx ert)
         pivot (MAX(va_entre_elemn) FOR nm_va_entre_elemn IN('Taux' va_tx,
                                                        'Facteur' va_factr))
          WHERE cd_sagip IS NOT NULL;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.3   création de la liste des éléments récurrents basées sur le taux annuel - prorata en fonction des heures.
      --
      OPEN CUR_liste_elemn_recrn_tx_anuel;
      FETCH CUR_liste_elemn_recrn_tx_anuel BULK COLLECT
         INTO vltab_liste_tx_anuel;
      CLOSE CUR_liste_elemn_recrn_tx_anuel;
      --
      IF vlTAB_liste_tx_anuel.EXISTS(1) THEN
         --
         p_log('Nb enregistrements: ' || vltab_liste_tx_anuel.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_tx_anuel
            INSERT INTO xxgir_rh_h620_pc_tx_tempr
               (id_afect,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_debut,
                dt_fin,
                va_pc,
                va_tx,
                va_factr,
                in_type_liste)
            VALUES
               (vltab_liste_tx_anuel(vln_cp).id_afect,
                vltab_liste_tx_anuel(vln_cp).id_type_elemn,
                vltab_liste_tx_anuel(vln_cp).id_entre_elemn,
                vltab_liste_tx_anuel(vln_cp).nm_elemn,
                vltab_liste_tx_anuel(vln_cp).cd_elemn,
                vltab_liste_tx_anuel(vln_cp).cd_sagip,
                vltab_liste_tx_anuel(vln_cp).dt_debut,
                vltab_liste_tx_anuel(vln_cp).dt_fin,
                vltab_liste_tx_anuel(vln_cp).va_pc,
                vltab_liste_tx_anuel(vln_cp).va_tx,
                vltab_liste_tx_anuel(vln_cp).va_factr,
                vltab_liste_tx_anuel(vln_cp).in_type_liste);
         --
      END IF;
      --
      -- Vider les objets
      --
      vlTAB_liste_tx_anuel.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_3_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_liste_elemn_recrn_tx_anuel%ISOPEN THEN
            CLOSE CUR_liste_elemn_recrn_tx_anuel;
         END IF;
         --
         -- Vider les objets
         --
         vlTAB_liste_tx_anuel.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80405';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_3_6_12;

   --
   -- Étape 6.4
   -- ============================================================================
   -- P_creer_elemn_etape_6_4_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste des autres éléments récurrents.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-21  INC00016333 Corriger les SELECT utilisant le id_type_elemn
   *                                              pour utiliser le id_entre_elemn quand on parle de liste d'éléments.
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On utilise le code sagip au lieu du id_type pour tenir compte des sélections de special input ou remplacement
   * Michel Dessureault   2013-02-22  INC00017437  Problème lorsque modification d'un élément récurrent - aller chercher la dernière modification
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_4_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_4_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_4_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      -- performance
      vltab_liste_autre_elemn_recrn tab_liste_elemn := tab_liste_elemn();
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des autres éléments récurrents.
      ----------------------------------------------------------------------
      CURSOR CUR_autre_elemn_recrn IS
         WITH liste_elemn AS
          (SELECT DISTINCT rea.id_afect,
                           rea.catgr_emplo,
                           rea.id_type_elemn,
                           rea.id_entre_elemn,
                           rea.nm_elemn,
                           rea.cd_elemn,
                           rea.cd_sagip,
                           rea.nm_va_entre_elemn,
                           DECODE(rea.va_entre_elemn,
                                  NULL,
                                  DECODE(rea.in_va_entre_deft,
                                         'Y',
                                         rea.va_entre_deft),
                                  rea.va_entre_elemn) va_entre_elemn,
                           rea.peev_dt_debut_efect dt_debut,
                           rea.peev_dt_fin_efect dt_fin
           --     ,'6_4' nm_liste
             FROM xxgir_rh_elemn_afect_v rea
                  -- Table temporaire contenant la liste des affectations principales à paie variable en vigueurs à la période de paie courante.
                 ,
                  xxgir_rh_afect_tempr rat
            WHERE -- 6.4.1 Élément lié à l'affectation
            rea.id_afect = rat.id_afect
         AND rat.in_type_paie = cv_id_type_paie_varbl
           -- 6.4.2 Valide pour la période de paie courante ou antérieure.
         AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
           --
           -- 6.4.3 Élément récurrent
         AND rea.type_procs_elemn = 'R'
           -- 6.4.4 Élément présent dans le jeu d'éléments pour H620 du point 2
         AND EXISTS (SELECT 'X'
               FROM xxgir_rh_elemn_h620_tempr reht
              WHERE reht.nm_liste = 'jeu_h620'
                   -- Retouche 132
                   --AND    reht.id_type_elemn = rea.id_type_elemn
                AND reht.cd_sagip = rea.cd_sagip
                   -- INC00017528
                AND reht.nm_elemn = rea.nm_elemn)
           -- 6.4.5 Élément n'est pas un Special inputs.
         AND REGEXP_INSTR(rea.nm_elemn,
                         cv_nm_specl_input,
                         1,
                         1,
                         0,
                         'i') = 0
           -- 6.4.6 Élément n'est lié à aucun élément non récurrent 'special inputs' qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie courante
         AND NOT EXISTS
            (SELECT specl.nm_elemn
               FROM (SELECT TRIM(REGEXP_REPLACE(rea.nm_elemn,
                                                 cv_nm_specl_input,
                                                 '',
                                                 1,
                                                 1,
                                                 'i')) nm_elemn
                             -- Retouche 132 pour l'affectation traitée
                           ,
                            rea.id_afect id_afect,
                            COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
                       FROM xxgir_rh_elemn_afect_v rea
                      WHERE rea.type_procs_elemn = 'N'
                        AND REGEXP_INSTR(rea.nm_elemn,
                                         cv_nm_specl_input,
                                         1,
                                         1,
                                         0,
                                         'i') > 0
                        AND ( -- possède une date de début à l'intérieur de la période de paie.
                              (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                            cv_nm_dt_debut,
                                            1,
                                            1,
                                            0,
                                            'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                             -- possède une date de fin à l'intérieur de la période de paie.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_dt_fin,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                            -- possède un montant de remplacement.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_mt_rempl,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                           -- dans la période courante
                        AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut) specl
              WHERE rea.nm_elemn = specl.nm_elemn
                   -- Retouche 132 Pour l'affectation traitée
                AND rea.id_afect = specl.id_afect
                   /*
                    Le chiffre 3 équivaut aux conditions ,
                    c'est à dire que l'élément contient trois valeurs d'entrée,
                    une date de début,
                    une date de fin
                    et un montant de remplacement.
                   */
                   -- Exclure l'élément non récurrent qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie.
                AND 3 = specl.nbr_va_entre_specl_input)
           -- 6.4.7 Élément en vigueur après la date d'implantation
         AND rea.peev_dt_debut_efect >= cd_dt_prodc
           -- 6.4.8 Élément d'entrée non présent dans la liste des éléments récurrents à pourcentage définie au point 6.2.
         AND rea.id_entre_elemn NOT IN (SELECT hptt.id_entre_elemn
                                         FROM xxgir_rh_h620_pc_tx_tempr hptt
                                        WHERE hptt.in_type_liste = 'P')
           -- 6.4.9 Type d'élément non présent dans le jeu d'éléments basés sur le taux annuel au prorata pour la paie variable obtenu au point 4.
         AND NOT EXISTS (SELECT 'X'
               FROM xxgir_rh_elemn_h620_tempr reht
              WHERE reht.nm_liste = 'jeu_tx_anuel'
                   -- retouche 132
                   --AND    reht.id_type_elemn = rea.id_type_elemn
                AND reht.cd_sagip = rea.cd_sagip
                   -- INC00017528
                AND reht.nm_elemn = rea.nm_elemn)
         AND rea.cd_sagip IS NOT NULL)
         -- Pour aller chercher le plus récent
         ,
         liste_group AS
          (SELECT id_afect,
                  cd_sagip,
                  id_entre_elemn,
                  MAX(dt_fin) dt_fin
             FROM liste_elemn
            GROUP BY id_afect,
                     cd_sagip,
                     id_entre_elemn)
         SELECT le.id_afect,
                le.catgr_emplo,
                le.id_type_elemn,
                le.id_entre_elemn,
                le.nm_elemn,
                le.cd_elemn,
                le.cd_sagip,
                le.nm_va_entre_elemn,
                le.va_entre_elemn,
                le.dt_debut,
                le.dt_fin,
                '6_4' nm_liste
           FROM liste_elemn le,
                liste_group lg
          WHERE le.id_afect = lg.id_afect
            AND le.cd_sagip = lg.cd_sagip
            AND le.id_entre_elemn = lg.id_entre_elemn
            AND le.dt_fin = lg.dt_fin;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.4 Création de la liste des autres éléments récurents.
      --
      OPEN CUR_autre_elemn_recrn;
      FETCH CUR_autre_elemn_recrn BULK COLLECT
         INTO vltab_liste_autre_elemn_recrn;
      CLOSE CUR_autre_elemn_recrn;
      --
      IF vlTAB_liste_autre_elemn_recrn.EXISTS(1) THEN
         --
         p_log('15 - Nb enregistrements: ' || vltab_liste_autre_elemn_recrn.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_autre_elemn_recrn
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_liste_autre_elemn_recrn(vln_cp).id_afect,
                vltab_liste_autre_elemn_recrn(vln_cp).catgr_emplo,
                vltab_liste_autre_elemn_recrn(vln_cp).id_type_elemn,
                vltab_liste_autre_elemn_recrn(vln_cp).id_entre_elemn,
                vltab_liste_autre_elemn_recrn(vln_cp).nm_elemn,
                vltab_liste_autre_elemn_recrn(vln_cp).cd_elemn,
                vltab_liste_autre_elemn_recrn(vln_cp).cd_sagip,
                vltab_liste_autre_elemn_recrn(vln_cp).nm_va_entre_elemn,
                vltab_liste_autre_elemn_recrn(vln_cp).va_entre_elemn,
                vltab_liste_autre_elemn_recrn(vln_cp).dt_debut,
                vltab_liste_autre_elemn_recrn(vln_cp).dt_fin,
                vltab_liste_autre_elemn_recrn(vln_cp).nm_liste);
         --
      END IF;
      --
      --
      vlTAB_liste_autre_elemn_recrn.DELETE;
      --
      p_log('10 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_4_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_autre_elemn_recrn%ISOPEN THEN
            CLOSE CUR_autre_elemn_recrn;
         END IF;
         --
         -- Vider les objets
         --
         vlTAB_liste_autre_elemn_recrn.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80406';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_4_6_12;

   --
   -- Étape 6.5
   -- ============================================================================
   -- P_creer_elemn_etape_6_5_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste d'éléments non récurrents avec montant de remplacement.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On tient compte des date de début et fin de l'entrée d'élément
   * Michel Dessureault   2013-02-22  INC00017437  Problème lorsque 2 montants de remplacement pour le même code sagip créés en même temps
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_5_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_5_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_5_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      -- performance
      vltab_liste_mt_rempl tab_liste_elemn := tab_liste_elemn();
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des éléments non récurrents
      -- avec montant de remplacement.
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_non_recrn_rempl IS
         WITH liste_elemn_mt AS
          (SELECT DISTINCT rea.id_afect,
                           rea.catgr_emplo,
                           rea.id_type_elemn,
                           rea.cd_sagip,
                           rea.id_entre_elemn,
                           rea.cd_elemn,
                           rea.nm_elemn,
                           rea.nm_va_entre_elemn,
                           rea.id_va_entre_elemn,
                           COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
             FROM xxgir_rh_elemn_afect_v rea,
                  xxgir_rh_afect_tempr   rat
            WHERE -- 6.5.1 Élément lié à l'affectation
            rea.id_afect = rat.id_afect
         AND rat.in_type_paie = cv_id_type_paie_varbl
           -- 6.5.2 Élément en vigueur pour la période de paie courante
         AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
           -- 6.5.3 Élément est un Special inputs
         AND REGEXP_INSTR(rea.nm_elemn,
                         cv_nm_specl_input,
                         1,
                         1,
                         0,
                         'i') > 0
           -- 6.5.4 Élément non récurrent
         AND rea.type_procs_elemn = 'N'
         AND ( -- 6.5.5 possède une date de début à l'intérieur de la période de paie.
             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                           cv_nm_dt_debut,
                           1,
                           1,
                           0,
                           'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
            -- 6.5.5 possède une date de fin à l'intérieur de la période de paie.
             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                           cv_nm_dt_fin,
                           1,
                           1,
                           0,
                           'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
            -- 6.5.6 possède un montant de remplacement.
             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                           cv_nm_mt_rempl,
                           1,
                           1,
                           0,
                           'i') > 0 AND rea.va_entre_elemn IS NOT NULL))),
         elemn_group AS
          (SELECT id_afect,
                  cd_sagip,
                  MAX(id_entre_elemn) id_entre_elemn
             FROM (SELECT rse.assignment_id    id_afect,
                           lem.cd_sagip         cd_sagip,
                           rse.element_entry_id id_entre_elemn,
                           rse.element_type_id  id_type_elemn,
                           rse.creation_date    dt_creat
                      FROM gir_rh_suivi_entre_elemn_paie rse, -- INC-89949
                           liste_elemn_mt                lem
                     WHERE -- 6.5.1 Élément lié à l'affectation
                     rse.assignment_id = lem.id_afect
                    -- 6.5.2 Élément en vigueur pour la période de paie courante
                  AND rse.new_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                  AND rse.new_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                    -- 6.5.3 à 6.5.6
                  AND rse.element_type_id = lem.id_type_elemn
                  AND rse.element_entry_id = lem.id_entre_elemn
                  AND rse.input_value_id = lem.id_va_entre_elemn
                  AND 3 = lem.nbr_va_entre_specl_input
                    -- 6.5.7 Élément non traité
                  AND rse.in_trait = 'N'
                    -- 6.5.8 Type d'élément est un Special inputs présent dans le jeu H620 au point 2a
                  AND EXISTS (SELECT 'X'
                        FROM xxgir_rh_elemn_h620_tempr reht
                       WHERE reht.nm_liste = 'jeu_specl'
                            -- retouche 132
                            --AND    reht.id_type_elemn = rse.element_type_id
                         AND reht.cd_sagip = lem.cd_sagip
                            -- INC00017528
                         AND reht.nm_elemn = lem.nm_elemn)
                    -- 6.5.9 Élément d'entrée n'a jamais été supprimé
                  AND rse.element_entry_id NOT IN (SELECT rse1.element_entry_id
                                                    FROM gir_rh_suivi_entre_elemn_paie rse1 -- INC-89949
                                                   WHERE rse1.assignment_id = rse.assignment_id
                                                     AND rse1.trans_type = 'D'))
            GROUP BY id_afect,
                     cd_sagip)
         SELECT id_afect,
                catgr_emplo,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                NULL nm_va_entre_elemn,
                va_entre_elemn
                /* Retouche 132
                ,NVL(fnd_date.canonical_to_date(dt_debut), vgREC_perd_paie_varbl.dt_debut) dt_debut
                ,NVL(fnd_date.canonical_to_date(dt_fin), vgREC_perd_paie_varbl.dt_fin)     dt_fin*/,
                FND_DATE.CANONICAL_TO_DATE(dt_debut) dt_debut,
                FND_DATE.CANONICAL_TO_DATE(dt_fin) dt_fin,
                '6_5' nm_liste
         -- avec un PIVOT on organise les enregistrements pour avoir le montant pour les dates de début et fin
           FROM (SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        cd_sagip,
                        id_entre_elemn,
                        cd_elemn,
                        nm_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                   FROM (SELECT rea.id_afect,
                                rea.catgr_emplo,
                                rea.id_type_elemn,
                                rea.cd_sagip,
                                rea.id_entre_elemn,
                                rea.cd_elemn,
                                rea.nm_elemn,
                                rea.nm_va_entre_elemn,
                                rea.va_entre_elemn
                           FROM xxgir_rh_elemn_afect_v rea,
                                elemn_group            eg
                          WHERE rea.id_entre_elemn = eg.id_entre_elemn
                            AND ((REGEXP_INSTR(rea.nm_va_entre_elemn,
                                               cv_nm_dt_debut,
                                               1,
                                               1,
                                               0,
                                               'i') > 0) OR (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                                                           cv_nm_dt_fin,
                                                                           1,
                                                                           1,
                                                                           0,
                                                                           'i') > 0) OR
                                (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                               cv_nm_mt_rempl,
                                               1,
                                               1,
                                               0,
                                               'i') > 0))))
         -- placer en colonne les lignes des valeurs des éléments
         pivot (MAX(va_entre_elemn) FOR nm_va_entre_elemn IN('Montant de remplacement' va_entre_elemn,
                                                        'Date de début' dt_debut,
                                                        'Date de fin' dt_fin))
          WHERE cd_sagip IS NOT NULL;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.5 Liste d'éléments non récurrents avec montant de remplacement.
      --
      OPEN CUR_elemn_non_recrn_rempl;
      FETCH CUR_elemn_non_recrn_rempl BULK COLLECT
         INTO vltab_liste_mt_rempl;
      CLOSE CUR_elemn_non_recrn_rempl;
      --
      IF vlTAB_liste_mt_rempl.EXISTS(1) THEN
         --
         p_log('15 - Nb enregistrements: ' || vltab_liste_mt_rempl.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_mt_rempl
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_liste_mt_rempl(vln_cp).id_afect,
                vltab_liste_mt_rempl(vln_cp).catgr_emplo,
                vltab_liste_mt_rempl(vln_cp).id_type_elemn,
                vltab_liste_mt_rempl(vln_cp).id_entre_elemn,
                vltab_liste_mt_rempl(vln_cp).nm_elemn,
                vltab_liste_mt_rempl(vln_cp).cd_elemn,
                vltab_liste_mt_rempl(vln_cp).cd_sagip,
                vltab_liste_mt_rempl(vln_cp).nm_va_entre_elemn,
                vltab_liste_mt_rempl(vln_cp).va_entre_elemn,
                vltab_liste_mt_rempl(vln_cp).dt_debut,
                vltab_liste_mt_rempl(vln_cp).dt_fin,
                vltab_liste_mt_rempl(vln_cp).nm_liste);
         --
      END IF;
      --
      vlTAB_liste_mt_rempl.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_5_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_elemn_non_recrn_rempl%ISOPEN THEN
            CLOSE CUR_elemn_non_recrn_rempl;
         END IF;
         --
         -- Vider les objets
         --
         vlTAB_liste_mt_rempl.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80407';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_5_6_12;

   --
   -- Étape 6.6
   -- ============================================================================
   -- P_creer_elemn_etape_6_6_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste d'éléments non récurrents avec montant supplémentaire.
   *
   ***************************************************************************
   *
   * Paramètres entrée    : N/D
   *
   * Paramètres de sortie : N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On tient compte des date de début et fin de l'entrée d'élément
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-12  INC00017714  Corriger le traitement des éléments Special inputs.
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_6_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_6_6_12';
      --DDC 209235
      --vld_dt_gain         DATE;
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_6_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      -- performance
      vltab_liste_mt_suplm tab_liste_elemn := tab_liste_elemn();
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des éléments non récurrents
      -- avec montant supplémentaire.
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_non_recrn_suplm IS
         SELECT id_afect,
                catgr_emplo,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                NULL nm_va_entre_elemn,
                va_entre_elemn
                /* Retouche 132
                ,NVL(fnd_date.canonical_to_date(dt_debut), vgREC_perd_paie_varbl.dt_debut) dt_debut
                ,NVL(fnd_date.canonical_to_date(dt_fin), vgREC_perd_paie_varbl.dt_fin)     dt_fin*/,
                FND_DATE.CANONICAL_TO_DATE(dt_debut) dt_debut,
                FND_DATE.CANONICAL_TO_DATE(dt_fin) dt_fin,
                '6_6' nm_liste
         -- avec un PIVOT on organise les enregistrements pour avoir le montant pour les dates de début et fin
           FROM (SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        cd_sagip,
                        id_entre_elemn,
                        nm_elemn,
                        cd_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                   FROM (SELECT rea.id_afect,
                                 rea.catgr_emplo,
                                 rea.id_type_elemn,
                                 rea.cd_sagip,
                                 rea.id_entre_elemn,
                                 rea.nm_elemn,
                                 rea.cd_elemn,
                                 rea.nm_va_entre_elemn,
                                 DECODE(rea.va_entre_elemn,
                                        NULL,
                                        DECODE(rea.in_va_entre_deft,
                                               'Y',
                                               rea.va_entre_deft),
                                        rea.va_entre_elemn) va_entre_elemn,
                                 COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
                            FROM xxgir_rh_elemn_afect_v rea,
                                 xxgir_rh_afect_tempr   rat
                           WHERE -- 6.6.1 Élément lié à l'affectation (ELEMENT_ENTRY_ID est lié à l'affectation en traitement).
                           rea.id_afect = rat.id_afect
                        AND rat.in_type_paie = cv_id_type_paie_varbl
                          -- 6.6.2 Élément en vigueur pour la période courante
                        AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          -- 6.6.3 Élément est un Special inputs
                        AND REGEXP_INSTR(rea.nm_elemn,
                                        cv_nm_specl_input,
                                        1,
                                        1,
                                        0,
                                        'i') > 0
                          -- 6.6.4 Élément non récurrent
                        AND rea.type_procs_elemn = 'N'
                        AND ( -- 6.6.5 possède une date de début
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_dt_debut,
                                          1,
                                          1,
                                          0,
                                          'i') > 0
                            /* INC00017714 Prendre tous les montants supplémentaires
                            AND fnd_date.canonical_to_date(rea.va_entre_elemn) BETWEEN vgREC_perd_paie_varbl.dt_debut
                                                                                   AND vgREC_perd_paie_varbl.dt_fin*/
                            ) OR
                           -- 6.6.5 possède une date de fin
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_dt_fin,
                                          1,
                                          1,
                                          0,
                                          'i') > 0
                            /* INC00017714 Prendre tous les montants supplémentaires
                            AND fnd_date.canonical_to_date(rea.va_entre_elemn) BETWEEN vgREC_perd_paie_varbl.dt_debut
                                                                                   AND vgREC_perd_paie_varbl.dt_fin*/
                            ) OR
                           -- 6.6.6 possède un montant de remplacement vide.
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_mt_rempl,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn IS NULL) OR
                           -- 6.6.7 possède un montant supplémentaire.
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_mt_suplm,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                          -- 6.6.8 Élément n'est lié à aucun élément non récurrent 'special inputs' qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie courante
                        AND NOT EXISTS (SELECT 'X'
                              FROM xxgir_rh_elemn_h620_tempr reht
                             WHERE reht.nm_liste = '6_5'
                               AND reht.id_afect = rea.id_afect
                               AND reht.cd_sagip = rea.cd_sagip
                                  -- INC00017528
                               AND reht.nm_elemn = rea.nm_elemn)
                          -- 6.6.9 Élément est un Special inputs présent dans le jeu H620 déterminé au point 2a.
                        AND EXISTS (SELECT 'X'
                              FROM xxgir_rh_elemn_h620_tempr reht
                             WHERE reht.nm_liste = 'jeu_specl'
                                  -- retouche 132
                                  --AND    reht.id_type_elemn = rea.id_type_elemn
                               AND reht.cd_sagip = rea.cd_sagip
                                  -- INC00017528
                               AND reht.nm_elemn = rea.nm_elemn))
                  WHERE /*
                                                                                                                                                                   Le chiffre 4 équivaut aux conditions 6.6.5, 6.6.6 et 6.6.7,
                                                                                                                                                                   c'est à dire que l'élément contient quatre valeurs d'entrée,
                                                                                                                                                                    une date de début et une date de fin à l'intérieur de la paie courante,
                                                                                                                                                                   un montant de remplacement vide et
                                                                                                                                                                   un montant supplémentaire non vide.
                                                                                                                                                                  */
                  nbr_va_entre_specl_input = 4)
         -- placer en colonne les lignes des valeurs des éléments pour les id communs
         pivot(MAX(va_entre_elemn)
            FOR nm_va_entre_elemn IN('Montant supplémentaire' va_entre_elemn,
                                     'Date de début' dt_debut,
                                     'Date de fin' dt_fin))
          WHERE cd_sagip IS NOT NULL;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.6 Liste d'éléments non récurrents avec montant supplémentaire.
      --
      OPEN CUR_elemn_non_recrn_suplm;
      FETCH CUR_elemn_non_recrn_suplm BULK COLLECT
         INTO vltab_liste_mt_suplm;
      CLOSE CUR_elemn_non_recrn_suplm;
      --
      IF vlTAB_liste_mt_suplm.EXISTS(1) THEN
         --
         p_log('15 - Nb enregistrements: ' || vltab_liste_mt_suplm.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_mt_suplm
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_liste_mt_suplm(vln_cp).id_afect,
                vltab_liste_mt_suplm(vln_cp).catgr_emplo,
                vltab_liste_mt_suplm(vln_cp).id_type_elemn,
                vltab_liste_mt_suplm(vln_cp).id_entre_elemn,
                vltab_liste_mt_suplm(vln_cp).nm_elemn,
                vltab_liste_mt_suplm(vln_cp).cd_elemn,
                vltab_liste_mt_suplm(vln_cp).cd_sagip,
                vltab_liste_mt_suplm(vln_cp).nm_va_entre_elemn,
                vltab_liste_mt_suplm(vln_cp).va_entre_elemn,
                vltab_liste_mt_suplm(vln_cp).dt_debut,
                vltab_liste_mt_suplm(vln_cp).dt_fin,
                vltab_liste_mt_suplm(vln_cp).nm_liste);
         --
      END IF;
      --
      vlTAB_liste_mt_suplm.DELETE;
      /*   --
         FOR REC_CUR_elemn_non_recrn_suplm IN CUR_elemn_non_recrn_suplm LOOP
            --
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES (REC_CUR_elemn_non_recrn_suplm.id_afect
                   ,REC_CUR_elemn_non_recrn_suplm.catgr_emplo
                   ,REC_CUR_elemn_non_recrn_suplm.id_type_elemn
                   ,REC_CUR_elemn_non_recrn_suplm.id_entre_elemn
                   ,REC_CUR_elemn_non_recrn_suplm.nm_elemn
                   ,REC_CUR_elemn_non_recrn_suplm.cd_elemn
                   ,REC_CUR_elemn_non_recrn_suplm.cd_sagip
                   ,REC_CUR_elemn_non_recrn_suplm.nm_va_entre_elemn
                   ,REC_CUR_elemn_non_recrn_suplm.va_entre_elemn
                   ,REC_CUR_elemn_non_recrn_suplm.dt_debut
                   ,REC_CUR_elemn_non_recrn_suplm.dt_fin
                   ,REC_CUR_elemn_non_recrn_suplm.nm_liste
                   );
         END LOOP;
      */ --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_6_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_elemn_non_recrn_suplm%ISOPEN THEN
            CLOSE CUR_elemn_non_recrn_suplm;
         END IF;
         --
         -- Vider les objets
         --
         vlTAB_liste_mt_suplm.DELETE;
         --
         p_log('Erreur: ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80408';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_6_6_12;

   --
   -- Étape 6.7
   -- ============================================================================
   -- P_creer_elemn_etape_6_7_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste des autres éléments non récurrents.
   *
   ***************************************************************************
   *
   * Paramètres entrée    : N/D
   *
   * Paramètres de sortie : N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-21  INC00016333 Corriger les SELECT utilisant le id_type_elemn
   *                                              pour utiliser le id_entre_elemn quand on parle de liste d'éléments.
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On tient compte des date de début et fin de l'entrée d'élément
   * Michel Dessureault   2013-02-25  INC00017437  Problème lorsque 2 montants de remplacement pour le même code sagip créés en même temps
   * Michel Dessureault   2013-03-01  Retouche 151 (INC00017508) Traitement particulier du code A082
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-04  INC00017565  Les éléments non récurrents WEB ADI ne sont pas bien gérés.
   * Michel Dessureault   2013-03-06  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier et il faut tenir compte des special inputs.
   * Michel Dessureault   2013-03-07  Retouche 151 Corriger lorsque le montant est 0.
   * Michel Dessureault   2013-03-12  INC00017714  Corriger le traitement des éléments Special inputs.
   * Michel Dessureault   2013-03-19  Retouche 169 Ajout des Heures supplémentaires et intermédiaires résiduelles
   * Michel Dessureault   2013-06-03  INC00018369  Corriger le select des autres éléments non récurrents de la procédure 6_7.
   * Michel Dessureault   2013-06-11  INC00018369  Corriger la sélection des dates de début et fin.
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_7_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_7_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_7_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      -- performance
      vltab_liste_non_recrn tab_liste_elemn := tab_liste_elemn();
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des autres éléments non récurrents
      -- qui ne sont que des montants
      ----------------------------------------------------------------------
      CURSOR CUR_autre_elemn_non_recrn_mt IS
         SELECT id_afect,
                catgr_emplo,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                nm_va_entre_elemn,
                va_entre_elemn,
                dt_debut
                -- INC00018369
               ,
                CASE
                   WHEN dt_fin < dt_debut THEN
                    dt_debut
                   ELSE
                    dt_fin
                END dt_fin,
                nm_liste
           FROM (SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        id_entre_elemn,
                        nm_elemn,
                        cd_elemn,
                        cd_sagip,
                        'Montant' nm_va_entre_elemn,
                        mt va_entre_elemn,
                        NVL(FND_DATE.CANONICAL_TO_DATE(dt_debut),
                            vgrec_perd_paie_varbl.dt_debut) dt_debut,
                        NVL(FND_DATE.CANONICAL_TO_DATE(dt_fin),
                            vgrec_perd_paie_varbl.dt_debut) dt_fin,
                        '6_7' nm_liste
                   FROM (SELECT rea.id_afect,
                                 rea.catgr_emplo,
                                 rea.id_type_elemn,
                                 rea.id_entre_elemn,
                                 rea.nm_elemn,
                                 rea.cd_elemn,
                                 rea.cd_sagip,
                                 rea.nm_va_entre_elemn,
                                 DECODE(rea.va_entre_elemn,
                                        NULL,
                                        DECODE(rea.in_va_entre_deft,
                                               'Y',
                                               rea.va_entre_deft),
                                        rea.va_entre_elemn) va_entre_elemn
                                 -- retouche 132
                                ,
                                 COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre
                            FROM xxgir_rh_elemn_afect_v rea,
                                 xxgir_rh_afect_tempr   rat
                           WHERE -- 6.7.1 Élément lié à l'affectation (ELEMENT_ENTRY_ID est lié à l'affectation en traitement).
                           rea.id_afect = rat.id_afect
                        AND rat.in_type_paie = cv_id_type_paie_varbl
                          -- 6.7.2 En vigueur pour la période de paie courante.
                        AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          -- 6.7.3 Élément non récurrent.
                        AND rea.type_procs_elemn = 'N'
                          -- 6.7.5 Élément avec un « CREATOR_TYPE » = « F » (Identifie que l'élément a été créé dans l'écran des entrées d'éléments)
                           /* INC00017565
                           AND    rea.cd_type_creat = 'F'*/
                         AND rea.cd_type_creat IN (cv_cd_type_creat_pgi,
                                                  cv_cd_type_creat_fdt)
                           -- retouche 151
                         AND rea.cd_sagip <> '082'
                           -- 6.7.6 Type d'élément présent dans le jeu H620 du point 2
                          -- INC00017565 inclure les special inputs non traités dans 6.5 et 6.6
                        AND EXISTS (SELECT 'X'
                              FROM xxgir_rh_elemn_h620_tempr reht
                            -- INC00017528 tenir compte du special inputs
                            --WHERE  reht.nm_liste = 'jeu_h620'
                             WHERE reht.nm_liste IN ('jeu_h620',
                                                     'jeu_specl')
                                  /* retouche 132
                                  AND    reht.id_type_elemn = rea.id_type_elemn*/
                               AND reht.cd_sagip = rea.cd_sagip
                                  -- INC00017528
                               AND reht.nm_elemn = rea.nm_elemn)
                          -- pour limiter la liste aux montants
                        AND ((REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_dt_debut,
                                          1,
                                          1,
                                          0,
                                          'i') > 0) OR (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                                                      cv_nm_dt_fin,
                                                                      1,
                                                                      1,
                                                                      0,
                                                                      'i') > 0) OR
                           /* retouche 132
                           (REGEXP_INSTR(rea.nm_va_entre_elemn, cv_nm_mt, 1, 1, 0, 'i') > 0*/
                           (rea.nm_va_entre_elemn = cv_nm_mt))
                          -- avoir un code sagip
                        AND rea.cd_sagip IS NOT NULL)
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Montant' mt,
                                            'Date de début' dt_debut,
                                            'Date de fin' dt_fin))
                 -- au moins le champ Montant est présent
                  WHERE nbr_va_entre BETWEEN 1 AND 3
                 -- retouche 132  ajouter les 2 union
                 UNION ALL -- trouver les montants remplacement avec date de debut et fin en dehors de la période courante
                 SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        id_entre_elemn,
                        nm_elemn,
                        cd_elemn,
                        cd_sagip,
                        'Montant' nm_va_entre_elemn,
                        mt va_entre_elemn,
                        FND_DATE.CANONICAL_TO_DATE(dt_debut) dt_debut,
                        FND_DATE.CANONICAL_TO_DATE(dt_fin) dt_fin,
                        '6_7' nm_liste
                   FROM (SELECT rea.id_afect,
                                 rea.catgr_emplo,
                                 rea.id_type_elemn,
                                 rea.id_entre_elemn,
                                 rea.nm_elemn,
                                 rea.cd_elemn,
                                 rea.cd_sagip,
                                 rea.nm_va_entre_elemn,
                                 DECODE(rea.va_entre_elemn,
                                        NULL,
                                        DECODE(rea.in_va_entre_deft,
                                               'Y',
                                               rea.va_entre_deft),
                                        rea.va_entre_elemn) va_entre_elemn,
                                 COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre
                            FROM xxgir_rh_elemn_afect_v rea,
                                 xxgir_rh_afect_tempr   rat
                           WHERE -- 6.7.1 Élément lié à l'affectation (ELEMENT_ENTRY_ID est lié à l'affectation en traitement).
                           rea.id_afect = rat.id_afect
                        AND rat.in_type_paie = cv_id_type_paie_varbl
                          -- 6.7.2 En vigueur pour la période de paie courante.
                        AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          -- 6.7.3 Élément non récurrent.
                        AND rea.type_procs_elemn = 'N'
                          -- 6.7.5 Élément avec un « CREATOR_TYPE » = « F » (Identifie que l'élément a été créé dans l'écran des entrées d'éléments)
                           /* INC00017565
                           AND    rea.cd_type_creat = 'F'*/
                         AND rea.cd_type_creat IN (cv_cd_type_creat_pgi,
                                                  cv_cd_type_creat_fdt)
                           -- retouche 151
                         AND rea.cd_sagip <> '082'
                           -- 6.7.6 Type d'élément présent dans le jeu H620 du point 2
                        AND EXISTS (SELECT 'X'
                              FROM xxgir_rh_elemn_h620_tempr reht
                            -- INC00017528 tenir compte du special inputs
                            --WHERE  reht.nm_liste = 'jeu_h620'
                             WHERE reht.nm_liste IN ('jeu_h620',
                                                     'jeu_specl')
                               AND reht.cd_sagip = rea.cd_sagip
                                  -- INC00017528
                               AND reht.nm_elemn = rea.nm_elemn)
                          -- 6.7.7 Élément d'entrée non présent dans les listes 6.5 et 6.6
                           -- INC00017714 Élément non lié au montant de remplacement de la période courante
                         AND NOT EXISTS
                            (SELECT 'X'
                               FROM xxgir_rh_elemn_h620_tempr reht
                              WHERE reht.nm_liste = '6_5'
                                AND reht.cd_sagip = rea.cd_sagip
                                AND reht.nm_elemn = rea.nm_elemn)
                           /* INC00017437 Le code sagip ne doit pas être utilisé dans les listes 6_6
                           AND   NOT EXISTS (SELECT 'X'
                                             FROM   xxgir_rh_elemn_h620_tempr reht
                                             WHERE  reht.nm_liste = '6_6'
                                             AND    reht.cd_sagip = rea.cd_sagip
                                             -- INC00017528
                                             AND    reht.nm_elemn = rea.nm_elemn
                                            )*/
                         AND rea.id_entre_elemn NOT IN (SELECT reht.id_entre_elemn
                                                         FROM xxgir_rh_elemn_h620_tempr reht
                                                        WHERE reht.nm_liste = '6_6')
                           /* INC00017714 les montants rempl de la période courante sont traités dans 6.5
                           AND (-- pour limiter la liste aux montants de remplacement
                                (REGEXP_INSTR(rea.nm_va_entre_elemn, cv_nm_dt_debut, 1, 1, 0, 'i') > 0) OR
                                (REGEXP_INSTR(rea.nm_va_entre_elemn, cv_nm_dt_fin, 1, 1, 0, 'i') > 0) OR
                               (REGEXP_INSTR(rea.nm_va_entre_elemn, cv_nm_mt_rempl, 1, 1, 0, 'i') > 0
                                 AND rea.va_entre_elemn IS NOT NULL)
                               )*/
                         AND ( -- pour limiter la liste aux montants de remplacement avec des dates début et fin en dehors de la période courante
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_dt_debut,
                                           1,
                                           1,
                                           0,
                                           'i') > 0
                             -- INC00018369
                             AND NOT (NVL(rea.va_entre_elemn_dt,
                                           vgrec_perd_paie_varbl.dt_debut) BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin)) OR
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_dt_fin,
                                           1,
                                           1,
                                           0,
                                           'i') > 0
                             -- INC00018369
                             AND NOT (NVL(rea.va_entre_elemn_dt,
                                           vgrec_perd_paie_varbl.dt_debut) BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin)) OR
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_mt_rempl,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                           -- un code sagip doit exister
                         AND rea.cd_sagip IS NOT NULL)
                  pivot(MAX(va_entre_elemn)
                     FOR nm_va_entre_elemn IN('Montant de remplacement' mt,
                                             'Date de début' dt_debut,
                                             'Date de fin' dt_fin))
                  -- les 3 champs sont présents
                   WHERE nbr_va_entre = 3
                  -- retouche 151 Traiter le A082 ici
                  UNION ALL
                  SELECT id_afect,
                         catgr_emplo,
                         id_type_elemn,
                         id_entre_elemn,
                         nm_elemn,
                         cd_elemn,
                         cd_sagip,
                         'Montant' nm_va_entre_elemn,
                         mt va_entre_elemn
                         -- 6.7.6   Si le code de gain est « A082 » et que le montant est > 0 alors, la date de début et la date de fin = « Date effective »
                        ,
                         FND_DATE.CANONICAL_TO_DATE(dt_efect) dt_debut,
                         FND_DATE.CANONICAL_TO_DATE(dt_efect) dt_fin,
                         '6_7' nm_liste
                    FROM (SELECT rea.id_afect id_afect,
                                  rea.catgr_emplo catgr_emplo,
                                  rea.id_type_elemn id_type_elemn,
                                  rea.id_entre_elemn id_entre_elemn,
                                  rea.nm_elemn nm_elemn,
                                  rea.cd_elemn cd_elemn,
                                  rea.cd_sagip cd_sagip,
                                  rea.nm_va_entre_elemn nm_va_entre_elemn,
                                  DECODE(rea.va_entre_elemn,
                                         NULL,
                                         DECODE(rea.in_va_entre_deft,
                                                'Y',
                                                rea.va_entre_deft),
                                         rea.va_entre_elemn) va_entre_elemn,
                                  rea.peev_dt_debut_efect dt_debut,
                                  rea.peev_dt_fin_efect dt_fin,
                                  COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre
                             FROM xxgir_rh_elemn_afect_v rea,
                                  xxgir_rh_afect_tempr   rat
                            WHERE -- 6.7.1 Élément lié à l'affectation
                           rea.id_afect = rat.id_afect
                        AND rat.in_type_paie = cv_id_type_paie_varbl
                          -- 6.7.2 Élément en vigueur pour la période de paie courante
                        AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                        AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                        AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          -- 6.7.3 Élément non récurrent.
                        AND rea.type_procs_elemn = 'N'
                          -- 6.7.5
                        AND rea.cd_sagip = '082'
                        AND ((rea.nm_va_entre_elemn = cv_nm_mt AND (rea.va_entre_elemn IS NOT NULL AND rea.va_entre_elemn > '0')) OR
                           (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_dt_efect,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                          -- 6.7.7 Type d'élément présent dans le jeu d'éléments pour H620 déterminé au point 2
                        AND EXISTS (SELECT 'X'
                              FROM xxgir_rh_elemn_h620_tempr reht
                             WHERE reht.nm_liste = 'jeu_h620'
                               AND reht.cd_sagip = rea.cd_sagip
                                  -- INC00017528
                               AND reht.nm_elemn = rea.nm_elemn))
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Montant' mt,
                                            'Date effective' dt_efect))
                  WHERE nbr_va_entre = 2)
          WHERE va_entre_elemn IS NOT NULL;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des autres éléments non récurrents
      -- autres que les montants et qui ne sont pas des heures de la feuille de temps
      ----------------------------------------------------------------------
      CURSOR CUR_autre_elemn_non_recrn IS
         SELECT rea.id_afect,
                rea.catgr_emplo,
                rea.id_type_elemn,
                rea.id_entre_elemn,
                rea.nm_elemn,
                rea.cd_elemn,
                rea.cd_sagip,
                rea.nm_va_entre_elemn,
                DECODE(rea.va_entre_elemn,
                       NULL,
                       DECODE(rea.in_va_entre_deft,
                              'Y',
                              rea.va_entre_deft),
                       rea.va_entre_elemn) va_entre_elemn,
                rea.peev_dt_debut_efect dt_debut
                -- INC00018369
               ,
                rea.peev_dt_debut_efect dt_fin,
                '6_7' nm_liste
           FROM xxgir_rh_elemn_afect_v rea,
                xxgir_rh_afect_tempr   rat
          WHERE -- 6.7.1 Élément lié à l'affectation (ELEMENT_ENTRY_ID est lié à l'affectation en traitement).
          rea.id_afect = rat.id_afect
          AND rat.in_type_paie = cv_id_type_paie_varbl
         -- 6.7.2 En vigueur pour la période de paie courante.
          AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
         -- 6.7.3 Élément non récurrent.
          AND rea.type_procs_elemn = 'N'
         -- 6.7.5 Élément avec un « CREATOR_TYPE » = « F » (Identifie que l'élément a été créé dans l'écran des entrées d'éléments)
         -- INC00017565 pour la provenance d'outil d'injection type H
          AND rea.cd_type_creat IN (cv_cd_type_creat_pgi,
                                cv_cd_type_creat_fdt)
         -- L'élément ne doit pas être un nombre d'heure car traité dans 6.8 , ni un montant car traité ci-haut.
          AND NOT EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_afect_v rea1
            WHERE rea1.id_entre_elemn = rea.id_entre_elemn
                 -- INC00018369 Il faut garder les heures qui viennent du PGI
              AND ((rea1.nm_va_entre_elemn = cv_nm_hh AND rea1.cd_type_creat = cv_cd_type_creat_fdt) OR (rea1.nm_va_entre_elemn = cv_nm_mt)))
         -- 6.7.6 Type d'élément présent dans le jeu H620 du point 2
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
           -- INC00017528 tenir compte du special inputs
            WHERE reht.nm_liste IN ('jeu_h620',
                                    'jeu_specl')
                 -- retouche 132
              AND reht.cd_sagip = rea.cd_sagip
                 -- INC00017528
              AND reht.nm_elemn = rea.nm_elemn)
         -- 6.7.7 Élément d'entrée non présent dans les listes 6_5 et 6_6 et 6_7
         -- INC00017714 Ne doit pas être lié au montant de remplacement
          AND NOT EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = '6_5'
              AND reht.cd_sagip = rea.cd_sagip
              AND reht.nm_elemn = rea.nm_elemn)
         -- INC00017437 Le code sagip ne doit pas être utilisé dans les listes  6_6 et 6_7
          AND rea.id_entre_elemn NOT IN (SELECT reht.id_entre_elemn
                                       FROM xxgir_rh_elemn_h620_tempr reht
                                      WHERE reht.nm_liste IN ('6_6',
                                                              '6_7'))
         -- Retouche 151
          AND rea.cd_sagip <> '082'
         -- Retouche 169
         -- INC00018369
          AND NVL(rea.cd_elemn,
              'ZZ') NOT IN (cv_cd_elemn_inter_rembr,
                            cv_cd_elemn_suplm_rembr)
          AND rea.cd_sagip IS NOT NULL;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.7 Liste des autres éléments non récurrents (Montant).
      --
      OPEN CUR_autre_elemn_non_recrn_mt;
      FETCH CUR_autre_elemn_non_recrn_mt BULK COLLECT
         INTO vltab_liste_non_recrn;
      CLOSE CUR_autre_elemn_non_recrn_mt;
      --
      IF vlTAB_liste_non_recrn.EXISTS(1) THEN
         --
         p_log('15 - Nb enregistrements: ' || vltab_liste_non_recrn.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_non_recrn
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_liste_non_recrn(vln_cp).id_afect,
                vltab_liste_non_recrn(vln_cp).catgr_emplo,
                vltab_liste_non_recrn(vln_cp).id_type_elemn,
                vltab_liste_non_recrn(vln_cp).id_entre_elemn,
                vltab_liste_non_recrn(vln_cp).nm_elemn,
                vltab_liste_non_recrn(vln_cp).cd_elemn,
                vltab_liste_non_recrn(vln_cp).cd_sagip,
                vltab_liste_non_recrn(vln_cp).nm_va_entre_elemn,
                vltab_liste_non_recrn(vln_cp).va_entre_elemn,
                vltab_liste_non_recrn(vln_cp).dt_debut,
                vltab_liste_non_recrn(vln_cp).dt_fin,
                vltab_liste_non_recrn(vln_cp).nm_liste);
         --
      END IF;
      --
      vlTAB_liste_non_recrn.DELETE;
      --
      -- 6.7 Liste des autres éléments non récurrents (autres que Montant).
      --
      OPEN CUR_autre_elemn_non_recrn;
      FETCH CUR_autre_elemn_non_recrn BULK COLLECT
         INTO vltab_liste_non_recrn;
      CLOSE CUR_autre_elemn_non_recrn;
      --
      IF vlTAB_liste_non_recrn.EXISTS(1) THEN
         --
         p_log('16 - Nb enregistrements: ' || vltab_liste_non_recrn.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_non_recrn
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_liste_non_recrn(vln_cp).id_afect,
                vltab_liste_non_recrn(vln_cp).catgr_emplo,
                vltab_liste_non_recrn(vln_cp).id_type_elemn,
                vltab_liste_non_recrn(vln_cp).id_entre_elemn,
                vltab_liste_non_recrn(vln_cp).nm_elemn,
                vltab_liste_non_recrn(vln_cp).cd_elemn,
                vltab_liste_non_recrn(vln_cp).cd_sagip,
                vltab_liste_non_recrn(vln_cp).nm_va_entre_elemn,
                vltab_liste_non_recrn(vln_cp).va_entre_elemn,
                vltab_liste_non_recrn(vln_cp).dt_debut,
                vltab_liste_non_recrn(vln_cp).dt_fin,
                vltab_liste_non_recrn(vln_cp).nm_liste);
         --
      END IF;
      --
      vlTAB_liste_non_recrn.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_7_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_autre_elemn_non_recrn_mt%ISOPEN THEN
            CLOSE CUR_autre_elemn_non_recrn_mt;
         END IF;
         --
         IF CUR_autre_elemn_non_recrn%ISOPEN THEN
            CLOSE CUR_autre_elemn_non_recrn;
         END IF;
         --
         -- Vider les objets
         --
         vlTAB_liste_non_recrn.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80409';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_7_6_12;

   --
   -- Étape 6.8
   -- ============================================================================
   -- P_creer_elemn_etape_6_8_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste des autres éléments non récurrents (Nombre d'heures provenant de la feuille de temps seulement).
   *       Tri de la liste des autres éléments non récurrents
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-21  INC00016333 Corriger les SELECT utilisant le id_type_elemn
   *                                              pour utiliser le id_entre_elemn quand on parle de liste d'éléments.
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On utilise le code sagip au lieu du id_type pour tenir compte des sélections de special input ou remplacement
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-08  Retouche 158 (INC00017530,17532) Heures et taux convertis pour les heures provenant de la feuille de temps.
   * Michel Dessureault   2013-03-19  Retouche 169 Ajout des Heures supplémentaires et intermédiaires résiduelles
   * Michel Dessureault   2013-06-14  INC00018592  Toujours aller chercher la valeur par défaut pour les repas
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_8_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_8_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_8_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      -- performance
      vltab_liste_non_recrn tab_liste_elemn := tab_liste_elemn();
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des autres éléments non récurrents
      -- pour feuille de temps
      ----------------------------------------------------------------------
      CURSOR CUR_autre_elemn_non_recrn IS
         SELECT /*+ LEADING (rat) */ /* F.Aubin 2015-08-26 DDC199119 */
          rse.assignment_id id_afect,
          rea.catgr_emplo catgr_emplo,
          rse.element_type_id id_type_elemn,
          rse.element_entry_id id_entre_elemn,
          rea.nm_elemn nm_elemn,
          rea.cd_elemn cd_elemn,
          rea.cd_sagip cd_sagip,
          rea.nm_va_entre_elemn nm_va_entre_elemn,
          CASE
           -- Patch temporaire jusqu'à la correction de 26090
          -- Pour les repas, il faut utiliser la valeur par défaut
          -- car le transfert OTL à BEE ne fournit pas la bonne valeur
             WHEN (rea.cd_sagip IN ('032',
                                    '039') AND rea.nm_va_entre_elemn = cv_nm_tx) THEN
              rea.va_entre_deft
             ELSE
              NVL(rse.new_screen_entry_value,
                  DECODE(rea.va_entre_elemn,
                         NULL,
                         DECODE(rea.in_va_entre_deft,
                                'Y',
                                rea.va_entre_deft),
                         rea.va_entre_elemn))
          END va_entre_elemn,
          rse.new_effective_start_date dt_debut,
          rse.new_effective_end_date dt_fin,
          '6_8' nm_liste
           FROM gir_rh_suivi_entre_elemn_paie rse, -- INC-89949
                xxgir_rh_elemn_afect_v        rea,
                xxgir_rh_afect_tempr          rat
          WHERE -- 6.8.1 Élément lié à l'affectation
          rse.assignment_id = rat.id_afect
         --AND rat.id_afect = rea.id_afect --fred 2015-08-19
          AND rse.element_entry_id = rea.id_entre_elemn
          AND rse.element_type_id = rea.id_type_elemn
          AND rse.input_value_id = rea.id_va_entre_elemn
         -- 6.8.2 Élément en vigueur pour la période de paie courante ou antérieure
          AND rse.new_effective_start_date < vgrec_perd_paie_varbl.dt_fin
         -- 6.8.3 Élément en vigueur après la date d'implantation
          AND rse.new_effective_end_date >= TRUNC(cd_dt_prodc)
         -- 6.8.4 Élément non récurrent.
          AND rea.type_procs_elemn = 'N'
         -- 6.8.5 Élément possède un nombre d'heure (l'élément possède un nombre d'heures dans une de ses valeurs d'entrée).
          AND EXISTS (SELECT 'X'
             FROM pay_input_values_f_vl pivv
            WHERE pivv.element_type_id = rea.id_type_elemn
              AND pivv.name = cv_nm_hh
              AND pivv.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
              AND pivv.effective_end_date >= vgrec_perd_paie_varbl.dt_debut)
         -- 6.8.6 Élément ne correspond pas à des heures supplémentaires ou intermédiaires remboursées
          AND rse.element_type_id NOT IN (SELECT pet.element_type_id
                                        FROM pay_element_types_f pet
                                       WHERE pet.attribute3 IN (cv_cd_elemn_suplm_rembr,
                                                                cv_cd_elemn_inter_rembr))
         -- 6.8.7 Type d'élément présent dans le jeu d'éléments pour H620 déterminé au point 2
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_h620'
              AND reht.cd_sagip = rea.cd_sagip
                 -- INC00017528
              AND reht.nm_elemn = rea.nm_elemn)
         -- 6.8.8 Élément d'entrée non présent dans les 3 listes définies aux points 6.5, 6.6 et 6.7
          AND NOT EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.id_entre_elemn = rse.element_entry_id
              AND reht.nm_liste IN ('6_5',
                                    '6_6',
                                    '6_7'))
         -- 6.8.9  les heures ne proviennent pas de l'écran des absences
          AND rea.cd_type_creat <> cv_cd_type_creat_absen
          AND rea.cd_type_creat <> cv_cd_type_creat_pgi
         -- 6.8.10 Élément non traité
          AND rse.in_trait = 'N'
         /* Retouche 158
         6.8.11 et 6.8.12 Vu la particularité des select
         on fait l'extraction des heures,du taux et du facteur
         dans les select du traitement 6.24 */
         -- retouche 151
          AND rea.cd_sagip <> '082'
          AND rea.cd_sagip IS NOT NULL;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.8 Liste des autres éléments non récurrents (nombre d'heures provenant de la fdt seulement).
      --
      OPEN CUR_autre_elemn_non_recrn;
      FETCH CUR_autre_elemn_non_recrn BULK COLLECT
         INTO vltab_liste_non_recrn;
      CLOSE CUR_autre_elemn_non_recrn;
      --
      IF vlTAB_liste_non_recrn.EXISTS(1) THEN
         --
         p_log('15 - Nb enregistrements: ' || vltab_liste_non_recrn.count,
               vlv_nm_procd_fonct);
         --
         FORALL vln_cp IN INDICES OF vltab_liste_non_recrn
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_liste_non_recrn(vln_cp).id_afect,
                vltab_liste_non_recrn(vln_cp).catgr_emplo,
                vltab_liste_non_recrn(vln_cp).id_type_elemn,
                vltab_liste_non_recrn(vln_cp).id_entre_elemn,
                vltab_liste_non_recrn(vln_cp).nm_elemn,
                vltab_liste_non_recrn(vln_cp).cd_elemn,
                vltab_liste_non_recrn(vln_cp).cd_sagip,
                vltab_liste_non_recrn(vln_cp).nm_va_entre_elemn,
                vltab_liste_non_recrn(vln_cp).va_entre_elemn,
                vltab_liste_non_recrn(vln_cp).dt_debut,
                vltab_liste_non_recrn(vln_cp).dt_fin,
                vltab_liste_non_recrn(vln_cp).nm_liste);
         --
      END IF;
      --
      vlTAB_liste_non_recrn.DELETE;
      /*   --
         FOR REC_CUR_autre_elemn_non_recrn IN CUR_autre_elemn_non_recrn LOOP
            --
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES (REC_CUR_autre_elemn_non_recrn.id_afect
                   ,REC_CUR_autre_elemn_non_recrn.catgr_emplo
                   ,REC_CUR_autre_elemn_non_recrn.id_type_elemn
                   ,REC_CUR_autre_elemn_non_recrn.id_entre_elemn
                   ,REC_CUR_autre_elemn_non_recrn.nm_elemn
                   ,REC_CUR_autre_elemn_non_recrn.cd_elemn
                   ,REC_CUR_autre_elemn_non_recrn.cd_sagip
                   ,REC_CUR_autre_elemn_non_recrn.nm_va_entre_elemn
                   ,REC_CUR_autre_elemn_non_recrn.va_entre_elemn
                   ,REC_CUR_autre_elemn_non_recrn.dt_debut
                   ,REC_CUR_autre_elemn_non_recrn.dt_fin
                   ,REC_CUR_autre_elemn_non_recrn.nm_liste
                   );
         END LOOP;
      */ --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_8_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_autre_elemn_non_recrn%ISOPEN THEN
            CLOSE CUR_autre_elemn_non_recrn;
         END IF;
         --
         -- Vider les objets
         --
         vlTAB_liste_non_recrn.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80410';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_8_6_12;

   --
   -- Étape 6.9
   -- ============================================================================
   -- P_creer_elemn_etape_6_9_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste des autres éléments non récurrents (Nombre d'heures provenant de l'écran des absences seulement).
   *       Créées dans les période précédentes ou la période courante et non traitées.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2013-06-11  Création     Retouche 237 Gérer les absences par élément d'entrée pour tenir compte du changement de taux horaire.
   * Frédéric Aubin       2014-07-18  DDC 178522 : Incident 70794 : Placement d'un OR pour la période de paie juste avant le 19 mai
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_9_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                          pv_token_value     OUT NOCOPY VARCHAR2,
                                          pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                          pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_9_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_9_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      vltab_elemn_absen tab_jeu_elemn_6_6; -- Table PL/SQL pour les éléments d'absence non traités.
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des autres éléments non récurrents
      -- pour les absences.
      ----------------------------------------------------------------------
      CURSOR CUR_autre_non_recrn_absen IS
         WITH elemn_absen AS
         --Popol 2019-06-05 INC00145348  a enleve full(paa)
          (SELECT /*+ LEADING (rat) FULL (rat) */ /* Julie Goulet CHG 239717/INC122929 */
           --fin
            rea.id_entre_elemn
            -- 6.9.10 Obtenir la date de début et la date de fin de l'absence
           ,
            paa.date_start dt_debut_absen,
            paa.date_end   dt_fin_absen,
            paa.time_start hh_debut,
            paa.time_end   hh_fin
             FROM xxgir_rh_elemn_afect_v rea
             JOIN xxgir_rh_afect_tempr rat
               ON (rea.id_afect = rat.id_afect AND rat.in_type_paie = cv_id_type_paie_varbl)
             JOIN per_absence_attendances paa
               ON (rat.id_emplo = paa.person_id AND rea.id_creat = paa.absence_attendance_id)
             JOIN per_absence_attendance_types paat
               ON (paa.absence_attendance_type_id = paat.absence_attendance_type_id AND rea.id_va_entre_elemn = paat.input_value_id)
            WHERE (rea.peev_dt_debut_efect BETWEEN cd_dt_prodc AND vgrec_perd_paie_varbl.dt_fin
                  -- Début SAGIR F.Aubin 2014-07-18 CHG 178522 Incident 70794
                  OR paa.date_start BETWEEN cd_dt_prodc AND TO_DATE('2014-05-21',
                                                                     'YYYY-MM-DD'))
                 -- Fin SAGIR F.Aubin 2014-07-18 CHG 178522 Incident 70794
              AND rea.id_va_entre_elemn IS NOT NULL
              AND paat.input_value_id IS NOT NULL)
         -- Début SAGIR CHG239717 / INC 122929 Julie Goulet
         SELECT
         -- Fin SAGIR CHG239717 / INC 122929 Julie Goulet
          rea.id_afect,
          -- On utilise ce champ (catgr_emplo) pour conserver les heures de l'absence,
          -- car pas de champs hh_debut et hh_fin dans cette table
          ea.hh_debut || '*' || ea.hh_fin catgr_emplo,
          rea.id_type_elemn,
          rea.id_entre_elemn,
          rea.nm_elemn,
          rea.cd_elemn,
          rea.cd_sagip,
          rea.nm_va_entre_elemn,
          DECODE(rea.va_entre_elemn,
                 NULL,
                 DECODE(rea.in_va_entre_deft,
                        'Y',
                        rea.va_entre_deft),
                 rea.va_entre_elemn) va_entre_elemn,
          ea.dt_debut_absen dt_debut,
          ea.dt_fin_absen dt_fin,
          '6_9' nm_liste
           FROM xxgir_rh_elemn_afect_v rea
           JOIN xxgir_rh_afect_tempr rat
         -- 6.9.1 Élément lié à l'affectation de paie variable
             ON (rea.id_afect = rat.id_afect AND rat.in_type_paie = cv_id_type_paie_varbl)
           JOIN elemn_absen ea
             ON rea.id_entre_elemn = ea.id_entre_elemn
          WHERE -- 6.9.2 Élément en vigueur pour la période de paie courante ou antérieure
          rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
         -- 6.9.3 Élément en vigueur après la date d'implantation
          AND rea.pee_dt_fin_efect >= TRUNC(cd_dt_prodc)
          AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.peev_dt_fin_efect >= TRUNC(cd_dt_prodc)
          AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.pel_dt_fin_efect >= TRUNC(cd_dt_prodc)
          AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.pet_dt_fin_efect >= TRUNC(cd_dt_prodc)
          AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
          AND rea.piv_dt_fin_efect >= TRUNC(cd_dt_prodc)
         -- 6.9.4 Élément non récurrent.
          AND rea.type_procs_elemn = 'N'
         -- 6.9.5 Élément possède un nombre d'heures
          AND ((rea.nm_va_entre_elemn = cv_nm_hh AND rea.va_entre_elemn IS NOT NULL) OR (rea.nm_va_entre_elemn = cv_nm_dt_efect))
         -- 6.9.6 Élément présent dans le jeu d'éléments pour H620 déterminé au point 2
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_h620'
              AND reht.cd_sagip = rea.cd_sagip
              AND reht.nm_elemn = rea.nm_elemn)
         -- 6.9.7 Élément avec un « CREATOR_TYPE » = « A » (Identifie que les heures proviennent de l'écran des absences)
          AND rea.cd_type_creat = cv_cd_type_creat_absen
         -- 6.9.8 6.9.9 Élément répond aux 2 critères
         --Popol 2019-06-05 INC00145348 int parallel et distinct
          AND rea.id_entre_elemn IN (SELECT /*+ parallel(rse)*/
                                 DISTINCT rse.element_entry_id
                                 --fin
                                   FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                                  WHERE rse.assignment_id = rea.id_afect
                                       -- 6.9.8 Élément avec un type de transaction 'Création'
                                    AND rse.trans_type = 'I'
                                       -- 6.9.9 Élément non traité
                                    AND rse.in_trait = 'N'
                                    AND rse.new_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                    AND rse.new_effective_end_date >= TRUNC(cd_dt_prodc))
          AND rea.id_va_entre_elemn IS NOT NULL
          AND rea.cd_sagip IS NOT NULL
         --Valider que les absence font partit de l'affectation a la date de l'absence
          AND EXISTS (SELECT 'X'
             FROM per_all_assignments_f paaf
             JOIN pay_all_payrolls_f papf
               ON (papf.payroll_id = paaf.payroll_id)
            WHERE paaf.assignment_id = rat.id_afect
              AND papf.attribute1 = cv_id_type_paie_varbl
              AND ea.dt_debut_absen BETWEEN papf.effective_start_date AND papf.effective_end_date
              AND ea.dt_debut_absen BETWEEN paaf.effective_start_date AND paaf.effective_end_date);
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.9 Liste des autres éléments non récurrents non traités.
      --
      OPEN CUR_autre_non_recrn_absen;
      FETCH CUR_autre_non_recrn_absen BULK COLLECT
         INTO vltab_elemn_absen;
      CLOSE CUR_autre_non_recrn_absen;
      --
      -- Changer le statut (indicateur de traitement) dans la table de suivi des éléments (gir_rh_suivi_entre_elemn_paie.statut) pour 'Traité'.
      --
      IF vlTAB_elemn_absen.EXISTS(1) THEN
         --
         FORALL vln_cp IN INDICES OF vltab_elemn_absen
            UPDATE gir_rh_suivi_elemn rse
               SET rse.in_trait = 'O'
             WHERE rse.element_entry_id = vltab_elemn_absen(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N';
         --
         -- Début INC-89949
         FORALL vln_cp IN INDICES OF vltab_elemn_absen
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.in_trait = 'O'
             WHERE rse.element_entry_id = vltab_elemn_absen(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N';
         -- Fin INC-89949
         --
         -- Mettre les éléments d'absence dans la TABLE xxgir_rh_elemn_h620_tempr sous le nom 6_9
         --
         FORALL vln_cp IN INDICES OF vltab_elemn_absen
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_elemn_absen(vln_cp).id_afect,
                vltab_elemn_absen(vln_cp).catgr_emplo,
                vltab_elemn_absen(vln_cp).id_type_elemn,
                vltab_elemn_absen(vln_cp).id_entre_elemn,
                vltab_elemn_absen(vln_cp).nm_elemn,
                vltab_elemn_absen(vln_cp).cd_elemn,
                vltab_elemn_absen(vln_cp).cd_sagip,
                vltab_elemn_absen(vln_cp).nm_va_entre_elemn,
                vltab_elemn_absen(vln_cp).va_entre_elemn,
                vltab_elemn_absen(vln_cp).dt_debut,
                vltab_elemn_absen(vln_cp).dt_fin,
                vltab_elemn_absen(vln_cp).nm_liste);
         --
      END IF;
      --
      -- Vider les objets
      --
      vlTAB_elemn_absen.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_9_6_12.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_elemn_absen.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_autre_non_recrn_absen%ISOPEN THEN
            CLOSE CUR_autre_non_recrn_absen;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80411';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' est en erreur dans la procédure P_creer_elemn_etape_6_9_6_12');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_9_6_12;

   --
   -- Étape 6.10
   -- ============================================================================
   -- P_creer_elemn_etape_6_10_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste des autres éléments non récurrents (Nombre d'heures provenant de l'écran des absences seulement).
   *       Modifiées dans la période courante et qui ont été créés dans la période courante.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2013-06-11  Création     Retouche 237 Gérer les absences par élément d'entrée pour tenir compte du changement de taux horaire.
   * Frédéric Aubin       2014-07-18  DDC 178522 : Incident 70794 : Placement d'un OR pour la période de paie juste avant le 19 mai
   * Julie Goulet         2020-06-18  DDC282404 Corriger l'étape 10 puisque absences payées deux fois
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_10_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                           pv_token_value     OUT NOCOPY VARCHAR2,
                                           pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                           pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_10_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_10_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      vltab_elemn_absen tab_jeu_elemn_6_6; -- Table PL/SQL pour les éléments d'absence non traités.
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des autres éléments non récurrents
      -- pour les absences.
      ----------------------------------------------------------------------
      CURSOR CUR_autre_non_recrn_absen IS
         WITH elemn_absen AS
         --Popol 2019-06-05 INC00145348 enlevé full(paa)
          (SELECT /*+ LEADING (rat) FULL (rat)*/
           --fin
            rea.id_entre_elemn,
            paa.date_start     dt_debut_absen,
            paa.date_end       dt_fin_absen,
            paa.time_start     hh_debut,
            paa.time_end       hh_fin
             FROM xxgir_rh_elemn_afect_v rea
             JOIN xxgir_rh_afect_tempr rat
               ON (rea.id_afect = rat.id_afect AND rat.in_type_paie = cv_id_type_paie_varbl)
             JOIN per_absence_attendances paa
               ON (rat.id_emplo = paa.person_id AND rea.id_creat = paa.absence_attendance_id)
             JOIN per_absence_attendance_types paat
               ON (paa.absence_attendance_type_id = paat.absence_attendance_type_id AND rea.id_va_entre_elemn = paat.input_value_id)
            WHERE (rea.peev_dt_debut_efect BETWEEN cd_dt_prodc AND vgrec_perd_paie_varbl.dt_fin
                  -- Début SAGIR F.Aubin 2014-07-18 CHG 178522 Incident 70794
                  OR paa.date_start BETWEEN cd_dt_prodc AND TO_DATE('2014-05-21',
                                                                     'YYYY-MM-DD'))
                 -- Fin SAGIR F.Aubin 2014-07-18 CHG 178522 Incident 70794
              AND rea.id_va_entre_elemn IS NOT NULL
              AND paat.input_value_id IS NOT NULL)
         -- Début SAGIR CHG239717 / INC 122929 Julie Goulet
         --Popol 2019-06-05 INC00145348 parallel
         SELECT /*+ parallel(rea)*/
         --fin
         -- Fin SAGIR CHG239717 / INC 122929 Julie Goulet
          rea.id_afect,
          -- On utilise ce champ (catgr_emplo) pour conserver les heures de l'absence,
          -- car pas de champs hh_debut et hh_fin dans cette table
          ea.hh_debut || '*' || ea.hh_fin catgr_emplo,
          rea.id_type_elemn,
          rea.id_entre_elemn,
          rea.nm_elemn,
          rea.cd_elemn,
          rea.cd_sagip,
          rea.nm_va_entre_elemn,
          DECODE(rea.va_entre_elemn,
                 NULL,
                 DECODE(rea.in_va_entre_deft,
                        'Y',
                        rea.va_entre_deft),
                 rea.va_entre_elemn) va_entre_elemn,
          ea.dt_debut_absen dt_debut,
          ea.dt_fin_absen dt_fin,
          '6_10' nm_liste
           FROM xxgir_rh_elemn_afect_v rea
           JOIN xxgir_rh_afect_tempr rat
         -- 6.25.2.1 Élément lié à l'affectation
             ON (rea.id_afect = rat.id_afect AND rat.in_type_paie = cv_id_type_paie_varbl)
           JOIN elemn_absen ea
             ON rea.id_entre_elemn = ea.id_entre_elemn
          WHERE -- 6.25.2.2 Élément non présent dans la liste 6_10
          NOT EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = '6_9'
              AND reht.id_entre_elemn = rea.id_entre_elemn)
         -- 6.25.2.3 Élément créé dans la période de paie courante
          AND rea.peev_dt_debut_efect BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin
         -- 6.25.2.4 Élément créé aprèes la date d'implantation
         --INC69571 2014-06-03 Rajouter un =
          AND rea.peev_dt_debut_efect >= cd_dt_prodc
         -- 6.25.2.5 Élément présent dans le jeu d'éléments pour H620 déterminé au point 2
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_h620'
              AND reht.cd_sagip = rea.cd_sagip
              AND reht.nm_elemn = rea.nm_elemn)
         -- 6.25.6 Élément avec un CREATOR_TYPE = A
          AND rea.cd_type_creat = cv_cd_type_creat_absen
         -- 6.25.7 Élément possède un nombre d'heures
          AND ((rea.nm_va_entre_elemn = cv_nm_hh AND rea.va_entre_elemn IS NOT NULL) OR (rea.nm_va_entre_elemn = cv_nm_dt_efect));
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.9 Liste des autres éléments non récurrents non traités.
      --
      OPEN CUR_autre_non_recrn_absen;
      FETCH CUR_autre_non_recrn_absen BULK COLLECT
         INTO vltab_elemn_absen;
      CLOSE CUR_autre_non_recrn_absen;
      --
      -- Changer le statut (indicateur de traitement) dans la table de suivi des éléments (gir_rh_suivi_entre_elemn_paie.statut) pour 'Traité'.
      --
      IF vlTAB_elemn_absen.EXISTS(1) THEN
         --Début SAGIR DDC282404 Julie Goulet
         FORALL vln_cp IN INDICES OF vltab_elemn_absen
            UPDATE gir_rh_suivi_elemn rse
               SET rse.in_trait = 'O'
             WHERE rse.element_entry_id = vltab_elemn_absen(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N';
         --
         FORALL vln_cp IN INDICES OF vltab_elemn_absen
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.in_trait = 'O'
             WHERE rse.element_entry_id = vltab_elemn_absen(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N';
         --Fin SAGIR DDC282404 Julie Goulet
      
         --
         -- Mettre les éléments d'absence dans la TABLE xxgir_rh_elemn_h620_tempr sous le nom 6_10
         --
         FORALL vln_cp IN INDICES OF vltab_elemn_absen
            INSERT INTO xxgir_rh_elemn_h620_tempr
            VALUES
               (vltab_elemn_absen(vln_cp).id_afect,
                vltab_elemn_absen(vln_cp).catgr_emplo,
                vltab_elemn_absen(vln_cp).id_type_elemn,
                vltab_elemn_absen(vln_cp).id_entre_elemn,
                vltab_elemn_absen(vln_cp).nm_elemn,
                vltab_elemn_absen(vln_cp).cd_elemn,
                vltab_elemn_absen(vln_cp).cd_sagip,
                vltab_elemn_absen(vln_cp).nm_va_entre_elemn,
                vltab_elemn_absen(vln_cp).va_entre_elemn,
                vltab_elemn_absen(vln_cp).dt_debut,
                vltab_elemn_absen(vln_cp).dt_fin,
                vltab_elemn_absen(vln_cp).nm_liste);
         --
      END IF;
      --
      -- Vider les objets
      --
      vlTAB_elemn_absen.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_10_6_12.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_elemn_absen.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_autre_non_recrn_absen%ISOPEN THEN
            CLOSE CUR_autre_non_recrn_absen;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80412';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_10_6_12;

   --
   -- Étape 6.11
   -- ============================================================================
   -- P_creer_elemn_etape_6_11_6_12
   -- ============================================================================
   /**************************************************************************
   * But : Création de la liste des autres éléments correspondants à des heures supplémentaires remboursées.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On utilise le code sagip au lieu du id_type pour tenir compte des sélections de special input ou remplacement
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-19  Retouche 169 Ajout des Heures supplémentaires et intermédiaires résiduelles
   * Frédéric Aubin       2014-02-17  INC-19172    Les remboursement d'heures supplémentaires C, paie variable, non transféré au SAGIP
   *                                               Changement de comparaison de date au curseur CUR_elemn_non_recrn_rembr de P_creer_elemn_etape_6_11_6_12
   *
   *************************************************************************/
   PROCEDURE p_creer_elemn_etape_6_11_6_12(pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                           pv_token_value     OUT NOCOPY VARCHAR2,
                                           pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                           pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_elemn_etape_6_11_6_12';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_creer_elemn_etape_6_11_6_12';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      vlv_no_docmn       gir_trans_h760.no_docmn%TYPE;
      vln_id_afect       NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      vltab_liste_non_recrn_rembr tab_liste_elemn := tab_liste_elemn(); -- Table pour la liste des éléments non récurrents avec heures supplémentaires remboursées étape 6.11.
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste des éléments non récurrents
      -- correspondant aux heures supplémentaires remboursées
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_non_recrn_rembr IS
         WITH elemn_non_recrn_rembr AS
          (SELECT /*+ LEADING (rat) */ /* F.Aubin 2015-08-26 DDC199119 */
            rea.id_afect,
            rea.catgr_emplo,
            rea.id_type_elemn,
            rea.id_entre_elemn,
            rea.nm_elemn,
            rea.cd_elemn,
            rea.cd_sagip,
            rea.nm_va_entre_elemn,
            rea.id_va_entre_elemn,
            DECODE(rea.va_entre_elemn,
                   NULL,
                   DECODE(rea.in_va_entre_deft,
                          'Y',
                          rea.va_entre_deft),
                   rea.va_entre_elemn) va_entre_elemn
             FROM xxgir_rh_elemn_afect_v rea,
                  xxgir_rh_afect_tempr   rat,
                  --inc 74743
                  pay_element_entries_f pee
           --
            WHERE -- 6.11.1 Élément lié à l'affectation
            rea.id_afect = rat.id_afect
           --inc 74743
           --ajout de pee, pour seulement prendre ceux créer apres la dt_infer
         AND pee.element_entry_id = rea.id_entre_elemn
         AND pee.creation_date >= cd_dt_infer
           
           --
         AND rat.in_type_paie = cv_id_type_paie_varbl
           -- 6.11.2 Élément en vigueur pour la période de paie courante
           -- Début SAGIR F.Aubin 2014-02-17 INC-19172: changement aux compar. de date
         AND vgrec_perd_paie_varbl.dt_fin BETWEEN rea.pel_dt_debut_efect AND rea.pel_dt_fin_efect
         AND vgrec_perd_paie_varbl.dt_fin BETWEEN rea.pet_dt_debut_efect AND rea.pet_dt_fin_efect
         AND vgrec_perd_paie_varbl.dt_fin BETWEEN rea.piv_dt_debut_efect AND rea.piv_dt_fin_efect
         AND rea.pee_dt_debut_efect = (SELECT MAX(pee.effective_start_date)
                                        FROM pay_element_entries_f pee
                                       WHERE pee.element_entry_id = rea.id_entre_elemn)
         AND rea.peev_dt_debut_efect = (SELECT MAX(peev.effective_start_date)
                                         FROM pay_element_entry_values_f peev
                                        WHERE peev.element_entry_value_id = rea.id_va_entre_elemn_ecran)
           -- Fin SAGIR F.Aubin 2014-02-17 INC-19172
           -- 6.11.3 Élément non récurrent.
         AND rea.type_procs_elemn = 'N'
           -- 6.11.4 Élément correspondant à des heures supplémentaire à rembourser
           /* Retouche 169 tenir compte des intermédiaires à rembourser aussi
           AND    REGEXP_INSTR(rea.cd_elemn, cv_cd_elemn_suplm_rembr, 1, 1, 0, 'i') > 0*/
         AND rea.cd_elemn IN (cv_cd_elemn_suplm_rembr,
                             cv_cd_elemn_inter_rembr)
           -- 6.11.5 Élément présent dans le jeu d'éléments pour H620 déterminé au point 2
         AND EXISTS (SELECT 'X'
               FROM xxgir_rh_elemn_h620_tempr reht
              WHERE reht.nm_liste = 'jeu_h620'
                   --  retouche 132
                   --AND    reht.id_type_elemn = rea.id_type_elemn
                AND reht.cd_sagip = rea.cd_sagip
                   -- INC00017528
                AND reht.nm_elemn = rea.nm_elemn))
         SELECT rse.assignment_id id_afect,
                enrr.catgr_emplo catgr_emplo,
                rse.element_type_id id_type_elemn,
                rse.element_entry_id id_entre_elemn,
                enrr.nm_elemn nm_elemn,
                enrr.cd_elemn cd_elemn,
                enrr.cd_sagip cd_sagip,
                enrr.nm_va_entre_elemn nm_va_entre_elemn,
                enrr.va_entre_elemn va_entre_elemn,
                rse.new_effective_start_date dt_debut,
                rse.new_effective_end_date dt_fin,
                '6_11' nm_liste
           FROM elemn_non_recrn_rembr         enrr,
                gir_rh_suivi_entre_elemn_paie rse -- INC-89949
          WHERE rse.assignment_id = enrr.id_afect
            AND rse.element_entry_id = enrr.id_entre_elemn
            AND rse.element_type_id = enrr.id_type_elemn
            AND rse.input_value_id = enrr.id_va_entre_elemn
               -- 6.11.2 Élément en vigueur depuis l'implantation
            AND TRUNC(rse.new_effective_start_date) <= vgrec_perd_paie_varbl.dt_fin
            AND TRUNC(rse.new_effective_end_date) >= cd_dt_prodc
               -- 6.11.6 Élément avec un type de transaction « Création » (TRANS_TYPE = I)
            AND rse.trans_type = 'I'
               -- 6.11.7 Élément non traité
            AND rse.in_trait = 'N';
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      -- 6.11 Liste des autres éléments non récurrents correspondant à des heures supplémentaire remboursées.
      --
      OPEN CUR_elemn_non_recrn_rembr;
      FETCH CUR_elemn_non_recrn_rembr BULK COLLECT
         INTO vltab_liste_non_recrn_rembr;
      CLOSE CUR_elemn_non_recrn_rembr;
   
      p_log('15 - vltab_liste_non_recrn_rembr.COUNT = ' || vltab_liste_non_recrn_rembr.count,
            vlv_nm_procd_fonct);
      --
      -- Mettre les éléments 6.11 dans la TABLE xxgir_rh_elemn_h620_tempr
      --
      FORALL vln_cp IN INDICES OF vltab_liste_non_recrn_rembr
         INSERT INTO xxgir_rh_elemn_h620_tempr
         VALUES
            (vltab_liste_non_recrn_rembr(vln_cp).id_afect,
             vltab_liste_non_recrn_rembr(vln_cp).catgr_emplo,
             vltab_liste_non_recrn_rembr(vln_cp).id_type_elemn,
             vltab_liste_non_recrn_rembr(vln_cp).id_entre_elemn,
             vltab_liste_non_recrn_rembr(vln_cp).nm_elemn,
             vltab_liste_non_recrn_rembr(vln_cp).cd_elemn,
             vltab_liste_non_recrn_rembr(vln_cp).cd_sagip,
             vltab_liste_non_recrn_rembr(vln_cp).nm_va_entre_elemn,
             vltab_liste_non_recrn_rembr(vln_cp).va_entre_elemn,
             vltab_liste_non_recrn_rembr(vln_cp).dt_debut,
             vltab_liste_non_recrn_rembr(vln_cp).dt_fin,
             vltab_liste_non_recrn_rembr(vln_cp).nm_liste);
      --
      -- Vider les objets
      --
      vlTAB_liste_non_recrn_rembr.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_elemn_etape_6_11_6_12.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_liste_non_recrn_rembr.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_elemn_non_recrn_rembr%ISOPEN THEN
            CLOSE CUR_elemn_non_recrn_rembr;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80413';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_elemn_etape_6_11_6_12;

   --
   -- Étape 6.15
   -- ============================================================================
   -- P_verfr_elemn_etape_6_15
   -- ============================================================================
   /**************************************************************************
   * But : Vérification de création à pourcentage et d'élément basé sur le taux annuel - prorata en fonction des heures.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-23  INC00016333  Ajouter le id_afect dans le IF
   *                                               pour valider la présence dans la liste fusionnée
   *                                               Corriger la façon de traiter les éléments éligibles et fusionnés (primes)
   * Michel Dessureault   2013-01-22  INC00016972  Afficher/utiliser le taux horaire du changement de corps d'emploi dans le H620.
   * Michel Dessureault   2013-01-30  Retouche 123 Inscrire les heures en « Heure et minute » ou en « Heure centième » .
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On utilise le code sagip au lieu du id_type pour tenir compte des sélections de special input ou remplacement
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_15(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_15';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_verfr_elemn_etape_6_15';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_tx_mt         NUMBER; -- valeur calculée du montant ou taux
      vln_pc_avant_socl NUMBER; -- valeur du pourcentage pour avantages sociaux
      vln_id_afect      NUMBER; -- id de l'affectation
      vlrec_cle_compt   type_rec_ventl_cout;
      vlrec_persn       type_rec_persn; -- Infos de la personne
      vlrec_dt_hh       type_rec_dt_hh; -- Dates et heures début fin
      -- INC00016333
      vln_tx_horr      NUMBER; -- taux horaire pour les calculs
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vlv_tx_mt        gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      vlv_cd_paiem     gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      vln_nb_hh        NUMBER;
      -- Retouche 170
      vln_id_type_elemn gir_rh_fdt.elemn_type_id%TYPE; -- Prendre le bon type selon si P ou T
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour les éléments fusionnés qui n'ont pas de
      -- transactions H620 (6.15.2)
      ----------------------------------------------------------------------
      CURSOR CUR_fusn IS
         SELECT ptt.id_afect,
                ptt.id_entre_elemn,
                ptt.id_type_elemn,
                ptt.cd_sagip,
                ptt.dt_debut,
                ptt.dt_fin,
                ptt.va_pc,
                ptt.va_tx,
                ptt.va_factr,
                ptt.in_type_liste
           FROM xxgir_rh_h620_pc_tx_tempr ptt
          WHERE ptt.dt_debut = vgrec_perd_paie_varbl.dt_debut
            AND ptt.dt_fin = vgrec_perd_paie_varbl.dt_fin
               --DDC 209235 par employé (=assignment_id)
            AND ptt.id_afect = pn_assignment_id
          ORDER BY ptt.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour les éléments fusionnés qui n'ont pas de
      -- transactions H620 (6.15.2)
      ----------------------------------------------------------------------
      CURSOR CUR_verf_h620(pn_id_entre_elemn IN VARCHAR2) IS
         SELECT 'X'
           FROM gir_trans_h620 h620
          WHERE -- 6.15.1.1 Identifiant de l'élément (ELEMENT_ENTRY_ID) de l'enregistrement fusionné.
          h620.elemn_entry_id = pn_id_entre_elemn
         -- 6.15.1.2 Transaction pour la période de paie courante.
          AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
          AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
         -- 6.15.1.3 Indicateur de transaction annulée.
          AND h620.in_trans_anul = 'N';
      --
      REC_h620 CUR_verf_h620%ROWTYPE;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour les éléments éligibles
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_eligb(pn_id_afect IN NUMBER,
                             pd_dt_debut IN DATE,
                             pd_dt_fin   IN DATE) IS
      -- 6.15.2.1 nombre d'heures déjà traité pour GIR_RH_SUIVI_ENTRE_ELEMN_PAIE
      --DDC 199119
         SELECT fdt.id_afect       id_afect,
                fdt.elemn_type_id  id_type_elemn,
                fdt.elemn_entry_id id_entre_elemn,
                fdt.cd_gain        cd_sagip,
                fdt.dt_gain        dt_gain,
                fdt.nb_hh_signe    nb_hh,
                NULL               mt_fixe
                -- INC00016972
               ,
                (FND_NUMBER.CANONICAL_TO_NUMBER(fdt.tx_horr) / 100) tx_horr,
                'hh_suivi' in_type_liste
           FROM gir_rh_fdt fdt
          WHERE fdt.id_contr_fdt IN (SELECT rse.id_contr_fdt
                                       FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                                      WHERE -- 6.15.2.1.1 Élément lié à l'affectation (ELEMENT_ENTRY_ID est lié à l'affectation en traitement)
                                      rse.assignment_id = pn_id_afect
                                     -- 6.15.2.1.2 Élément déjà traité (STATUT = Traité).
                                  AND rse.in_trait = 'O')
            AND EXISTS (SELECT 'X'
                   FROM pay_element_entries_f         pee,
                        gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE pee.element_entry_id = rse.element_entry_id
                    AND rse.assignment_id = pn_id_afect
                    AND rse.in_trait = 'O'
                    AND rse.id_contr_fdt = fdt.id_contr_fdt
                    AND pee.creator_type <> cv_cd_type_creat_absen
                    AND pee.creator_type <> cv_cd_type_creat_pgi
                    AND TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date)
            AND EXISTS (SELECT 'X'
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste = 'jeu_pc'
                    AND reht.id_type_elemn = fdt.elemn_type_id)
               -- 6.15.2.1.3 La date du gain de l'élément est dans la période de paie courante
            AND TRUNC(fdt.dt_gain) BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin
               -- 6.15.2.1.4 date du gain à l'intérieur des dates début fin pour l'élément de la liste fusionnée
            AND TRUNC(fdt.dt_gain) BETWEEN pd_dt_debut AND pd_dt_fin
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_id_afect
            AND fdt.nb_hh IS NOT NULL
            AND fdt.nm_fiche = 'H620'
               -- Retouche 170
            AND NVL(fdt.raisn_3,
                    '!') <> 'REMBR'
         UNION ALL
         --  6.15.2.2 nombre d'heures pour les absences dans PAY_ELEMENT_ENTRIES_F
         SELECT id_afect,
                id_type_elemn,
                id_entre_elemn,
                cd_sagip,
                dt_gain,
                nb_hh,
                mt_fixe
                -- INC00016972
               ,
                tx_horr,
                'hh_absen' in_type_liste
           FROM (SELECT id_afect,
                         id_type_elemn,
                         id_entre_elemn,
                         'A' || cd_sagip cd_sagip,
                         NVL(FND_DATE.CANONICAL_TO_DATE(dt_efect),
                             vgrec_perd_paie_varbl.dt_debut) dt_gain,
                         FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh,
                         NULL mt_fixe
                         -- INC00016972
                        ,
                         FND_NUMBER.CANONICAL_TO_NUMBER(tx_horr) tx_horr,
                         dt_debut,
                         dt_fin
                    FROM (SELECT id_afect,
                                 id_type_elemn,
                                 id_entre_elemn,
                                 nm_elemn,
                                 cd_elemn,
                                 cd_sagip,
                                 catgr_emplo,
                                 nm_va_entre_elemn,
                                 va_entre_elemn,
                                 dt_debut,
                                 dt_fin
                            FROM (SELECT rea.id_afect,
                                          rea.id_type_elemn,
                                          rea.id_entre_elemn,
                                          rea.nm_elemn,
                                          rea.cd_elemn,
                                          rea.cd_sagip,
                                          rea.catgr_emplo,
                                          rea.nm_va_entre_elemn,
                                          DECODE(rea.va_entre_elemn,
                                                 NULL,
                                                 DECODE(rea.in_va_entre_deft,
                                                        'Y',
                                                        rea.va_entre_deft),
                                                 rea.va_entre_elemn) va_entre_elemn,
                                          COUNT(*) over(PARTITION BY rea.id_entre_elemn) nb_elemn,
                                          rea.peev_dt_debut_efect dt_debut,
                                          rea.peev_dt_fin_efect dt_fin
                                     FROM xxgir_rh_elemn_afect_v rea,
                                          xxgir_rh_afect_tempr   rat
                                    WHERE -- 6.15.2.2.1 Élément lié à l'affectation.
                                    rea.id_afect = rat.id_afect
                                   --DDC 209235 par employé (=assignment_id)
                                 AND rat.id_afect = pn_id_afect
                                 AND rat.in_type_paie = cv_id_type_paie_varbl
                                   -- 6.15.2.2.2 Élément en vigueur dans la période de paie courante.
                                 AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                 AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                 AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                 AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                 AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                 AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                 AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                 AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                 AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                 AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                   -- 6.15.2.2.3 Élément correspond à un nombre d'heures.
                                 AND ((REGEXP_INSTR(rea.nm_va_entre_elemn,
                                                   cv_nm_hh,
                                                   1,
                                                   1,
                                                   0,
                                                   'i') > 0 AND rea.va_entre_elemn IS NOT NULL) OR
                                    (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                                   cv_nm_dt_efect,
                                                   1,
                                                   1,
                                                   0,
                                                   'i') > 0 AND rea.va_entre_elemn IS NOT NULL) OR
                                    -- INC00016972
                                    (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                                   cv_nm_tx,
                                                   1,
                                                   1,
                                                   0,
                                                   'i') > 0))
                                   -- 6.15.2.2.4 Élément non récurrent.
                                 AND rea.type_procs_elemn = 'N'
                                   -- 6.15.2.2.5 Élément possédant un 'CREATOR_TYPE = A'.
                                 AND rea.cd_type_creat = cv_cd_type_creat_absen
                                   -- 6.15.2.2.6 Élément présent dans le jeu d'élément éligible aux gains à pourcentage déterminé au point 3.
                                 AND EXISTS (SELECT 'X'
                                       FROM xxgir_rh_elemn_h620_tempr reht
                                      WHERE reht.nm_liste = 'jeu_pc'
                                           /* retouche 132
                                           AND    reht.id_type_elemn = rea.id_type_elemn*/
                                        AND reht.cd_sagip = rea.cd_sagip
                                           -- INC00017528
                                        AND reht.nm_elemn = rea.nm_elemn)
                                 AND rea.cd_sagip IS NOT NULL)
                          -- INC00016972
                           WHERE nb_elemn = 3
                          /*
                          Le chiffre 3 équivaut aux conditions ,
                          c'est à dire que l'élément contient
                          un nombre d'heures et une date effective et un taux.
                                */
                          )
                  -- 6.15.2.3 obtenir le nombre d'heures à partir de la table des valeurs d'entrée d'élément
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_efect,
                                            'Heures' nb_hh
                                            -- INC00016972
                                           ,
                                            'Taux' tx_horr))
                  WHERE -- 6.15.2.2.1 Élément lié à l'affectation (ELEMENT_ENTRY_ID est lié à l'affectation en traitement)
                  id_afect = pn_id_afect)
         -- 6.15.2.1.3 La date du gain de l'élément est dans la période de paie courante
          WHERE TRUNC(dt_gain) BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin
               -- 6.15.2.1.4 date du gain à l'intérieur des dates début fin pour l'élément de la liste fusionnée
            AND TRUNC(dt_gain) BETWEEN pd_dt_debut AND pd_dt_fin
         UNION ALL
         -- Retouche 170
         -- 6.15.2.4 montant fixe pour PAY_ELEMENT_ENTRIES_F
         SELECT id_afect,
                id_type_elemn,
                id_entre_elemn,
                cd_sagip,
                dt_gain,
                nb_hh,
                mt_fixe
                -- INC00016972
               ,
                tx_horr,
                'montant' in_type_liste
           FROM (SELECT id_afect,
                        id_type_elemn,
                        id_entre_elemn,
                        'A' || cd_sagip cd_sagip,
                        NVL(FND_DATE.CANONICAL_TO_DATE(dt_fin),
                            vgrec_perd_paie_varbl.dt_fin) dt_gain,
                        NULL nb_hh,
                        FND_NUMBER.CANONICAL_TO_NUMBER(mt_fixe) mt_fixe
                        -- INC00016972
                       ,
                        NULL tx_horr
                   FROM (SELECT id_afect,
                                id_type_elemn,
                                id_entre_elemn,
                                nm_elemn,
                                cd_elemn,
                                cd_sagip,
                                catgr_emplo,
                                nm_va_entre_elemn,
                                va_entre_elemn
                           FROM (SELECT rea.id_afect,
                                         rea.id_type_elemn,
                                         rea.id_entre_elemn,
                                         rea.nm_elemn,
                                         rea.cd_elemn,
                                         rea.cd_sagip,
                                         rea.catgr_emplo,
                                         rea.nm_va_entre_elemn,
                                         DECODE(rea.va_entre_elemn,
                                                NULL,
                                                DECODE(rea.in_va_entre_deft,
                                                       'Y',
                                                       rea.va_entre_deft),
                                                rea.va_entre_elemn) va_entre_elemn,
                                         COUNT(*) over(PARTITION BY rea.id_entre_elemn) nb_elemn
                                    FROM xxgir_rh_elemn_afect_v rea,
                                         xxgir_rh_afect_tempr   rat
                                   WHERE -- 6.15.2.4.1 Élément lié à l'affectation.
                                     rea.id_afect = rat.id_afect
                                    -- test assignment
                                  AND rat.id_afect = pn_id_afect
                                  AND rat.in_type_paie = cv_id_type_paie_varbl
                                    -- 6.15.2.4.2 Élément correspond à un montant fixe.
                                  AND rea.cd_type_creat = cv_cd_type_creat_pgi
                                  AND ((REGEXP_INSTR(rea.nm_va_entre_elemn,
                                                    cv_nm_mt,
                                                    1,
                                                    1,
                                                    0,
                                                    'i') > 0 AND rea.va_entre_elemn IS NOT NULL) OR
                                     (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                                    cv_nm_dt_fin,
                                                    1,
                                                    1,
                                                    0,
                                                    'i') > 0))
                                    -- 6.15.2.4.3 Élément présent dans le jeu d'élément éligible aux gains à pourcentage déterminé au point 3.
                                AND EXISTS (SELECT 'X'
                                      FROM xxgir_rh_elemn_h620_tempr reht
                                     WHERE reht.nm_liste = 'jeu_pc'
                                       AND reht.id_type_elemn = rea.id_type_elemn)
                                  -- 6.15.2.4.4 Élément en vigueur dans la période de paie courante.
                                AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                                AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                                AND rea.cd_sagip IS NOT NULL)
                          WHERE nb_elemn = 2)
                 -- 6.15.2.5 obtenir le montant fixe à partir de la table des valeurs d'entrée d'élément
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date de fin' dt_fin,
                                            'Montant' mt_fixe))
                  WHERE -- 6.15.2.4.1 Élément lié à l'affectation (ELEMENT_ENTRY_ID est lié à l'affectation en traitement)
                  id_afect = pn_id_afect)
         -- 6.15.2.1.3 La date du gain de l'élément est dans la période de paie courante
          WHERE TRUNC(dt_gain) BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin
               -- 6.15.2.1.4 date du gain à l'intérieur des dates début fin pour l'élément de la liste fusionnée
            AND TRUNC(dt_gain) BETWEEN pd_dt_debut AND pd_dt_fin;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le % d'avantage social
      -- pour occasionnel embauché moins d'un an dans les entrées d'élément.
      -- Si absent aller chercher la valeur par défaut (6.15.2.7.2.2)
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_avant_socl(pn_id_afect IN NUMBER,
                                  pd_dt_efect IN DATE) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(DECODE(rea.va_entre_elemn,
                                                      NULL,
                                                      DECODE(rea.in_va_entre_deft,
                                                             'Y',
                                                             NVL(pliv.default_value,
                                                                 rea.va_entre_deft)),
                                                      rea.va_entre_elemn)) compn_avant_socl
           FROM xxgir_rh_elemn_afect_v  rea,
                pay_link_input_values_f pliv
          WHERE rea.id_afect = pn_id_afect
            AND pliv.input_value_id = rea.id_va_entre_elemn
            AND pliv.element_link_id = rea.id_lien_elemn
               -- Valide pour la date du gain
            AND TRUNC(pd_dt_efect) BETWEEN rea.pee_dt_debut_efect AND rea.pee_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pel_dt_debut_efect AND rea.pel_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pet_dt_debut_efect AND rea.pet_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.piv_dt_debut_efect AND rea.piv_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.peev_dt_debut_efect AND rea.peev_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN pliv.effective_start_date AND pliv.effective_end_date
            AND (REGEXP_INSTR(rea.cd_elemn,
                              cv_cd_elemn_avant_socl,
                              1,
                              1,
                              0,
                              'i') > 0)
            AND (REGEXP_INSTR(rea.nm_va_entre_elemn,
                              cv_nm_pc,
                              1,
                              1,
                              0,
                              'i') > 0);
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      /*
      vln_index := vgTAB_fdt_h620.COUNT;
      */
      --
      -- Liste fusionnée.
      -- 6.15.2 Trouver la liste des éléments qui n'ont pas de transactions H620.
      --
      p_log('Avant fusion',
            vlv_nm_procd_fonct);
      --
      <<fusion>>
      FOR REC_CUR_fusn IN CUR_fusn LOOP
         --
         IF vln_id_afect <> REC_CUR_fusn.id_afect THEN
            --
            vln_id_afect := REC_CUR_fusn.id_afect;
            --
         END IF;
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_fusn.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         --
         -- Retouche 183  On applique la clef comptable sur l'élément prime car c'est lui qui est payé
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_fusn.dt_debut,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_fusn.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         vgv_etape := '6.15.1 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
         --
         OPEN CUR_verf_h620(REC_CUR_fusn.id_entre_elemn);
         --
         FETCH CUR_verf_h620
            INTO REC_h620;
         --
         -- 6.15.2 s'il n'existe pas de transaction H620
         --
         IF CUR_verf_h620%NOTFOUND THEN
            CLOSE CUR_verf_h620;
            --
            vgv_etape := '6.15.2 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
            --
            -- 6.15.2.7 Pour chacun des enregistrements de la liste d'éléments éligibles définie aux points 6.15.2.1, 6.15.2.2 et 6.15.2.4
            --
            <<eligb>>
            FOR REC_CUR_elemn_eligb IN CUR_elemn_eligb(vln_id_afect,
                                                       REC_CUR_fusn.dt_debut,
                                                       REC_CUR_fusn.dt_fin) LOOP
               --
               vgv_etape := '6.15.2.7 - id_elemn = ' || REC_CUR_elemn_eligb.id_entre_elemn;
               --
               p_log('affectation ' || vln_id_afect,
                     vlv_nm_procd_fonct);
               p_log('element eligible. ' || REC_CUR_elemn_eligb.id_entre_elemn,
                     vlv_nm_procd_fonct);
               p_log('dt_debut prime  ' || fnd_date.date_to_displaydate(REC_CUR_fusn.dt_debut),
                     vlv_nm_procd_fonct);
               p_log('dt_fin prime  ' || fnd_date.date_to_displaydate(REC_CUR_fusn.dt_fin),
                     vlv_nm_procd_fonct);
               p_log('dt_gain  ' || fnd_date.date_to_displaydate(REC_CUR_elemn_eligb.dt_gain),
                     vlv_nm_procd_fonct);
               p_log('cd_gain  ' || REC_CUR_elemn_eligb.cd_sagip,
                     vlv_nm_procd_fonct);
               --            p_log('dt_debut perd '|| fnd_date.date_to_displaydate(REC_CUR_elemn_eligb.dt_debut), vlv_nm_procd_fonct);
               --            p_log('dt_fin perd '|| fnd_date.date_to_displaydate(REC_CUR_elemn_eligb.dt_fin), vlv_nm_procd_fonct);
               p_log('dt_debut var ' || fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_debut),
                     vlv_nm_procd_fonct);
               p_log('dt_fin var ' || fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_fin),
                     vlv_nm_procd_fonct);
               /* Pour log d'erreur*/
               vld_dt_gain := REC_CUR_elemn_eligb.dt_gain;
            
               --
               -- 6.15.2.7.1 l'élément de la liste fusionnée est un élément basé sur le taux annuel
               -- et que l'élément de la liste d'éléments éligibles n'est pas un élément qui possède
               -- le code de gain « A010 » alors, passer au prochain enregistrement de la liste d'éléments éligibles
               --
               IF REC_CUR_fusn.in_type_liste = 'T' AND
                  REC_CUR_elemn_eligb.cd_sagip <> 'A010' THEN
                  --
                  vgv_etape := '6.15.2.7.1 - id_elemn = ' || REC_CUR_elemn_eligb.id_entre_elemn;
                  --
                  CONTINUE;
                  --
               END IF;
               --
               -- Obtenir les valeurs dérivées
               --
               /* Retouche 183 La clef est sur l'élément de fusion
               P_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                                  pd_dt_afect     => REC_CUR_elemn_eligb.dt_gain,
                                  pv_id_type_paie => cv_id_type_paie_varbl,
                                  pREC_ventl_cout => vlREC_cle_compt);
               */
               --
               -- Obtenir l'identifiant de la personne
               p_obten_persn(pn_id_afect => vln_id_afect,
                             pd_dt_fin   => REC_CUR_elemn_eligb.dt_gain,
                             prec_persn  => vlrec_persn);
               --
               p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_elemn_eligb.id_entre_elemn,
                             pd_dt_efect       => REC_CUR_elemn_eligb.dt_gain,
                             prec_dt_hh        => vlrec_dt_hh);
               --
               vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                       pn_id_entre_elemn    => REC_CUR_elemn_eligb.id_entre_elemn,
                                                       pd_dt_efect          => REC_CUR_elemn_eligb.dt_gain,
                                                       pv_nm_va_entre_elemn => cv_nm_cd_paiem);
               --
               -- 6.15.2.7.2.1 Si l'élément de la liste fusionnée est un élément à pourcentage
               --
               IF REC_CUR_fusn.in_type_liste = 'P' THEN
                  --
                  vgv_etape := '6.15.2.7.2.1 - id_elemn = ' || REC_CUR_elemn_eligb.id_entre_elemn;
                  --
                  -- Retouche 170
                  -- On utilise le type de l'élément traité car c'est lui qui est dans la liste d'égibilité
                  vln_id_type_elemn := REC_CUR_elemn_eligb.id_type_elemn;
                  --
                  -- Aller chercher le tx_horaire en date du gain
                  --
                  -- INC00016972
                  IF REC_CUR_elemn_eligb.tx_horr IS NOT NULL THEN
                     vln_tx_horr := REC_CUR_elemn_eligb.tx_horr;
                  ELSE
                     vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                     pd_dt_efect => REC_CUR_elemn_eligb.dt_gain);
                  END IF;
                  --
                  vln_pc_avant_socl := 0;
                  --
                  -- Est-ce un employé occasionnel
                  --
                  IF NVL(vlrec_persn.catgr_emplo,
                         '!') = cv_catgr_emplo_ocasn THEN
                     --
                     vgv_etape := '6.15.2.7.2.2 - id_elemn = ' || REC_CUR_elemn_eligb.id_entre_elemn;
                     --
                     -- 6.15.2.7.2.2.2 Tenir compte du pourcentage pour avantages sociaux
                     --
                     OPEN CUR_elemn_avant_socl(REC_CUR_elemn_eligb.id_afect,
                                               REC_CUR_elemn_eligb.dt_gain);
                     --
                     FETCH CUR_elemn_avant_socl
                        INTO vln_pc_avant_socl;
                     --
                     IF CUR_elemn_avant_socl%NOTFOUND THEN
                        --
                        vln_pc_avant_socl := 0;
                        --
                     END IF;
                     --
                     CLOSE CUR_elemn_avant_socl;
                     --
                  END IF;
                  --
                  IF REGEXP_INSTR(REC_CUR_elemn_eligb.in_type_liste,
                                  'hh',
                                  1,
                                  1,
                                  0,
                                  'i') > 0 THEN
                     --
                     -- 6.15.2.7.2.1 Calculer le montant pour un élément à pourcentage
                     -- quand un nb heure mettre taux % dans tx_mt
                     vln_tx_mt := REC_CUR_elemn_eligb.nb_hh * vln_tx_horr
                                 --TODO Edgar Inverser les deux derniere ligne
                                  * (NVL(REC_CUR_fusn.va_pc,
                                         0) / 100) * (1 + NVL(vln_pc_avant_socl,
                                                              0) / 100);
                     --
                     vln_nb_hh := REC_CUR_elemn_eligb.nb_hh;
                     --
                  ELSE
                     --
                     -- Calculer le montant pour un élément à pourcentage
                     --
                     vln_tx_mt := REC_CUR_elemn_eligb.mt_fixe * (NVL(REC_CUR_fusn.va_pc,
                                                                     0) / 100) *
                                  (1 + NVL(vln_pc_avant_socl,
                                           0) / 100);
                     vln_nb_hh := NULL;
                     --
                  END IF;
                  --
               ELSE
                  -- 'T' = Taux annuel au prorata
                  --
                  vgv_etape := '6.15.2.7.2.3 - id_elemn = ' || REC_CUR_elemn_eligb.id_entre_elemn;
                  --
                  -- Retouche 170
                  -- On utilise le type de l'élément de fusion car c'est lui qui détermine le Taux
                  vln_id_type_elemn := REC_CUR_fusn.id_type_elemn;
                  --
                  -- Le tx_horaire est celui inscrit dans l'élément au prorata
                  --
                  vln_tx_horr := REC_CUR_fusn.va_tx;
                  --
                  IF REGEXP_INSTR(REC_CUR_elemn_eligb.in_type_liste,
                                  'hh',
                                  1,
                                  1,
                                  0,
                                  'i') > 0 THEN
                     --
                     -- 6.15.2.7.2.3 Calculer le montant pour un élément à taux annuel prorata
                     --
                     vln_tx_mt := REC_CUR_elemn_eligb.nb_hh * REC_CUR_fusn.va_tx * REC_CUR_fusn.va_factr;
                     vln_nb_hh := REC_CUR_elemn_eligb.nb_hh;
                     --
                  ELSE
                     --
                     vln_tx_mt := REC_CUR_elemn_eligb.mt_fixe * REC_CUR_fusn.va_tx * REC_CUR_fusn.va_factr;
                     vln_nb_hh := NULL;
                     --
                  END IF;
                  --
               END IF;
               --
               vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
               --
               vlv_tx_mt := fv_convr_nb_decml_carct(vln_tx_mt);
               --
               p_log('taux h  ' || vlv_tx_horr,
                     vlv_nm_procd_fonct);
               p_log('montant  ' || vlv_tx_mt,
                     vlv_nm_procd_fonct);
               p_log('cd sagip  ' || 'A' || REC_CUR_fusn.cd_sagip,
                     vlv_nm_procd_fonct);
               --
               -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
               vgrec_gir_rh_fdt := NULL;
               --
               vgrec_gir_rh_fdt.nm_fiche                := 'H620';
               vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
               vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
               vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
               vgrec_gir_rh_fdt.in_trans_anul           := 'N';
               vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
               vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
               vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
               vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
               vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
               vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_fusn.cd_sagip;
               vgrec_gir_rh_fdt.elemn_type_id           := vln_id_type_elemn;
               vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_fusn.id_entre_elemn;
               vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_elemn_eligb.dt_gain;
               --DDC 209235
               vld_dt_gain := REC_CUR_elemn_eligb.dt_gain;
               --
               vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh;
               vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                        xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                           pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                           pv_formt      => 'HHHMM');
                                                                                                                                                                                                        */
                fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                         pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                         pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                         pn_assignment_id => vln_id_afect); -- Edgar Doiron INC 19219
               vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
               vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
               vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
               vgrec_gir_rh_fdt.tx_mt_signe    := vln_tx_mt;
               vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
               vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
               vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
               vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
               vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
               vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
               vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
               vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
               vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
               vgrec_gir_rh_fdt.dt_debut       := vlrec_dt_hh.dt_debut;
               vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
               vgrec_gir_rh_fdt.dt_fin         := vlrec_dt_hh.dt_fin;
               vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
               vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
               vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
               vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
               vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
               --
               vgv_etape := '6.15.2.7.2.4 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
               --
               p_creer_gain_fdt(vln_id_contr_fdt);
               --
            END LOOP eligb;
            --
         ELSE
            --
            CLOSE CUR_verf_h620;
            --
         END IF;
         --
      END LOOP fusion;
      --
      -- à la fin de P_expor_h620 on va traiter les tableaux vgTAB_fdt pour créer les enregistrements gir_rh_fdt et gir_trans_h620
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_15.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_verf_h620%ISOPEN THEN
            CLOSE CUR_verf_h620;
         END IF;
         --
         IF CUR_elemn_avant_socl%ISOPEN THEN
            CLOSE CUR_elemn_avant_socl;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
      
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80371';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
      
         /*fnd_file.put_line(fnd_file.log,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_15;

   --
   -- Étape 6.16
   -- ============================================================================
   -- P_verfr_elemn_etape_6_16
   -- ============================================================================
   /**************************************************************************
   * But : Vérification de modification d'éléments à pourcentage et d'élément basé
   *       sur le taux annuel - prorata en fonction des heures et du taux horaire.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-22  INC00016972  Afficher/utiliser le taux horaire du changement de corps d'emploi dans le H620.
   * Michel Dessureault   2013-01-30  Retouche 123 Inscrire les heures en « Heure et minute » ou en « Heure centième » .
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On utilise le code sagip au lieu du id_type pour tenir compte des sélections de special input ou remplacement
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   *************************************************************************/
   /*PROCEDURE p_verfr_elemn_etape_6_16 IS
      --
         \*******************************************************************************
      *                         VARIABLES DE TRAVAIL
         *******************************************************************************\
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_16';
      vln_tx_mt          NUMBER; -- valeur calculée du montant ou taux
      vln_mt_calcl       NUMBER; -- valeur du montant calculé
      vln_pc_avant_socl  NUMBER; -- valeur du pourcentage pour avantages sociaux
      vln_index          PLS_INTEGER; -- Index des tables PL/SQL
      vlrec_cle_compt    type_rec_ventl_cout;
      vlrec_persn        type_rec_persn; -- Infos de la personne
      vlrec_dt_hh        type_rec_dt_hh; -- Dates et heures début fin
      vltab_fdt_h620     tab_fdt_h620; -- Table pour les enregistrements de la fdt
      -- INC00016333
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      vln_tx_horr      NUMBER; -- taux horaire pour les calculs
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vln_id_afect     NUMBER;
      vln_h620_tx_mt   NUMBER; -- Montant ramener en décimale provenant de GIR_TRANS_H620
      -- Retouche 170
      vlv_tx_mt gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      -- Retouche 170
      vln_id_type_elemn gir_rh_fdt.elemn_type_id%TYPE; -- Prendre le bon type selon si P ou T
      --
         \*******************************************************************************
      *                         CURSEURS
         *******************************************************************************\
      ----------------------------------------------------------------------
      -- Déclaration du curseur de la liste fusionnée (6.2 et 6.3).
      ----------------------------------------------------------------------
      --
      CURSOR CUR_fusn IS
         SELECT ptt.id_afect,
                ptt.id_entre_elemn,
                ptt.id_type_elemn,
                ptt.cd_sagip,
                ptt.dt_debut,
                ptt.dt_fin,
                ptt.va_pc,
                ptt.va_tx,
                ptt.va_factr,
                ptt.in_type_liste
           FROM xxgir_rh_h620_pc_tx_tempr ptt
          WHERE ptt.dt_debut = vgrec_perd_paie_varbl.dt_debut
            AND ptt.dt_fin = vgrec_perd_paie_varbl.dt_fin
          ORDER BY ptt.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver les éléments qui ont des transactions H620.
      ----------------------------------------------------------------------
      CURSOR CUR_trouv_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.id_trans_h620,
                h620.id_afect,
                h620.elemn_entry_id     id_entre_elemn,
                h620.perd_paie_varbl_du dt_perd_debut,
                h620.perd_paie_varbl_au dt_perd_fin,
                h620.statu_trans,
                h620.tx_mt,
                h620.cd_gain
           FROM gir_trans_h620 h620
          WHERE -- 6.16.1.1 Identifiant de l'élément (ELEMENT_ENTRY_ID) de l'enregistrement de la liste fusionnée = Identifiant de l'élément de la transaction H620
          h620.elemn_entry_id = pn_id_entre_elemn
         -- 6.16.1.2 Transaction pour la période de paie courante.
          AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
          AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
         -- 6.16.1.3 Statut <> de Non transféré à SAGIP
          AND h620.statu_trans <> 'N'
         -- 6.16.1.4 Indicateur de transaction annulée.
          AND h620.in_trans_anul = 'N'
          ORDER BY h620.id_trans_h620;
      --
      -- Retouche 183
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour extraire le budget et centre en plus
      -- des identifiants d'une fdt pour la transaction H620.
      ----------------------------------------------------------------------
      CURSOR CUR_fdt_h620(pn_id_trans IN NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.budgt,
                fdt.centr_respn
           FROM gir_rh_fdt fdt
          WHERE fdt.id_trans = pn_id_trans
            AND fdt.nm_fiche = 'H620';
      --
      REC_fdt_h620 CUR_fdt_h620%ROWTYPE;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour calculer les montants de GIR_RH_FDT
      -- qui ont créé les H620 (6.16.4.1).
      ----------------------------------------------------------------------
      CURSOR CUR_calcl_hh_fdt(pn_id_trans IN NUMBER,
                              pd_dt_debut IN DATE,
                              pd_dt_fin   IN DATE) IS
         SELECT fdt.id_afect,
                fdt.elemn_entry_id id_entre_elemn,
                fdt.elemn_type_id  id_type_elemn,
                fdt.cd_gain,
                fdt.dt_gain,
                fdt.nb_hh_signe,
                fdt.nb_hh,
                fdt.id_contr_fdt,
                fdt.id_trans,
                fdt.id_bloc_temps,
                fdt.no_versn_objet,
                fdt.clas,
                fdt.sectn,
                fdt.dt_debut,
                fdt.dt_fin,
                fdt.hh_debut,
                fdt.hh_fin,
                fdt.cd_paiem
           FROM gir_rh_fdt fdt
          WHERE fdt.id_trans = pn_id_trans
            AND fdt.nm_fiche = 'H620'
               -- 6.16.4.1.3 La date de gain doit être à l'intérieur de la validité de la prime
            AND fdt.dt_gain BETWEEN pd_dt_debut AND pd_dt_fin
               -- 6.16.4.1.4 enregistrement correspond à un nombre d'heures
            AND fdt.nb_hh IS NOT NULL;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour calculer le montant de modification
      -- pour un montant fixe (6.16.4.3).
      ----------------------------------------------------------------------
      CURSOR CUR_calcl_mt_fixe(pn_id_afect IN NUMBER) IS
         SELECT id_type_elemn,
                id_entre_elemn,
                NVL(fnd_date.canonical_to_date(dt_efect),
                    vgrec_perd_paie_varbl.dt_fin) dt_gain,
                fnd_number.canonical_to_number(mt_fixe) mt_fixe
           FROM (SELECT id_type_elemn,
                        id_entre_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                   FROM (SELECT rea.id_type_elemn,
                                 rea.id_entre_elemn,
                                 rea.nm_va_entre_elemn,
                                 DECODE(rea.va_entre_elemn,
                                        NULL,
                                        DECODE(rea.in_va_entre_deft,
                                               'Y',
                                               rea.va_entre_deft),
                                        rea.va_entre_elemn) va_entre_elemn,
                                 COUNT(*) over(PARTITION BY rea.id_entre_elemn) nb_elemn
                            FROM xxgir_rh_elemn_afect_v rea
                           WHERE -- 6.16.4.3.1  Élément lié à l'affectation
                            rea.id_afect = pn_id_afect
                           -- 6.16.4.3.2  Élément éligible aux gains à pourcentage du point 3
                         AND EXISTS (SELECT 'X'
                               FROM xxgir_rh_elemn_h620_tempr reht
                              WHERE reht.nm_liste = 'jeu_pc'
                                AND reht.id_type_elemn = rea.id_type_elemn)
                           -- 6.16.4.3.3  Élément en vigueur dans la période de paie courante.
                         AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                           -- 6.16.4.3.4 Élément valide pour l'élément fusion
                          --  On vérifie la date de gain mais ne peut se faire que dans le IF
                          -- 6.16.4.3.5 Élément possédant un creator_type = F
                        AND rea.cd_type_creat = cv_cd_type_creat_pgi
                          -- 6.16.4.3.6  Élément correspond à un montant fixe
                        AND ((regexp_instr(rea.nm_va_entre_elemn,
                                          cv_nm_mt,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn IS NOT NULL) OR
                           (regexp_instr(rea.nm_va_entre_elemn,
                                          cv_nm_dt_fin,
                                          1,
                                          1,
                                          0,
                                          'i') > 0))
                        AND rea.cd_sagip IS NOT NULL)
                  WHERE nb_elemn = 2) pivot(MAX(va_entre_elemn) FOR nm_va_entre_elemn IN('Date de fin' dt_efect,
                                                                                         'Montant' mt_fixe));
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour calculer les montants des absences dans
      -- PAY_ELEMENT_ENTRIES_F qui ont créé les H620 (6.16.4.5).
      ----------------------------------------------------------------------
      CURSOR CUR_calcl_hh_absen(pn_id_afect IN NUMBER) IS
         SELECT id_type_elemn,
                id_entre_elemn,
                NVL(fnd_date.canonical_to_date(dt_efect),
                    vgrec_perd_paie_varbl.dt_debut) dt_gain,
                fnd_number.canonical_to_number(nb_hh) nb_hh,
                fnd_number.canonical_to_number(tx_horr) tx_horr
           FROM (SELECT id_type_elemn,
                         id_entre_elemn,
                         nm_va_entre_elemn,
                         va_entre_elemn
                    FROM (SELECT rea.id_type_elemn,
                                  rea.id_entre_elemn,
                                  rea.nm_va_entre_elemn,
                                  DECODE(rea.va_entre_elemn,
                                         NULL,
                                         DECODE(rea.in_va_entre_deft,
                                                'Y',
                                                rea.va_entre_deft),
                                         rea.va_entre_elemn) va_entre_elemn,
                                  COUNT(*) over(PARTITION BY rea.id_entre_elemn) nb_elemn
                             FROM xxgir_rh_elemn_afect_v rea
                            WHERE -- 6.16.4.5.1 Élément lié à l'affectation.
                            rea.id_afect = pn_id_afect
                           -- 6.16.4.5.2 Élément en vigueur dans la période de paie courante.
                         AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                         AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                         AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                           -- 6.16.4.5.3 Élément non récurrent.
                         AND rea.type_procs_elemn = 'N'
                           -- 6.16.4.5.4 Élément correspond à un nombre d'heures.
                         AND ((regexp_instr(rea.nm_va_entre_elemn,
                                           cv_nm_hh,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn IS NOT NULL) OR
                            (regexp_instr(rea.nm_va_entre_elemn,
                                           cv_nm_dt_efect,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn IS NOT NULL) OR
                            -- INC00016972
                            (regexp_instr(rea.nm_va_entre_elemn,
                                           cv_nm_tx,
                                           1,
                                           1,
                                           0,
                                           'i') > 0))
                           -- 6.16.4.5.5 Élément présent dans le jeu d'élément éligible aux gains à pourcentage déterminé au point 3.
                         AND EXISTS (SELECT 'X'
                               FROM xxgir_rh_elemn_h620_tempr reht
                              WHERE reht.nm_liste = 'jeu_pc'
                                AND reht.id_type_elemn = rea.id_type_elemn)
                           -- 6.16.4.5.6 Élément possédant un 'CREATOR_TYPE = A'.
                         AND rea.cd_type_creat = cv_cd_type_creat_absen)
                  -- INC00016972
                   WHERE nb_elemn = 3)
                -- placer en colonne les lignes des valeurs des éléments pour les id communs
                 pivot(MAX(va_entre_elemn) FOR nm_va_entre_elemn IN('Date effective' dt_efect,
                                                                    'Heures' nb_hh
                                                                    -- INC00016972
                                                                   ,
                                                                    'Taux' tx_horr));
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le % d'avantage social
      -- pour occasionnel embauché moins d'un an dans les entrées d'élément.
      -- Si absent aller chercher la valeur par défaut
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_avant_socl(pn_id_afect IN NUMBER,
                                  pd_dt_efect IN DATE) IS
         SELECT fnd_number.canonical_to_number(DECODE(rea.va_entre_elemn,
                                                      NULL,
                                                      DECODE(rea.in_va_entre_deft,
                                                             'Y',
                                                             NVL(pliv.default_VALUE,
                                                                 rea.va_entre_deft)),
                                                      rea.va_entre_elemn)) compn_avant_socl
           FROM xxgir_rh_elemn_afect_v  rea,
                pay_link_input_values_f pliv
          WHERE rea.id_afect = pn_id_afect
            AND pliv.input_value_id = rea.id_va_entre_elemn
            AND pliv.element_link_id = rea.id_lien_elemn
               -- Valide pour la date du gain
            AND TRUNC(pd_dt_efect) BETWEEN rea.pee_dt_debut_efect AND rea.pee_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pel_dt_debut_efect AND rea.pel_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pet_dt_debut_efect AND rea.pet_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.piv_dt_debut_efect AND rea.piv_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.peev_dt_debut_efect AND rea.peev_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN pliv.effective_start_date AND pliv.effective_end_date
            AND (regexp_instr(rea.cd_elemn,
                              cv_cd_elemn_avant_socl,
                              1,
                              1,
                              0,
                              'i') > 0)
            AND (regexp_instr(rea.nm_va_entre_elemn,
                              cv_nm_pc,
                              1,
                              1,
                              0,
                              'i') > 0);
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect := 0;
      vlTAB_fdt_h620.DELETE;
      --
      <<fusion>>
      FOR REC_CUR_fusn IN CUR_fusn LOOP
         --
         IF vln_id_afect <> REC_CUR_fusn.id_afect THEN
            --
            -- Ne faire qu'une fois par affectation
            --
            vln_id_afect := REC_CUR_fusn.id_afect;
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         p_log('16-fusion -id_afect= ' || vln_id_afect,
               vlv_nm_procd_fonct);
         p_log('16-fusion -elemn= ' || REC_CUR_fusn.id_entre_elemn,
               vlv_nm_procd_fonct);
         --
         -- Retouche 183  On applique la clef comptable sur l'élément prime car c'est lui qui est payé
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_fusn.dt_debut,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_fusn.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         -- 6.16.1 Rechercher dans la table des transactions H620
         --
         vgv_etape := '6.16.1';
         --
         <<chaque_h620>>
         FOR REC_CUR_trouv_h620 IN CUR_trouv_h620(REC_CUR_fusn.id_entre_elemn) LOOP
            --
            vln_index := 0;
            --
            vln_tx_mt := 0;
            --
            vln_h620_tx_mt := fnd_number.canonical_to_number(REC_CUR_trouv_h620.tx_mt) / 100;
            --
            p_log('16-h620 -mt_620= ' || vln_h620_tx_mt,
                  vlv_nm_procd_fonct);
            p_log('16-h620 -cd gain= ' || REC_CUR_trouv_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('16-h620 -statut= ' || REC_CUR_trouv_h620.statu_trans,
                  vlv_nm_procd_fonct);
            --
            -- 6.16.3  Inscrire le rejet pour les transaction H620 commun à la liste fusionnée
            --
            IF REC_CUR_trouv_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.16.3 - id_trans = ' || REC_CUR_trouv_h620.id_trans_h620;
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               FOR REC_CUR_fdt_h620 IN CUR_fdt_h620(REC_CUR_trouv_h620.id_trans_h620) LOOP
                  --
                  p_ajout_rejt(pn_id_afect       => vln_id_afect,
                               pn_id_entre_elemn => REC_CUR_fusn.id_entre_elemn,
                               pv_cd_ereur       => 'GIR-100153',
                               pn_id_trans       => REC_CUR_trouv_h620.id_trans_h620,
                               pd_dt_perd_couvr  => REC_CUR_trouv_h620.dt_perd_debut,
                               pv_nm_procd       => vlv_nm_procd_fonct,
                               pv_no_emplo       => vlrec_persn.no_emplo,
                               pv_cd_gain        => REC_CUR_trouv_h620.cd_gain,
                               pn_id_contr_fdt   => REC_CUR_fdt_h620.id_contr_fdt);
                  --
               END LOOP;
               --
            ELSE
               --
               vgv_etape := '6.16.4 - id_trans = ' || REC_CUR_trouv_h620.id_trans_h620;
               --
               -- 6.16.4
               --
               <<calcl_hh_fdt>>
               FOR REC_CUR_calcl_hh_fdt IN CUR_calcl_hh_fdt(REC_CUR_trouv_h620.id_trans_h620,
                                                            REC_CUR_fusn.dt_debut,
                                                            REC_CUR_fusn.dt_fin) LOOP
                  --
                     \* Retouche 183 La clef est sur l'élément de fusion
                  P_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                                     pd_dt_afect     => REC_CUR_calcl_hh_fdt.dt_gain,
                                     pv_id_type_paie => cv_id_type_paie_varbl,
                                     pREC_ventl_cout => vlREC_cle_compt);
                     *\
                  --
                  vgv_etape := '6.16.4.2.1 - id_elemn = ' || REC_CUR_calcl_hh_fdt.id_entre_elemn;
                  --
                  -- 6.16.4.2.1
                  --
                  p_log('16-heure -id  ' || REC_CUR_trouv_h620.id_trans_h620,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -bloc  ' || REC_CUR_calcl_hh_fdt.id_bloc_temps,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -version  ' || REC_CUR_calcl_hh_fdt.no_versn_objet,
                        vlv_nm_procd_fonct);
                  --
                  vln_pc_avant_socl := 0;
                  --
                  IF REC_CUR_fusn.in_type_liste = 'P' THEN
                     --
                     -- Retouche 170
                     -- On utilise le type de l'élément traité car c'est lui qui est dans la liste d'égibilité
                     vln_id_type_elemn := REC_CUR_calcl_hh_fdt.id_type_elemn;
                     --
                     vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                     pd_dt_efect => REC_CUR_calcl_hh_fdt.dt_gain);
                     --
                     -- 6.16.4.2.2
                     --
                     IF NVL(vlrec_persn.catgr_emplo,
                            '!') = cv_catgr_emplo_ocasn THEN
                        --
                        vgv_etape := '6.16.4.2.2 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                        --
                        OPEN CUR_elemn_avant_socl(vln_id_afect,
                                                  REC_CUR_calcl_hh_fdt.dt_gain);
                        --
                        FETCH CUR_elemn_avant_socl
                           INTO vln_pc_avant_socl;
                        --
                        IF CUR_elemn_avant_socl%NOTFOUND THEN
                           --
                           vln_pc_avant_socl := 0;
                           --
                        END IF;
                        --
                        CLOSE CUR_elemn_avant_socl;
                        --
                     END IF;
                     --
                     -- 6.16.4.2.1.1 et  6.16.4.9.2.1
                     --
                     vln_mt_calcl := (REC_CUR_calcl_hh_fdt.nb_hh_signe * vln_tx_horr *
                                     (NVL(REC_CUR_fusn.va_pc,
                                           0) / 100)
                                     -- 6.16.4.2.2 Tenir compte du pourcentage pour avantages sociaux
                                     * (1 + NVL(vln_pc_avant_socl,
                                                 0) / 100));
                     --
                  ELSE
                     -- prorata
                     --
                     vgv_etape := '6.16.4.2.3 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                     --
                     -- Retouche 170
                     -- On utilise le type de l'élément de fusion car c'est lui qui détermine le Taux
                     vln_id_type_elemn := REC_CUR_fusn.id_type_elemn;
                     --
                     -- Le tx_horaire est celui inscrit dans l'élément au prorata
                     --
                     vln_tx_horr := REC_CUR_fusn.va_tx;
                     --
                     -- 6.16.4.2.3
                     --
                     vln_mt_calcl := (REC_CUR_calcl_hh_fdt.nb_hh_signe * REC_CUR_fusn.va_tx * REC_CUR_fusn.va_factr);
                     --
                  END IF;
                  --
                  -- Retouche 170
                  --
                  vlv_tx_mt := fv_convr_nb_decml_carct(vln_mt_calcl);
                  --
                  vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
                  --
                  p_log('16-heure -id_afect  ' || vln_id_afect,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -element ' || REC_CUR_calcl_hh_fdt.id_entre_elemn,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -elem fusion' || REC_CUR_fusn.id_entre_elemn,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -taux h  ' || vlv_tx_horr,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -montant  ' || vln_mt_calcl,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -cd sagip  ' || REC_CUR_trouv_h620.cd_gain,
                        vlv_nm_procd_fonct);
                  p_log('16-heure -dt_gain  ' || fnd_date.date_to_displaydate(REC_CUR_calcl_hh_fdt.dt_gain),
                        vlv_nm_procd_fonct);
                  --
                  -- 6.16.4.9.3
                  --
                  -- Stocker les valeurs pour la création massive des transactions H620 dans gir_rh_fdt
                  --
                  vln_index := vln_index + 1;
                  --
                  vltab_fdt_h620(vln_index).id_afect := vln_id_afect;
                  -- Retouche 170
                  vltab_fdt_h620(vln_index).id_type_elemn := vln_id_type_elemn;
                  vltab_fdt_h620(vln_index).dt_gain := REC_CUR_calcl_hh_fdt.dt_gain;
                  vltab_fdt_h620(vln_index).id_entre_elemn := REC_CUR_calcl_hh_fdt.id_entre_elemn;
                  vltab_fdt_h620(vln_index).cd_gain := REC_CUR_calcl_hh_fdt.cd_gain;
                  vltab_fdt_h620(vln_index).nb_hh := REC_CUR_calcl_hh_fdt.nb_hh;
                  vltab_fdt_h620(vln_index).nb_hh_signe := REC_CUR_calcl_hh_fdt.nb_hh_signe;
                  vltab_fdt_h620(vln_index).dt_debut := REC_CUR_calcl_hh_fdt.dt_debut;
                  vltab_fdt_h620(vln_index).hh_debut := REC_CUR_calcl_hh_fdt.hh_debut;
                  vltab_fdt_h620(vln_index).dt_fin := REC_CUR_calcl_hh_fdt.dt_fin;
                  vltab_fdt_h620(vln_index).hh_fin := REC_CUR_calcl_hh_fdt.hh_fin;
                  vltab_fdt_h620(vln_index).cd_paiem := REC_CUR_calcl_hh_fdt.cd_paiem;
                  vltab_fdt_h620(vln_index).id_bloc_temps := REC_CUR_calcl_hh_fdt.id_bloc_temps;
                  vltab_fdt_h620(vln_index).no_versn_objet := REC_CUR_calcl_hh_fdt.no_versn_objet;
                  vltab_fdt_h620(vln_index).sectn := REC_CUR_calcl_hh_fdt.sectn;
                  vltab_fdt_h620(vln_index).clas := REC_CUR_calcl_hh_fdt.clas;
                  vltab_fdt_h620(vln_index).id_persn := vlrec_persn.id_persn;
                  vltab_fdt_h620(vln_index).unite_admin := vlrec_cle_compt.unite_admin;
                  vltab_fdt_h620(vln_index).type_budgt := vlrec_cle_compt.type_budgt;
                  vltab_fdt_h620(vln_index).progr := vlrec_cle_compt.progr;
                  vltab_fdt_h620(vln_index).captl := vlrec_cle_compt.captl;
                  vltab_fdt_h620(vln_index).budgt := vlrec_cle_compt.budgt;
                  vltab_fdt_h620(vln_index).minst := NVL(vlrec_cle_compt.minst,
                                                         '000');
                  vltab_fdt_h620(vln_index).centr_respn := vlrec_cle_compt.centr_respn;
                  vltab_fdt_h620(vln_index).tx_mt := vlv_tx_mt;
                  vltab_fdt_h620(vln_index).tx_mt_signe := vln_mt_calcl;
                  vltab_fdt_h620(vln_index).tx_horr := vlv_tx_horr;
                  --
                  -- Accumuler les montants pour comparer au montant inscrit dans la H620
                  --
                  vln_tx_mt := vln_tx_mt + vln_mt_calcl;
                  --
               END LOOP calcl_hh_fdt;
               --
               -- 6.16.4.3
               --
               <<calcl_mt_fixe>>
               FOR REC_CUR_calcl_mt_fixe IN CUR_calcl_mt_fixe(vln_id_afect) LOOP
                  --
                  vgv_etape := '6.16.4.3 - id_elemn = ' || REC_CUR_calcl_mt_fixe.id_entre_elemn;
                  --
                  -- La date de gain doit être à l'intérieur de la validité de la prime à pourcentage
                  --
                  IF REC_CUR_calcl_mt_fixe.dt_gain <= REC_CUR_fusn.dt_fin AND
                     REC_CUR_calcl_mt_fixe.dt_gain >= REC_CUR_fusn.dt_debut AND
                     REC_CUR_fusn.in_type_liste = 'P' THEN
                     --
                     p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_calcl_mt_fixe.id_entre_elemn,
                                   pd_dt_efect       => REC_CUR_calcl_mt_fixe.dt_gain,
                                   prec_dt_hh        => vlrec_dt_hh);
                     --
                     vln_pc_avant_socl := 0;
                     --
                     -- 6.16.4.4
                     --
                     IF NVL(vlrec_persn.catgr_emplo,
                            '!') = cv_catgr_emplo_ocasn THEN
                        --
                        vgv_etape := '6.16.4.4 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                        --
                        OPEN CUR_elemn_avant_socl(vln_id_afect,
                                                  REC_CUR_calcl_mt_fixe.dt_gain);
                        --
                        FETCH CUR_elemn_avant_socl
                           INTO vln_pc_avant_socl;
                        --
                        IF CUR_elemn_avant_socl%NOTFOUND THEN
                           --
                           vln_pc_avant_socl := 0;
                           --
                        END IF;
                        --
                        CLOSE CUR_elemn_avant_socl;
                        --
                     END IF;
                     --
                     -- 6.16.4.2.1.1 et  6.16.4.9.2.1  Voir 6.15.2.7.2.1.2 pour la formule
                     --
                     vln_mt_calcl := (REC_CUR_calcl_mt_fixe.mt_fixe * (NVL(REC_CUR_fusn.va_pc,
                                                                           0) / 100)
                                     -- 6.16.4.4 Tenir compte du pourcentage pour avantages sociaux
                                     * (1 + NVL(vln_pc_avant_socl,
                                                 0) / 100));
                     --
                     p_log('16-fixe -id_afect  ' || vln_id_afect,
                           vlv_nm_procd_fonct);
                     p_log('16-fixe -element ' || REC_CUR_calcl_mt_fixe.id_entre_elemn,
                           vlv_nm_procd_fonct);
                     p_log('16-fixe -elem fusion' || REC_CUR_fusn.id_entre_elemn,
                           vlv_nm_procd_fonct);
                     p_log('16-fixe -taux h  ' || vlv_tx_horr,
                           vlv_nm_procd_fonct);
                     p_log('16-fixe -montant  ' || vln_mt_calcl,
                           vlv_nm_procd_fonct);
                     p_log('16-fixe -cd sagip  ' || REC_CUR_trouv_h620.cd_gain,
                           vlv_nm_procd_fonct);
                     p_log('16-fixe -dt_gain  ' || fnd_date.date_to_displaydate(REC_CUR_calcl_mt_fixe.dt_gain),
                           vlv_nm_procd_fonct);
                     --
                     -- 6.16.4.9.3
                     --
                     -- Stocker les valeurs pour la création massive des transactions H620 dans gir_rh_fdt
                     --
                     vlv_tx_mt := fv_convr_nb_decml_carct(vln_mt_calcl);
                     --
                     vlv_tx_horr := NULL;
                     --
                     vln_index := vln_index + 1;
                     --
                     vltab_fdt_h620(vln_index).id_afect := vln_id_afect;
                     -- Retouche 170
                     -- Le type doit faire partie des éléments éligibles au pourcentage
                     vltab_fdt_h620(vln_index).id_type_elemn := REC_CUR_calcl_mt_fixe.id_type_elemn;
                     vltab_fdt_h620(vln_index).dt_gain := REC_CUR_calcl_mt_fixe.dt_gain;
                     vltab_fdt_h620(vln_index).id_entre_elemn := REC_CUR_fusn.id_entre_elemn;
                     vltab_fdt_h620(vln_index).cd_gain := 'A' || REC_CUR_fusn.cd_sagip;
                     vltab_fdt_h620(vln_index).nb_hh := NULL;
                     vltab_fdt_h620(vln_index).tx_mt := vlv_tx_mt;
                     vltab_fdt_h620(vln_index).nb_hh_signe := NULL;
                     vltab_fdt_h620(vln_index).tx_mt_signe := vln_mt_calcl;
                     vltab_fdt_h620(vln_index).dt_debut := vlrec_dt_hh.dt_debut;
                     vltab_fdt_h620(vln_index).hh_debut := vlrec_dt_hh.hh_debut;
                     vltab_fdt_h620(vln_index).dt_fin := vlrec_dt_hh.dt_fin;
                     vltab_fdt_h620(vln_index).hh_fin := vlrec_dt_hh.hh_fin;
                     vltab_fdt_h620(vln_index).id_persn := vlrec_persn.id_persn;
                     vltab_fdt_h620(vln_index).unite_admin := vlrec_cle_compt.unite_admin;
                     vltab_fdt_h620(vln_index).type_budgt := vlrec_cle_compt.type_budgt;
                     vltab_fdt_h620(vln_index).progr := vlrec_cle_compt.progr;
                     vltab_fdt_h620(vln_index).captl := vlrec_cle_compt.captl;
                     vltab_fdt_h620(vln_index).budgt := vlrec_cle_compt.budgt;
                     vltab_fdt_h620(vln_index).minst := NVL(vlrec_cle_compt.minst,
                                                            '000');
                     vltab_fdt_h620(vln_index).centr_respn := vlrec_cle_compt.centr_respn;
                     vltab_fdt_h620(vln_index).cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                                                   pn_id_entre_elemn    => REC_CUR_calcl_mt_fixe.id_entre_elemn,
                                                                                   pd_dt_efect          => REC_CUR_calcl_mt_fixe.dt_gain,
                                                                                   pv_nm_va_entre_elemn => cv_nm_cd_paiem);
                     vltab_fdt_h620(vln_index).tx_horr := vlv_tx_horr;
                     vltab_fdt_h620(vln_index).id_bloc_temps := vlrec_dt_hh.id_bloc_temps;
                     vltab_fdt_h620(vln_index).no_versn_objet := vlrec_dt_hh.no_versn_objet;
                     vltab_fdt_h620(vln_index).sectn := vlrec_dt_hh.sectn;
                     vltab_fdt_h620(vln_index).clas := vlrec_dt_hh.clas;
                     --
                     vln_tx_mt := vln_tx_mt + vln_mt_calcl;
                     --
                  END IF;
                  --
               END LOOP calcl_mt_fixe;
               --
               -- 6.16.4.5
               --
               <<calcl_hh_absen>>
               FOR REC_CUR_calcl_hh_absen IN CUR_calcl_hh_absen(vln_id_afect) LOOP
                  --
                  vgv_etape := '6.16.4.5 - id_elemn = ' || REC_CUR_calcl_hh_absen.id_entre_elemn;
                  --
                  -- La date de gain doit être à l'intérieur de la validité de la prime
                  --
                  IF REC_CUR_calcl_hh_absen.dt_gain <= REC_CUR_fusn.dt_fin AND
                     REC_CUR_calcl_hh_absen.dt_gain >= REC_CUR_fusn.dt_debut THEN
                     --
                     p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_calcl_hh_absen.id_entre_elemn,
                                   pd_dt_efect       => REC_CUR_calcl_hh_absen.dt_gain,
                                   prec_dt_hh        => vlrec_dt_hh);
                     --
                     IF REC_CUR_fusn.in_type_liste = 'P' THEN
                        --
                        -- Retouche 170
                        -- On utilise le type de l'élément traité car c'est lui qui est dans la liste d'égibilité
                        vln_id_type_elemn := REC_CUR_calcl_hh_absen.id_type_elemn;
                        --
                        -- INC00016972
                        IF REC_CUR_calcl_hh_absen.tx_horr IS NOT NULL THEN
                           vln_tx_horr := REC_CUR_calcl_hh_absen.tx_horr;
                        ELSE
                           vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                           pd_dt_efect => REC_CUR_calcl_hh_absen.dt_gain);
                        END IF;
                        --
                        vln_pc_avant_socl := 0;
                        --
                        IF NVL(vlrec_persn.catgr_emplo,
                               '!') = cv_catgr_emplo_ocasn THEN
                           --
                           vgv_etape := '6.16.4.6 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                           --
                           -- 6.16.4.6 Tenir compte du pourcentage pour avantages sociaux
                           --
                           OPEN CUR_elemn_avant_socl(vln_id_afect,
                                                     REC_CUR_calcl_hh_absen.dt_gain);
                           --
                           FETCH CUR_elemn_avant_socl
                              INTO vln_pc_avant_socl;
                           --
                           IF CUR_elemn_avant_socl%NOTFOUND THEN
                              --
                              vln_pc_avant_socl := 0;
                              --
                           END IF;
                           --
                           CLOSE CUR_elemn_avant_socl;
                           --
                        END IF;
                        --
                        vln_mt_calcl := (REC_CUR_calcl_hh_absen.nb_hh * vln_tx_horr * (NVL(REC_CUR_fusn.va_pc,
                                                                                           0) / 100)
                                        -- 6.16.4.2.2 Tenir compte du pourcentage pour avantages sociaux
                                        * (1 + NVL(vln_pc_avant_socl,
                                                    0) / 100));
                        --
                     ELSE
                        -- taux annuel prorata
                        --
                        -- Retouche 170
                        -- On utilise le type de l'élément de fusion car c'est lui qui détermine le Taux
                        vln_id_type_elemn := REC_CUR_fusn.id_type_elemn;
                        --
                        -- Le tx_horaire est celui inscrit dans l'élément au prorata
                        --
                        vln_tx_horr := REC_CUR_fusn.va_tx;
                        --
                        vln_mt_calcl := (REC_CUR_calcl_hh_absen.nb_hh * REC_CUR_fusn.va_tx * REC_CUR_fusn.va_factr);
                        --
                     END IF; -- Si c'est un élément à pourcentage
                     --
                     -- Retouche 170
                     --
                     vlv_tx_mt := fv_convr_nb_decml_carct(vln_mt_calcl);
                     --
                     vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
                     --
                     p_log('16-absen -id_afect  ' || vln_id_afect,
                           vlv_nm_procd_fonct);
                     p_log('16-absen -element ' || REC_CUR_calcl_hh_absen.id_entre_elemn,
                           vlv_nm_procd_fonct);
                     p_log('16-absen -elem fusion' || REC_CUR_fusn.id_entre_elemn,
                           vlv_nm_procd_fonct);
                     p_log('16-absen -taux h  ' || vlv_tx_horr,
                           vlv_nm_procd_fonct);
                     p_log('16-absen -montant  ' || vln_mt_calcl,
                           vlv_nm_procd_fonct);
                     p_log('16-absen -cd sagip  ' || REC_CUR_trouv_h620.cd_gain,
                           vlv_nm_procd_fonct);
                     p_log('16-absen -dt_gain  ' || fnd_date.date_to_displaydate(REC_CUR_calcl_hh_absen.dt_gain),
                           vlv_nm_procd_fonct);
                     --
                     -- 6.16.4.9.4
                     --
                     -- Stocker les valeurs pour la création massive des transactions H620 dans gir_rh_fdt
                     --
                     vln_index := vln_index + 1;
                     --
                     vltab_fdt_h620(vln_index).id_afect := vln_id_afect;
                     -- Retouche 170
                     -- Le type doit faire partie des éléments éligibles au pourcentage et taux annuel
                     vltab_fdt_h620(vln_index).id_type_elemn := vln_id_type_elemn;
                     vltab_fdt_h620(vln_index).dt_gain := REC_CUR_calcl_hh_absen.dt_gain;
                     vltab_fdt_h620(vln_index).id_entre_elemn := REC_CUR_fusn.id_entre_elemn;
                     vltab_fdt_h620(vln_index).cd_gain := 'A' || REC_CUR_fusn.cd_sagip;
                        vltab_fdt_h620(vln_index).nb_hh :=   \* Retouche 123
                                                                                      xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(pn_temps_reel => ABS(REC_CUR_calcl_hh_absen.nb_hh)
                                                                                                                            ,pv_formt => 'HHHMM');
                                                                                                                                         *\
                      fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_calcl_hh_absen.nb_hh,
                                                                               pv_cd_gain       => REC_CUR_trouv_h620.cd_gain,
                                                                               pd_dt_gain       => REC_CUR_calcl_hh_absen.dt_gain,
                                                                               pn_assignment_id => vln_id_afect); -- Edgar Doiron INC19219
                     vltab_fdt_h620(vln_index).tx_mt := vlv_tx_mt;
                     vltab_fdt_h620(vln_index).nb_hh_signe := REC_CUR_calcl_hh_absen.nb_hh;
                     vltab_fdt_h620(vln_index).tx_mt_signe := vln_mt_calcl;
                     vltab_fdt_h620(vln_index).dt_debut := vlrec_dt_hh.dt_debut;
                     vltab_fdt_h620(vln_index).hh_debut := vlrec_dt_hh.hh_debut;
                     vltab_fdt_h620(vln_index).dt_fin := vlrec_dt_hh.dt_fin;
                     vltab_fdt_h620(vln_index).hh_fin := vlrec_dt_hh.hh_fin;
                     vltab_fdt_h620(vln_index).id_persn := vlrec_persn.id_persn;
                     vltab_fdt_h620(vln_index).unite_admin := vlrec_cle_compt.unite_admin;
                     vltab_fdt_h620(vln_index).type_budgt := vlrec_cle_compt.type_budgt;
                     vltab_fdt_h620(vln_index).progr := vlrec_cle_compt.progr;
                     vltab_fdt_h620(vln_index).captl := vlrec_cle_compt.captl;
                     vltab_fdt_h620(vln_index).budgt := vlrec_cle_compt.budgt;
                     vltab_fdt_h620(vln_index).minst := NVL(vlrec_cle_compt.minst,
                                                            '000');
                     vltab_fdt_h620(vln_index).centr_respn := vlrec_cle_compt.centr_respn;
                     vltab_fdt_h620(vln_index).cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                                                   pn_id_entre_elemn    => REC_CUR_calcl_hh_absen.id_entre_elemn,
                                                                                   pd_dt_efect          => REC_CUR_calcl_hh_absen.dt_gain,
                                                                                   pv_nm_va_entre_elemn => cv_nm_cd_paiem);
                     vltab_fdt_h620(vln_index).tx_horr := vlv_tx_horr;
                     vltab_fdt_h620(vln_index).id_bloc_temps := vlrec_dt_hh.id_bloc_temps;
                     vltab_fdt_h620(vln_index).no_versn_objet := vlrec_dt_hh.no_versn_objet;
                     vltab_fdt_h620(vln_index).sectn := vlrec_dt_hh.sectn;
                     vltab_fdt_h620(vln_index).clas := vlrec_dt_hh.clas;
                     --
                     vln_tx_mt := vln_tx_mt + vln_mt_calcl;
                     --
                  END IF;
                  --
               END LOOP calcl_hh_absen;
               --
               vgv_etape := '6.16.4.7 - id_trans = ' || REC_CUR_trouv_h620.id_trans_h620;
               --
               -- 6.16.4.7
               --
               -- Arrondir le montant issu des calculs pour comparer au montant arrondi dans la table H620
               --
               vln_tx_mt := ROUND(vln_tx_mt,
                                  2);
               --
               p_log('mt_h620=' || vln_h620_tx_mt || ', calcul=' || vln_tx_mt,
                     vlv_nm_procd_fonct);
               --
               -- Retouche 183 Aller chercher le budget et centre responsable au moment de la création h620.
               --
               OPEN CUR_fdt_h620(REC_CUR_trouv_h620.id_trans_h620);
               --
               FETCH CUR_fdt_h620
                  INTO REC_fdt_h620;
               --
               CLOSE CUR_fdt_h620;
               --
               IF (vln_tx_mt - vln_h620_tx_mt) <> 0 OR
                 -- Retouche 183
                  REC_fdt_h620.budgt <> vlrec_cle_compt.budgt OR
                  REC_fdt_h620.centr_respn <> vlrec_cle_compt.centr_respn THEN
                  --
                  vgv_etape := '6.16.4.9 - id_trans = ' || REC_CUR_trouv_h620.id_trans_h620;
                  --
                  -- 6.16.4.9 annuler trans H620
                  -- 6.16.4.9.2 annuler gir_rh_fdt
                  UPDATE gir_rh_fdt
                     SET in_trans_anul = 'O'
                   WHERE id_trans = REC_CUR_trouv_h620.id_trans_h620
                     AND nm_fiche = 'H620'
                     AND in_trans_anul = 'N';
                  --
                  -- 6.16.4.9.3 6.16.4.9.4 Créer gir_rh_fdt H620
                  --
                  <<fdt>>
                  FOR vln_cp IN 1 .. vlTAB_fdt_h620.COUNT LOOP
                     --
                     vgv_etape := '6.16.4.9.3 - id_elemn = ' || vltab_fdt_h620(vln_cp).id_entre_elemn;
                     --
                     -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := vltab_fdt_h620(vln_cp).cd_gain;
                     vgrec_gir_rh_fdt.elemn_entry_id          := vltab_fdt_h620(vln_cp).id_entre_elemn;
                     vgrec_gir_rh_fdt.elemn_type_id           := vltab_fdt_h620(vln_cp).id_type_elemn;
                     vgrec_gir_rh_fdt.dt_gain                 := vltab_fdt_h620(vln_cp).dt_gain;
                     vgrec_gir_rh_fdt.nb_hh_signe             := vltab_fdt_h620(vln_cp).nb_hh_signe;
                     vgrec_gir_rh_fdt.nb_hh                   := vltab_fdt_h620(vln_cp).nb_hh;
                     vgrec_gir_rh_fdt.cd_paiem                := vltab_fdt_h620(vln_cp).cd_paiem;
                     vgrec_gir_rh_fdt.tx_horr                 := vltab_fdt_h620(vln_cp).tx_horr;
                     vgrec_gir_rh_fdt.tx_mt                   := vltab_fdt_h620(vln_cp).tx_mt;
                     vgrec_gir_rh_fdt.tx_mt_signe             := vltab_fdt_h620(vln_cp).tx_mt_signe;
                     vgrec_gir_rh_fdt.id_afect                := vltab_fdt_h620(vln_cp).id_afect;
                     vgrec_gir_rh_fdt.id_persn                := vltab_fdt_h620(vln_cp).id_persn;
                     vgrec_gir_rh_fdt.minst                   := vltab_fdt_h620(vln_cp).minst;
                     vgrec_gir_rh_fdt.unite_admin             := vltab_fdt_h620(vln_cp).unite_admin;
                     vgrec_gir_rh_fdt.type_budgt              := vltab_fdt_h620(vln_cp).type_budgt;
                     vgrec_gir_rh_fdt.progr                   := vltab_fdt_h620(vln_cp).progr;
                     vgrec_gir_rh_fdt.captl                   := vltab_fdt_h620(vln_cp).captl;
                     vgrec_gir_rh_fdt.budgt                   := vltab_fdt_h620(vln_cp).budgt;
                     vgrec_gir_rh_fdt.centr_respn             := vltab_fdt_h620(vln_cp).centr_respn;
                     vgrec_gir_rh_fdt.dt_debut                := vltab_fdt_h620(vln_cp).dt_debut;
                     vgrec_gir_rh_fdt.hh_debut                := vltab_fdt_h620(vln_cp).hh_debut;
                     vgrec_gir_rh_fdt.dt_fin                  := vltab_fdt_h620(vln_cp).dt_fin;
                     vgrec_gir_rh_fdt.hh_fin                  := vltab_fdt_h620(vln_cp).hh_fin;
                     vgrec_gir_rh_fdt.sectn                   := vltab_fdt_h620(vln_cp).sectn;
                     vgrec_gir_rh_fdt.clas                    := vltab_fdt_h620(vln_cp).clas;
                     vgrec_gir_rh_fdt.id_bloc_temps           := vltab_fdt_h620(vln_cp).id_bloc_temps;
                     vgrec_gir_rh_fdt.no_versn_objet          := vltab_fdt_h620(vln_cp).no_versn_objet;
                     --
                     vgv_etape := '6.16.4.9.4 - id_elemn = ' || vgrec_gir_rh_fdt.elemn_entry_id;
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                  END LOOP fdt;
                  --
                  -- 6.16.4.9.5 créer H010 dans gir_rh_fdt quand H620 = Accepté
                  --
                  IF REC_CUR_trouv_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                     --
                     vgv_etape := '6.16.4.9.5 - id_trans = ' || REC_CUR_trouv_h620.id_trans_h620;
                     --
                     p_log('16-acept - id_trans=' || REC_CUR_trouv_h620.id_trans_h620,
                           vlv_nm_procd_fonct);
                     p_log('16-acept - cd_gain=' || REC_CUR_trouv_h620.cd_gain,
                           vlv_nm_procd_fonct);
                     p_log('16-acept - id_afect=' || REC_CUR_trouv_h620.id_afect,
                           vlv_nm_procd_fonct);
                     --
                     vgvar_liste_id_h620_h010.extend;
                     vgvar_liste_id_h620_h010(vgVAR_liste_id_h620_h010.COUNT) := REC_CUR_trouv_h620.id_trans_h620;
                     --
                  END IF;
                  --
                  vgv_etape := '6.16.4.9.6 - id_trans = ' || REC_CUR_trouv_h620.id_trans_h620;
                  --
                  -- 6.16.4.9.6
                  --
                  vgtab_trans_anul_h620(vgTAB_trans_anul_h620.COUNT + 1) := REC_CUR_trouv_h620.id_trans_h620;
                  --
               END IF;
               --
               vgv_etape := '6.16.4.8 - id_trans = ' || REC_CUR_trouv_h620.id_trans_h620;
               --
               -- 6.16.4.8  suivant
               --
               -- Préparer la table pour le prochain enregistrement
               --
               vlTAB_fdt_h620.DELETE;
               --
            END IF;
            --
         END LOOP chaque_h620;
         --
      END LOOP fusion;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
         \***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_16.
         ***********************************************************************************\
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_fdt_h620%ISOPEN THEN
            CLOSE CUR_fdt_h620;
         END IF;
         --
         -- Vider les objets.
         --
         vlTAB_fdt_h620.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         fnd_file.put_line(fnd_file.log,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         fnd_file.put_line(fnd_file.log,
                           ' est en erreur à l''étape 6.16 sous étape : ' || vgv_etape);
         fnd_file.put_line(fnd_file.log,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace || ' -> ' || SQLERRM);
         --
         vgv_texte_ereur := SUBSTR(dbms_utility.format_error_backtrace,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_16;
   */
   --
   -- Étape 6.17
   -- ============================================================================
   -- P_verfr_elemn_etape_6_17
   -- ============================================================================
   /**************************************************************************
   * But : Vérification de la suppression d'éléments à pourcentage et d'élément basé
   *       sur le taux annuel - prorata en fonction des heures et du taux horaire.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-21  INC00016333  Corriger les SELECT utilisant le id_type_elemn
   *                                               pour utiliser le id_entre_elemn quand on parle de liste d'éléments.
   * Michel Dessureault   2012-12-05  INC00016333  Remplacer new par old car traite des destructions
   * Michel Dessureault   2013-06-05  INC00018519  Vérifier l'existence de l'élément pour la période courante lors de la suppression d'un élément récurrent du H620.
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_17(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_17';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_verfr_elemn_etape_6_17';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h620.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vltab_liste_elemn_suprm tab_elemn; -- Table PL/SQL pour les numéros d'éléments supprimés.
      vlvar_liste_elemn_suprm sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de type NUMBER pour la liste des éléments supprimés.
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver les éléments supprimés.
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_suprm IS
         SELECT rse.element_entry_id id_entre_elemn
           FROM gir_rh_suivi_entre_elemn_paie rse, -- INC-89949
                xxgir_rh_afect_tempr          rat
          WHERE -- 6.17.1.1 Élément lié à l'affectation
          rse.assignment_id = rat.id_afect
         --DDC 209235 par employé (=assignment_id)
          AND rat.id_afect = pn_assignment_id
          AND rat.in_type_paie = cv_id_type_paie_varbl
         -- 6.17.1.2 Élément d'entrée présent dans les jeux pourcentage et taux prorata annuel
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste IN ('jeu_pc',
                                    'jeu_tx_anuel')
              AND reht.id_type_elemn = rse.element_type_id)
         -- 6.17.1.3 Élément avec statut supprimé (trans_type = 'D' Suppression (Destruction))
          AND rse.trans_type = 'D'
         -- 6.17.1.4 Élément non traité (Statut = « Non traité »)
          AND rse.in_trait = 'N'
         -- 6.17.1.5 Élément supprimé en vigueur dans la période de paie courante
          AND rse.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
          AND rse.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
         -- INC00018519 Il ne faut pas qu'il existe un datetrack encore valide dans la période courante
          AND NOT EXISTS (SELECT 'X'
             FROM pay_element_entries_f pee
            WHERE pee.element_entry_id = rse.element_entry_id
              AND pee.effective_end_date >= vgrec_perd_paie_varbl.dt_debut);
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver les éléments qui ont des transactions H620.
      ----------------------------------------------------------------------
      CURSOR CUR_trans_suprm IS
         WITH liste_elemn_suprm AS
          (SELECT column_value id_entre_elemn
             FROM TABLE(vlvar_liste_elemn_suprm)),
         liste_elemn_lie AS
          ( -- Trouver l'id de l'élément lié au special inputs non récurrent
           SELECT rea.id_entre_elemn
             FROM xxgir_rh_elemn_afect_v rea,
                   (SELECT TRIM(REGEXP_REPLACE(rea.nm_elemn,
                                               cv_nm_specl_input,
                                               '',
                                               1,
                                               1,
                                               'i')) nm_elemn,
                           COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
                      FROM xxgir_rh_elemn_afect_v rea
                     WHERE rea.type_procs_elemn = 'N'
                          --DDC 209235 par employé (=assignment_id)
                       AND rea.id_afect = pn_assignment_id
                       AND REGEXP_INSTR(rea.nm_elemn,
                                        cv_nm_specl_input,
                                        1,
                                        1,
                                        0,
                                        'i') > 0
                       AND ( -- possède une date de début à l'intérieur de la période de paie.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_dt_debut,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                            -- possède une date de fin à l'intérieur de la période de paie.
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_dt_fin,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                           -- possède un montant de remplacement.
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_mt_rempl,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                          -- dans la période courante
                       AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.cd_sagip IS NOT NULL) rea1
            WHERE rea.nm_elemn = rea1.nm_elemn
              AND rea1.nbr_va_entre_specl_input = 3
           UNION ALL
           -- trouver l'id de l'élément non récurrent Special inputs
           SELECT id_entre_elemn
             FROM (SELECT rea.id_entre_elemn,
                           rea.id_type_elemn,
                           TRIM(REGEXP_REPLACE(rea.nm_elemn,
                                               cv_nm_specl_input,
                                               '',
                                               1,
                                               1,
                                               'i')) nm_elemn,
                           COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
                      FROM xxgir_rh_elemn_afect_v rea
                     WHERE rea.type_procs_elemn = 'N'
                          --DDC 209235 par employé (=assignment_id)
                       AND rea.id_afect = pn_assignment_id
                       AND REGEXP_INSTR(rea.nm_elemn,
                                        cv_nm_specl_input,
                                        1,
                                        1,
                                        0,
                                        'i') > 0
                       AND ( -- possède une date de début à l'intérieur de la période de paie.
                             (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                           cv_nm_dt_debut,
                                           1,
                                           1,
                                           0,
                                           'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                            -- possède une date de fin à l'intérieur de la période de paie.
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_dt_fin,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                           -- possède un montant de remplacement.
                            (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                          cv_nm_mt_rempl,
                                          1,
                                          1,
                                          0,
                                          'i') > 0 AND rea.va_entre_elemn IS NOT NULL))
                          -- dans la période courante
                       AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                       AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                       AND rea.cd_sagip IS NOT NULL)
            WHERE nbr_va_entre_specl_input = 3)
         SELECT h620.id_trans_h620,
                h620.id_afect,
                fdt.elemn_entry_id id_entre_elemn,
                h620.perd_paie_varbl_du,
                h620.perd_paie_varbl_au,
                h620.statu_trans,
                h620.tx_mt,
                fdt.id_contr_fdt,
                fdt.dt_gain
         
           FROM gir_trans_h620    h620,
                liste_elemn_suprm les,
                gir_rh_fdt        fdt
          WHERE fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620'
               -- 6.17.4.1 Identifiant de l'élément (ELEMENT_ENTRY_ID) de l'enregistrement supprimé.
            AND les.id_entre_elemn = fdt.elemn_entry_id
               -- 6.17.4.2 Élément n'est lié à aucun élément non récurrent 'Special inputs' qui possède un montant de remplacement, une date de début et de fin à l'intérieur de la période de paie.
            AND fdt.elemn_entry_id NOT IN (SELECT lel.id_entre_elemn
                                             FROM liste_elemn_lie lel)
               -- 6.17.4.3 La période de paie de la transaction H620 = période de paie courante
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
               -- 6.17.4.4 Indicateur de transaction annulée = « Non »
            AND h620.in_trans_anul = 'N';
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_etape          := '6.17.1';
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- 6.17.1 Construire la liste des éléments supprimés.
      --
      OPEN CUR_elemn_suprm;
      --
      FETCH CUR_elemn_suprm BULK COLLECT
         INTO vltab_liste_elemn_suprm;
      --
      CLOSE CUR_elemn_suprm;
      --
      -- Initialiser l'objet mémoire avec la liste des éléments supprimés.
      p_initl_objet_memr(ptab_jeu_elemn        => vltab_liste_elemn_suprm,
                         pvar_liste_elemn_memr => vlvar_liste_elemn_suprm);
      --
      -- 6.17.2 aucun élément n'a été supprimé alors, passer au point 6.18
      IF vlTAB_liste_elemn_suprm.EXISTS(1) THEN
         --
         vgv_etape := '6.17.4';
         --
         -- 6.17.4  enregistrements de la liste des éléments supprimés
         --
         <<chaque_h620_suprm>>
         FOR REC_CUR_trans_suprm IN CUR_trans_suprm LOOP
            --
            vgv_etape := '6.17.5 - id_elemn = ' || REC_CUR_trans_suprm.id_entre_elemn;
            --
            --DDC 209235
            vgv_id_entre_elemn := REC_CUR_trans_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
            vld_dt_gain        := REC_CUR_trans_suprm.dt_gain;
            --
            -- 6.17.5.1  Inscrire le rejet pour les transaction H620 avec statut Transféré à SAGIP
            --
            IF REC_CUR_trans_suprm.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.17.5.1 - id_fdt = ' || REC_CUR_trans_suprm.id_contr_fdt;
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               p_ajout_rejt(pn_id_afect       => REC_CUR_trans_suprm.id_afect,
                            pn_id_entre_elemn => REC_CUR_trans_suprm.id_entre_elemn,
                            pv_cd_ereur       => 'GIR-100153',
                            pn_id_trans       => REC_CUR_trans_suprm.id_trans_h620,
                            pd_dt_perd_couvr  => REC_CUR_trans_suprm.perd_paie_varbl_du,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pn_id_contr_fdt   => REC_CUR_trans_suprm.id_contr_fdt);
               --DDC 209235
               vlv_code_erreur_gir := 'GIR-100153';
               vln_id_afect        := REC_CUR_trans_suprm.id_afect;
               vln_id_entre_elemn  := REC_CUR_trans_suprm.id_entre_elemn;
               vln_id_contr_fdt    := REC_CUR_trans_suprm.id_contr_fdt;
               vln_id_trans        := REC_CUR_trans_suprm.id_trans_h620;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               --
               vgv_etape := '6.17.3 - id_elemn = ' || REC_CUR_trans_suprm.id_entre_elemn;
               --
               UPDATE gir_rh_suivi_elemn s
                  SET s.in_trait = 'O'
                WHERE s.element_entry_id = REC_CUR_trans_suprm.id_entre_elemn
                  AND s.in_trait = 'N'
                  AND s.trans_type = 'D';
               --
               -- Début INC-89949
               UPDATE gir_rh_suivi_entre_elemn_paie s
                  SET s.in_trait = 'O'
                WHERE s.element_entry_id = REC_CUR_trans_suprm.id_entre_elemn
                  AND s.in_trait = 'N'
                  AND s.trans_type = 'D';
               -- Fin INC-89949
               --
               vgv_etape := '6.17.5.2 - id_trans = ' || REC_CUR_trans_suprm.id_trans_h620;
               --
               -- 6.17.5.2 supprimer logiquement la transaction H620
               --
               vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_CUR_trans_suprm.id_trans_h620;
               --
               vgv_etape := '6.17.5.2.1 - id_trans = ' || REC_CUR_trans_suprm.id_trans_h620;
               --
               UPDATE gir_rh_fdt fdt
                  SET fdt.in_trans_anul = 'O'
                WHERE fdt.id_trans = REC_CUR_trans_suprm.id_trans_h620
                  AND fdt.nm_fiche = 'H620'
                  AND fdt.in_trans_anul = 'N';
               --
               -- 6.17.5.3 enregistrement à SAGIP de la transaction H620 = Accepté par SAGIP
               --
               IF REC_CUR_trans_suprm.statu_trans = cv_cd_statu_sagip_acept THEN
                  --
                  vgv_etape := '6.17.5.3 - id_trans = ' || REC_CUR_trans_suprm.id_trans_h620;
                  --
                  p_log('123 - id_trans=' || REC_CUR_trans_suprm.id_trans_h620,
                        vlv_nm_procd_fonct);
                  p_log('124 - cd_gain=' || REC_CUR_trans_suprm.id_entre_elemn,
                        vlv_nm_procd_fonct);
                  p_log('125 - id_afect=' || REC_CUR_trans_suprm.id_afect,
                        vlv_nm_procd_fonct);
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_CUR_trans_suprm.id_trans_h620;
                  --
               END IF;
               --
            END IF;
            --
         END LOOP chaque_h620_suprm;
         --
         vgv_etape := '6.17.2';
         --
      END IF;
      --
      -- Vider les objets.
      --
      vlTAB_liste_elemn_suprm.DELETE;
      --
      IF vlVAR_liste_elemn_suprm.EXISTS(1) THEN
         vlVAR_liste_elemn_suprm.DELETE;
      END IF;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_17.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_liste_elemn_suprm.DELETE;
         --
         IF vlVAR_liste_elemn_suprm.EXISTS(1) THEN
            vlVAR_liste_elemn_suprm.DELETE;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80372';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_17;

   --
   -- Étape 6.18
   -- ============================================================================
   -- P_trait_elemn_etape_6_18
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des autres éléments récurrents.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-06  INC00016333  Diviser par 100 les montants provenant de GIR_TRANS_H620 pour comparaison.
   * Michel Dessureault   2013-01-30  Retouche 123 Inscrire les heures en « Heure et minute » ou en « Heure centième » .
   * Michel Dessureault   2013-02-26  INC00017437  Problème de date effective
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Michel Dessureault   2013-06-04  INC00018514  Ajouter dans le critère de vérification de la H620 que celle-ci soit dans la période courante
   * Michel Dessureault   2013-06-14  INC00018584  Ajouter un union sur le select des nombres d'heure
   * Edgar  Doiron        2015-11-03  --DDC175592
   * Geneviève Bélanger   2017-03-07  CHG225373 - pour les gains avec montant, la date de fin doit être la date de fin de la période courante
   * Geneviève Bélanger   2017-03-29  CHG226617 - Commenter le CHG225373
   * Geneviève Bélanger   2017-03-30  CHG226617 - l'étape 6_22 étant remise comme avant, réintégrer le CHG225373
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_18(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_18';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_18';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      -- vln_id_afect        NUMBER;
      --vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_mt_calcl       NUMBER; -- Montant calculé
      vln_mt_total       NUMBER; -- Somme des montants calculés
      vlrec_cle_compt    type_rec_ventl_cout;
      vlrec_persn        type_rec_persn; -- Infos de la personne
      vlrec_dt_hh        type_rec_dt_hh; -- Dates et heures début fin
      vlv_tx_horr        gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vlv_tx_mt          gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      vlv_cd_paiem       gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vln_id_afect       gir_rh_fdt.id_afect%TYPE; -- Identifiant de l'affectation
      vln_id_entre_elemn gir_rh_fdt.elemn_entry_id%TYPE; -- Identifiant de l'entrée d'élément
      vln_id_contr_fdt   gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur traiter les autres éléments récurrents
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_recrn IS
         SELECT reht.id_afect,
                reht.id_entre_elemn,
                reht.id_type_elemn,
                reht.cd_sagip
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = '6_4'
               --DDC 209235 par employé (=assignment_id)
            AND reht.id_afect = pn_assignment_id
          GROUP BY reht.id_afect,
                   reht.id_entre_elemn,
                   reht.id_type_elemn,
                   reht.cd_sagip
         /*DDC 200241 INC 82025*/
         /*  reht.dt_debut,
         reht.dt_fin*/
         /*FIN*/
          ORDER BY reht.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour vérifier le H620.
      ----------------------------------------------------------------------
      -- 6.18.1.3
      CURSOR CUR_verfr_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.statu_trans,
                h620.id_trans_h620
                -- INC00016333 Il faut diviser par 100 pour comparer aux montants calculés.
               ,
                FND_NUMBER.CANONICAL_TO_NUMBER(h620.tx_mt) / 100 mt_h620,
                h620.cd_paiem,
                fdt.dt_gain,
                fdt.id_contr_fdt
                -- Retouche 183 on prend fdt au lieu de h620 car si dans le passé h620 reçoit le présent
               ,
                fdt.budgt,
                fdt.centr_respn
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE -- 6.18.1.3.1
          h620.elemn_entry_id = pn_id_entre_elemn
         -- INC00018514 Transaction pour la période de paie courante.
          AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
          AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
         -- 6.18.1.3.4
          AND h620.in_trans_anul = 'N'
          AND fdt.id_trans = h620.id_trans_h620
          AND fdt.nm_fiche = 'H620';
      --
      -- Retouche 183
      --
      REC_h620 CUR_verfr_h620%ROWTYPE;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le montant fixe.
      ----------------------------------------------------------------------
      -- 6.18.1.1.1
      CURSOR CUR_va_mt_fixe(pn_id_entre_elemn IN NUMBER) IS
         SELECT --INC00017437
          vgrec_perd_paie_varbl.dt_fin dt_efect,
          NULL nb_hh,
          FND_NUMBER.CANONICAL_TO_NUMBER(mt_fixe) mt_fixe,
          NULL va_tx,
          NULL va_factr
           FROM (SELECT id_entre_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                   FROM (SELECT reht.id_entre_elemn,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nb_elemn
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_4'
                            AND reht.id_entre_elemn = pn_id_entre_elemn
                            AND ((REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_mt,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR
                                (REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_dt_fin,
                                               1,
                                               1,
                                               0,
                                               'i') > 0)))
                  WHERE nb_elemn = 2)
         pivot(MAX(va_entre_elemn)
            FOR nm_va_entre_elemn IN('Date de fin' dt_fin,
                                     'Montant' mt_fixe));
   
      -- CHG225373 avec cet indicateur, modifier la date de fin
      vlv_in_mt_fixe VARCHAR2(1) := 'N';
   
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le nombre d'heures de l'élément.
      ----------------------------------------------------------------------
      -- 6.18.1.1.2 et 6.18.1.1.3
      CURSOR CUR_va_nb_hh(pn_id_entre_elemn IN NUMBER) IS
         SELECT FND_DATE.CANONICAL_TO_DATE(dt_efect) dt_efect,
                FND_NUMBER.CANONICAL_TO_NUMBER(NVL(nb_hh,
                                                   nb_hh_carra)) nb_hh,
                NULL mt_fixe,
                DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_tx),
                       NULL,
                       1,
                       DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_tx),
                              0,
                              1,
                              FND_NUMBER.CANONICAL_TO_NUMBER(va_tx))) va_tx,
                DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_factr),
                       NULL,
                       1,
                       DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_factr),
                              0,
                              1,
                              FND_NUMBER.CANONICAL_TO_NUMBER(va_factr))) va_factr
           FROM (SELECT id_entre_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                   FROM (SELECT reht.id_entre_elemn,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nb_elemn
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_4'
                            AND reht.id_entre_elemn = pn_id_entre_elemn
                            AND ((REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_hh,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR
                                (REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_dt_efect,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR (reht.nm_va_entre_elemn = cv_nm_tx) OR
                                (reht.nm_va_entre_elemn = cv_nm_factr) OR
                                (REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_hh_carra,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL)))
                  WHERE nb_elemn = 5)
         pivot(MAX(va_entre_elemn)
            FOR nm_va_entre_elemn IN('Date effective' dt_efect,
                                     'Heures' nb_hh,
                                     'Heures pour la CARRA' nb_hh_carra,
                                     'Taux' va_tx,
                                     'Facteur' va_factr))
         -- INC00018584
         UNION
         SELECT vgrec_perd_paie_varbl.dt_debut dt_efect,
                FND_NUMBER.CANONICAL_TO_NUMBER(NVL(nb_hh,
                                                   nb_hh_carra)) nb_hh,
                NULL mt_fixe,
                DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_tx),
                       NULL,
                       1,
                       DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_tx),
                              0,
                              1,
                              FND_NUMBER.CANONICAL_TO_NUMBER(va_tx))) va_tx,
                DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_factr),
                       NULL,
                       1,
                       DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(va_factr),
                              0,
                              1,
                              FND_NUMBER.CANONICAL_TO_NUMBER(va_factr))) va_factr
           FROM (SELECT id_entre_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                   FROM (SELECT reht.id_entre_elemn,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nb_elemn
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_4'
                            AND reht.id_entre_elemn = pn_id_entre_elemn
                            AND ((REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_hh,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR (reht.nm_va_entre_elemn = cv_nm_tx) OR
                                (reht.nm_va_entre_elemn = cv_nm_factr) OR
                                (REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_hh_carra,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL)))
                  WHERE nb_elemn = 4)
         pivot(MAX(va_entre_elemn)
            FOR nm_va_entre_elemn IN('Heures' nb_hh,
                                     'Heures pour la CARRA' nb_hh_carra,
                                     'Taux' va_tx,
                                     'Facteur' va_factr));
      ----DDC175592
      CURSOR CUR_hh_carra(p_element_entry_id IN NUMBER) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(rea.va_entre_elemn) nb_hh
           FROM xxgir_rh_elemn_afect_v rea
           JOIN fnd_lookup_values flv
             ON (flv.lookup_type = 'GIR_RH_CD_GAIN_2' AND flv.language = 'FRC' AND flv.enabled_flag = 'Y' AND
                flv.start_date_active <= vgrec_perd_paie_varbl.dt_fin AND
                NVL(flv.end_date_active,
                     vgrec_perd_paie_varbl.dt_debut) >= vgrec_perd_paie_varbl.dt_debut AND flv.lookup_code = 'A' || rea.cd_sagip)
          WHERE rea.nm_va_entre_elemn = cv_nm_hh_carra
            AND rea.id_entre_elemn = p_element_entry_id
               -- Début SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004 : enlever code ancien code DateTrack
               --AND  ( rea.pee_dt_fin_efect BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin OR rea.pee_dt_fin_efect = hr_general.end_of_time)
               -- 2015-12-09 DDC 204441 INC-97004 : nouvel façon
            AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          ORDER BY rea.pee_dt_debut_efect  DESC,
                   rea.peev_dt_debut_efect DESC;
      -- Fin SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004
   
      REC_va_mt_hh CUR_va_nb_hh%ROWTYPE; -- Enregistrement de type CUR_va_nb_hh
      --
   
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- 6.18.1 Pour chacun des regroupements de la liste des autres éléments récurrents
      --
      /* Retouche 170
      <<Regroupement>>
      FOR REC_CUR_regrp_elemn_recrn IN CUR_regrp_elemn_recrn LOOP*/
      <<element>>
      FOR REC_CUR_elemn_recrn IN CUR_elemn_recrn LOOP
         --
         vgv_etape := '6.18.1 - id_elemn = ' || REC_CUR_elemn_recrn.id_entre_elemn;
         --
         -- Initialisation pour chaque élément
         --
         vln_mt_calcl   := 0;
         vlv_tx_horr    := NULL;
         vlv_in_mt_fixe := 'N'; -- CHG225373
      
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_elemn_recrn.id_entre_elemn;
         vln_id_entre_elemn := REC_CUR_elemn_recrn.id_entre_elemn;
         --
         /* Retouche 170
         IF vln_id_afect <> REC_CUR_regrp_elemn_recrn.id_afect THEN */
         IF vln_id_afect <> REC_CUR_elemn_recrn.id_afect THEN
            --
            -- Ne faire qu'une fois par affectation
            --
            /* Retouche 170
            vln_id_afect := REC_CUR_regrp_elemn_recrn.id_afect;*/
            vln_id_afect := REC_CUR_elemn_recrn.id_afect;
            --
            -- Obtenir les valeurs dérivées
            --
            /* Retouche 183
            P_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                               pd_dt_afect     => vgREC_perd_paie_varbl.dt_debut,
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               pREC_ventl_cout => vlREC_cle_compt);
            */
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         vgv_etape := '6.18.1.1 - id_elemn = ' || REC_CUR_elemn_recrn.id_entre_elemn;
         --
         --6.18.1.1
         --
         OPEN CUR_va_mt_fixe(vln_id_entre_elemn);
         --
         FETCH CUR_va_mt_fixe
            INTO REC_va_mt_hh;
      
         --
         IF CUR_va_mt_fixe%NOTFOUND THEN
            CLOSE CUR_va_mt_fixe;
         
            vlv_in_mt_fixe := 'N'; -- CHG225373
            p_log('20 - vlv_in_mt_fixe = ' || vlv_in_mt_fixe,
                  vlv_nm_procd_fonct);
         
            --
            /* Retouche 170
            OPEN CUR_va_nb_hh(REC_CUR_calcl_elemn_regrp.id_entre_elemn);*/
            OPEN CUR_va_nb_hh(vln_id_entre_elemn);
            --
            FETCH CUR_va_nb_hh
               INTO REC_va_mt_hh;
            --
            IF CUR_va_nb_hh%NOTFOUND THEN
               CLOSE CUR_va_nb_hh;
               --
               vln_mt_calcl := 0;
               --
            
            ELSE
               CLOSE CUR_va_nb_hh;
               --
               vgv_etape := '6.18.1.1.3 - id_elemn = ' || REC_CUR_elemn_recrn.id_entre_elemn;
               --
               -- 6.18.1.1.3
               --
            
               vln_mt_calcl := (REC_va_mt_hh.nb_hh * REC_va_mt_hh.va_tx * REC_va_mt_hh.va_factr);
               --
               vlv_tx_horr := fv_convr_nb_decml_carct(REC_va_mt_hh.va_tx);
               --
            END IF;
            --
         ELSE
            CLOSE CUR_va_mt_fixe;
         
            vlv_in_mt_fixe := 'O'; -- CHG225373
            p_log('30 - vlv_in_mt_fixe = ' || vlv_in_mt_fixe,
                  vlv_nm_procd_fonct);
         
            --
            vgv_etape := '6.18.1.1.1 - id_elemn = ' || REC_CUR_elemn_recrn.id_entre_elemn;
            --
            -- 6.18.1.1.1
            --
            -- DDC 175592
            OPEN CUR_hh_carra(vln_id_entre_elemn);
            FETCH CUR_hh_carra
               INTO REC_va_mt_hh.nb_hh;
            CLOSE CUR_hh_carra;
         
            vln_mt_calcl := REC_va_mt_hh.mt_fixe;
            --
         END IF;
         --
         vln_mt_total := ROUND(vln_mt_calcl,
                               2);
         --
         IF vln_mt_total <= 0 THEN
            --
            vgv_etape := '6.18.1.1.4 - id_elemn = ' || REC_CUR_elemn_recrn.id_entre_elemn;
            --
            -- Incrémente le nombre d'enregistrements lus et rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            --
            p_ajout_rejt(pn_id_afect => vln_id_afect
                         /* Retouche 170
                                                                                                                                                                                                                              ,pn_id_entre_elemn => REC_CUR_calcl_elemn_regrp.id_entre_elemn*/,
                         pn_id_entre_elemn => vln_id_entre_elemn,
                         pn_id_trans       => NULL,
                         pv_cd_ereur       => 'GIR-100158',
                         pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_no_emplo       => vlrec_persn.no_emplo
                         /* Retouche 170
                                                                                                                                                                                                                              ,pv_cd_gain        => 'A' || REC_CUR_regrp_elemn_recrn.cd_sagip*/,
                         pv_cd_gain      => 'A' || REC_CUR_elemn_recrn.cd_sagip,
                         pn_id_contr_fdt => NULL);
            --DDC 209235
            vlv_code_erreur_gir := 'GIR-100158';
         
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                 ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                 TO_CHAR(vld_dt_gain,
                                         'YYYY-MM-DD') || ';';
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            --
         ELSE
            --
            vgv_etape := '6.18.1.3 - id_elemn = ' || REC_CUR_elemn_recrn.id_entre_elemn;
            --
            -- Retouche 183 On tient compte de l'élément pour la clef comptable
            --
            p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                               pd_dt_afect       => vgrec_perd_paie_varbl.dt_debut,
                               pv_id_type_paie   => cv_id_type_paie_varbl,
                               pn_id_entre_elemn => vln_id_entre_elemn,
                               prec_ventl_cout   => vlrec_cle_compt);
            --
            p_obten_dt_hh( /* Retouche 170
                                                                                                                                                                                                                                       pn_id_afect       => vln_id_afect,
                                                                                                                                                                                                                                       pn_id_entre_elemn => REC_CUR_calcl_elemn_regrp.id_entre_elemn,*/pn_id_entre_elemn => vln_id_entre_elemn,
                          pd_dt_efect       => REC_va_mt_hh.dt_efect,
                          prec_dt_hh        => vlrec_dt_hh);
            --
            vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect => vln_id_afect,
                                                    /* Retouche 170
                                                                                                                                                                                                                                                                                                                                                                                                                                                            pn_id_entre_elemn    => REC_CUR_calcl_elemn_regrp.id_entre_elemn,*/
                                                    pn_id_entre_elemn    => vln_id_entre_elemn,
                                                    pd_dt_efect          => REC_va_mt_hh.dt_efect,
                                                    pv_nm_va_entre_elemn => cv_nm_cd_paiem);
            --
            vlv_tx_mt := fv_convr_nb_decml_carct(vln_mt_calcl);
            --
            -- 6.18.1.3
            --
            REC_h620 := NULL;
            --
            OPEN CUR_verfr_h620(vln_id_entre_elemn);
            --
            FETCH CUR_verfr_h620
               INTO REC_h620;
            --
            IF CUR_verfr_h620%NOTFOUND THEN
               CLOSE CUR_verfr_h620;
               --
               vgv_etape := '6.18.1.4 - id_elemn = ' || REC_CUR_elemn_recrn.id_entre_elemn;
               --
               -- 6.18.1.4
               --
               vgrec_gir_rh_fdt := NULL;
               --
               vgrec_gir_rh_fdt.nm_fiche                := 'H620';
               vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
               vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
               vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
               vgrec_gir_rh_fdt.in_trans_anul           := 'N';
               vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
               vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
               vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
               vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
               vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
               vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_elemn_recrn.cd_sagip;
               vgrec_gir_rh_fdt.elemn_entry_id          := vln_id_entre_elemn;
               vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_elemn_recrn.id_type_elemn;
               --
               vgrec_gir_rh_fdt.dt_gain := REC_va_mt_hh.dt_efect;
               --DDC 209235
               vld_dt_gain := REC_va_mt_hh.dt_efect;
               --
               vgrec_gir_rh_fdt.nb_hh_signe := REC_va_mt_hh.nb_hh;
               vgrec_gir_rh_fdt.nb_hh       :=   /* Retouche 123
                                                                                                                                                                                                        xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                           pn_temps_reel => ABS(REC_va_mt_hh.nb_hh),
                                                                                                                                                                                                           pv_formt      => 'HHHMM');
                                                                                                                                                                                                        */
                fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                      pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                      pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
               vgrec_gir_rh_fdt.cd_paiem    := vlv_cd_paiem;
               vgrec_gir_rh_fdt.tx_horr     := vlv_tx_horr;
               vgrec_gir_rh_fdt.tx_mt       := vlv_tx_mt;
               vgrec_gir_rh_fdt.tx_mt_signe := vln_mt_calcl;
               vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
               vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
               vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
               vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
               vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
               vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
               vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
               vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
               vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
               vgrec_gir_rh_fdt.dt_debut    := vlrec_dt_hh.dt_debut;
               vgrec_gir_rh_fdt.hh_debut    := vlrec_dt_hh.hh_debut;
               -- CHG225373 Début 2017-03-07
               -- si montant fixe, la date de fin devient la date de fin de la période courante
               --vgrec_gir_rh_fdt.dt_fin         := vlrec_dt_hh.dt_fin;
               IF vlv_in_mt_fixe = 'O' THEN
                  vgrec_gir_rh_fdt.dt_fin := vgrec_perd_paie_varbl.dt_fin;
               ELSE
                  vgrec_gir_rh_fdt.dt_fin := vlrec_dt_hh.dt_fin;
               END IF;
               p_log('40 - vgrec_gir_rh_fdt.dt_fin = ' || TO_CHAR(vgrec_gir_rh_fdt.dt_fin,
                                                                  'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
               -- CHG225373 Fin
               vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
               vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
               vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
               vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
               vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
               --
               p_creer_gain_fdt(vln_id_contr_fdt);
            
               /* Pour log d'erreur*/
               vld_dt_gain := REC_va_mt_hh.dt_efect;
               --
            ELSE
               CLOSE CUR_verfr_h620;
               --
               --DDC 209235
               vld_dt_gain := REC_h620.Dt_Gain;
               --
               IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
                  --
                  vgv_etape := '6.18.1.5 - id_trans= ' || REC_h620.id_trans_h620;
                  --
                  -- 6.18.1.5
                  --
                  -- Incrémente le nombre d'enregistrements lus et rejetés.
                  --
                  p_incre_cp(pv_nm_table => cv_nm_table_h620,
                             pb_in_rejt  => TRUE);
                  --
                  -- remplir tableau des rejets
                  --
                  p_ajout_rejt(pn_id_afect => vln_id_afect
                               /* Retouche 170
                                                                                                                                                                                                                                                                                    ,pn_id_entre_elemn => REC_CUR_calcl_elemn_regrp.id_entre_elemn*/,
                               pn_id_entre_elemn => vln_id_entre_elemn,
                               pn_id_trans       => REC_h620.id_trans_h620,
                               pv_cd_ereur       => 'GIR-100158',
                               pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                               pv_nm_procd       => vlv_nm_procd_fonct,
                               pv_no_emplo       => vlrec_persn.no_emplo
                               /* Retouche 170
                                                                                                                                                                                                                                                                                    ,pv_cd_gain        => 'A' || REC_CUR_regrp_elemn_recrn.cd_sagip*/,
                               pv_cd_gain      => 'A' || REC_CUR_elemn_recrn.cd_sagip,
                               pn_id_contr_fdt => REC_h620.id_contr_fdt);
                  --
                  --DDC 209235
                  vln_id_trans        := REC_h620.id_trans_h620;
                  vln_id_contr_fdt    := REC_h620.id_contr_fdt;
                  vlv_code_erreur_gir := 'GIR-100158';
                  --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                  vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                       ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                       ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                       TO_CHAR(vld_dt_gain,
                                               'YYYY-MM-DD') || ';';
                  vlv_de_mesg_techn := NULL;
                  vlv_nm_procd      := vlv_nm_procd;
               
                  p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                 pv_token_value     => vlv_token_value,
                                 pn_id_demnd        => vgn_id_demnd,
                                 pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                 pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                 pv_nm_procd        => vlv_nm_procd,
                                 pv_de_mesg_techn   => vlv_de_mesg_techn);
               ELSE
                  --
                  vgv_etape := '6.18.1.6 - id_trans= ' || REC_h620.id_trans_h620;
                  --
                  -- 6.18.1.6
                  --
                  IF REC_h620.mt_h620 <> vln_mt_total OR
                    -- retouche 170
                     NVL(REC_h620.cd_paiem,
                         '!') <> NVL(vlv_cd_paiem,
                                     '!') OR
                     REC_h620.dt_gain <> REC_va_mt_hh.dt_efect OR
                    -- retouche 183
                     REC_h620.budgt <> vlrec_cle_compt.budgt OR
                     REC_h620.centr_respn <> vlrec_cle_compt.centr_respn THEN
                     --
                     vgv_etape := '6.18.1.8 - id_trans= ' || REC_h620.id_trans_h620;
                     --
                     -- 6.18.1.8  Différence donc annuler transactions précédentes et créer nouvelles
                     --
                     vgv_etape := '6.18.1.8.1 - id_trans= ' || REC_h620.id_trans_h620;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     --
                     -- 6.18.1.8.1
                     --
                     vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
                     --
                     --
                     IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                        --
                        vgv_etape := '6.18.1.8.2 - id_trans= ' || REC_h620.id_trans_h620;
                        p_log(vgv_etape,
                              vlv_nm_procd_fonct);
                        --
                        -- 6.18.1.8.2  Créer un H010 pour annuler la transaction acceptée
                        --
                        vgvar_liste_id_h620_h010.extend;
                        vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                        --
                     END IF;
                     --
                     vgv_etape := '6.18.1.8.4 - id_trans= ' || REC_h620.id_trans_h620;
                     --
                     -- 6.18.1.8.4
                     --
                     UPDATE gir_rh_fdt fdt
                        SET fdt.in_trans_anul = 'O'
                      WHERE fdt.nm_fiche = 'H620'
                           -- 6.18.1.8.3.1
                        AND fdt.id_trans = REC_h620.id_trans_h620
                        AND fdt.in_trans_anul = 'N';
                     --
                     vgv_etape := '6.18.1.8.5 - id_elemn = ' || vln_id_entre_elemn;
                     --
                     -- 6.18.1.8.5 Créer l'enregistrement
                     --
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_elemn_recrn.cd_sagip;
                     vgrec_gir_rh_fdt.elemn_entry_id          := vln_id_entre_elemn;
                     vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_elemn_recrn.id_type_elemn;
                     --
                     vgrec_gir_rh_fdt.dt_gain := REC_va_mt_hh.dt_efect;
                     --DDC 209235
                     vld_dt_gain := REC_va_mt_hh.dt_efect;
                     --
                     vgrec_gir_rh_fdt.nb_hh_signe := REC_va_mt_hh.nb_hh;
                     vgrec_gir_rh_fdt.nb_hh       := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect);
                     vgrec_gir_rh_fdt.cd_paiem    := vlv_cd_paiem;
                     vgrec_gir_rh_fdt.tx_horr     := vlv_tx_horr;
                     vgrec_gir_rh_fdt.tx_mt       := vlv_tx_mt;
                     vgrec_gir_rh_fdt.tx_mt_signe := vln_mt_calcl;
                     vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
                     vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
                     vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
                     vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
                     vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
                     vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
                     vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
                     vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
                     vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
                     vgrec_gir_rh_fdt.dt_debut    := vlrec_dt_hh.dt_debut;
                     vgrec_gir_rh_fdt.hh_debut    := vlrec_dt_hh.hh_debut;
                     -- CHG225373 Début 2017-03-07
                     -- si montant fixe, la date de fin devient la date de fin de la période courante
                     --vgrec_gir_rh_fdt.dt_fin         := vlrec_dt_hh.dt_fin;
                     IF vlv_in_mt_fixe = 'O' THEN
                        vgrec_gir_rh_fdt.dt_fin := vgrec_perd_paie_varbl.dt_fin;
                     ELSE
                        vgrec_gir_rh_fdt.dt_fin := vlrec_dt_hh.dt_fin;
                     END IF;
                     p_log('50 - vgrec_gir_rh_fdt.dt_fin = ' || TO_CHAR(vgrec_gir_rh_fdt.dt_fin,
                                                                        'YYYY-MM-DD'),
                           vlv_nm_procd_fonct);
                     -- CHG225373 Fin
                     vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                     vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                     vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                     vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                     vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                     /* Pour log d'erreur*/
                     vld_dt_gain := REC_va_mt_hh.dt_efect;
                  END IF; -- valider différence
                  --
               END IF; -- valider statut H620
               --
            END IF;
            --
         END IF;
         --
      /* Retouche 170
                                                   END LOOP Regroupement;*/
      END LOOP element;
      --
      p_log('60 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_18.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_va_mt_fixe%ISOPEN THEN
            CLOSE CUR_va_mt_fixe;
         END IF;
         IF CUR_va_nb_hh%ISOPEN THEN
            CLOSE CUR_va_nb_hh;
         END IF;
         IF CUR_verfr_h620%ISOPEN THEN
            CLOSE CUR_verfr_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80373';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_18;

   --
   -- Étape 6.19
   -- ============================================================================
   -- P_verfr_elemn_etape_6_19
   -- ============================================================================
   /**************************************************************************
   * But : Vérification de suppression des autres éléments récurrents
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-05  INC00016333  Remplacer new par old car traite des destructions
   * Michel Dessureault   2012-12-13  INC00016333  Corriger le curseur CUR_suivi_elemn_suprm
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-06-05  INC00018519  Vérifier l'existence de l'élément pour la période courante lors de la suppression d'un élément récurrent du H620.
   * Frédéric Aubin       2016-07-17  DDC 209235 : Ajustement du select de supp. en 6.19 (H620).  Annulation intempestive de trop provoquée.
   *
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_19(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_19';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_verfr_elemn_etape_6_19';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h620.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      /* Retouche 170
      vlv_exist            VARCHAR2(1);*/
      vlv_statu_h620 gir_trans_h620.statu_trans%TYPE;
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments supprimés.(6.19.1)
      ----------------------------------------------------------------------
      CURSOR CUR_suivi_elemn_suprm IS
         SELECT /*+ INDEX(rse GIR_RH_SUIVI_ENTRE_ELE_PAIE_N9) INDEX(rat GIR_RH_AFECT_TEMPR_N1) */
         DISTINCT rse.element_entry_id id_entre_elemn --F.aubin 2016-07-17 : DDC 209235 : Ajustement du select de supp. en 6.19 (H620).  Annulation intempestive de trop provoquée.
           FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                -- Table temporaire contenant la liste des affectations principales à paie variable en vigueur à la période de paie courante.
               ,
                xxgir_rh_afect_tempr rat
          WHERE -- 6.19.1.1
          rse.assignment_id = rat.id_afect
         --DDC 209235 par employé (=assignment_id)
          AND rat.id_afect = pn_assignment_id
          AND rat.in_type_paie = cv_id_type_paie_varbl
         -- 6.19.1.2 Élément présent dans le jeu d'éléments pour H620 définie au point 2
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_h620'
              AND reht.id_type_elemn = rse.element_type_id)
         -- 6.19.1.3 Élément récurrents
          AND EXISTS
          (SELECT 'X'
             FROM pay_element_types_f pet
            WHERE pet.element_type_id = rse.element_type_id
              AND pet.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
              AND pet.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
              AND pet.processing_type = 'R')
         --  6.19.1.4 Élément en vigueur pour la période de paie courante
          AND rse.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
          AND rse.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
         -- 6.19.1.5 Élément non présent dans le jeu d'éléments des gains à pourcentage obtenu au point 3
          AND rse.element_type_id NOT IN (SELECT reht.id_type_elemn
                                        FROM xxgir_rh_elemn_h620_tempr reht
                                       WHERE reht.nm_liste = 'jeu_pc')
         -- 6.19.1.6 Élément non présent dans le jeu d'éléments basés sur le taux annuel au prorata pour la paie variable obtenu au point 4
          AND rse.element_type_id NOT IN (SELECT reht.id_type_elemn
                                        FROM xxgir_rh_elemn_h620_tempr reht
                                       WHERE reht.nm_liste = 'jeu_tx_anuel')
         -- 6.19.1.7 Élément n'est lié à aucun élément non récurrent « Special inputs » en vigueur dans la même période de paie qui possède un montant de remplacement
          AND rse.element_type_id NOT IN
          (SELECT reht.id_type_elemn
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_h620'
              AND reht.nm_elemn IN
                  (SELECT nm_elemn
                     FROM (SELECT TRIM(REGEXP_REPLACE(rea.nm_elemn,
                                                       cv_nm_specl_input,
                                                       '',
                                                       1,
                                                       1,
                                                       'i')) nm_elemn,
                                   COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre_specl_input
                              FROM xxgir_rh_elemn_afect_v rea
                             WHERE --DDC 209235 par employé (=assignment_id)
                             rea.id_afect = pn_assignment_id
                          AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                          AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                          AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                          AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                          AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
                          AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
                          AND rea.type_procs_elemn = 'N'
                          AND REGEXP_INSTR(rea.nm_elemn,
                                          cv_nm_specl_input,
                                          1,
                                          1,
                                          0,
                                          'i') > 0
                          AND ( -- possède une date de début à l'intérieur de la période de paie.
                              (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                            cv_nm_dt_debut,
                                            1,
                                            1,
                                            0,
                                            'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                             -- possède une date de fin à l'intérieur de la période de paie.
                              (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                            cv_nm_dt_fin,
                                            1,
                                            1,
                                            0,
                                            'i') > 0 AND rea.va_entre_elemn_dt BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin) OR
                             -- possède un montant de remplacement.
                              (REGEXP_INSTR(rea.nm_va_entre_elemn,
                                            cv_nm_mt_rempl,
                                            1,
                                            1,
                                            0,
                                            'i') > 0 AND rea.va_entre_elemn IS NOT NULL)))
                    WHERE 3 = nbr_va_entre_specl_input))
         -- 6.19.1.8
          AND rse.trans_type = 'D'
         -- 6.19.1.9
          AND rse.in_trait = 'N'
         -- INC00018519 Il ne faut pas qu'il existe un datetrack encore valide dans la période courante
          AND NOT EXISTS (SELECT 'X'
             FROM pay_element_entries_f pee
            WHERE pee.element_entry_id = rse.element_entry_id
              AND pee.effective_end_date >= vgrec_perd_paie_varbl.dt_debut);
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver l'enregistrement de la feuille de temps.(6.19.2.2)
      ----------------------------------------------------------------------
      CURSOR CUR_fdt(pn_id_entre_elemn NUMBER) IS
         SELECT fdt.id_contr_fdt,
                fdt.id_trans,
                fdt.statu_sagip,
                fdt.cd_gain,
                fdt.id_afect,
                fdt.dt_gain
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               -- 6.19.2.2.1
            AND fdt.elemn_entry_id = pn_id_entre_elemn
               -- 6.19.2.2.2
            AND fdt.in_trans_anul = 'N'
         --Début F.aubin 2016-07-17 : DDC 209235 : Ajustement du select de supp. en 6.19 (H620).  Annulation intempestive de trop provoquée.
          ORDER BY id_contr_fdt DESC;
      --Fin F.aubin 2016-07-17 : DDC 209235
   
      --
      REC_fdt CUR_fdt%ROWTYPE; -- Retouche 170
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la transaction H620.(6.19.2.5)
      ----------------------------------------------------------------------
      CURSOR CUR_trans_h620(pn_id_trans IN NUMBER) IS
         SELECT h620.statu_trans
           FROM gir_trans_h620 h620
          WHERE -- 6.19.2.5.1
          h620.id_trans_h620 = pn_id_trans
         -- 6.16.1.2 Transaction pour la période de paie courante.
          AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
          AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
         -- 6.19.2.5.2
          AND h620.in_trans_anul = 'N';
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- 6.19.2 Pour chacun des autres éléments récurrents supprimés
      --
      <<suppression>>
      FOR REC_CUR_suivi_elemn_suprm IN CUR_suivi_elemn_suprm LOOP
         --
         vgv_etape := '6.19.2 - id_elemn = ' || REC_CUR_suivi_elemn_suprm.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_suivi_elemn_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         -- 6.19.2.1 Vérifier si un élément existe dans la liste des autres éléments récurrents définie
         --          au point 6.4 avec le même code de gain SAGIP que celui supprimé
         --
         vgv_etape := '6.19.2.2 - id_elemn = ' || REC_CUR_suivi_elemn_suprm.id_entre_elemn;
         --
         OPEN CUR_fdt(REC_CUR_suivi_elemn_suprm.id_entre_elemn);
         --
         FETCH CUR_fdt
            INTO REC_fdt;
         --
         IF CUR_fdt%NOTFOUND THEN
            CLOSE CUR_fdt;
            --
            vgv_etape := '6.19.2.3 - id_elemn = ' || REC_CUR_suivi_elemn_suprm.id_entre_elemn;
            --
            CONTINUE suppression;
            --
         ELSE
            --
            CLOSE CUR_fdt;
            --
         END IF;
      
         --DDC 209235
         vld_dt_gain      := REC_fdt.dt_gain;
         vln_id_trans     := REC_fdt.id_trans; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_fdt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
         vln_id_afect     := REC_fdt.id_afect;
         --
         --
         IF REC_fdt.statu_sagip = cv_statu_sagip_trans THEN
            --
            vgv_etape := '6.19.2.4 - id_trans = ' || REC_fdt.id_trans;
            --
            -- 6.19.2.4
            --
            -- Incrémente le nombre d'enregistrements lus et rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            --
            p_ajout_rejt(pn_id_afect       => REC_fdt.id_afect,
                         pn_id_entre_elemn => REC_CUR_suivi_elemn_suprm.id_entre_elemn,
                         pn_id_trans       => REC_fdt.id_trans,
                         pv_cd_ereur       => 'GIR-100153',
                         pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_cd_gain        => REC_fdt.cd_gain,
                         pn_id_contr_fdt   => REC_fdt.id_contr_fdt);
            --DDC 209235
            vln_id_contr_fdt    := REC_fdt.id_contr_fdt;
            vln_id_trans        := REC_fdt.id_trans;
            vln_id_entre_elemn  := REC_CUR_suivi_elemn_suprm.id_entre_elemn;
            vlv_code_erreur_gir := 'GIR-100153';
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                 ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                 TO_CHAR(vld_dt_gain,
                                         'YYYY-MM-DD') || ';';
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            --
         ELSE
            --
            vgv_etape := '6.19.2.5 - id_trans = ' || REC_fdt.id_trans;
            --
            vlv_statu_h620 := NULL;
            --
            -- 6.19.2.5
            --
            OPEN CUR_trans_h620(REC_fdt.id_trans);
            --
            FETCH CUR_trans_h620
               INTO vlv_statu_h620;
            --
            CLOSE CUR_trans_h620;
            --
            IF vlv_statu_h620 = cv_cd_statu_sagip_acept THEN
               --
               vgv_etape := '6.19.2.6 - id_trans = ' || REC_fdt.id_trans;
               p_log(vgv_etape,
                     vlv_nm_procd_fonct);
               --
               -- 6.19.2.6
               --
               vgvar_liste_id_h620_h010.extend;
               vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_fdt.id_trans;
               --
            END IF;
            --
            vgv_etape := '6.19.2.7 - id_trans = ' || REC_fdt.id_trans;
            p_log(vgv_etape,
                  vlv_nm_procd_fonct);
            --
            --  6.19.2.7
            --
            vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_fdt.id_trans;
            --
            vgv_etape := '6.19.2.8 - id_trans = ' || REC_fdt.id_trans;
            --
            --  6.19.2.8
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.in_trans_anul = 'O'
             WHERE fdt.id_trans = REC_fdt.id_trans
               AND fdt.nm_fiche = 'H620'
               AND fdt.in_trans_anul = 'N';
            --
         END IF;
         --
      END LOOP suppression;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_19.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         IF CUR_fdt%ISOPEN THEN
            CLOSE CUR_fdt;
         END IF;
         IF CUR_trans_h620%ISOPEN THEN
            CLOSE CUR_trans_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --DDC 209235--
         pv_code_erreur_gir := 'GIR-80374';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_19;

   --
   -- Étape 6.20
   -- ============================================================================
   -- P_trait_elemn_etape_6_20
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des autres éléments avec montant supplémentaire.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-06  INC00016333  Diviser par 100 les montants provenant de GIR_TRANS_H620 pour comparaison.
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On tient compte des date de début et fin de l'entrée d'élément
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Michel Dessureault   2013-06-04  INC00018514  Ajouter dans le critère de vérification de la H620 que celle-ci soit dans la période courante
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_20(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_20';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_20';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_cle_compt type_rec_ventl_cout;
      vlrec_persn     type_rec_persn; -- Infos de la personne
      vlrec_dt_hh     type_rec_dt_hh; -- Dates et heures début fin
      /* Retouche 170
      vln_index            PLS_INTEGER; -- index de la table d'enregistrement*/
      vln_id_afect NUMBER; -- Identifiant de l'affectation
      /* retouche 132
      vln_id_entre_elemn   NUMBER; -- Identifiant de l'entrée d'élément*/
      -- INC00016333
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vlv_tx_mt        gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      vlv_cd_paiem     gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments. (6.20.1)
      ----------------------------------------------------------------------
      CURSOR CUR_elemn IS
         SELECT reht.id_afect,
                reht.id_entre_elemn,
                reht.id_type_elemn,
                reht.cd_sagip,
                FND_NUMBER.CANONICAL_TO_NUMBER(reht.va_entre_elemn) mt_suplm,
                reht.dt_debut,
                reht.dt_fin
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = '6_6'
               --DDC 209235 par employé (=assignment_id)
            AND reht.id_afect = pn_assignment_id
          ORDER BY reht.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour vérifier le H620. (6.20.1.1)
      ----------------------------------------------------------------------
      CURSOR CUR_verfr_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.statu_trans,
                h620.id_trans_h620,
                h620.cd_paiem
                -- INC00016333 Il faut diviser par 100 pour comparer aux montants calculés.
               ,
                FND_NUMBER.CANONICAL_TO_NUMBER(h620.tx_mt) / 100 mt_h620,
                h620.dt_debut,
                h620.dt_fin,
                fdt.id_contr_fdt
                -- Retouche 183 on prend fdt au lieu de h620 car si dans le passé h620 reçoit le présent
               ,
                fdt.budgt,
                fdt.centr_respn
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE h620.elemn_entry_id = pn_id_entre_elemn
               -- INC00018514 Transaction pour la période de paie courante.
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
            AND h620.in_trans_anul = 'N'
            AND fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620';
      --
      REC_h620 CUR_verfr_h620%ROWTYPE;
      --
      ----DDC175592
      CURSOR CUR_hh_carra(p_element_entry_id IN NUMBER) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(rea.va_entre_elemn) nb_hh
           FROM xxgir_rh_elemn_afect_v rea
           JOIN fnd_lookup_values flv
             ON (flv.lookup_type = cv_nm_table_consl_gain_2 AND flv.language = 'FRC' AND flv.enabled_flag = 'Y' AND
                flv.start_date_active <= vgrec_perd_paie_varbl.dt_fin AND
                NVL(flv.end_date_active,
                     vgrec_perd_paie_varbl.dt_debut) >= vgrec_perd_paie_varbl.dt_debut AND flv.lookup_code = 'A' || rea.cd_sagip)
          WHERE rea.nm_va_entre_elemn = cv_nm_hh_carra
            AND rea.id_entre_elemn = p_element_entry_id
               -- Début SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004 : enlever code ancien code DateTrack
               --AND  ( rea.pee_dt_fin_efect BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin OR rea.pee_dt_fin_efect = hr_general.end_of_time)
               -- 2015-12-09 DDC 204441 INC-97004 : nouvel façon
            AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          ORDER BY rea.pee_dt_debut_efect  DESC,
                   rea.peev_dt_debut_efect DESC;
      -- Fin SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004
   
      vln_hh_carra NUMBER;
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- 6.20.1 Pour chacun des regroupements de la liste des éléments avec montant supplémentaire
      --
      <<element>>
      FOR REC_CUR_elemn IN CUR_elemn LOOP
         --
         vgv_etape := '6.20.1 - id_elemn = ' || REC_CUR_elemn.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_elemn.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := vgrec_perd_paie_varbl.dt_debut;
         --
         IF vln_id_afect <> REC_CUR_elemn.id_afect THEN
            --
            -- Ne faire qu'une fois par affectation
            --
            vln_id_afect := REC_CUR_elemn.id_afect;
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         -- Retouche 183 On tient compte de l'élément pour la clef comptable
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_elemn.dt_debut,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_elemn.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_elemn.id_entre_elemn,
                       pd_dt_efect       => REC_CUR_elemn.dt_debut,
                       prec_dt_hh        => vlrec_dt_hh);
         --
         vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                 pn_id_entre_elemn    => REC_CUR_elemn.id_entre_elemn,
                                                 pd_dt_efect          => REC_CUR_elemn.dt_debut,
                                                 pv_nm_va_entre_elemn => cv_nm_cd_paiem);
         --
         vlv_tx_horr := NULL;
         --
         vlv_tx_mt := fv_convr_nb_decml_carct(REC_CUR_elemn.mt_suplm);
         --
         vgv_etape := '6.20.1.1 - id_elemn = ' || REC_CUR_elemn.id_entre_elemn;
         --
         --DDC 175592
         vln_hh_carra := NULL;
         OPEN CUR_hh_carra(REC_CUR_elemn.id_entre_elemn);
         FETCH CUR_hh_carra
            INTO vln_hh_carra;
         CLOSE CUR_hh_carra;
      
         OPEN CUR_verfr_h620(REC_CUR_elemn.id_entre_elemn);
         --
         FETCH CUR_verfr_h620
            INTO REC_h620;
         --
         --DDC 209235
         vln_id_trans     := REC_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         IF CUR_verfr_h620%NOTFOUND THEN
            CLOSE CUR_verfr_h620;
            --
            vgv_etape := '6.20.1.2 - id_elemn = ' || REC_CUR_elemn.id_entre_elemn;
            --
            -- 6.20.1.2 Créer un H620 car n'existe pas
            --
         
            vgrec_gir_rh_fdt := NULL;
            --
            vgrec_gir_rh_fdt.nm_fiche                := 'H620';
            vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
            vgrec_gir_rh_fdt.in_trans_anul           := 'N';
            vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'O';
            vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
            vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
            vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_elemn.cd_sagip;
            vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_elemn.id_entre_elemn;
            vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_elemn.id_type_elemn;
            vgrec_gir_rh_fdt.dt_gain                 := NULL;
            --DDC 209235
            vld_dt_gain := vgrec_perd_paie_varbl.dt_debut;
            --
            --DDC175592
            vgrec_gir_rh_fdt.nb_hh_signe := vln_hh_carra;
            IF vln_hh_carra IS NOT NULL THEN
               vgrec_gir_rh_fdt.nb_hh := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                pn_assignment_id => vln_id_afect);
            ELSE
               vgrec_gir_rh_fdt.nb_hh := NULL;
            END IF;
            vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
            vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
            vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
            vgrec_gir_rh_fdt.tx_mt_signe    := REC_CUR_elemn.mt_suplm;
            vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
            vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
            vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.dt_debut       := REC_CUR_elemn.dt_debut;
            vgrec_gir_rh_fdt.dt_fin         := REC_CUR_elemn.dt_fin;
            vgrec_gir_rh_fdt.hh_debut       := NULL;
            vgrec_gir_rh_fdt.hh_fin         := NULL;
            vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
            vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
            vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
            vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
            --
            p_creer_gain_fdt(vln_id_contr_fdt);
            --
         ELSE
            CLOSE CUR_verfr_h620;
            --
            vgv_etape := '6.20.1.3 - id_trans = ' || REC_h620.id_trans_h620;
            --
            -- 6.20.1.3 Transaction H620 existe
            --
            IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               -- Transférré à SAGIP donc remplir tableau des rejets
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               vln_id_afect := REC_CUR_elemn.id_afect;
               vld_dt_gain  := vgrec_perd_paie_varbl.dt_debut;
            
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_elemn.id_entre_elemn,
                            pn_id_trans       => REC_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => 'A' || REC_CUR_elemn.cd_sagip,
                            pn_id_contr_fdt   => REC_h620.id_contr_fdt);
               --
               --DDC 209235
               vln_id_trans        := REC_h620.id_trans_h620;
               vln_id_contr_fdt    := REC_h620.id_contr_fdt;
               vln_id_entre_elemn  := REC_CUR_elemn.id_entre_elemn;
               vlv_code_erreur_gir := 'GIR-100153';
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               --
               IF REC_h620.mt_h620 <> REC_CUR_elemn.mt_suplm OR
                 -- Retouche 170
                  NVL(REC_h620.cd_paiem,
                      '!') <> NVL(vlv_cd_paiem,
                                  '!') OR
                  NVL(REC_h620.dt_debut,
                      vgrec_perd_paie_varbl.dt_debut) <> NVL(REC_CUR_elemn.dt_debut,
                                                             vgrec_perd_paie_varbl.dt_debut) OR
                  NVL(REC_h620.dt_fin,
                      vgrec_perd_paie_varbl.dt_fin) <> NVL(REC_CUR_elemn.dt_fin,
                                                           vgrec_perd_paie_varbl.dt_fin) OR
                 -- Retouche 183
                  REC_h620.budgt <> vlrec_cle_compt.budgt OR
                  REC_h620.centr_respn <> vlrec_cle_compt.centr_respn THEN
                  --
                  vgv_etape := '6.20.1.6.1 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  -- 6.20.1.6.1
                  --
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_trans = REC_h620.id_trans_h620
                     AND fdt.nm_fiche = 'H620'
                     AND fdt.in_trans_anul = 'N';
                  --
                  -- 6.20.1.6.2
                  --
                  vgv_etape := '6.20.1.6.2 - id_trans = ' || REC_h620.id_trans_h620;
                  --
                  vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
                  --
                  IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                     --
                     -- 6.20.1.6.3
                     --
                     vgv_etape := '6.20.1.6.3 - id_trans = ' || REC_h620.id_trans_h620;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     --
                     vgvar_liste_id_h620_h010.extend;
                     vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                     --
                  END IF;
                  --
                  -- 6.20.1.6.4
                  --
                  vgv_etape := '6.20.1.6.4 - id_elemn = ' || REC_CUR_elemn.id_entre_elemn;
                  --
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'O';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_elemn.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_elemn.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_elemn.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := NULL;
                  --DDC 209235
                  vld_dt_gain := vgrec_perd_paie_varbl.dt_debut;
                  --
                  --DDC175592
                  vgrec_gir_rh_fdt.nb_hh_signe := vln_hh_carra;
                  IF vln_hh_carra IS NOT NULL THEN
                     vgrec_gir_rh_fdt.nb_hh := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                      pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                      pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                      pn_assignment_id => vln_id_afect);
                  ELSE
                     vgrec_gir_rh_fdt.nb_hh := NULL;
                  END IF;
                  vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                  vgrec_gir_rh_fdt.tx_mt_signe    := REC_CUR_elemn.mt_suplm;
                  vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut       := REC_CUR_elemn.dt_debut;
                  vgrec_gir_rh_fdt.dt_fin         := REC_CUR_elemn.dt_fin;
                  vgrec_gir_rh_fdt.hh_debut       := NULL;
                  vgrec_gir_rh_fdt.hh_fin         := NULL;
                  vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                  vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                  vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                  vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                  --
                  p_creer_gain_fdt(vln_id_contr_fdt);
                  --
               END IF;
               --
            END IF;
            --
         END IF;
         --
      END LOOP element;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_20.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_verfr_h620%ISOPEN THEN
            CLOSE CUR_verfr_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80375';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_20;

   --
   -- Étape 6.21
   -- ============================================================================
   -- P_verfr_elemn_etape_6_21
   -- ============================================================================
   /**************************************************************************
   * But : Vérification de suppression des éléments avec montant supplémentaire
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-05  INC00016333  Remplacer new par old car traite des destructions
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) On tient compte des date de début et fin de l'entrée d'élément
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-06-04  INC00018514  Ajouter dans le critère de vérification de la H620 que celle-ci soit dans la période courante
   * Frédéric Aubin       2014-02-22  Performance : l'index GIR_RH_SUIVI_ELEMN_N10 est maintenant utilisé pour cette requête
   *
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_21(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_21';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_verfr_elemn_etape_6_21';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h620.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      /* Retouche 170
      vlv_exist             VARCHAR2(1);
      vlTAB_elemn_suprm     sys.odcivarchar2list := sys.odcivarchar2list(); -- VARRAY de type VARCHAr2 pour la liste de suivi des affectation par code sagip*/
      vltab_elemn_suprm   sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les éléments supprimés
      vltab_id_trans_h620 sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les id du H620
      vlrec_persn         type_rec_persn; -- Infos de la personne
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments supprimés regroupés (6.21.1).
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_mt_suplm_suprm IS
         SELECT rse.element_entry_id id_entre_elemn
           FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                -- Table temporaire contenant la liste des affectations principales à paie variable en vigueur à la période de paie courante.
               ,
                xxgir_rh_afect_tempr rat
          WHERE -- 6.21.1.1 Élément lié à l'affectation
          rse.assignment_id = rat.id_afect
         --DDC 209235 par employé (=assignment_id)
          AND rat.id_afect = pn_assignment_id
          AND rat.in_type_paie = cv_id_type_paie_varbl
         -- 6.21.1.2 Élément non récurrent
         -- 6.21.1.3 Élément est un « Special inputs »
          AND EXISTS
          (SELECT 'X'
             FROM pay_element_types_f_vl pet
            WHERE pet.element_type_id = rse.element_type_id
              AND pet.processing_type = 'N'
              AND REGEXP_INSTR(pet.element_name,
                               cv_nm_specl_input,
                               1,
                               1,
                               0,
                               'i') > 0
              AND pet.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
              AND pet.effective_end_date >= vgrec_perd_paie_varbl.dt_debut)
         --6.21.1.4 Élément avec date de début et date de fin à l'intérieur de la période de paie courante
          AND rse.element_entry_id IN (SELECT rse2.element_entry_id
                                     FROM (SELECT element_entry_id
                                             FROM (SELECT element_entry_id,
                                                          nm_va,
                                                          dt_va
                                                     FROM (SELECT element_entry_id,
                                                                  nm_va,
                                                                  FND_DATE.CANONICAL_TO_DATE(old_screen_entry_value) dt_va,
                                                                  COUNT(*) over(PARTITION BY element_entry_id) nbr_va_entre
                                                             FROM (SELECT DISTINCT rse1.element_entry_id,
                                                                                   (SELECT piv.name
                                                                                      FROM pay_input_values_f_vl piv
                                                                                     WHERE piv.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                                                       AND piv.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                                                       AND piv.element_type_id = rse1.element_type_id
                                                                                       AND piv.input_value_id = rse1.input_value_id
                                                                                       AND piv.object_version_number =
                                                                                           (SELECT MAX(piv1.object_version_number)
                                                                                              FROM pay_input_values_f_vl piv1
                                                                                             WHERE piv1.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                                                               AND piv1.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                                                               AND piv1.element_type_id = rse1.element_type_id
                                                                                               AND piv1.input_value_id = rse1.input_value_id)) nm_va,
                                                                                   rse1.old_screen_entry_value
                                                                     FROM gir_rh_suivi_entre_elemn_paie rse1 -- INC-89949
                                                                    WHERE rse1.element_entry_id IS NOT NULL
                                                                      AND rse1.input_value_id IS NOT NULL
                                                                      AND rse1.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                                      AND rse1.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                                      AND rse1.in_trait = 'N'
                                                                      AND rse1.trans_type = 'D'
                                                                         --DDC 209235 par employé (=assignment_id)
                                                                      AND rse1.assignment_id = pn_assignment_id)
                                                            WHERE (nm_va = cv_nm_dt_debut OR nm_va = cv_nm_dt_fin))
                                                    WHERE nbr_va_entre = 2)
                                           pivot(MAX(dt_va)
                                              FOR nm_va IN('Date de début' dt_debut,
                                                          'Date de fin' dt_fin))
                                            WHERE dt_debut <= vgrec_perd_paie_varbl.dt_fin
                                              AND dt_fin >= vgrec_perd_paie_varbl.dt_debut) rse2)
         -- 6.21.1.5 ne possède pas un montant de remplacement.
          AND rse.element_entry_id NOT IN
          (SELECT element_entry_id
             FROM (SELECT DISTINCT rse1.element_entry_id,
                                   (SELECT piv.name
                                      FROM pay_input_values_f_vl piv
                                     WHERE piv.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                       AND piv.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                       AND piv.element_type_id = rse1.element_type_id
                                       AND piv.input_value_id = rse1.input_value_id
                                       AND piv.object_version_number = (SELECT MAX(piv1.object_version_number)
                                                                          FROM pay_input_values_f_vl piv1
                                                                         WHERE piv1.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                                           AND piv1.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                                           AND piv1.element_type_id = rse1.element_type_id
                                                                           AND piv1.input_value_id = rse1.input_value_id)) nm_va,
                                   rse1.old_screen_entry_value
                     FROM gir_rh_suivi_entre_elemn_paie rse1 -- INC-89949
                    WHERE rse1.element_entry_id IS NOT NULL
                      AND rse1.input_value_id IS NOT NULL
                      AND rse1.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                      AND rse1.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                      AND rse1.in_trait = 'N'
                      AND rse1.trans_type = 'D'
                         --DDC 209235 par employé (=assignment_id)
                      AND rse1.assignment_id = pn_assignment_id)
            WHERE nm_va = cv_nm_mt_rempl
              AND old_screen_entry_value IS NOT NULL)
         -- 6.21.1.6 Élément qui possède un montant supplémentaire
          AND rse.element_entry_id IN
          (SELECT element_entry_id
             FROM (SELECT DISTINCT rse1.element_entry_id,
                                   (SELECT piv.name
                                      FROM pay_input_values_f_vl piv
                                     WHERE piv.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                       AND piv.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                       AND piv.element_type_id = rse1.element_type_id
                                       AND piv.input_value_id = rse1.input_value_id
                                       AND piv.object_version_number = (SELECT MAX(piv1.object_version_number)
                                                                          FROM pay_input_values_f_vl piv1
                                                                         WHERE piv1.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                                           AND piv1.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                                           AND piv1.element_type_id = rse1.element_type_id
                                                                           AND piv1.input_value_id = rse1.input_value_id)) nm_va,
                                   rse1.old_screen_entry_value
                     FROM gir_rh_suivi_entre_elemn_paie rse1 -- INC-89949
                    WHERE rse1.element_entry_id IS NOT NULL
                      AND rse1.input_value_id IS NOT NULL
                      AND rse1.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                      AND rse1.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                      AND rse1.in_trait = 'N'
                      AND rse1.trans_type = 'D'
                         --DDC 209235 par employé (=assignment_id)
                      AND rse1.assignment_id = pn_assignment_id)
            WHERE nm_va = cv_nm_mt_suplm
              AND old_screen_entry_value IS NOT NULL)
         --  6.21.1.7 L'élément supprimé est en vigueur dans la période de paie courante
          AND rse.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
          AND rse.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
         -- 6.21.1.8 Élément présent dans le jeu d'éléments pour H620 déterminé au point 2a
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_specl'
              AND reht.id_type_elemn = rse.element_type_id)
         -- 6.21.1.9
          AND rse.trans_type = 'D'
         -- 6.21.1.10 Élément n'est lié à aucun élément non récurrent « Special inputs » en vigueur dans la période de paie courante qui possède un montant de remplacement
          AND rse.element_type_id NOT IN (SELECT reht.id_type_elemn
                                        FROM xxgir_rh_elemn_h620_tempr reht
                                       WHERE reht.nm_liste = 'jeu_specl'
                                         AND reht.cd_sagip IN (SELECT reht.cd_sagip
                                                                 FROM xxgir_rh_elemn_h620_tempr reht
                                                                WHERE reht.nm_liste = '6_5'
                                                                     --DDC 209235 par employé (=assignment_id)
                                                                  AND reht.id_afect = pn_assignment_id))
         -- 6.21.1.11 Élément non traité
          AND rse.in_trait = 'N'
         -- Retouche 170
          GROUP BY rse.element_entry_id;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour vérifier l'existence de la H620.
      ----------------------------------------------------------------------
      -- 6.21.3
      CURSOR CUR_verfr_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.statu_trans,
                h620.id_trans_h620,
                h620.id_afect,
                h620.cd_gain,
                fdt.id_contr_fdt,
                fdt.dt_gain
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE h620.elemn_entry_id = pn_id_entre_elemn
               -- INC00018514 Transaction pour la période de paie courante.
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
            AND h620.in_trans_anul = 'N'
            AND fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620';
      --
      REC_h620 CUR_verfr_h620%ROWTYPE;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      vgv_etape := '6.21.1';
      --
      <<suppression>>
      FOR REC_CUR_elemn_mt_suplm_suprm IN CUR_elemn_mt_suplm_suprm LOOP
         --
         vgv_etape := '6.21.3 - id_elemn = ' || REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         -- 6.21.3.2.1
         --
         vgv_etape := '6.21.3.2.1 - id_elemn = ' || REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn;
         --
         OPEN CUR_verfr_h620(REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn);
         --
         FETCH CUR_verfr_h620
            INTO REC_h620;
         --
         --DDC 209235
         vln_id_trans     := REC_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
         vld_dt_gain      := REC_h620.dt_gain;
         --
         IF CUR_verfr_h620%FOUND THEN
            CLOSE CUR_verfr_h620;
            --
            vgv_etape := '6.21.3.2.2 - id_trans = ' || REC_h620.id_trans_h620;
            --
         
            --
            IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.21.3.2.2.1 - id_trans = ' || REC_h620.id_trans_h620;
               --
               -- Transféré à SAGIP donc remplir tableau des rejets
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               p_obten_persn(pn_id_afect => REC_h620.id_afect,
                             pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                             prec_persn  => vlrec_persn);
               --
               -- remplir tableau des rejets
               --
               p_ajout_rejt(pn_id_afect       => REC_h620.id_afect,
                            pn_id_entre_elemn => REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn,
                            pn_id_trans       => REC_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => REC_h620.cd_gain,
                            pn_id_contr_fdt   => REC_h620.id_contr_fdt);
               --DDC 209235
               vln_id_afect       := REC_h620.id_afect;
               vln_id_entre_elemn := REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn;
               vln_id_contr_fdt   := REC_h620.id_contr_fdt;
               vln_id_trans       := REC_h620.id_trans_h620;
            
               vlv_code_erreur_gir := 'GIR-100153';
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
               --
            ELSE
               --
               vgv_etape := '6.21.3.2.2.2 - id_trans = ' || REC_h620.id_trans_h620;
               --
               vltab_elemn_suprm.extend;
               --
               vltab_elemn_suprm(vltab_elemn_suprm.count) := REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn;
               --
               vgv_etape := '6.21.3.2.2.3 - id_trans = ' || REC_h620.id_trans_h620;
               --
               vltab_id_trans_h620.extend;
               --
               vltab_id_trans_h620(vltab_id_trans_h620.count) := REC_h620.id_trans_h620;
               --
               vgv_etape := '6.21.3.2.2.4 - id_trans = ' || REC_h620.id_trans_h620;
               p_log(vgv_etape,
                     vlv_nm_procd_fonct);
               --
               vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
               --
               IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                  --
                  vgv_etape := '6.21.3.2.2.5 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                  --
               END IF;
               --
            END IF;
            --
         ELSE
            --
            CLOSE CUR_verfr_h620;
            --
            vgv_etape := '6.21.3.2.3 - id_elemn = ' || REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn;
            --
            vltab_elemn_suprm.extend;
            --
            vltab_elemn_suprm(vltab_elemn_suprm.count) := REC_CUR_elemn_mt_suplm_suprm.id_entre_elemn;
            --
         END IF;
         --
      END LOOP suppression;
      --
      FORALL vln_cp IN INDICES OF vltab_id_trans_h620
         UPDATE gir_rh_fdt fdt
            SET fdt.in_trans_anul = 'O'
          WHERE fdt.id_trans = vltab_id_trans_h620(vln_cp)
            AND fdt.nm_fiche = 'H620'
            AND fdt.in_trans_anul = 'N';
      --
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_elemn rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      --
      -- Début INC-89949
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_entre_elemn_paie rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      -- Fin INC-89949
      --
      vlTAB_id_trans_h620.DELETE;
      vlTAB_elemn_suprm.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_21.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_elemn_suprm.DELETE;
         vlTAB_id_trans_h620.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_verfr_h620%ISOPEN THEN
            CLOSE CUR_verfr_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80376';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_21;

   --
   -- Étape 6.22
   -- ============================================================================
   -- P_trait_elemn_etape_6_22
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des autres éléments non récurrents.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-06  INC00016333  Diviser par 100 les montants provenant de GIR_TRANS_H620 pour comparaison.
   * Michel Dessureault   2013-01-30  Retouche 123 Inscrire les heures en « Heure et minute » ou en « Heure centième » .
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-07  Retouche 151 Ne pas tenir compte de l'élément A082 lorsque le montant est 0.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Michel Dessureault   2013-06-03  INC00018369  Corriger le select du curseur CUR_va_tx pour aller chercher les éléments spéciaux.
   * Michel Dessureault   2013-06-04  INC00018514  Ajouter dans le critère de vérification de la H620 que celle-ci soit dans la période courante
   * Michel Dessureault   2013-06-11  INC00018369  Corriger la sélection des dates de début et fin.
   * Edgar  Doiron        2015-11-03  --DDC175592
   * Geneviève Bélanger   2017-03-03  CHG225373 - Pour le calcul de l'année financière, la date à utiliser peut être soit
   *                                  la date du gain, soit la date de début
   * Geneviève Bélanger   2017-03-29  CHG226617 - Commenter le CHG225373
   * Geneviève Bélanger   2017-03-30  CHG226617 - remettre l'appel à p_creer_gain_fdt avec le nouveau paramètre
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_22(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_22';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_22';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_cle_compt type_rec_ventl_cout;
      vlrec_persn     type_rec_persn; -- Infos de la personne
      vlrec_dt_hh     type_rec_dt_hh; -- Dates et heures début fin
      /* Retouche 170
      vln_index              PLS_INTEGER; -- index de la table d'enregistrement
      vln_index_partl        PLS_INTEGER; -- index de la table d'enregistrement partielle
      vln_id_entre_elemn     NUMBER; -- Identifiant de l'entrée d'élément
      */
      vln_mt_calcl NUMBER; -- Montant calculé
      vln_mt_total NUMBER; -- Somme des montants calculés
      vln_id_afect NUMBER; -- Identifiant de l'affectation
      -- INC00016333
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vlv_tx_mt        gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      vlv_cd_paiem     gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      vln_tx_horr      NUMBER; -- Taux horaire
      vln_nb_hh        NUMBER;
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la liste 6.7 (6.22.1)
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_non_recrn IS
         SELECT reht.id_afect,
                reht.id_entre_elemn,
                reht.id_type_elemn,
                reht.cd_sagip,
                reht.dt_debut,
                reht.dt_fin
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = '6_7'
               --DDC 209235 par employé (=assignment_id)
            AND reht.id_afect = pn_assignment_id
         --INC00018369 Regrouper car on une entrée pour chaque input value quand ce sont des heures
          GROUP BY reht.id_afect,
                   reht.id_entre_elemn,
                   reht.id_type_elemn,
                   reht.cd_sagip,
                   reht.dt_debut,
                   reht.dt_fin
          ORDER BY reht.id_afect,
                   reht.cd_sagip;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour vérifier le H620. (6.22.1.1)
      ----------------------------------------------------------------------
      CURSOR CUR_verfr_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.statu_trans,
                h620.id_trans_h620
                -- INC00016333 Il faut diviser par 100 pour comparer aux montants calculés.
               ,
                FND_NUMBER.CANONICAL_TO_NUMBER(h620.tx_mt) / 100 mt_h620,
                fdt.dt_gain,
                fdt.id_contr_fdt
                -- Retouche 170
               ,
                h620.dt_debut,
                h620.dt_fin
                -- Retouche 183 on prend fdt au lieu de h620 car si dans le passé, h620 reçoit le présent
               ,
                fdt.budgt,
                fdt.centr_respn
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE h620.elemn_entry_id = pn_id_entre_elemn
               -- INC00018514 Transaction pour la période de paie courante.
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
            AND h620.in_trans_anul = 'N'
            AND fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620';
      --
      REC_h620 CUR_verfr_h620%ROWTYPE;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le pourcentage.
      ----------------------------------------------------------------------
      -- 6.22.1.2.1.1
      CURSOR CUR_va_pc(pn_id_entre_elemn IN NUMBER) IS
         SELECT FND_DATE.CANONICAL_TO_DATE(dt_efect) dt_efect,
                FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh,
                FND_NUMBER.CANONICAL_TO_NUMBER(va_pc) va_pc,
                NULL va_tx,
                NULL factr,
                NULL table_factr,
                NULL mt_fixe
                -- INC00018369
               ,
                dt_debut,
                dt_fin
           FROM (SELECT id_entre_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                        -- INC00018369
                       ,
                        dt_debut,
                        dt_fin
                   FROM (SELECT reht.id_entre_elemn,
                                reht.dt_debut,
                                reht.dt_fin,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nbr_va_entre
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_7'
                            AND reht.id_entre_elemn = pn_id_entre_elemn
                            AND ((REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_hh,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR
                                (REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_dt_efect,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR
                                (REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_pc,
                                               1,
                                               1,
                                               0,
                                               'i') > 0)))
                  WHERE nbr_va_entre = 3)
         pivot(MAX(va_entre_elemn)
            FOR nm_va_entre_elemn IN('Date effective' dt_efect,
                                     'Heures' nb_hh,
                                     'Pourcentage' va_pc));
      --
      REC_calcl_mt CUR_va_pc%ROWTYPE; -- Enregistrement de type CUR_va_pc, CUR_va_tx et CUR_mt_fixe
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le taux.
      ----------------------------------------------------------------------
      -- 6.22.1.2.1.2
      CURSOR CUR_va_tx(pn_id_entre_elemn IN NUMBER) IS
         SELECT NVL(FND_DATE.CANONICAL_TO_DATE(dt_debut_efect),
                    vgrec_perd_paie_varbl.dt_debut) dt_efect,
                FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh,
                NULL va_pc,
                FND_NUMBER.CANONICAL_TO_NUMBER(va_tx) va_tx,
                FND_NUMBER.CANONICAL_TO_NUMBER(NVL(factr,
                                                   '1')) factr,
                FND_NUMBER.CANONICAL_TO_NUMBER(NVL(table_factr,
                                                   '1')) table_factr,
                NULL mt_fixe
                -- INC00018369
               ,
                dt_debut,
                dt_fin
           FROM (SELECT id_entre_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                        -- INC00018369
                       ,
                        dt_debut,
                        dt_fin
                   FROM (SELECT reht.id_entre_elemn,
                                reht.dt_debut,
                                reht.dt_fin,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nbr_va_entre
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_7'
                            AND reht.id_entre_elemn = pn_id_entre_elemn
                            AND ((REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_hh,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR (reht.nm_va_entre_elemn = cv_nm_dt_debut) OR
                                (reht.nm_va_entre_elemn = cv_nm_dt_fin) OR (reht.nm_va_entre_elemn = cv_nm_tx) OR
                                (reht.nm_va_entre_elemn = cv_nm_factr) OR (reht.nm_va_entre_elemn = cv_nm_table_factr)))
                  WHERE nbr_va_entre = 6)
         pivot(MAX(va_entre_elemn)
            FOR nm_va_entre_elemn IN('Heures' nb_hh,
                                     'Taux' va_tx,
                                     'Facteur' factr,
                                     'Table de facteurs' table_factr,
                                     'Date de début' dt_debut_efect,
                                     'Date de fin' dt_fin_efect))
         UNION
         SELECT vgrec_perd_paie_varbl.dt_debut dt_efect,
                FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh,
                NULL va_pc,
                FND_NUMBER.CANONICAL_TO_NUMBER(va_tx) va_tx,
                FND_NUMBER.CANONICAL_TO_NUMBER(NVL(factr,
                                                   '1')) factr,
                FND_NUMBER.CANONICAL_TO_NUMBER(NVL(table_factr,
                                                   '1')) table_factr,
                NULL mt_fixe
                -- INC00018369
               ,
                dt_debut,
                dt_fin
           FROM (SELECT id_entre_elemn,
                        nm_va_entre_elemn,
                        va_entre_elemn
                        -- INC00018369
                       ,
                        dt_debut,
                        dt_fin
                   FROM (SELECT reht.id_entre_elemn,
                                reht.dt_debut,
                                reht.dt_fin,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nbr_va_entre
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_7'
                            AND reht.id_entre_elemn = pn_id_entre_elemn
                            AND ((REGEXP_INSTR(reht.nm_va_entre_elemn,
                                               cv_nm_hh,
                                               1,
                                               1,
                                               0,
                                               'i') > 0 AND reht.va_entre_elemn IS NOT NULL) OR (reht.nm_va_entre_elemn = cv_nm_tx) OR
                                (reht.nm_va_entre_elemn = cv_nm_factr) OR (reht.nm_va_entre_elemn = cv_nm_table_factr))
                               -- Pour ne pas aller chercher les enregistrements des 2 selects ci-haut
                            AND NOT EXISTS (SELECT 'X'
                                   FROM xxgir_rh_elemn_h620_tempr reht1
                                  WHERE reht1.id_entre_elemn = reht.id_entre_elemn
                                    AND reht1.nm_va_entre_elemn IN (cv_nm_dt_debut,
                                                                    cv_nm_dt_fin)))
                  WHERE nbr_va_entre = 4)
         pivot(MAX(va_entre_elemn)
            FOR nm_va_entre_elemn IN('Heures' nb_hh,
                                     'Taux' va_tx,
                                     'Facteur' factr,
                                     'Table de facteurs' table_factr));
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le montant fixe.
      ----------------------------------------------------------------------
      -- 6.22.1.2.1.3
      CURSOR CUR_va_mt_fixe(pn_id_entre_elemn IN NUMBER) IS
      -- CHG226617 commenter CHG225373
      -- CHG225373 Début 2017-03-07
      -- remettre reht.dt_debut
         SELECT /* INC00016333 reht.dt_debut */
          vgrec_perd_paie_varbl.dt_debut dt_efect,
          --SELECT reht.dt_debut,
          -- CHG225373 Fin
          -- CHG226617 Fin
          NULL nb_hh,
          NULL va_pc,
          NULL va_tx,
          NULL factr,
          NULL table_factr,
          FND_NUMBER.CANONICAL_TO_NUMBER(reht.va_entre_elemn) mt_fixe
          -- INC00018369
         ,
          reht.dt_debut dt_debut,
          reht.dt_fin   dt_fin
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = '6_7'
            AND reht.id_entre_elemn = pn_id_entre_elemn
               /* Retouche 151
               AND  (REGEXP_INSTR(reht.nm_va_entre_elemn, cv_nm_mt, 1, 1, 0, 'i') > 0)*/
            AND reht.nm_va_entre_elemn = cv_nm_mt
            AND reht.va_entre_elemn IS NOT NULL;
      --
      ----DDC175592
      CURSOR CUR_hh_carra(p_element_entry_id IN NUMBER) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(rea.va_entre_elemn) nb_hh
           FROM xxgir_rh_elemn_afect_v rea
         /*JOIN fnd_lookup_values flv
          ON (flv.lookup_type = 'GIR_RH_CD_GAIN_2'
         AND flv.language = 'FRC'
         AND flv.enabled_flag = 'Y'
         AND flv.start_date_active <= vgrec_perd_paie_varbl.dt_fin
         AND NVL(flv.end_date_active,
                 vgrec_perd_paie_varbl.dt_debut) >= vgrec_perd_paie_varbl.dt_debut
         AND flv.lookup_code = 'A'||rea.cd_sagip)*/
          WHERE rea.nm_va_entre_elemn = cv_nm_hh_carra
            AND rea.id_entre_elemn = p_element_entry_id
               -- Début SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004 : enlever code ancien code DateTrack
               --AND  ( rea.pee_dt_fin_efect BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin OR rea.pee_dt_fin_efect = hr_general.end_of_time)
               -- 2015-12-09 DDC 204441 INC-97004 : nouvel façon
            AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          ORDER BY rea.pee_dt_debut_efect  DESC,
                   rea.peev_dt_debut_efect DESC;
      -- Fin SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004
   
      CURSOR CUR_hh_echelon(p_element_entry_id IN NUMBER) IS
         SELECT SUM(rea.va_entre_elemn) nb_hh
           FROM xxgir_rh_elemn_afect_v rea
         /*JOIN fnd_lookup_values flv
          ON (flv.lookup_type = 'GIR_RH_CD_GAIN_2'
         AND flv.language = 'FRC'
         AND flv.enabled_flag = 'Y'
         AND flv.start_date_active <= vgrec_perd_paie_varbl.dt_fin
         AND NVL(flv.end_date_active,
                 vgrec_perd_paie_varbl.dt_debut) >= vgrec_perd_paie_varbl.dt_debut
         AND flv.lookup_code = 'A'||rea.cd_sagip)*/
          WHERE rea.nm_va_entre_elemn = cv_nm_hh_echelon
            AND rea.id_entre_elemn = p_element_entry_id
            AND rea.pee_dt_debut_efect BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin;
      vln_hh_carra   NUMBER;
      vln_hh_echelon NUMBER;
   BEGIN
      --
   
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      vln_id_afect := 0;
      --
      -- 6.22.1 Pour chacun des autres éléments non récurrents
      --
      <<element>>
      FOR REC_CUR_non_recrn IN CUR_elemn_non_recrn LOOP
         --
         vgv_etape := '6.22.1 - id_elemn = ' || REC_CUR_non_recrn.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_non_recrn.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_non_recrn.id_afect THEN
            --
            -- Ne faire qu'une fois par affectation
            --
            vln_id_afect := REC_CUR_non_recrn.id_afect;
            --
            -- Obtenir les valeurs dérivées
            --
            /* Retouche 183
            P_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                               pd_dt_afect     => vgREC_perd_paie_varbl.dt_debut,
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               pREC_ventl_cout => vlREC_cle_compt);
            */
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         vln_mt_total := 0;
         --
         --
         vln_mt_calcl := 0;
         vln_nb_hh    := NULL;
         --
         OPEN CUR_va_pc(REC_CUR_non_recrn.id_entre_elemn);
         --
         FETCH CUR_va_pc
            INTO REC_calcl_mt;
         --
         --DDC 209235
         vld_dt_gain := REC_calcl_mt.dt_efect;
         --
         IF CUR_va_pc%NOTFOUND THEN
            CLOSE CUR_va_pc;
            --
            OPEN CUR_va_tx(REC_CUR_non_recrn.id_entre_elemn);
            --
            FETCH CUR_va_tx
               INTO REC_calcl_mt;
            --
            IF CUR_va_tx%NOTFOUND THEN
               CLOSE CUR_va_tx;
               --
               OPEN CUR_va_mt_fixe(REC_CUR_non_recrn.id_entre_elemn);
               --
               FETCH CUR_va_mt_fixe
                  INTO REC_calcl_mt;
               --
               IF CUR_va_mt_fixe%NOTFOUND THEN
                  CLOSE CUR_va_mt_fixe;
                  --
                  vln_mt_calcl := 0;
                  --
               ELSE
                  CLOSE CUR_va_mt_fixe;
                  --
                  -- 6.22.1.2.1.3 Montant fixe  aucun calcul
                  vln_mt_calcl := REC_calcl_mt.mt_fixe;
                  --
               END IF;
               --
               vln_tx_horr := NULL;
               --
            ELSE
               CLOSE CUR_va_tx;
               --
               -- 6.22.1.2.1.2 Calculer le montant à partir d'un taux
               --
               vln_tx_horr := REC_calcl_mt.va_tx;
               --
               IF vln_tx_horr IS NULL THEN
                  --
                  vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                  pd_dt_efect => REC_calcl_mt.dt_efect);
                  --
               END IF;
               --
               vln_mt_calcl := (REC_calcl_mt.nb_hh * vln_tx_horr * REC_calcl_mt.factr * REC_calcl_mt.table_factr);
               --
               vln_nb_hh := REC_calcl_mt.nb_hh;
               --
            END IF;
            --
         ELSE
            CLOSE CUR_va_pc;
            --
            -- 6.22.1.2.1.1  Calculer le montant à partir d'un pourcentage
            --
            vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                            pd_dt_efect => REC_calcl_mt.dt_efect);
            --
            vln_mt_calcl := (REC_calcl_mt.nb_hh * vln_tx_horr * (NVL(REC_calcl_mt.va_pc,
                                                                     0) / 100));
            --
            vln_nb_hh := REC_calcl_mt.nb_hh;
            --
         END IF;
         --
         -- Retouche 151 Il ne faut pas tenir compte des éléments A082
         -- dont la valeur est nulle ou 0 dans le groupe
         --
      
         IF REC_CUR_non_recrn.cd_sagip = '082' AND
            vln_mt_calcl = 0 THEN
            CONTINUE element;
         END IF;
         --
         -- Total des montants pour le code de gain sagip
         --
         vln_mt_total := vln_mt_total + vln_mt_calcl;
         --
         -- Retouche 183 On tient compte de l'élément pour la clef comptable
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_non_recrn.dt_debut,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_non_recrn.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_non_recrn.id_entre_elemn,
                       pd_dt_efect       => REC_calcl_mt.dt_efect,
                       prec_dt_hh        => vlrec_dt_hh);
         --
         vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                 pn_id_entre_elemn    => REC_CUR_non_recrn.id_entre_elemn,
                                                 pd_dt_efect          => REC_calcl_mt.dt_efect,
                                                 pv_nm_va_entre_elemn => cv_nm_cd_paiem);
         --
         vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
         --
         vlv_tx_mt := fv_convr_nb_decml_carct(vln_mt_calcl);
         --
         vgv_etape := '6.22.1.1 - id_elemn = ' || REC_CUR_non_recrn.id_entre_elemn;
         --
         --fnd_file.put_line(fnd_file.log,'Avant curseur CUR_verfr_h620');
      
         --DDC175592
         --fnd_file.put_line(fnd_file.log,'CHG 175592 cd_sagip = '|| REC_CUR_non_recrn.cd_sagip);
         IF REC_CUR_non_recrn.cd_sagip = '082' THEN
            --fnd_file.put_line(fnd_file.log,'CHG 175592 cd_sagip = 082');
            OPEN CUR_hh_carra(REC_CUR_non_recrn.id_entre_elemn);
            FETCH CUR_hh_carra
               INTO vln_hh_carra;
            CLOSE CUR_hh_carra;
         
            --fnd_file.put_line(fnd_file.log,'CHG 175592 vln_hh_carra ='||vln_hh_carra);
         
            IF NVL(vln_hh_carra,
                   0) > 0 THEN
               ---   Si la valeur du champ « Heure pour la CARRA » est renseigné  et différent de zéro,
               --    le grand total des unités dans la table GIR_TRANS_H620 est égale à la valeur du champ
               --    « Heure pour la CARRA » de l`entrée d'élément converti en heure minute
               -- fnd_file.put_line(fnd_file.log,'1. DDC 175592 vln_hh_carra='||vln_hh_carra);
               vln_nb_hh := vln_hh_carra;
            ELSE
               ---   Sinon,  c'est-à-dire le champ « Heures pour la CARRA » n'est pas renseigné ou est égal à zéro
               --   le grand total des unités dans la table GIR_TRANS_H620 est égale à la valeur du champ
               -- « Équiv hres pour échelon» de l`entrée d'élément converti en heure minute
            
               OPEN CUR_hh_echelon(REC_CUR_non_recrn.id_entre_elemn);
               FETCH CUR_hh_echelon
                  INTO vln_hh_echelon;
               CLOSE CUR_hh_echelon;
               --fnd_file.put_line(fnd_file.log,'CHG 175592 vln_hh_echelon ='||vln_hh_echelon);
               --fnd_file.put_line(fnd_file.log,'3. DDC 175592 vln_hh_echelon='||vln_hh_echelon);
               vln_nb_hh := vln_hh_echelon;
            
               -- fnd_file.put_line(fnd_file.log,'4. DDC 175592 vln_nb_hh='||vln_nb_hh);
            END IF;
         
            --fnd_file.put_line(fnd_file.log,'CHG 175592 vln_nb_hh ='||vln_nb_hh);
         END IF;
      
         OPEN CUR_verfr_h620(REC_CUR_non_recrn.id_entre_elemn);
         --
         FETCH CUR_verfr_h620
            INTO REC_h620;
         --
         IF CUR_verfr_h620%NOTFOUND THEN
            CLOSE CUR_verfr_h620;
            --
         
            vgv_etape := '6.22.1.2 - id_elemn = ' || REC_CUR_non_recrn.id_entre_elemn;
            --
            -- 6.20.1.2 Créer un H620 car n'existe pas
            --
         
            vgrec_gir_rh_fdt := NULL;
            --
            vgrec_gir_rh_fdt.nm_fiche                := 'H620';
            vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
            vgrec_gir_rh_fdt.in_trans_anul           := 'N';
            vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
            vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
            vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
            vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn.cd_sagip;
            vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn.id_entre_elemn;
            vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn.id_type_elemn;
            vgrec_gir_rh_fdt.dt_gain                 := REC_calcl_mt.dt_efect;
            --DDC 209235
            vld_dt_gain := REC_calcl_mt.dt_efect;
            --
            vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh;
            vgrec_gir_rh_fdt.nb_hh          := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                      pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                      pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
            vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
            vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
            vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
            vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
            vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
            vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
            vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.dt_debut       := REC_calcl_mt.dt_debut;
            vgrec_gir_rh_fdt.dt_fin         := REC_calcl_mt.dt_fin;
            vgrec_gir_rh_fdt.hh_debut       := NULL;
            vgrec_gir_rh_fdt.hh_fin         := NULL;
            vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
            vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
            vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
            vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
            --
            vgv_etape := '6.22.1.2.2 - id_elemn = ' || REC_CUR_non_recrn.id_entre_elemn;
            --
            -- CHG225373 Début 2017-03-03 nouveau paramètre indiquant quelle date utiliser pour déterminer aa_finnc
            --p_creer_gain_fdt(vln_id_contr_fdt);
            p_creer_gain_fdt(pn_id_contr_fdt   => vln_id_contr_fdt,
                             pv_utils_autre_dt => 'O');
            -- CHG225373 Fin
         
            /* Pour log d'erreur*/
            vld_dt_gain := REC_calcl_mt.dt_efect;
            --
         ELSE
            CLOSE CUR_verfr_h620;
            --
            -- 6.20.1.3 Transaction H620 existe
            --
            IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --fnd_file.put_line(fnd_file.log,'CHG 175592 Rejet');
               --
               vgv_etape := '6.22.1.3 - id_trans = ' || REC_h620.id_trans_h620;
               --
               -- Transféré à SAGIP donc remplir tableau des rejets
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               vln_id_afect := REC_CUR_non_recrn.id_afect;
               vld_dt_gain  := REC_h620.dt_gain;
            
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_non_recrn.id_entre_elemn,
                            pn_id_trans       => REC_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => 'A' || REC_CUR_non_recrn.cd_sagip,
                            pn_id_contr_fdt   => REC_h620.id_contr_fdt);
               --
               --DDC 209235
               vln_id_entre_elemn := REC_CUR_non_recrn.id_entre_elemn;
               vln_id_contr_fdt   := REC_h620.id_contr_fdt;
               vln_id_trans       := REC_h620.id_trans_h620;
            
               vlv_code_erreur_gir := 'GIR-100153';
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               --
               -- Arrondir le montant issu des calculs pour comparer au montant arrondi dans la table H620
               --
               vln_mt_total := ROUND(vln_mt_total,
                                     2);
               --
               p_log('mt_h620=' || REC_h620.mt_h620 || ' , calcul=' || vln_mt_total,
                     vlv_nm_procd_fonct);
               --
               vgv_etape := '6.22.1.4 - id_trans = ' || REC_h620.id_trans_h620;
               --
               IF REC_h620.mt_h620 <> vln_mt_total OR
                 -- Retouche 170
                  REC_h620.dt_debut <> REC_calcl_mt.dt_debut OR
                  REC_h620.dt_fin <> REC_calcl_mt.dt_fin OR
                 -- Retouche 183
                  REC_h620.budgt <> vlrec_cle_compt.budgt OR
                  REC_h620.centr_respn <> vlrec_cle_compt.centr_respn THEN
                  --
                  vgv_etape := '6.22.1.6 - id_trans = ' || REC_h620.id_trans_h620;
                  --
                  -- 6.22.1.6 une différence existe
                  --
                  -- 6.22.1.6.1 Obtenir chacun des enregistrements dans la table GIR_RH_FDT qui ont été utilisés pour créer la transaction H620
                  --
                  vgv_etape := '6.22.1.6.1 - id_trans = ' || REC_h620.id_trans_h620;
                  --
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_trans = REC_h620.id_trans_h620
                     AND fdt.nm_fiche = 'H620'
                     AND fdt.in_trans_anul = 'N';
                  --
                  -- 6.22.1.6.2 transaction annulée = « Oui » de la transaction H620
                  --
                  vgv_etape := '6.22.1.6.2 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
                  --
                  IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                     --
                     -- 6.22.1.6.3 créer un enregistrement H010 dans la table GIR_RH_FDT
                     --
                     vgv_etape := '6.22.1.6.3 - id_trans = ' || REC_h620.id_trans_h620;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     --
                     vgvar_liste_id_h620_h010.extend;
                     vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                     --
                  END IF;
                  --
                  vgv_etape := '6.22.1.6.4 - id_elemn = ' || REC_CUR_non_recrn.id_entre_elemn;
                  --
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := REC_calcl_mt.dt_efect;
                  --DDC 209235
                  vld_dt_gain := REC_calcl_mt.dt_efect;
                  --
                  vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh;
                  vgrec_gir_rh_fdt.nb_hh          := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
                  vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                  vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
                  vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut       := REC_calcl_mt.dt_debut;
                  vgrec_gir_rh_fdt.dt_fin         := REC_calcl_mt.dt_fin;
                  vgrec_gir_rh_fdt.hh_debut       := NULL;
                  vgrec_gir_rh_fdt.hh_fin         := NULL;
                  vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                  vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                  vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                  vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                  --
                  -- CHG225373 Début 2017-03-03 nouveau paramètre indiquant quelle date utiliser pour déterminer aa_finnc
                  --p_creer_gain_fdt(vln_id_contr_fdt);
                  p_creer_gain_fdt(pn_id_contr_fdt   => vln_id_contr_fdt,
                                   pv_utils_autre_dt => 'O');
                  -- CHG225373 Fin
                  --
                  /* Pour log d'erreur*/
                  vld_dt_gain := REC_calcl_mt.dt_efect;
               END IF;
               --
            END IF;
            --
         END IF;
         --
      END LOOP element;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_22.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_verfr_h620%ISOPEN THEN
            CLOSE CUR_verfr_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80377';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_22;

   --
   -- Étape 6.23
   -- ============================================================================
   -- P_verfr_elemn_etape_6_23
   -- ============================================================================
   /**************************************************************************
   * But : Vérification de suppression des autres éléments non récurrents
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-05  INC00016333  Remplacer new par old car traite des destructions
   * Michel Dessureault   2013-02-13  Retouche 132 (INC00017155) On tient compte des date de début et fin de l'entrée d'élément
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-06-04  INC00018514  Ajouter dans le critère de vérification de la H620 que celle-ci soit dans la période courante
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_23(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_23';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_verfr_elemn_etape_6_23';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h620.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vltab_elemn_suprm   sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les éléments supprimés
      vltab_id_trans_h620 sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les id du H620
      vlrec_persn         type_rec_persn; -- Infos de la personne
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments supprimés.  (6.23.1)
      ----------------------------------------------------------------------
      --
      CURSOR CUR_non_recrn_suprm IS
         SELECT rse.element_entry_id id_entre_elemn
           FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                -- Table temporaire contenant la liste des affectations principales à paie variable en vigueur à la période de paie courante.
               ,
                xxgir_rh_afect_tempr rat
          WHERE -- 6.23.1.1 Élément lié à l'affectation
          rse.assignment_id = rat.id_afect
         --DDC 209235 par employé (=assignment_id)
          AND rat.id_afect = pn_assignment_id
          AND rat.in_type_paie = cv_id_type_paie_varbl
         -- 6.23.1.2 Élément non récurrent
          AND EXISTS (SELECT 'X'
             FROM pay_element_types_f pet
            WHERE pet.element_type_id = rse.element_type_id
              AND pet.processing_type = 'N'
              AND pet.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
              AND pet.effective_end_date >= vgrec_perd_paie_varbl.dt_debut)
         -- 6.23.1.3 Élément n'est pas un « Special inputs » avec un montant de remplacement et date de début et de fin
          AND rse.element_entry_id NOT IN (SELECT reht.id_entre_elemn
                                         FROM xxgir_rh_elemn_h620_tempr reht
                                        WHERE reht.nm_liste = '6_5'
                                             --DDC 209235 par employé (=assignment_id)
                                          AND reht.id_afect = pn_assignment_id)
         -- 6.23.1.4 Élément n'est pas un « Special inputs » avec un montant supplémentaire
          AND rse.element_entry_id NOT IN (SELECT reht.id_entre_elemn
                                         FROM xxgir_rh_elemn_h620_tempr reht
                                        WHERE reht.nm_liste = '6_6'
                                             --DDC 209235 par employé (=assignment_id)
                                          AND reht.id_afect = pn_assignment_id)
         -- 6.23.1.5 Élément non traité
          AND rse.in_trait = 'N'
         -- 6.23.1.6 Élément avec un type de transaction « Suppression »
          AND rse.trans_type = 'D'
         --  6.23.1.7 L'élément supprimé est en vigueur dans la période de paie courante
          AND rse.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
          AND rse.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
         -- 6.23.1.8 Élément présent dans le jeu d'éléments pour H620 déterminé au point 2
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_h620'
              AND reht.id_type_elemn = rse.element_type_id)
          GROUP BY rse.element_entry_id;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la transaction H620. (6.23.4.2.1)
      ----------------------------------------------------------------------
      CURSOR CUR_verfr_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.statu_trans,
                h620.id_trans_h620,
                h620.id_afect,
                h620.cd_gain,
                fdt.id_contr_fdt,
                fdt.dt_gain
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE h620.elemn_entry_id = pn_id_entre_elemn
               -- INC00018514 Transaction pour la période de paie courante.
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
            AND h620.in_trans_anul = 'N'
            AND fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620';
      --
      REC_h620 CUR_verfr_h620%ROWTYPE;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      vgv_etape := '6.23.1';
      --
      <<suppression>>
      FOR REC_CUR_non_recrn_suprm IN CUR_non_recrn_suprm LOOP
         --
         vgv_etape := '6.23.4 - id_elemn = ' || REC_CUR_non_recrn_suprm.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_non_recrn_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         OPEN CUR_verfr_h620(REC_CUR_non_recrn_suprm.id_entre_elemn);
         --
         FETCH CUR_verfr_h620
            INTO REC_h620;
         --
         vgv_etape := '6.23.4.3';
         --
         --DDC 209235
         vln_id_trans     := REC_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
         vld_dt_gain      := REC_h620.dt_gain;
         --
         IF CUR_verfr_h620%FOUND THEN
            CLOSE CUR_verfr_h620;
            --
            vgv_etape := '6.23.4.4 - id_elemn = ' || REC_CUR_non_recrn_suprm.id_entre_elemn;
            --
            --DDC 209235
            vld_dt_gain := REC_h620.dt_gain;
            --
            IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.23.4.4.1.1 - id_trans = ' || REC_h620.id_trans_h620;
               --
               -- Transféré à SAGIP donc remplir tableau des rejets
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               p_obten_persn(pn_id_afect => REC_h620.id_afect,
                             pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                             prec_persn  => vlrec_persn);
               --
               -- remplir tableau des rejets
               --
               p_ajout_rejt(pn_id_afect       => REC_h620.id_afect,
                            pn_id_entre_elemn => REC_CUR_non_recrn_suprm.id_entre_elemn,
                            pn_id_trans       => REC_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => REC_h620.cd_gain,
                            pn_id_contr_fdt   => REC_h620.id_contr_fdt);
               --
               --DDC 209235
               vln_id_afect        := REC_h620.id_afect;
               vln_id_entre_elemn  := REC_CUR_non_recrn_suprm.id_entre_elemn;
               vln_id_contr_fdt    := REC_h620.id_contr_fdt;
               vln_id_trans        := REC_h620.id_trans_h620;
               vlv_code_erreur_gir := 'GIR-100153';
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               --
               vgv_etape := '6.23.4.4.1.2 - id_trans = ' || REC_h620.id_trans_h620;
               p_log(vgv_etape,
                     vlv_nm_procd_fonct);
               --
               vltab_elemn_suprm.extend;
               --
               vltab_elemn_suprm(vltab_elemn_suprm.count) := REC_CUR_non_recrn_suprm.id_entre_elemn;
               --
               vgv_etape := '6.23.4.4.1.3 - id_trans = ' || REC_h620.id_trans_h620;
               --
               vltab_id_trans_h620.extend;
               --
               vltab_id_trans_h620(vltab_id_trans_h620.count) := REC_h620.id_trans_h620;
               --
               vgv_etape := '6.23.4.4.1.4 - id_trans = ' || REC_h620.id_trans_h620;
               --
               vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
               --
               IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                  --
                  vgv_etape := '6.23.4.4.1.5 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                  --
               END IF;
               --
            END IF;
            --
         ELSE
            --
            CLOSE CUR_verfr_h620;
            --
            vgv_etape := '6.23.4.4.1.2 - id_elemn = ' || REC_CUR_non_recrn_suprm.id_entre_elemn;
            p_log(vgv_etape,
                  vlv_nm_procd_fonct);
            --
            vltab_elemn_suprm.extend;
            --
            vltab_elemn_suprm(vltab_elemn_suprm.count) := REC_CUR_non_recrn_suprm.id_entre_elemn;
            --
         END IF;
         --
      END LOOP suppression;
      --
      FORALL vln_cp IN INDICES OF vltab_id_trans_h620
         UPDATE gir_rh_fdt fdt
            SET fdt.in_trans_anul = 'O'
          WHERE fdt.id_trans = vltab_id_trans_h620(vln_cp)
            AND fdt.nm_fiche = 'H620'
            AND fdt.in_trans_anul = 'N';
      --
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_elemn rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      --
      -- Début INC-89949
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_entre_elemn_paie rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      -- Fin INC-89949
      --
      vlTAB_id_trans_h620.DELETE;
      vlTAB_elemn_suprm.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_23.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_elemn_suprm.DELETE;
         vlTAB_id_trans_h620.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_verfr_h620%ISOPEN THEN
            CLOSE CUR_verfr_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80378';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_23;

   --
   -- Étape 6.24
   -- ============================================================================
   -- P_trait_elemn_etape_6_24
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des autres éléments non récurrents (fdt).
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-26  INC00016333  Ajouter le id_afect dans le IF
   *                                               pour valider la présence dans la liste fusionnée.
   *                                               Obtenir la période de paie du gain antérieur.
   *                                               Ajouter les paramètres au curseur CUR_non_recrn_anter.
   *                                               Inclure les éléments de regroupement pour 6_24 traitement 2
   * Michel Dessureault   2013-01-22  INC00016972  Afficher/utiliser le taux horaire du changement de corps d'emploi dans le H620.
   * Michel Dessureault   2013-01-30  Retouche 123 Inscrire les heures en « Heure et minute » ou en « Heure centième » .
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement du code SAGIP de «A010» à «A015» d'une H620
   * Michel Dessureault   2013-02-28  INC00017473  Ligne à 0 à annuler lors du traitement des fdt dans le passé.
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-08  Retouche 158 (INC00017530,17532) Heures et taux convertis pour les heures provenant de la feuille de temps.
   * Michel Dessureault   2013-04-17  Retouche 183 Tenir compte des entrées d'élément pour la clef comptable.
   * Michel Dessureault   2013-05-10  Retouche 202 (INC00018296) Enlever le calcul avec le facteur qui a été ajouté dans la retouche 158.
   *                                               Ajouter la section et classe dans le regroupement des heures antérieures
   * Michel Dessureault   2013-06-14  INC00018584  corriger le traitement des heures qui s'annulent pour ne pas envoyer la même chose pour rien.
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_24(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_24';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_24';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_id_afect      NUMBER;
      vln_pc_avant_socl NUMBER; -- valeur du pourcentage pour avantages sociaux
      vln_mt_calcl      NUMBER; -- Montant calculé
      vlrec_cle_compt   type_rec_ventl_cout;
      vlrec_persn       type_rec_persn; -- Infos de la personne
      vlrec_dt_hh       type_rec_dt_hh; -- Dates et heures début fin
      vlv_cd_paiem      gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vlv_exist         VARCHAR2(1); -- Pour vérifier l'existence de l'élément dans le jeu
      -- INC00016333
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain antérieur
      vln_tx_horr          NUMBER; -- taux horaire pour les calculs
      --DDC 241595
      vln_tx_horr_bkp  NUMBER; -- taux backup
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vlv_tx_mt        gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      vln_nb_hh        NUMBER;
      -- Retouche 170
      vln_id_type_elemn gir_rh_fdt.elemn_type_id%TYPE; -- Prendre le bon type selon si P ou T
      -- INC00018584 meilleure performance
      vltab_maj_suivi tab_maj_suivi := tab_maj_suivi(); -- Table pour la maj du suivi d'élément
      -- INC00018952 pour vérifier version identique
      vlb_anul_versn_ident BOOLEAN; -- Drapeau pour indiquer si on annule la version identique positive
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des autres éléments non récurrents à
      -- l'intérieur de la paie courante.
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_inter IS
         SELECT id_afect,
                catgr_emplo,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_gain,
                nb_hh,
                va_tx
                /* Retouche 202 toujours mettre 1 pour le facteur
                -- Retouche 158
                ,va_factr */,
                1 va_factr
           FROM (SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        id_entre_elemn,
                        nm_elemn,
                        cd_elemn,
                        cd_sagip,
                        FND_DATE.CANONICAL_TO_DATE(dt_gain) dt_gain
                        /* retouche 158
                        ,fnd_number.canonical_to_number(nb_hh) nb_hh*/,
                        DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh_convr),
                               NULL,
                               FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh),
                               FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh_convr)) nb_hh,
                        FND_NUMBER.CANONICAL_TO_NUMBER(va_tx) va_tx
                 /* Retouche 202 ne pas tenir compte du facteur
                 -- Retouche 158
                 ,NVL(fnd_number.canonical_to_number(va_factr), 1) va_factr*/
                   FROM (SELECT reht.id_afect,
                                reht.catgr_emplo,
                                reht.id_type_elemn,
                                reht.id_entre_elemn,
                                reht.nm_elemn,
                                reht.cd_elemn,
                                reht.cd_sagip,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn
                                -- retouche 158 on va chercher le nombre heures converties
                               ,
                                (SELECT peef.attribute2
                                   FROM pay_element_entries_f peef
                                  WHERE TRUNC(reht.dt_debut) BETWEEN peef.effective_start_date AND peef.effective_end_date
                                    AND peef.element_entry_id = reht.id_entre_elemn) nb_hh_convr
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_8'
                               --DDC 209235 par employé (=assignment_id)
                            AND reht.id_afect = pn_assignment_id)
                 -- placer en colonne les lignes des valeurs des éléments
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Heures' nb_hh,
                                            'Taux' va_tx
                                            /* Retouche 202 ne pas tenir compte du facteur
                                            -- retouche 158
                                            ,'Facteur'        va_factr*/)))
         -- à l'intérieur de la période courante
          WHERE TRUNC(dt_gain) BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin
          ORDER BY id_afect,
                   cd_sagip
                   -- INC00017528
                  ,
                   id_type_elemn,
                   dt_gain
                   -- INC00016333
                   -- Pour avoir les heures positives en premier
                  ,
                   nb_hh DESC;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur des autres éléments non récurrents regroupés
      -- antérieur à la paie courante. 6.24.4
      ----------------------------------------------------------------------
      CURSOR CUR_regrp_anter IS
         SELECT id_afect,
                cd_sagip
                -- INC00017528
               ,
                id_type_elemn,
                dt_gain
                -- INC00016972
                --,MAX(va_tx) va_tx
               ,
                va_tx
                /* Retouche 202 mettre 1 pour la valeur du facteur
                -- retouche 158
                ,va_factr */,
                1 va_factr
                -- Retouche 202 ajouter le corps emploi dans le regroupement
               ,
                corps_emplo,
                SUM(nb_hh) nb_hh
           FROM (SELECT id_afect,
                         catgr_emplo corps_emplo,
                         id_type_elemn,
                         id_entre_elemn,
                         nm_elemn,
                         cd_elemn
                         /* retouche 126
                         ,DECODE(cd_sagip, '010', '015', cd_sagip) cd_sagip*/,
                         cd_sagip,
                         FND_DATE.CANONICAL_TO_DATE(dt_gain) dt_gain
                         /* retouche 158
                         ,fnd_number.canonical_to_number(nb_hh) nb_hh*/,
                         DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh_convr),
                                NULL,
                                FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh),
                                FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh_convr)) nb_hh,
                         FND_NUMBER.CANONICAL_TO_NUMBER(va_tx) va_tx
                  /* Retouche 202 ne pas tenir compte du facteur
                  -- retouche 158
                  ,NVL(fnd_number.canonical_to_number(va_factr), 1) va_factr */
                    FROM (SELECT reht.id_afect
                                  -- retouche 202 on va chercher le corps et section d'emploi
                               ,
                                (SELECT SUBSTR(pg.name,
                                               REGEXP_INSTR(pg.name,
                                                            '[\.]',
                                                            1,
                                                            1) + 1,
                                               3) || SUBSTR(pg.name,
                                                            REGEXP_INSTR(pg.name,
                                                                         '[\.]',
                                                                         1,
                                                                         2) + 1,
                                                            2)
                                   FROM per_grades            pg,
                                        pay_element_entries_f peef
                                  WHERE pg.grade_id = FND_NUMBER.CANONICAL_TO_NUMBER(peef.attribute3)
                                    AND TRUNC(reht.dt_debut) BETWEEN pg.date_from AND
                                        NVL(pg.date_to,
                                            HR_GENERAL.END_OF_TIME)
                                    AND TRUNC(reht.dt_debut) BETWEEN peef.effective_start_date AND peef.effective_end_date
                                    AND peef.element_entry_id = reht.id_entre_elemn) catgr_emplo,
                                reht.id_type_elemn,
                                reht.id_entre_elemn,
                                reht.nm_elemn,
                                reht.cd_elemn,
                                reht.cd_sagip,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn
                                -- retouche 158 on va chercher le nombre heures converties
                               ,
                                (SELECT peef.attribute2
                                   FROM pay_element_entries_f peef
                                  WHERE TRUNC(reht.dt_debut) BETWEEN peef.effective_start_date AND peef.effective_end_date
                                    AND peef.element_entry_id = reht.id_entre_elemn) nb_hh_convr
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_8'
                               --DDC 209235 par employé (=assignment_id)
                            AND reht.id_afect = pn_assignment_id)
                 -- placer en colonne les lignes des valeurs des éléments
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Heures' nb_hh,
                                            'Taux' va_tx
                                            /* Retouche 202 ne pas tenir compte du facteur
                                            -- retouche 158
                                            ,'Facteur'        va_factr */)))
         -- antérieur à la période courante
          WHERE TRUNC(dt_gain) < vgrec_perd_paie_varbl.dt_debut
         -- 6.24.4
          GROUP BY id_afect,
                   cd_sagip
                   -- INC00017528
                  ,
                   id_type_elemn,
                   dt_gain
                   -- INC00016972
                  ,
                   va_tx
                   /* Retouche 202 ne pas tenir compte du facteur
                   -- retouche 158
                   ,va_factr */
                   -- Retouche 202 ajouter le corps emploi dans le regroupement
                  ,
                   corps_emplo
         -- 6.14.1 Trier la liste
          ORDER BY id_afect
                   -- 6.14.1.1
                  ,
                   cd_sagip
                   -- 6.14.1.2
                  ,
                   id_type_elemn
                   -- 6.14.1.3
                  ,
                   dt_gain
                   -- 6.14.1.4
                  ,
                   nb_hh;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur des autres éléments non récurrents
      -- antérieur à la paie courante. 6.24.5.1
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_anter(pn_id_afect IN NUMBER,
                                 pv_cd_sagip IN VARCHAR2,
                                 --INC00017528
                                 pn_id_type_elemn IN NUMBER,
                                 pd_dt_gain       IN DATE) IS
         SELECT id_afect,
                catgr_emplo,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_gain,
                nb_hh,
                va_tx
                /* Retouche 202 Mettre 1 pour la valeur du facteur
                -- retouche 158
                ,va_factr */,
                1 va_factr
           FROM (SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        id_entre_elemn,
                        nm_elemn,
                        cd_elemn,
                        cd_sagip,
                        FND_DATE.CANONICAL_TO_DATE(dt_gain) dt_gain
                        /* retouche 158
                        ,fnd_number.canonical_to_number(nb_hh) nb_hh*/,
                        DECODE(FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh_convr),
                               NULL,
                               FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh),
                               FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh_convr)) nb_hh,
                        FND_NUMBER.CANONICAL_TO_NUMBER(va_tx) va_tx
                 /* Retouche 202 ne pas tenir compte du facteur
                 -- retouche 158
                 ,NVL(fnd_number.canonical_to_number(va_factr), 1) va_factr */
                   FROM (SELECT reht.id_afect,
                                reht.catgr_emplo,
                                reht.id_type_elemn,
                                reht.id_entre_elemn,
                                reht.nm_elemn,
                                reht.cd_elemn
                                /* retouche 126
                                ,DECODE(reht.cd_sagip, '010', '015', reht.cd_sagip) cd_sagip*/,
                                reht.cd_sagip,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn
                                -- retouche 158 on va chercher le nombre heures converties
                               ,
                                (SELECT peef.attribute2
                                   FROM pay_element_entries_f peef
                                  WHERE TRUNC(reht.dt_debut) BETWEEN peef.effective_start_date AND peef.effective_end_date
                                    AND peef.element_entry_id = reht.id_entre_elemn) nb_hh_convr
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_8'
                               -- INC00016333
                            AND reht.id_afect = pn_id_afect
                               /* retouche 126
                               AND    DECODE(reht.cd_sagip, '010', '015', reht.cd_sagip) = pv_cd_sagip*/
                            AND reht.cd_sagip = pv_cd_sagip
                               --INC00017528
                            AND reht.id_type_elemn = pn_id_type_elemn)
                 -- placer en colonne les lignes des valeurs des éléments
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Heures' nb_hh,
                                            'Taux' va_tx
                                            /* Retouche 202 ne pas tenir compte du facteur
                                            -- retouche 158
                                            ,'Facteur'        va_factr */)))
         -- INC00016333
          WHERE TRUNC(dt_gain) = TRUNC(pd_dt_gain)
         -- 6.14.1 Trier la liste
          ORDER BY -- 6.14.1.3
                   nb_hh;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur de la liste fusionnée (6.2 et 6.3).
      ----------------------------------------------------------------------
      CURSOR CUR_fusn IS
         SELECT ptt.id_afect,
                ptt.id_entre_elemn,
                ptt.id_type_elemn,
                ptt.cd_sagip,
                ptt.dt_debut,
                ptt.dt_fin,
                ptt.va_pc,
                ptt.va_tx,
                ptt.va_factr,
                ptt.in_type_liste
           FROM xxgir_rh_h620_pc_tx_tempr ptt
          WHERE --DDC 209235 par employé (=assignment_id)
          ptt.id_afect = pn_assignment_id;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour vérifier la présence de l'élément dans le jeu.
      ----------------------------------------------------------------------
      CURSOR CUR_verfr_presn_gain_pc(pn_id_type_elemn IN NUMBER) IS
         SELECT 'X'
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = 'jeu_pc'
            AND reht.id_type_elemn = pn_id_type_elemn;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver le % d'avantage social
      -- pour occasionnel embauché moins d'un an dans les entrées d'élément.
      -- Si absent aller chercher la valeur par défaut (6.15.2.7.2.2)
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_avant_socl(pn_id_afect IN NUMBER,
                                  pd_dt_efect IN DATE) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(DECODE(rea.va_entre_elemn,
                                                      NULL,
                                                      DECODE(rea.in_va_entre_deft,
                                                             'Y',
                                                             NVL(pliv.default_value,
                                                                 rea.va_entre_deft)),
                                                      rea.va_entre_elemn)) compn_avant_socl
           FROM xxgir_rh_elemn_afect_v  rea,
                pay_link_input_values_f pliv
          WHERE rea.id_afect = pn_id_afect
            AND pliv.input_value_id = rea.id_va_entre_elemn
            AND pliv.element_link_id = rea.id_lien_elemn
               -- Valide pour la date du gain
            AND TRUNC(pd_dt_efect) BETWEEN rea.pee_dt_debut_efect AND rea.pee_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pel_dt_debut_efect AND rea.pel_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.pet_dt_debut_efect AND rea.pet_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.piv_dt_debut_efect AND rea.piv_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN rea.peev_dt_debut_efect AND rea.peev_dt_fin_efect
            AND TRUNC(pd_dt_efect) BETWEEN pliv.effective_start_date AND pliv.effective_end_date
            AND (REGEXP_INSTR(rea.cd_elemn,
                              cv_cd_elemn_avant_socl,
                              1,
                              1,
                              0,
                              'i') > 0)
            AND (REGEXP_INSTR(rea.nm_va_entre_elemn,
                              cv_nm_pc,
                              1,
                              1,
                              0,
                              'i') > 0);
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour vérifier enregistrement identique dans la feuille de temps
      ----------------------------------------------------------------------
      CURSOR CUR_verfr_fdt(pn_id_bloc_temps  IN NUMBER,
                           pn_no_versn_objet IN NUMBER,
                           pv_cd_gain        IN VARCHAR2) IS
         SELECT fdt.id_contr_fdt,
                fdt.statu_sagip,
                fdt.id_trans,
                fdt.no_docmn
           FROM gir_rh_fdt fdt
          WHERE fdt.id_bloc_temps = pn_id_bloc_temps
            AND fdt.no_versn_objet = pn_no_versn_objet
            AND fdt.cd_gain = pv_cd_gain
            AND fdt.nm_fiche = 'H620'
            AND fdt.in_trans_anul = 'N';
      --
      REC_verfr_fdt CUR_verfr_fdt%ROWTYPE; -- Enregistrement de type CUR_verfr_fdt
      --
      -- INC00018584
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour vérifier enregistrement identique mais
      -- de version supérieure dans la feuille de temps
      ----------------------------------------------------------------------
      CURSOR CUR_verfr_versn_fdt(pn_id_bloc_temps  IN NUMBER,
                                 pn_no_versn_objet IN NUMBER,
                                 pv_cd_gain        IN VARCHAR2) IS
         SELECT fdt.id_contr_fdt,
                fdt.statu_sagip,
                fdt.id_trans,
                fdt.no_docmn,
                fdt.nb_hh_signe
           FROM gir_rh_fdt fdt
          WHERE fdt.id_bloc_temps = pn_id_bloc_temps
               -- trouver la max version active
            AND fdt.no_versn_objet = (SELECT MAX(fdt1.no_versn_objet)
                                        FROM gir_rh_fdt fdt1
                                       WHERE fdt1.id_bloc_temps = fdt.id_bloc_temps
                                         AND fdt1.nm_fiche = 'H620'
                                         AND fdt1. cd_gain = pv_cd_gain --INC72336
                                         AND fdt1.in_trans_anul = 'N')
               -- La version doit être supérieure
            AND fdt.no_versn_objet > pn_no_versn_objet
            AND fdt.cd_gain = pv_cd_gain
            AND fdt.nm_fiche = 'H620'
            AND fdt.in_trans_anul = 'N';
      --
      REC_verfr_versn CUR_verfr_versn_fdt%ROWTYPE; -- Enregistrement de type CUR_verfr_versn_fdt
      -- fin INC00018584
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour trouver les enregistrements fdt à recréer
      ----------------------------------------------------------------------
      CURSOR CUR_id_fdt(pn_id_trans     IN NUMBER,
                        pn_id_contr_fdt IN NUMBER,
                        pv_cd_gain      IN VARCHAR2) IS
         SELECT fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.id_contr_fdt <> pn_id_contr_fdt
            AND fdt.cd_gain = pv_cd_gain
            AND fdt.id_trans = pn_id_trans
            AND fdt.nm_fiche = 'H620'
               -- INC00018584 Ne pas prendre les H620 annulées
            AND fdt.in_trans_anul = 'N'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour les enregistrements fdt à recréer
      ----------------------------------------------------------------------
      CURSOR CUR_fdt_2(pn_id_contr_fdt IN NUMBER) IS
         SELECT fdt.*
           FROM gir_rh_fdt fdt
          WHERE fdt.id_contr_fdt = pn_id_contr_fdt;
      --
      REC_fdt_2 gir_rh_fdt%ROWTYPE; -- Enregistrement de type GIR_RH_FDT
      --
   BEGIN
      --
      p_log('10 - Début procédure Param-> pn_assignment_id=' || pn_assignment_id,
            vlv_nm_procd_fonct);
      --
      /*
      vln_index    := vgTAB_fdt_h620.COUNT;
      */
      vln_id_afect       := 0;
      vgv_etape          := '6.24';
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<traitement_1>> -- pour appliquer les primes sur les heures
      FOR REC_CUR_non_recrn_inter IN CUR_non_recrn_inter LOOP
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_non_recrn_inter.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_non_recrn_inter.dt_gain;
         --
         IF vln_id_afect <> REC_CUR_non_recrn_inter.id_afect THEN
            --
            -- Ne faire qu'une fois par affectation
            --
            vln_id_afect := REC_CUR_non_recrn_inter.id_afect;
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_non_recrn_inter.id_entre_elemn,
                       pd_dt_efect       => REC_CUR_non_recrn_inter.dt_gain,
                       prec_dt_hh        => vlrec_dt_hh);
         --
         vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                 pn_id_entre_elemn    => REC_CUR_non_recrn_inter.id_entre_elemn,
                                                 pd_dt_efect          => REC_CUR_non_recrn_inter.dt_gain,
                                                 pv_nm_va_entre_elemn => cv_nm_cd_paiem);
         --
         p_log('6_24_01: afect: ' || vln_id_afect,
               vlv_nm_procd_fonct);
         p_log('6_24_01: elemn: ' || REC_CUR_non_recrn_inter.id_entre_elemn,
               vlv_nm_procd_fonct);
         p_log('6_24_01: type : ' || REC_CUR_non_recrn_inter.id_type_elemn,
               vlv_nm_procd_fonct);
         p_log('6_24_01: code : ' || REC_CUR_non_recrn_inter.cd_sagip,
               vlv_nm_procd_fonct);
         p_log('6_24_01: heure: ' || REC_CUR_non_recrn_inter.nb_hh,
               vlv_nm_procd_fonct);
         p_log('6_24_01: gain : ' || REC_CUR_non_recrn_inter.dt_gain,
               vlv_nm_procd_fonct);
         p_log('6_24_01: factr: ' || REC_CUR_non_recrn_inter.va_factr,
               vlv_nm_procd_fonct);
         p_log('6_24_01: taux : ' || REC_CUR_non_recrn_inter.va_tx,
               vlv_nm_procd_fonct);
         p_log('6_24_01: bloc : ' || vlrec_dt_hh.id_bloc_temps,
               vlv_nm_procd_fonct);
         p_log('6_24_01: ver  : ' || vlrec_dt_hh.no_versn_objet,
               vlv_nm_procd_fonct);
         p_log('6_24_01: deb  : ' || vlrec_dt_hh.hh_debut,
               vlv_nm_procd_fonct);
         p_log('6_24_01: fin  : ' || vlrec_dt_hh.hh_fin,
               vlv_nm_procd_fonct);
         --
         -- 6.24.1
         --
         vlv_exist := NULL;
         vgv_etape := '6.24.1 - id_elemn = ' || REC_CUR_non_recrn_inter.id_entre_elemn;
         --
         OPEN CUR_verfr_presn_gain_pc(REC_CUR_non_recrn_inter.id_type_elemn);
         --
         FETCH CUR_verfr_presn_gain_pc
            INTO vlv_exist;
         --
         CLOSE CUR_verfr_presn_gain_pc;
         --
         IF NVL(vlv_exist,
                'N') = 'X' THEN
            --
            <<fusion>>
            FOR REC_CUR_fusn IN CUR_fusn LOOP
               --
               -- Retouche 183 Utiliser la clef comptable de l'élément si elle existe
               --
               p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                                  pd_dt_afect       => vgrec_perd_paie_varbl.dt_debut,
                                  pv_id_type_paie   => cv_id_type_paie_varbl,
                                  pn_id_entre_elemn => REC_CUR_fusn.id_entre_elemn,
                                  prec_ventl_cout   => vlrec_cle_compt);
               --
               -- 6.24.1.1
               --
               vln_nb_hh := NULL;
               vgv_etape := '6.24.1.1 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
               --
               IF REC_CUR_non_recrn_inter.dt_gain >= REC_CUR_fusn.dt_debut AND
                  REC_CUR_non_recrn_inter.dt_gain <= REC_CUR_fusn.dt_fin AND
                 -- INC00016333
                  vln_id_afect = REC_CUR_fusn.id_afect THEN
                  --
                  vln_mt_calcl := 0;
                  --
                  -- 6.24.1.1.1
                  --
                  vgv_etape := '6.24.1.1.1 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                  --
                  p_log('6_24_02: liste: ' || REC_CUR_fusn.in_type_liste,
                        vlv_nm_procd_fonct);
                  p_log('6_24_02: elemn: ' || REC_CUR_fusn.Id_Entre_Elemn,
                        vlv_nm_procd_fonct);
                  p_log('6_24_02: type : ' || REC_CUR_fusn.Id_Type_Elemn,
                        vlv_nm_procd_fonct);
                  p_log('6_24_02: code : ' || REC_CUR_fusn.Cd_Sagip,
                        vlv_nm_procd_fonct);
                  p_log('6_24_02: val  : ' || NVL(REC_CUR_fusn.Va_Pc,
                                                  REC_CUR_fusn.Va_Tx),
                        vlv_nm_procd_fonct);
                  --
                  IF REC_CUR_fusn.in_type_liste = 'P' THEN
                     --
                     -- Retouche 170
                     -- On utilise le type de l'élément traité car c'est lui qui est dans la liste d'égibilité
                     vln_id_type_elemn := REC_CUR_non_recrn_inter.id_type_elemn;
                     --
                     -- Aller chercher si un taux différent de nul existe pour l'élément
                     --
                     -- INC00016972
                     vln_tx_horr := REC_CUR_non_recrn_inter.va_tx;
                     /*
                     vlv_tx_mt := Fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                          pn_id_entre_elemn    => REC_CUR_non_recrn_inter.id_entre_elemn,
                                                          pd_dt_efect          => REC_CUR_non_recrn_inter.dt_gain,
                                                          pv_nm_va_entre_elemn => cv_nm_tx);
                     */
                     --
                     -- INC00016972
                     -- Début SAGIR CHG246262/INC125796 Julie Goulet
                     -- vln_tx_horr n'est pas NULL dans le cas où il est déjà inscrit dans l'entré d'élément (exemple
                     -- d'un employé effectuant des heures dans un autre corps/class)
                     IF vln_tx_horr IS NULL THEN
                        --DDC241595
                        IF REC_CUR_fusn.Cd_Sagip IN ('010',
                                                     '015',
                                                     '029') THEN
                           vln_tx_horr_bkp := NULL;
                           vln_tx_horr     := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                               pd_dt_efect    => REC_CUR_non_recrn_inter.dt_gain,
                                                               pv_in_tx_majrt => 'O');
                           vln_tx_horr_bkp := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                               pd_dt_efect    => REC_CUR_non_recrn_inter.dt_gain,
                                                               pv_in_tx_majrt => 'N');
                        ELSE
                           vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                           pd_dt_efect => REC_CUR_non_recrn_inter.dt_gain);
                        END IF;
                     END IF;
                     -- Fin SAGIR CHG246262/INC125796 Julie Goulet
                     --
                     -- retouche 158 on doit multiplier le facteur au taux
                  
                     vln_tx_horr := vln_tx_horr * REC_CUR_non_recrn_inter.va_factr;
                     --DDC241595
                     IF REC_CUR_fusn.Cd_Sagip IN ('010',
                                                  '015',
                                                  '029') THEN
                        vln_tx_horr_bkp := vln_tx_horr_bkp * REC_CUR_non_recrn_inter.va_factr;
                     END IF;
                     --
                     vln_pc_avant_socl := 0;
                     --
                     IF NVL(vlrec_persn.catgr_emplo,
                            '!') = cv_catgr_emplo_ocasn THEN
                        --
                        -- 6.24.1.1.2 Tenir compte du pourcentage pour avantages sociaux
                        --
                        vgv_etape := '6.24.1.1.2 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                        --
                        OPEN CUR_elemn_avant_socl(vln_id_afect,
                                                  REC_CUR_non_recrn_inter.dt_gain);
                        --
                        FETCH CUR_elemn_avant_socl
                           INTO vln_pc_avant_socl;
                        --
                        IF CUR_elemn_avant_socl%NOTFOUND THEN
                           --
                           vln_pc_avant_socl := 0;
                           --
                        END IF;
                        --
                        CLOSE CUR_elemn_avant_socl;
                        --
                     END IF;
                     --
                     -- 6.24.1.1.1
                     vgv_etape := '6.24.1.1.1 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                     --
                     --DDC241595
                     IF REC_CUR_fusn.Cd_Sagip IN ('010',
                                                  '015',
                                                  '029') THEN
                        vln_mt_calcl := (REC_CUR_non_recrn_inter.nb_hh * vln_tx_horr_bkp *
                                        (NVL(REC_CUR_fusn.va_pc,
                                              0) / 100)
                                        -- 6.24.1.1.2 Tenir compte du pourcentage pour avantages sociaux
                                        * (1 + NVL(vln_pc_avant_socl,
                                                    0) / 100));
                     ELSE
                        vln_mt_calcl := (REC_CUR_non_recrn_inter.nb_hh * vln_tx_horr * (NVL(REC_CUR_fusn.va_pc,
                                                                                            0) / 100)
                                        -- 6.24.1.1.2 Tenir compte du pourcentage pour avantages sociaux
                                        * (1 + NVL(vln_pc_avant_socl,
                                                    0) / 100));
                     END IF;
                     --
                     vln_nb_hh := REC_CUR_non_recrn_inter.nb_hh;
                     --
                  ELSE
                     -- prorata
                     --
                     -- Retouche 170
                     -- On utilise le type de l'élément de fusion car c'est lui qui détermine le Taux
                     vln_id_type_elemn := REC_CUR_fusn.id_type_elemn;
                     --
                     -- Le tx_horaire est celui inscrit dans l'élément au prorata
                     --
                     vln_tx_horr := REC_CUR_fusn.va_tx;
                     --DDC241595
                     IF REC_CUR_fusn.Cd_Sagip IN ('010',
                                                  '015',
                                                  '029') THEN
                        vln_tx_horr := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                        pd_dt_efect    => REC_CUR_non_recrn_inter.dt_gain,
                                                        pv_in_tx_majrt => 'O');
                     END IF;
                     --
                     -- 6.24.1.1.3
                     --
                     vgv_etape := '6.24.1.1.3 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                     --
                     vln_mt_calcl := (REC_CUR_non_recrn_inter.nb_hh * REC_CUR_fusn.va_tx * REC_CUR_fusn.va_factr);
                     --
                     vln_nb_hh := REC_CUR_non_recrn_inter.nb_hh;
                     --
                  END IF;
                  --
                  vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
                  --
                  vlv_tx_mt := fv_convr_nb_decml_carct(vln_mt_calcl);
                  --
                  IF vln_mt_calcl > 0 THEN
                     --
                     -- 6.24.1.1.4
                     --
                     vgv_etape := '6.24.1.1.4 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                     --
                     -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_fusn.cd_sagip;
                     vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_fusn.id_entre_elemn;
                     -- Retouche 170
                     -- Le type de l'élément doit faire partie du jeu éligible au pourcentage et taux annuel
                     vgrec_gir_rh_fdt.elemn_type_id := vln_id_type_elemn;
                     vgrec_gir_rh_fdt.dt_gain       := REC_CUR_non_recrn_inter.dt_gain;
                     --DDC 209235
                     vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                     --
                     vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh; --REC_CUR_non_recrn_inter.nb_hh;
                     vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                                              xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                 pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                                                 pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                                              */
                      fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                               pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                               pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                               pn_assignment_id => vln_id_afect);
                     vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                     vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                     vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                     vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
                     vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                     vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                     vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                     vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                     vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                     vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                     vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                     vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                     vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                     vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                            vgrec_perd_paie_varbl.dt_debut);
                     vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                     vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                            vgrec_perd_paie_varbl.dt_fin);
                     vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                     vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                     vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                     vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                     vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                  ELSIF vln_mt_calcl < 0 THEN
                     --
                     -- 6.24.1.1.5
                     --
                     vgv_etape := '6.24.1.1.5 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                     --
                     OPEN CUR_verfr_fdt(vlrec_dt_hh.id_bloc_temps,
                                        vlrec_dt_hh.no_versn_objet,
                                        'A' || REC_CUR_fusn.cd_sagip);
                     --
                     FETCH CUR_verfr_fdt
                        INTO REC_verfr_fdt;
                     --
                     --DDC 209235
                     vln_id_trans     := REC_verfr_fdt.id_trans; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
                     vln_id_contr_fdt := REC_verfr_fdt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
                  
                     --
                     IF CUR_verfr_fdt%FOUND THEN
                        --
                        CLOSE CUR_verfr_fdt;
                        --
                        IF REC_verfr_fdt.statu_sagip = cv_statu_sagip_trans THEN
                           --
                           -- 6.24.1.1.5.1
                           --
                           vgv_etape := '6.24.1.1.5.1 - id_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                           --
                           -- Incrémente le nombre d'enregistrements lus et rejetés.
                           --
                           p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                                      pb_in_rejt  => TRUE);
                           --
                           -- remplir tableau des rejets
                           --
                           vln_id_afect := REC_CUR_non_recrn_inter.id_afect;
                           vld_dt_gain  := REC_CUR_non_recrn_inter.dt_gain;
                        
                           p_ajout_rejt(pn_id_afect       => vln_id_afect,
                                        pn_id_entre_elemn => REC_CUR_non_recrn_inter.id_entre_elemn,
                                        pn_id_trans       => REC_verfr_fdt.id_trans,
                                        pv_cd_ereur       => 'GIR-100153',
                                        pd_dt_perd_couvr  => REC_CUR_non_recrn_inter.dt_gain,
                                        pv_nm_procd       => vlv_nm_procd_fonct,
                                        pv_no_emplo       => vlrec_persn.no_emplo,
                                        pv_cd_gain        => 'A' || REC_CUR_fusn.cd_sagip,
                                        pn_id_contr_fdt   => REC_verfr_fdt.id_contr_fdt);
                        
                           --DDC 209235
                           vln_id_entre_elemn  := REC_CUR_non_recrn_inter.id_entre_elemn;
                           vln_id_trans        := REC_verfr_fdt.id_trans;
                           vln_id_contr_fdt    := REC_verfr_fdt.id_contr_fdt;
                           vlv_code_erreur_gir := 'GIR-100153';
                           --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                           vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' ||
                                                vln_id_contr_absen || ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn ||
                                                ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                                TO_CHAR(vld_dt_gain,
                                                        'YYYY-MM-DD') || ';';
                           vlv_de_mesg_techn := NULL;
                           vlv_nm_procd      := vlv_nm_procd;
                        
                           p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pn_id_demnd        => vgn_id_demnd,
                                          pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                          pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                          pv_nm_procd        => vlv_nm_procd,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn);
                           --
                        ELSIF REC_verfr_fdt.statu_sagip = cv_statu_sagip_non_trans THEN
                           --
                           -- 6.24.1.1.5.2
                           --
                           vgv_etape := '6.24.1.1.5.2 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                           p_log(vgv_etape,
                                 vlv_nm_procd_fonct);
                           --
                           -- Pour mettre in_trans_anul à Oui
                           --
                           UPDATE gir_rh_fdt fdt
                              SET fdt.in_trans_anul = 'O'
                            WHERE fdt.id_contr_fdt = REC_verfr_fdt.id_contr_fdt
                              AND fdt.in_trans_anul = 'N';
                           --
                           -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                           vgrec_gir_rh_fdt := NULL;
                           --
                           vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                           vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                           vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                           vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                           vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                           vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                           vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                           vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                           vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                           vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                           vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_fusn.cd_sagip;
                           vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_fusn.id_entre_elemn;
                           -- Retouche 170
                           -- Le type de l'élément doit faire partie du jeu éligible au pourcentage et taux annuel
                           vgrec_gir_rh_fdt.elemn_type_id := vln_id_type_elemn;
                           vgrec_gir_rh_fdt.dt_gain       := REC_CUR_non_recrn_inter.dt_gain;
                           --DDC 209235
                           vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                           --
                           vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh; --REC_CUR_non_recrn_inter.nb_hh;
                           vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                                                                                                    xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                                                                       pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                                                                                                       pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                                                                                                    */
                            fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                                     pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                                     pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                                     pn_assignment_id => vln_id_afect); -- Edgar Doiron INC19219
                           vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                           vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                           vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                           vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
                           vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                           vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                           vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                           vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                           vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                           vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                           vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                           vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                           vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                           vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                                  vgrec_perd_paie_varbl.dt_debut);
                           vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                           vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                                  vgrec_perd_paie_varbl.dt_fin);
                           vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                           vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                           vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                           vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                           vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                           --
                           p_creer_gain_fdt(vln_id_contr_fdt);
                           --
                        ELSIF REC_verfr_fdt.statu_sagip = cv_statu_sagip_rejt THEN
                           --
                           -- 6.24.1.1.5.3
                           --
                           vgv_etape := '6.24.1.1.5.3 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                           p_log(vgv_etape,
                                 vlv_nm_procd_fonct);
                           --
                           -- Pour mettre in_trans_anul à Oui
                           --
                           UPDATE gir_rh_fdt fdt
                              SET fdt.in_trans_anul = 'O'
                            WHERE fdt.id_contr_fdt = REC_verfr_fdt.id_contr_fdt
                              AND fdt.in_trans_anul = 'N';
                           --
                           vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_verfr_fdt.id_trans;
                           --
                           -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                           vgrec_gir_rh_fdt := NULL;
                           --
                           vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                           vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                           vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                           vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                           vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                           vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                           vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                           vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                           vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                           vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                           vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_fusn.cd_sagip;
                           vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_fusn.id_entre_elemn;
                           -- Retouche 170
                           -- Le type de l'élément doit faire partie du jeu éligible au pourcentage et taux annuel
                           vgrec_gir_rh_fdt.elemn_type_id := vln_id_type_elemn;
                           vgrec_gir_rh_fdt.dt_gain       := REC_CUR_non_recrn_inter.dt_gain;
                           --DDC 209235
                           vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                           --
                           vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh; --REC_CUR_non_recrn_inter.nb_hh;
                           vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                                                                                                    xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                                                                       pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                                                                                                       pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                                                                                                    */
                            fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                                     pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                                     pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                                     pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
                           vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                           vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                           vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                           vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
                           vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                           vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                           vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                           vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                           vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                           vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                           vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                           vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                           vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                           vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                                  vgrec_perd_paie_varbl.dt_debut);
                           vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                           vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                                  vgrec_perd_paie_varbl.dt_fin);
                           vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                           vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                           vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                           vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                           vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                           --
                           p_creer_gain_fdt(vln_id_contr_fdt);
                           --
                           <<id_fdt>>
                           FOR REC_CUR_id_fdt IN CUR_id_fdt(REC_verfr_fdt.id_trans,
                                                            REC_verfr_fdt.id_contr_fdt,
                                                            'A' || REC_CUR_fusn.cd_sagip) LOOP
                              --
                              -- Pour mettre à Oui l'indicateur de transaction annulée
                              --
                              vgv_etape := '6.24.1.1.5.3b - fdt.id_contr_fdt = ' || REC_CUR_id_fdt.id_contr_fdt;
                              p_log(vgv_etape,
                                    vlv_nm_procd_fonct);
                              UPDATE gir_rh_fdt fdt
                                 SET fdt.in_trans_anul = 'O'
                               WHERE fdt.id_contr_fdt = REC_CUR_id_fdt.id_contr_fdt
                                 AND fdt.in_trans_anul = 'N';
                              --
                              -- Recréer enregistrement identique pour le nouveau H620
                              --
                              OPEN CUR_fdt_2(REC_CUR_id_fdt.id_contr_fdt);
                              --
                              FETCH CUR_fdt_2
                                 INTO REC_fdt_2;
                              --
                              CLOSE CUR_fdt_2;
                              --
                              -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                              vgrec_gir_rh_fdt := NULL;
                              --
                              vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                              vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                              vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                              vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                              vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                              vgrec_gir_rh_fdt.in_mt_suplm_specl_input := REC_fdt_2.in_mt_suplm_specl_input;
                              vgrec_gir_rh_fdt.in_mt_rempl_specl_input := REC_fdt_2.in_mt_rempl_specl_input;
                              vgrec_gir_rh_fdt.dt_perd_paie_du         := REC_fdt_2.dt_perd_paie_du;
                              vgrec_gir_rh_fdt.dt_perd_paie_au         := REC_fdt_2.dt_perd_paie_au;
                              vgrec_gir_rh_fdt.aa_finnc                := REC_fdt_2.aa_finnc;
                              vgrec_gir_rh_fdt.cd_gain                 := REC_fdt_2.cd_gain;
                              /* Retouche 170
                              vgREC_gir_rh_fdt.elemn_entry_id          := REC_fdt_2.elemn_entry_id;
                              vgREC_gir_rh_fdt.elemn_type_id           := REC_fdt_2.elemn_type_id;*/
                              vgrec_gir_rh_fdt.elemn_entry_id := REC_CUR_fusn.id_entre_elemn;
                              vgrec_gir_rh_fdt.elemn_type_id  := vln_id_type_elemn;
                              -- fin retouche 170
                              vgrec_gir_rh_fdt.dt_gain := REC_fdt_2.dt_gain;
                              --DDC 209235
                              vld_dt_gain := REC_fdt_2.dt_gain;
                              --
                              vgrec_gir_rh_fdt.nb_hh_signe    := REC_fdt_2.nb_hh_signe;
                              vgrec_gir_rh_fdt.nb_hh          := REC_fdt_2.nb_hh;
                              vgrec_gir_rh_fdt.cd_paiem       := REC_fdt_2.cd_paiem;
                              vgrec_gir_rh_fdt.tx_horr        := REC_fdt_2.tx_horr;
                              vgrec_gir_rh_fdt.tx_mt          := REC_fdt_2.tx_mt;
                              vgrec_gir_rh_fdt.tx_mt_signe    := REC_fdt_2.tx_mt_signe;
                              vgrec_gir_rh_fdt.id_afect       := REC_fdt_2.id_afect;
                              vgrec_gir_rh_fdt.id_persn       := REC_fdt_2.id_persn;
                              vgrec_gir_rh_fdt.minst          := REC_fdt_2.minst;
                              vgrec_gir_rh_fdt.unite_admin    := REC_fdt_2.unite_admin;
                              vgrec_gir_rh_fdt.type_budgt     := REC_fdt_2.type_budgt;
                              vgrec_gir_rh_fdt.progr          := REC_fdt_2.progr;
                              vgrec_gir_rh_fdt.captl          := REC_fdt_2.captl;
                              vgrec_gir_rh_fdt.budgt          := REC_fdt_2.budgt;
                              vgrec_gir_rh_fdt.centr_respn    := REC_fdt_2.centr_respn;
                              vgrec_gir_rh_fdt.dt_debut       := REC_fdt_2.dt_debut;
                              vgrec_gir_rh_fdt.hh_debut       := REC_fdt_2.hh_debut;
                              vgrec_gir_rh_fdt.dt_fin         := REC_fdt_2.dt_fin;
                              vgrec_gir_rh_fdt.hh_fin         := REC_fdt_2.hh_fin;
                              vgrec_gir_rh_fdt.sectn          := REC_fdt_2.sectn;
                              vgrec_gir_rh_fdt.clas           := REC_fdt_2.clas;
                              vgrec_gir_rh_fdt.id_bloc_temps  := REC_fdt_2.id_bloc_temps;
                              vgrec_gir_rh_fdt.no_versn_objet := REC_fdt_2.no_versn_objet;
                              --
                              p_creer_gain_fdt(vln_id_contr_fdt);
                              --
                           END LOOP id_fdt;
                           --
                        ELSIF REC_verfr_fdt.statu_sagip = cv_statu_sagip_acept THEN
                           --
                           -- 6.24.1.1.5.4
                           --
                           vgv_etape := '6.24.1.1.5.4 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                           p_log(vgv_etape,
                                 vlv_nm_procd_fonct);
                           vgv_etape := '6.24.1.1.5.4b - fdt.id_contr_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                           p_log(vgv_etape,
                                 vlv_nm_procd_fonct);
                           --
                           -- Pour mettre in_trans_anul à Oui
                           --
                           UPDATE gir_rh_fdt fdt
                              SET fdt.in_trans_anul = 'O'
                            WHERE fdt.id_contr_fdt = REC_verfr_fdt.id_contr_fdt
                              AND fdt.in_trans_anul = 'N';
                           --
                           vgv_etape := '6.24.1.1.5.4c - id_trans = ' || REC_verfr_fdt.id_trans;
                           p_log(vgv_etape,
                                 vlv_nm_procd_fonct);
                           --
                           vgvar_liste_id_h620_h010.extend;
                           vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_verfr_fdt.id_trans;
                           --
                           vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_verfr_fdt.id_trans;
                           --
                           -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                           vgrec_gir_rh_fdt := NULL;
                           --
                           vgrec_gir_rh_fdt.no_docmn                := REC_verfr_fdt.no_docmn; -- 2013-05-30
                           vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                           vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                           vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                           vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                           vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                           vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                           vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                           vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                           vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                           vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                           vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_fusn.cd_sagip;
                           vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_fusn.id_entre_elemn;
                           -- Retouche 170
                           -- Le type de l'élément doit faire partie du jeu éligible au pourcentage et taux annuel
                           vgrec_gir_rh_fdt.elemn_type_id := vln_id_type_elemn;
                           vgrec_gir_rh_fdt.dt_gain       := REC_CUR_non_recrn_inter.dt_gain;
                           --DDC 209235
                           vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                           --
                           vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh; --REC_CUR_non_recrn_inter.nb_hh;
                           vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                                                                                                    xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                                                                       pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                                                                                                       pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                                                                                                    */
                            fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                                     pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                                     pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                                     pn_assignment_id => vln_id_afect);
                           vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                           vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                           vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                           vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
                           vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                           vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                           vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                           vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                           vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                           vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                           vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                           vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                           vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                           vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                                  vgrec_perd_paie_varbl.dt_debut);
                           vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                           vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                                  vgrec_perd_paie_varbl.dt_fin);
                           vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                           vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                           vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                           vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                           vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                           --
                           p_creer_gain_fdt(vln_id_contr_fdt);
                           --
                           <<id_fdt>>
                           FOR REC_CUR_id_fdt IN CUR_id_fdt(REC_verfr_fdt.id_trans,
                                                            REC_verfr_fdt.id_contr_fdt,
                                                            'A' || REC_CUR_fusn.cd_sagip) LOOP
                              --
                              -- Pour mettre à Oui l'indicateur de transaction annulée
                              --
                              vgv_etape := '6.24.1.1.5.4d - fdt.id_contr_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                              p_log(vgv_etape,
                                    vlv_nm_procd_fonct);
                              UPDATE gir_rh_fdt fdt
                                 SET fdt.in_trans_anul = 'O'
                               WHERE fdt.id_contr_fdt = REC_CUR_id_fdt.id_contr_fdt
                                 AND fdt.in_trans_anul = 'N';
                              --
                              -- Recréer enregistrement identique pour le nouveau H620
                              --
                              OPEN CUR_fdt_2(REC_CUR_id_fdt.id_contr_fdt);
                              --
                              FETCH CUR_fdt_2
                                 INTO REC_fdt_2;
                              --
                              CLOSE CUR_fdt_2;
                              --
                              -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                              vgrec_gir_rh_fdt := NULL;
                              --
                              vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                              vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                              vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                              vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                              vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                              vgrec_gir_rh_fdt.in_mt_suplm_specl_input := REC_fdt_2.in_mt_suplm_specl_input;
                              vgrec_gir_rh_fdt.in_mt_rempl_specl_input := REC_fdt_2.in_mt_rempl_specl_input;
                              vgrec_gir_rh_fdt.dt_perd_paie_du         := REC_fdt_2.dt_perd_paie_du;
                              vgrec_gir_rh_fdt.dt_perd_paie_au         := REC_fdt_2.dt_perd_paie_au;
                              vgrec_gir_rh_fdt.aa_finnc                := REC_fdt_2.aa_finnc;
                              vgrec_gir_rh_fdt.cd_gain                 := REC_fdt_2.cd_gain;
                              /* Retouche 170
                              vgREC_gir_rh_fdt.elemn_entry_id          := REC_fdt_2.elemn_entry_id;
                              vgREC_gir_rh_fdt.elemn_type_id           := REC_fdt_2.elemn_type_id;*/
                              vgrec_gir_rh_fdt.elemn_entry_id := REC_CUR_fusn.id_entre_elemn;
                              vgrec_gir_rh_fdt.elemn_type_id  := vln_id_type_elemn;
                              -- fin retouche 170
                              vgrec_gir_rh_fdt.dt_gain := REC_fdt_2.dt_gain;
                              --DDC 209235
                              vld_dt_gain := REC_fdt_2.dt_gain;
                              --
                              vgrec_gir_rh_fdt.nb_hh_signe    := REC_fdt_2.nb_hh_signe;
                              vgrec_gir_rh_fdt.nb_hh          := REC_fdt_2.nb_hh;
                              vgrec_gir_rh_fdt.cd_paiem       := REC_fdt_2.cd_paiem;
                              vgrec_gir_rh_fdt.tx_horr        := REC_fdt_2.tx_horr;
                              vgrec_gir_rh_fdt.tx_mt          := REC_fdt_2.tx_mt;
                              vgrec_gir_rh_fdt.tx_mt_signe    := REC_fdt_2.tx_mt_signe;
                              vgrec_gir_rh_fdt.id_afect       := REC_fdt_2.id_afect;
                              vgrec_gir_rh_fdt.id_persn       := REC_fdt_2.id_persn;
                              vgrec_gir_rh_fdt.minst          := REC_fdt_2.minst;
                              vgrec_gir_rh_fdt.unite_admin    := REC_fdt_2.unite_admin;
                              vgrec_gir_rh_fdt.type_budgt     := REC_fdt_2.type_budgt;
                              vgrec_gir_rh_fdt.progr          := REC_fdt_2.progr;
                              vgrec_gir_rh_fdt.captl          := REC_fdt_2.captl;
                              vgrec_gir_rh_fdt.budgt          := REC_fdt_2.budgt;
                              vgrec_gir_rh_fdt.centr_respn    := REC_fdt_2.centr_respn;
                              vgrec_gir_rh_fdt.dt_debut       := REC_fdt_2.dt_debut;
                              vgrec_gir_rh_fdt.hh_debut       := REC_fdt_2.hh_debut;
                              vgrec_gir_rh_fdt.dt_fin         := REC_fdt_2.dt_fin;
                              vgrec_gir_rh_fdt.hh_fin         := REC_fdt_2.hh_fin;
                              vgrec_gir_rh_fdt.sectn          := REC_fdt_2.sectn;
                              vgrec_gir_rh_fdt.clas           := REC_fdt_2.clas;
                              vgrec_gir_rh_fdt.id_bloc_temps  := REC_fdt_2.id_bloc_temps;
                              vgrec_gir_rh_fdt.no_versn_objet := REC_fdt_2.no_versn_objet;
                              --
                              p_creer_gain_fdt(vln_id_contr_fdt);
                              --
                           END LOOP id_fdt;
                           --
                        ELSE
                           --
                           -- 6.24.1.1.5.5
                           --
                           vgv_etape := '6.24.1.1.5.5 - id_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                           --
                           -- Incrémente le nombre d'enregistrements lus et rejetés.
                           --
                           p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                                      pb_in_rejt  => TRUE);
                           --
                           -- remplir tableau des rejets
                           --
                           p_ajout_rejt(pn_id_afect       => vln_id_afect,
                                        pn_id_entre_elemn => REC_CUR_fusn.id_entre_elemn,
                                        pn_id_trans       => REC_verfr_fdt.id_trans,
                                        pv_cd_ereur       => 'GIR-100154',
                                        pd_dt_perd_couvr  => REC_CUR_non_recrn_inter.dt_gain,
                                        pv_nm_procd       => vlv_nm_procd_fonct,
                                        pv_no_emplo       => vlrec_persn.no_emplo,
                                        pv_cd_gain        => 'A' || REC_CUR_fusn.cd_sagip,
                                        pn_id_contr_fdt   => REC_verfr_fdt.id_contr_fdt);
                           --DDC 209235
                           vln_id_entre_elemn  := REC_CUR_non_recrn_inter.id_entre_elemn;
                           vln_id_trans        := REC_verfr_fdt.id_trans;
                           vln_id_contr_fdt    := REC_verfr_fdt.id_contr_fdt;
                           vlv_code_erreur_gir := 'GIR-100154';
                           --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                           vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' ||
                                                vln_id_contr_absen || ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn ||
                                                ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                                TO_CHAR(vld_dt_gain,
                                                        'YYYY-MM-DD') || ';';
                           vlv_de_mesg_techn := NULL;
                           vlv_nm_procd      := vlv_nm_procd;
                        
                           p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pn_id_demnd        => vgn_id_demnd,
                                          pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                          pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                          pv_nm_procd        => vlv_nm_procd,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn);
                           --
                        END IF;
                        --
                     ELSE
                        -- pas trouvé enregistrement fdt
                        --
                        CLOSE CUR_verfr_fdt;
                        --
                        -- 6.24.1.1.5.5
                        --
                        vgv_etape := '6.24.1.1.5.5 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                        -- Incrémente le nombre d'enregistrements lus et rejetés.
                        --
                        p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                                   pb_in_rejt  => TRUE);
                        --
                        -- remplir tableau des rejets
                        --
                        p_ajout_rejt(pn_id_afect       => vln_id_afect,
                                     pn_id_entre_elemn => REC_CUR_fusn.id_entre_elemn,
                                     pn_id_trans       => NULL,
                                     pv_cd_ereur       => 'GIR-100154',
                                     pd_dt_perd_couvr  => REC_CUR_non_recrn_inter.dt_gain,
                                     pv_nm_procd       => vlv_nm_procd_fonct,
                                     pv_no_emplo       => vlrec_persn.no_emplo,
                                     pv_cd_gain        => 'A' || REC_CUR_fusn.cd_sagip);
                        --DDC 209235
                        vln_id_entre_elemn  := REC_CUR_non_recrn_inter.id_entre_elemn;
                        vln_id_trans        := REC_verfr_fdt.id_trans;
                        vln_id_contr_fdt    := REC_verfr_fdt.id_contr_fdt;
                        vlv_code_erreur_gir := 'GIR-100154';
                        --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                        vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' ||
                                             vln_id_contr_absen || ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn ||
                                             ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                             TO_CHAR(vld_dt_gain,
                                                     'YYYY-MM-DD') || ';';
                        vlv_de_mesg_techn := NULL;
                        vlv_nm_procd      := vlv_nm_procd;
                     
                        p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                       pv_token_value     => vlv_token_value,
                                       pn_id_demnd        => vgn_id_demnd,
                                       pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                       pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                       pv_nm_procd        => vlv_nm_procd,
                                       pv_de_mesg_techn   => vlv_de_mesg_techn);
                        --
                     END IF;
                     --
                  ELSE
                     -- vln_mt_calcl = 0
                     --
                     -- 6.24.1.1.6
                     --
                     vgv_etape := '6.24.1.1.6 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                     --
                     -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_fusn.cd_sagip;
                     vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_fusn.id_entre_elemn;
                     -- Retouche 170
                     -- Le type de l'élément doit faire partie du jeu éligible au pourcentage et taux annuel
                     vgrec_gir_rh_fdt.elemn_type_id := vln_id_type_elemn;
                     vgrec_gir_rh_fdt.dt_gain       := REC_CUR_non_recrn_inter.dt_gain;
                     --DDC 209235
                     vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                     --
                     vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh; --REC_CUR_non_recrn_inter.nb_hh;
                     vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                                              xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                 pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                                                 pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                                              */
                      fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                               pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                               pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                               pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
                     vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                     vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                     vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                     vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
                     vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                     vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                     vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                     vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                     vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                     vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                     vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                     vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                     vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                     vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                            vgrec_perd_paie_varbl.dt_debut);
                     vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                     vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                            vgrec_perd_paie_varbl.dt_fin);
                     vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                     vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                     vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                     vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                     vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                  END IF;
                  --
               END IF;
               --
            END LOOP fusion;
            --
         END IF; -- éligible au pourcentage
      --
      END LOOP traitement_1;
      --
      -- INC00016333
      -- 6.24.2
      --
      vln_id_afect := 0;
      vgv_etape    := '6.24.2';
      --
      p_log('6_24_03: Traitement_hh ',
            vlv_nm_procd_fonct);
      --
      <<traitement_hh>> -- traiter les heures
      FOR REC_CUR_non_recrn_inter IN CUR_non_recrn_inter LOOP
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_non_recrn_inter.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_non_recrn_inter.dt_gain; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_non_recrn_inter.id_afect THEN
            --
            -- Ne faire qu'une fois par affectation
            --
            vln_id_afect := REC_CUR_non_recrn_inter.id_afect;
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         -- Retouche 183 On tient compte de l'élément pour la clef comptable
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_non_recrn_inter.dt_gain,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_non_recrn_inter.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_non_recrn_inter.id_entre_elemn,
                       pd_dt_efect       => REC_CUR_non_recrn_inter.dt_gain,
                       prec_dt_hh        => vlrec_dt_hh);
         --
         vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                 pn_id_entre_elemn    => REC_CUR_non_recrn_inter.id_entre_elemn,
                                                 pd_dt_efect          => REC_CUR_non_recrn_inter.dt_gain,
                                                 pv_nm_va_entre_elemn => cv_nm_cd_paiem);
         --
         -- Aller chercher si un taux différent de nul existe pour l'élément
         --
         -- INC00016972
         vln_tx_horr := REC_CUR_non_recrn_inter.va_tx;
         /*
         vlv_tx_mt := Fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                              pn_id_entre_elemn    => REC_CUR_non_recrn_inter.id_entre_elemn,
                                              pd_dt_efect          => REC_CUR_non_recrn_inter.dt_gain,
                                              pv_nm_va_entre_elemn => cv_nm_tx);
         */
         --
         p_log('6_24_03: id_afect : ' || vln_id_afect,
               vlv_nm_procd_fonct);
         p_log('6_24_03: element  : ' || REC_CUR_non_recrn_inter.id_entre_elemn,
               vlv_nm_procd_fonct);
         p_log('6_24_03: va_tx    : ' || REC_CUR_non_recrn_inter.va_tx,
               vlv_nm_procd_fonct);
         p_log('6_24_03: budget   : ' || vlrec_cle_compt.budgt,
               vlv_nm_procd_fonct);
      
         ---- INC00016972
         -- Début SAGIR CHG246262/INC125796 Julie Goulet
         -- vln_tx_horr n'est pas NULL dans le cas où il est déjà inscrit dans l'entré d'élément (exemple
         -- d'un employé effectuant des heures dans un autre corps/class)
         IF vln_tx_horr IS NULL THEN
            --INC72261
            /*IF REC_CUR_non_recrn_inter.cd_sagip IN ('029') THEN
               vln_tx_horr := Fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                               pd_dt_efect => REC_CUR_non_recrn_inter.dt_gain,
                                               pv_in_tx_majrt => 'O');
            ELSE*/
            --DDC241595
            IF REC_CUR_non_recrn_inter.Cd_Sagip IN ('010',
                                                    '015',
                                                    '029') THEN
               vln_tx_horr := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                               pd_dt_efect    => REC_CUR_non_recrn_inter.dt_gain,
                                               pv_in_tx_majrt => 'O');
            ELSE
               vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                               pd_dt_efect => REC_CUR_non_recrn_inter.dt_gain);
               /*END IF;*/
            END IF;
         END IF;
         -- Fin SAGIR CHG246262/INC125796 Julie Goulet
         --
         -- retouche 158 on doit multiplier le facteur au taux
         --
         vln_tx_horr := vln_tx_horr * REC_CUR_non_recrn_inter.va_factr;
         --
         vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
         --
         vln_mt_calcl := NULL;
         --
         vlv_tx_mt := NULL;
         --
         p_log('6_24_03: taux h   : ' || vlv_tx_horr,
               vlv_nm_procd_fonct);
         p_log('6_24_03: cd sagip : ' || 'A' || REC_CUR_non_recrn_inter.cd_sagip,
               vlv_nm_procd_fonct);
         p_log('6_24_03: dt_gain  : ' || fnd_date.date_to_displaydate(REC_CUR_non_recrn_inter.dt_gain),
               vlv_nm_procd_fonct);
         p_log('6_24_03: id bloc  : ' || vlrec_dt_hh.id_bloc_temps,
               vlv_nm_procd_fonct);
         p_log('6_24_03: version  : ' || vlrec_dt_hh.no_versn_objet,
               vlv_nm_procd_fonct);
         p_log('6_24_03: nb_hh    : ' || REC_CUR_non_recrn_inter.nb_hh,
               vlv_nm_procd_fonct);
         --
         IF REC_CUR_non_recrn_inter.nb_hh > 0 THEN
            --
            -- 6.24.2.1
            --
            vgv_etape := '6.24.2.1 - id_elemn = ' || REC_CUR_non_recrn_inter.id_entre_elemn;
            --
            -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
            vgrec_gir_rh_fdt := NULL;
            --
            vgrec_gir_rh_fdt.nm_fiche                := 'H620';
            vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
            vgrec_gir_rh_fdt.in_trans_anul           := 'N';
            vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
            vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
            vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
            vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn_inter.cd_sagip;
            vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn_inter.id_entre_elemn;
            vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn_inter.id_type_elemn;
            vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_non_recrn_inter.dt_gain;
            --DDC 209235
            vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
            --
            vgrec_gir_rh_fdt.nb_hh_signe    := REC_CUR_non_recrn_inter.nb_hh;
            vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                             xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                pv_formt      => 'HHHMM');
                                                                                                                                                                             */
             fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                      pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                      pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                      pn_assignment_id => vln_id_afect);
            vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
            vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
            vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
            vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
            vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
            vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
            vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                   vgrec_perd_paie_varbl.dt_debut);
            vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
            vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                   vgrec_perd_paie_varbl.dt_fin);
            vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
            vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
            vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
            vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
            vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
            --
            p_creer_gain_fdt(vln_id_contr_fdt);
            --
            p_log('6_24_04: id fdt   : ' || vln_id_contr_fdt,
                  vlv_nm_procd_fonct);
            p_log('6_24_04: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                  vlv_nm_procd_fonct);
            --
            -- INC00018584 Garder les valeurs pour un FORALL UPDATE
            --
            vltab_maj_suivi.extend;
            vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := vgrec_gir_rh_fdt.elemn_entry_id;
            vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
            --
         ELSIF REC_CUR_non_recrn_inter.nb_hh < 0 THEN
            --
            -- 6.24.2.2
            --
            vgv_etape := '6.24.2.2 - id_elemn = ' || REC_CUR_non_recrn_inter.id_entre_elemn;
            --
            -- INC00018584 Il faut vérifier le négatif avec la version supérieure
            --             Si le nombre d'heure est identique
            --                on annule le négatif et le positif de la version supérieure
            --                ainsi on n'annule pas la version positive déjà acceptée par sagip
            --                pour le recréer avec la version supérieure pour rien.
            --
            vlb_anul_versn_ident := FALSE;
            --
            OPEN CUR_verfr_versn_fdt(vlrec_dt_hh.id_bloc_temps,
                                     vlrec_dt_hh.no_versn_objet,
                                     'A' || REC_CUR_non_recrn_inter.cd_sagip);
            --
            FETCH CUR_verfr_versn_fdt
               INTO REC_verfr_versn;
            --
            --DDC 209235
            vln_id_contr_fdt := REC_verfr_versn.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
         
            --
            IF CUR_verfr_versn_fdt%FOUND THEN
               CLOSE CUR_verfr_versn_fdt;
               --
               IF ABS(REC_CUR_non_recrn_inter.nb_hh) = REC_verfr_versn.nb_hh_signe THEN
                  --
                  -- Pour mettre in_trans_anul à Oui pour la valeur positive
                  --
                  vgv_etape := '6.24.2.2.1 - fdt.id_contr_fdt = ' || REC_verfr_versn.id_contr_fdt;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_contr_fdt = REC_verfr_versn.id_contr_fdt
                     AND fdt.in_trans_anul = 'N';
                  --
                  -- Créer la valeur négative pour historique
                  --
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn_inter.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn_inter.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn_inter.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_non_recrn_inter.dt_gain;
                  --DDC 209235
                  vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                  --
                  vgrec_gir_rh_fdt.nb_hh_signe    := REC_CUR_non_recrn_inter.nb_hh;
                  vgrec_gir_rh_fdt.nb_hh          := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect); -- Edgar Doiron INC19219
                  vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt          := NULL;
                  vgrec_gir_rh_fdt.tx_mt_signe    := NULL;
                  vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                         vgrec_perd_paie_varbl.dt_debut);
                  vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                  vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                         vgrec_perd_paie_varbl.dt_fin);
                  vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                  vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                  vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                  vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                  vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                  --
                  p_creer_gain_fdt(vln_id_contr_fdt);
                  --
                  p_log('6_24_versn: id fdt   : ' || vln_id_contr_fdt,
                        vlv_nm_procd_fonct);
                  p_log('6_24_versn: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                        vlv_nm_procd_fonct);
                  --
                  -- INC00018584 Garder les valeurs pour un FORALL UPDATE
                  --
                  vltab_maj_suivi.extend;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := vgrec_gir_rh_fdt.elemn_entry_id;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
                  --
               ELSE
                  -- La valeur est différente donc on va annuler la ligne acceptée de même valeur
                  --
                  vlb_anul_versn_ident := TRUE;
                  --
               END IF;
               --
            ELSE
               CLOSE CUR_verfr_versn_fdt;
               --
               vlb_anul_versn_ident := TRUE;
               --
            END IF;
            --
            IF vlb_anul_versn_ident THEN
               --
               OPEN CUR_verfr_fdt(vlrec_dt_hh.id_bloc_temps,
                                  vlrec_dt_hh.no_versn_objet,
                                  'A' || REC_CUR_non_recrn_inter.cd_sagip);
               --
               FETCH CUR_verfr_fdt
                  INTO REC_verfr_fdt;
               --
               CLOSE CUR_verfr_fdt;
               --
               IF REC_verfr_fdt.statu_sagip = cv_statu_sagip_trans THEN
                  --
                  -- 6.24.2.2.1
                  --
                  vgv_etape := '6.24.2.2.1 - id_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                  -- Incrémente le nombre d'enregistrements lus et rejetés.
                  --
                  p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                             pb_in_rejt  => TRUE);
                  --
                  -- remplir tableau des rejets
                  --
                  vln_id_afect := REC_CUR_non_recrn_inter.id_afect;
                  vld_dt_gain  := REC_CUR_non_recrn_inter.dt_gain;
               
                  p_ajout_rejt(pn_id_afect       => vln_id_afect,
                               pn_id_entre_elemn => REC_CUR_non_recrn_inter.id_entre_elemn,
                               pn_id_trans       => REC_verfr_fdt.id_trans,
                               pv_cd_ereur       => 'GIR-100153',
                               pd_dt_perd_couvr  => REC_CUR_non_recrn_inter.dt_gain,
                               pv_nm_procd       => vlv_nm_procd_fonct,
                               pv_no_emplo       => vlrec_persn.no_emplo,
                               pv_cd_gain        => 'A' || REC_CUR_non_recrn_inter.cd_sagip,
                               pn_id_contr_fdt   => REC_verfr_fdt.id_contr_fdt);
                  --
                  --DDC 209235
                  -- vln_id_afect        := REC_h620.id_afect;
                  vln_id_entre_elemn  := REC_CUR_non_recrn_inter.id_entre_elemn;
                  vln_id_contr_fdt    := REC_verfr_fdt.id_contr_fdt;
                  vln_id_trans        := REC_verfr_fdt.id_trans;
                  vlv_code_erreur_gir := 'GIR-100153';
                  --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                  vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                       ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                       ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                       TO_CHAR(vld_dt_gain,
                                               'YYYY-MM-DD') || ';';
                  vlv_de_mesg_techn := NULL;
                  vlv_nm_procd      := vlv_nm_procd;
               
                  p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                 pv_token_value     => vlv_token_value,
                                 pn_id_demnd        => vgn_id_demnd,
                                 pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                 pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                 pv_nm_procd        => vlv_nm_procd,
                                 pv_de_mesg_techn   => vlv_de_mesg_techn);
               ELSIF REC_verfr_fdt.statu_sagip = cv_statu_sagip_non_trans THEN
                  --
                  -- 6.24.2.2.2
                  --
                  vgv_etape := '6.24.2.2.2 - id_elemn = ' || REC_CUR_non_recrn_inter.id_entre_elemn;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  vgv_etape := '6.24.2.2.2b - fdt.id_contr_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  -- Pour mettre in_trans_anul à Oui pour la valeur positive
                  --
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_contr_fdt = REC_verfr_fdt.id_contr_fdt
                     AND fdt.in_trans_anul = 'N';
                  --
                  -- Créer la valeur négative pour historique
                  --
                  -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn_inter.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn_inter.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn_inter.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_non_recrn_inter.dt_gain;
                  --DDC 209235
                  vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                  --
                  vgrec_gir_rh_fdt.nb_hh_signe    := REC_CUR_non_recrn_inter.nb_hh;
                  vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                   xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                      pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                      pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                   */
                   fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect); -- Edgar Doiron INC 19219
                  vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt          := NULL;
                  vgrec_gir_rh_fdt.tx_mt_signe    := NULL;
                  vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                         vgrec_perd_paie_varbl.dt_debut);
                  vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                  vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                         vgrec_perd_paie_varbl.dt_fin);
                  vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                  vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                  vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                  vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                  vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                  --
                  p_creer_gain_fdt(vln_id_contr_fdt);
                  --
                  p_log('6_24_05: id fdt   : ' || vln_id_contr_fdt,
                        vlv_nm_procd_fonct);
                  p_log('6_24_05: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                        vlv_nm_procd_fonct);
                  --
                  -- INC00018584 Garder les valeurs pour un FORALL UPDATE
                  --
                  vltab_maj_suivi.extend;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := vgrec_gir_rh_fdt.elemn_entry_id;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
                  --
               ELSIF REC_verfr_fdt.statu_sagip = cv_statu_sagip_rejt THEN
                  --
                  -- 6.24.2.2.3
                  --
                  vgv_etape := '6.24.2.2.3 - id_elemn = ' || REC_CUR_non_recrn_inter.id_entre_elemn;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  vgv_etape := '6.24.2.2.3b - fdt.id_contr_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  -- Pour mettre in_trans_anul à Oui
                  --
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_contr_fdt = REC_verfr_fdt.id_contr_fdt
                     AND fdt.in_trans_anul = 'N';
                  --
                  vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_verfr_fdt.id_trans;
                  --
                  -- Créer la valeur négative pour historique
                  --
                  -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn_inter.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn_inter.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn_inter.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_non_recrn_inter.dt_gain;
                  --DDC 209235
                  vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                  --
                  vgrec_gir_rh_fdt.nb_hh_signe    := REC_CUR_non_recrn_inter.nb_hh;
                  vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                   xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                      pn_temps_reel => ABS(REC_CUR_non_recrn_inter.nb_hh),
                                                                                                                                                                                                                                      pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                   */
                   fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
                  vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt          := NULL;
                  vgrec_gir_rh_fdt.tx_mt_signe    := NULL;
                  vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                         vgrec_perd_paie_varbl.dt_debut);
                  vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                  vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                         vgrec_perd_paie_varbl.dt_fin);
                  vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                  vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                  vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                  vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                  vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                  --
                  p_creer_gain_fdt(vln_id_contr_fdt);
                  --
                  p_log('6_24_06: id fdt   : ' || vln_id_contr_fdt,
                        vlv_nm_procd_fonct);
                  p_log('6_24_06: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                        vlv_nm_procd_fonct);
                  --
                  -- INC00018584 Garder les valeurs pour un FORALL UPDATE
                  --
                  vltab_maj_suivi.extend;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := vgrec_gir_rh_fdt.elemn_entry_id;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
                  --
                  <<id_fdt>>
                  FOR REC_CUR_id_fdt IN CUR_id_fdt(REC_verfr_fdt.id_trans,
                                                   REC_verfr_fdt.id_contr_fdt,
                                                   'A' || REC_CUR_non_recrn_inter.cd_sagip) LOOP
                     --
                     -- Pour mettre à Oui l'indicateur de transaction annulée
                     --
                     vgv_etape := '6.24.2.2.4a - fdt.id_contr_fdt = ' || REC_CUR_id_fdt.id_contr_fdt;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     UPDATE gir_rh_fdt fdt
                        SET fdt.in_trans_anul = 'O'
                      WHERE fdt.id_contr_fdt = REC_CUR_id_fdt.id_contr_fdt
                        AND fdt.in_trans_anul = 'N';
                     --
                     -- Recréer enregistrement identique pour le nouveau H620
                     --
                     OPEN CUR_fdt_2(REC_CUR_id_fdt.id_contr_fdt);
                     --
                     FETCH CUR_fdt_2
                        INTO REC_fdt_2;
                     --
                     CLOSE CUR_fdt_2;
                     --
                     -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := REC_fdt_2.in_mt_suplm_specl_input;
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := REC_fdt_2.in_mt_rempl_specl_input;
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := REC_fdt_2.dt_perd_paie_du;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := REC_fdt_2.dt_perd_paie_au;
                     vgrec_gir_rh_fdt.aa_finnc                := REC_fdt_2.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := REC_fdt_2.cd_gain;
                     vgrec_gir_rh_fdt.elemn_entry_id          := REC_fdt_2.elemn_entry_id;
                     vgrec_gir_rh_fdt.elemn_type_id           := REC_fdt_2.elemn_type_id;
                     vgrec_gir_rh_fdt.dt_gain                 := REC_fdt_2.dt_gain;
                     --DDC 209235
                     vld_dt_gain := REC_fdt_2.dt_gain;
                     --
                     vgrec_gir_rh_fdt.nb_hh_signe    := REC_fdt_2.nb_hh_signe;
                     vgrec_gir_rh_fdt.nb_hh          := REC_fdt_2.nb_hh;
                     vgrec_gir_rh_fdt.cd_paiem       := REC_fdt_2.cd_paiem;
                     vgrec_gir_rh_fdt.tx_horr        := REC_fdt_2.tx_horr;
                     vgrec_gir_rh_fdt.tx_mt          := REC_fdt_2.tx_mt;
                     vgrec_gir_rh_fdt.tx_mt_signe    := REC_fdt_2.tx_mt_signe;
                     vgrec_gir_rh_fdt.id_afect       := REC_fdt_2.id_afect;
                     vgrec_gir_rh_fdt.id_persn       := REC_fdt_2.id_persn;
                     vgrec_gir_rh_fdt.minst          := REC_fdt_2.minst;
                     vgrec_gir_rh_fdt.unite_admin    := REC_fdt_2.unite_admin;
                     vgrec_gir_rh_fdt.type_budgt     := REC_fdt_2.type_budgt;
                     vgrec_gir_rh_fdt.progr          := REC_fdt_2.progr;
                     vgrec_gir_rh_fdt.captl          := REC_fdt_2.captl;
                     vgrec_gir_rh_fdt.budgt          := REC_fdt_2.budgt;
                     vgrec_gir_rh_fdt.centr_respn    := REC_fdt_2.centr_respn;
                     vgrec_gir_rh_fdt.dt_debut       := REC_fdt_2.dt_debut;
                     vgrec_gir_rh_fdt.hh_debut       := REC_fdt_2.hh_debut;
                     vgrec_gir_rh_fdt.dt_fin         := REC_fdt_2.dt_fin;
                     vgrec_gir_rh_fdt.hh_fin         := REC_fdt_2.hh_fin;
                     vgrec_gir_rh_fdt.sectn          := REC_fdt_2.sectn;
                     vgrec_gir_rh_fdt.clas           := REC_fdt_2.clas;
                     vgrec_gir_rh_fdt.id_bloc_temps  := REC_fdt_2.id_bloc_temps;
                     vgrec_gir_rh_fdt.no_versn_objet := REC_fdt_2.no_versn_objet;
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                     p_log('6_24_07: id fdt   : ' || vln_id_contr_fdt,
                           vlv_nm_procd_fonct);
                     p_log('6_24_07: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                           vlv_nm_procd_fonct);
                     --
                  END LOOP id_fdt;
                  --
               ELSIF REC_verfr_fdt.statu_sagip = cv_statu_sagip_acept THEN
                  --
                  -- 6.24.2.2.4
                  --
                  vgv_etape := '6.24.2.2.4b - id_elemn = ' || REC_CUR_non_recrn_inter.id_entre_elemn;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  -- Pour mettre in_trans_anul à Oui
                  --
                  vgv_etape := '6.24.2.2.4c - fdt.id_contr_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_contr_fdt = REC_verfr_fdt.id_contr_fdt
                     AND fdt.in_trans_anul = 'N';
                  --
                  vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_verfr_fdt.id_trans;
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_verfr_fdt.id_trans;
                  --
                  -- Créer la valeur négative pour historique
                  --
                  -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.no_docmn                := REC_verfr_fdt.no_docmn; -- 2013-05-30
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'O';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn_inter.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn_inter.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn_inter.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_non_recrn_inter.dt_gain;
                  --DDC 209235
                  vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
                  --
                  vgrec_gir_rh_fdt.nb_hh_signe    := REC_CUR_non_recrn_inter.nb_hh;
                  vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                   xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                      pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                      pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                   */
                   fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
                  vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt          := NULL;
                  vgrec_gir_rh_fdt.tx_mt_signe    := NULL;
                  vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                         vgrec_perd_paie_varbl.dt_debut);
                  vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                  vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                         vgrec_perd_paie_varbl.dt_fin);
                  vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                  vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                  vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                  vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                  vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                  --
                  p_creer_gain_fdt(vln_id_contr_fdt);
                  --
                  p_log('6_24_08: id fdt   : ' || vln_id_contr_fdt,
                        vlv_nm_procd_fonct);
                  p_log('6_24_08: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                        vlv_nm_procd_fonct);
                  --
                  -- INC00018584 Garder les valeurs pour un FORALL UPDATE
                  --
                  vltab_maj_suivi.extend;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := vgrec_gir_rh_fdt.elemn_entry_id;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
                  --
                  <<id_fdt>>
                  FOR REC_CUR_id_fdt IN CUR_id_fdt(REC_verfr_fdt.id_trans,
                                                   REC_verfr_fdt.id_contr_fdt,
                                                   'A' || REC_CUR_non_recrn_inter.cd_sagip) LOOP
                     --
                     vgv_etape := '6.24.2.2.5a - id_fdt = ' || REC_CUR_id_fdt.id_contr_fdt;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     vgv_etape := '6.24.2.2.5b - fdt.id_contr_fdt = ' || REC_CUR_id_fdt.id_contr_fdt;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     --
                     -- Pour mettre à Oui l'indicateur de transaction annulée
                     --
                     UPDATE gir_rh_fdt fdt
                        SET fdt.in_trans_anul = 'O'
                      WHERE fdt.id_contr_fdt = REC_CUR_id_fdt.id_contr_fdt
                        AND fdt.in_trans_anul = 'N';
                     --
                     -- Recréer enregistrement identique pour le nouveau H620
                     --
                     OPEN CUR_fdt_2(REC_CUR_id_fdt.id_contr_fdt);
                     --
                     FETCH CUR_fdt_2
                        INTO REC_fdt_2;
                     --
                     CLOSE CUR_fdt_2;
                     --
                     -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := REC_fdt_2.in_mt_suplm_specl_input;
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := REC_fdt_2.in_mt_rempl_specl_input;
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := REC_fdt_2.dt_perd_paie_du;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := REC_fdt_2.dt_perd_paie_au;
                     vgrec_gir_rh_fdt.aa_finnc                := REC_fdt_2.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := REC_fdt_2.cd_gain;
                     vgrec_gir_rh_fdt.elemn_entry_id          := REC_fdt_2.elemn_entry_id;
                     vgrec_gir_rh_fdt.elemn_type_id           := REC_fdt_2.elemn_type_id;
                     vgrec_gir_rh_fdt.dt_gain                 := REC_fdt_2.dt_gain;
                     --DDC 209235
                     vld_dt_gain := REC_fdt_2.dt_gain;
                     --
                     vgrec_gir_rh_fdt.nb_hh_signe    := REC_fdt_2.nb_hh_signe;
                     vgrec_gir_rh_fdt.nb_hh          := REC_fdt_2.nb_hh;
                     vgrec_gir_rh_fdt.cd_paiem       := REC_fdt_2.cd_paiem;
                     vgrec_gir_rh_fdt.tx_horr        := REC_fdt_2.tx_horr;
                     vgrec_gir_rh_fdt.tx_mt          := REC_fdt_2.tx_mt;
                     vgrec_gir_rh_fdt.tx_mt_signe    := REC_fdt_2.tx_mt_signe;
                     vgrec_gir_rh_fdt.id_afect       := REC_fdt_2.id_afect;
                     vgrec_gir_rh_fdt.id_persn       := REC_fdt_2.id_persn;
                     vgrec_gir_rh_fdt.minst          := REC_fdt_2.minst;
                     vgrec_gir_rh_fdt.unite_admin    := REC_fdt_2.unite_admin;
                     vgrec_gir_rh_fdt.type_budgt     := REC_fdt_2.type_budgt;
                     vgrec_gir_rh_fdt.progr          := REC_fdt_2.progr;
                     vgrec_gir_rh_fdt.captl          := REC_fdt_2.captl;
                     vgrec_gir_rh_fdt.budgt          := REC_fdt_2.budgt;
                     vgrec_gir_rh_fdt.centr_respn    := REC_fdt_2.centr_respn;
                     vgrec_gir_rh_fdt.dt_debut       := REC_fdt_2.dt_debut;
                     vgrec_gir_rh_fdt.hh_debut       := REC_fdt_2.hh_debut;
                     vgrec_gir_rh_fdt.dt_fin         := REC_fdt_2.dt_fin;
                     vgrec_gir_rh_fdt.hh_fin         := REC_fdt_2.hh_fin;
                     vgrec_gir_rh_fdt.sectn          := REC_fdt_2.sectn;
                     vgrec_gir_rh_fdt.clas           := REC_fdt_2.clas;
                     vgrec_gir_rh_fdt.id_bloc_temps  := REC_fdt_2.id_bloc_temps;
                     vgrec_gir_rh_fdt.no_versn_objet := REC_fdt_2.no_versn_objet;
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                     p_log('6_24_09: id fdt   : ' || vln_id_contr_fdt,
                           vlv_nm_procd_fonct);
                     p_log('6_24_09: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                           vlv_nm_procd_fonct);
                     --
                  END LOOP id_fdt;
                  --
               ELSE
                  -- pas trouvé enregistrement fdt
                  --
                  -- 6.24.2.2.5
                  --
                  vgv_etape := '6.24.2.2.5 - id_fdt = ' || REC_verfr_fdt.id_contr_fdt;
                  --
                  -- Incrémente le nombre d'enregistrements lus et rejetés.
                  --
                  p_incre_cp(pv_nm_table => cv_nm_table_fdt,
                             pb_in_rejt  => TRUE);
                  --
                  -- remplir tableau des rejets
                  --
                  p_ajout_rejt(pn_id_afect       => vln_id_afect,
                               pn_id_entre_elemn => REC_CUR_non_recrn_inter.id_entre_elemn,
                               pn_id_trans       => REC_verfr_fdt.id_trans,
                               pv_cd_ereur       => 'GIR-100154',
                               pd_dt_perd_couvr  => REC_CUR_non_recrn_inter.dt_gain,
                               pv_nm_procd       => vlv_nm_procd_fonct,
                               pv_no_emplo       => vlrec_persn.no_emplo,
                               pv_cd_gain        => 'A' || REC_CUR_non_recrn_inter.cd_sagip,
                               pn_id_contr_fdt   => REC_verfr_fdt.id_contr_fdt);
                  --DDC 209235
                  vln_id_entre_elemn  := REC_CUR_non_recrn_inter.id_entre_elemn;
                  vln_id_trans        := REC_verfr_fdt.id_trans;
                  vln_id_contr_fdt    := REC_verfr_fdt.id_contr_fdt;
                  vlv_code_erreur_gir := 'GIR-100154';
                  --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                  vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                       ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                       ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                       TO_CHAR(vld_dt_gain,
                                               'YYYY-MM-DD') || ';';
                  vlv_de_mesg_techn := NULL;
                  vlv_nm_procd      := vlv_nm_procd;
               
                  p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                 pv_token_value     => vlv_token_value,
                                 pn_id_demnd        => vgn_id_demnd,
                                 pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                 pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                 pv_nm_procd        => vlv_nm_procd,
                                 pv_de_mesg_techn   => vlv_de_mesg_techn);
                  --
               END IF;
               --
            END IF;
            --
         ELSIF REC_CUR_non_recrn_inter.nb_hh = 0 THEN
            --
            -- 6.24.2.3
            --
            vgv_etape := '6.24.2.3 - id_elemn = ' || REC_CUR_non_recrn_inter.id_entre_elemn;
            -- Créer la valeur à 0 pour historique
            --
            -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
            vgrec_gir_rh_fdt := NULL;
            --
            vgrec_gir_rh_fdt.nm_fiche                := 'H620';
            vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
            vgrec_gir_rh_fdt.in_trans_anul           := 'O';
            vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
            vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
            vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
            vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_non_recrn_inter.cd_sagip;
            vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_non_recrn_inter.id_entre_elemn;
            vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_non_recrn_inter.id_type_elemn;
            vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_non_recrn_inter.dt_gain;
            --DDC 209235
            vld_dt_gain := REC_CUR_non_recrn_inter.dt_gain;
            --
            vgrec_gir_rh_fdt.nb_hh_signe    := REC_CUR_non_recrn_inter.nb_hh;
            vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                             xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                pv_formt      => 'HHHMM');
                                                                                                                                                                             */
             fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                      pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                      pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
            vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
            vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
            vgrec_gir_rh_fdt.tx_mt          := NULL;
            vgrec_gir_rh_fdt.tx_mt_signe    := NULL;
            vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
            vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
            vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                   vgrec_perd_paie_varbl.dt_debut);
            vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
            vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                   vgrec_perd_paie_varbl.dt_fin);
            vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
            vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
            vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
            vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
            vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
            --
            p_creer_gain_fdt(vln_id_contr_fdt);
            --
            p_log('6_24_10: id fdt   : ' || vln_id_contr_fdt,
                  vlv_nm_procd_fonct);
            p_log('6_24_10: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                  vlv_nm_procd_fonct);
            --
            -- INC00018584 Garder les valeurs pour un FORALL UPDATE
            --
            vltab_maj_suivi.extend;
            vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := vgrec_gir_rh_fdt.elemn_entry_id;
            vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
            --
         END IF;
         --
      END LOOP traitement_hh;
      --
      -- Fin INC00016333
      --
      vln_id_afect := 0;
      --
      p_log('6_24_20: Traitement_2 ',
            vlv_nm_procd_fonct);
      --
      <<traitement_2>>
      FOR REC_CUR_regrp_anter IN CUR_regrp_anter LOOP
         --
         --DDC 209235
         vld_dt_gain := REC_CUR_regrp_anter.Dt_Gain;
         --
         p_log('6_24_20: affect : ' || REC_CUR_regrp_anter.id_afect,
               vlv_nm_procd_fonct);
         p_log('6_24_20: Heures : ' || REC_CUR_regrp_anter.nb_hh,
               vlv_nm_procd_fonct);
         --
         IF REC_CUR_regrp_anter.nb_hh < 0 THEN
            --
            -- 6.24.4
            --
            vgv_etape := '6.24.4 - id_afect = ' || REC_CUR_regrp_anter.id_afect;
            --
            -- Incrémente le nombre d'enregistrements lus et rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            --
            FOR REC_CUR_non_recrn_anter IN CUR_non_recrn_anter(REC_CUR_regrp_anter.id_afect,
                                                               REC_CUR_regrp_anter.cd_sagip,
                                                               --INC00017528
                                                               REC_CUR_regrp_anter.id_type_elemn,
                                                               REC_CUR_regrp_anter.dt_gain) LOOP
               p_ajout_rejt(pn_id_afect       => REC_CUR_regrp_anter.id_afect,
                            pn_id_entre_elemn => REC_CUR_non_recrn_anter.id_entre_elemn,
                            pn_id_trans       => NULL,
                            pv_cd_ereur       => 'GIR-100156',
                            pd_dt_perd_couvr  => REC_CUR_regrp_anter.dt_gain,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_cd_gain        => 'A' || REC_CUR_regrp_anter.cd_sagip);
               --DDC 209235
               vlv_code_erreur_gir := 'GIR-100156';
               -- Début SAGIR F.Aubin DDC 209235 2016-08-15 : On enlève le l'affectation. Bogue de boucle, en prod. il prenait la valeur
               --                                             précédente.  Il faut le forcer à se remplir via p_obten_persn si le record est vide.
               --vln_id_afect        := REC_CUR_regrp_anter.id_afect;
               vln_id_trans       := NULL;
               vln_id_entre_elemn := REC_CUR_non_recrn_anter.id_entre_elemn;
            
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' ||
                                    REC_CUR_regrp_anter.id_afect || ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            END LOOP;
            --
         ELSE
            --
            -- INC00016333 Obtenir la période de paie antérieure pour la date de gain
            --
            p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                   pd_dt_gain      => REC_CUR_regrp_anter.dt_gain,
                                   prec_perd_paie  => vlrec_perd_paie_gain);
            --
            IF vln_id_afect <> REC_CUR_regrp_anter.id_afect THEN
               --
               -- Ne faire qu'une fois par affectation
               --
               vln_id_afect := REC_CUR_regrp_anter.id_afect;
               --
               -- Obtenir l'identifiant de la personne
               --
               p_obten_persn(pn_id_afect => vln_id_afect,
                             pd_dt_fin   => vlrec_perd_paie_gain.dt_fin,
                             prec_persn  => vlrec_persn);
               --
            END IF;
            --
            -- INC00017473
            IF REC_CUR_regrp_anter.nb_hh > 0 THEN
               --
               -- 6.24.5
               --
               vgv_etape := '6.24.5 - id_afect = ' || vln_id_afect;
               --
               <<anterieur>>
               FOR REC_CUR_non_recrn_anter IN CUR_non_recrn_anter(vln_id_afect,
                                                                  REC_CUR_regrp_anter.cd_sagip,
                                                                  --INC00017528
                                                                  REC_CUR_regrp_anter.id_type_elemn,
                                                                  REC_CUR_regrp_anter.dt_gain) LOOP
                  --
                  --DDC 209235
                  vgv_id_entre_elemn := REC_CUR_non_recrn_anter.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
               
                  --
                  OPEN CUR_verfr_presn_gain_pc(REC_CUR_non_recrn_anter.id_type_elemn);
                  --
                  FETCH CUR_verfr_presn_gain_pc
                     INTO vlv_exist;
                  --
                  IF CUR_verfr_presn_gain_pc%FOUND THEN
                     CLOSE CUR_verfr_presn_gain_pc;
                     --
                     <<fusion>>
                     FOR REC_CUR_fusn IN CUR_fusn LOOP
                        --
                        -- Retouche 183 Utiliser la clef comptable de l'élément si elle existe
                        --
                        p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                                           pd_dt_afect       => vgrec_perd_paie_varbl.dt_debut,
                                           pv_id_type_paie   => cv_id_type_paie_varbl,
                                           pn_id_entre_elemn => REC_CUR_fusn.id_entre_elemn,
                                           prec_ventl_cout   => vlrec_cle_compt);
                        --
                        -- 6.24.5.1
                        --
                        vgv_etape := '6.24.5.1 - id_elemn = ' || REC_CUR_non_recrn_anter.id_entre_elemn;
                        --
                        vln_nb_hh := NULL;
                        --
                        IF REC_CUR_non_recrn_anter.dt_gain >= REC_CUR_fusn.dt_debut AND
                           REC_CUR_non_recrn_anter.dt_gain <= REC_CUR_fusn.dt_fin AND
                          -- INC00016333
                           vln_id_afect = REC_CUR_fusn.id_afect THEN
                           --
                           p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_non_recrn_anter.id_entre_elemn,
                                         pd_dt_efect       => REC_CUR_non_recrn_anter.dt_gain,
                                         prec_dt_hh        => vlrec_dt_hh);
                           --
                           vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                                   pn_id_entre_elemn    => REC_CUR_non_recrn_anter.id_entre_elemn,
                                                                   pd_dt_efect          => REC_CUR_non_recrn_anter.dt_gain,
                                                                   pv_nm_va_entre_elemn => cv_nm_cd_paiem);
                           --
                           vln_mt_calcl := 0;
                           --
                           -- 6.24.5.1.1
                           --
                           vgv_etape := '6.24.5.1.1 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                           --
                           IF REC_CUR_fusn.in_type_liste = 'P' THEN
                              --
                              -- Retouche 170
                              -- On utilise le type de l'élément traité car c'est lui qui est dans la liste d'égibilité
                              vln_id_type_elemn := REC_CUR_non_recrn_anter.id_type_elemn;
                              --
                              -- Aller chercher si un taux différent de nul existe pour l'élément
                              --
                              -- INC00016972
                              vln_tx_horr := REC_CUR_non_recrn_anter.va_tx;
                              /*
                              vlv_tx_mt := Fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                                   pn_id_entre_elemn    => REC_CUR_non_recrn_anter.id_entre_elemn,
                                                                   pd_dt_efect          => REC_CUR_non_recrn_anter.dt_gain,
                                                                   pv_nm_va_entre_elemn => cv_nm_tx);
                              */
                              --
                              -- Début SAGIR CHG246262/INC125796 Julie Goulet
                              -- vln_tx_horr n'est pas NULL dans le cas où il est déjà inscrit dans l'entré d'élément (exemple
                              -- d'un employé effectuant des heures dans un autre corps/class)
                              IF vln_tx_horr IS NULL THEN
                                 --DDC241595
                                 IF REC_CUR_non_recrn_anter.Cd_Sagip IN ('010',
                                                                         '015',
                                                                         '029') THEN
                                    vln_tx_horr_bkp := NULL;
                                    vln_tx_horr     := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                                        pd_dt_efect    => REC_CUR_non_recrn_anter.dt_gain,
                                                                        pv_in_tx_majrt => 'O');
                                    vln_tx_horr_bkp := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                                        pd_dt_efect    => REC_CUR_non_recrn_anter.dt_gain,
                                                                        pv_in_tx_majrt => 'N');
                                 ELSE
                                    vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                    pd_dt_efect => REC_CUR_non_recrn_anter.dt_gain);
                                 END IF;
                              END IF;
                              -- Fin SAGIR CHG246262/INC125796 Julie Goulet
                              --
                              -- retouche 158 on doit multiplier le facteur au taux
                              --
                              vln_tx_horr := vln_tx_horr * REC_CUR_non_recrn_anter.va_factr;
                              --DDC241595
                              IF REC_CUR_non_recrn_anter.Cd_Sagip IN ('010',
                                                                      '015',
                                                                      '029') THEN
                                 vln_tx_horr_bkp := vln_tx_horr_bkp * REC_CUR_non_recrn_anter.va_factr;
                              END IF;
                              --
                              vln_pc_avant_socl := 0;
                              --
                              IF NVL(vlrec_persn.catgr_emplo,
                                     '!') = cv_catgr_emplo_ocasn THEN
                                 --
                                 -- 6.24.5.1.2 Tenir compte du pourcentage pour avantages sociaux
                                 --
                                 vgv_etape := '6.24.5.1.2 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                                 --
                                 OPEN CUR_elemn_avant_socl(vln_id_afect,
                                                           REC_CUR_non_recrn_anter.dt_gain);
                                 --
                                 FETCH CUR_elemn_avant_socl
                                    INTO vln_pc_avant_socl;
                                 --
                                 IF CUR_elemn_avant_socl%NOTFOUND THEN
                                    --
                                    vln_pc_avant_socl := 0;
                                    --
                                 END IF;
                                 --
                                 CLOSE CUR_elemn_avant_socl;
                                 --
                              END IF;
                              --
                              -- 6.24.5.1.1
                              vgv_etape := '6.24.5.1.1 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                              --
                              --DDC241595
                              IF REC_CUR_non_recrn_anter.Cd_Sagip IN ('010',
                                                                      '015',
                                                                      '029') THEN
                                 vln_mt_calcl := (REC_CUR_non_recrn_anter.nb_hh * vln_tx_horr_bkp *
                                                 (NVL(REC_CUR_fusn.va_pc,
                                                       0) / 100)
                                                 -- 6.24.1.1.2 Tenir compte du pourcentage pour avantages sociaux
                                                 * (1 + NVL(vln_pc_avant_socl,
                                                             0) / 100));
                              
                              ELSE
                                 vln_mt_calcl := (REC_CUR_non_recrn_anter.nb_hh * vln_tx_horr *
                                                 (NVL(REC_CUR_fusn.va_pc,
                                                       0) / 100)
                                                 -- 6.24.1.1.2 Tenir compte du pourcentage pour avantages sociaux
                                                 * (1 + NVL(vln_pc_avant_socl,
                                                             0) / 100));
                              END IF;
                              --
                              vln_nb_hh := REC_CUR_non_recrn_anter.nb_hh;
                              --
                           ELSE
                              -- prorata
                              --
                              -- Retouche 170
                              -- On utilise le type de l'élément de fusion car c'est lui qui détermine le Taux
                              vln_id_type_elemn := REC_CUR_fusn.id_type_elemn;
                              --
                              -- Le tx_horaire est celui inscrit dans l'élément au prorata
                              --
                              vln_tx_horr := REC_CUR_fusn.va_tx;
                              --
                              --DDC241595
                              IF REC_CUR_non_recrn_anter.Cd_Sagip IN ('010',
                                                                      '015',
                                                                      '029') THEN
                                 vln_tx_horr := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                                 pd_dt_efect    => REC_CUR_non_recrn_anter.dt_gain,
                                                                 pv_in_tx_majrt => 'O');
                              
                              END IF;
                              -- 6.24.5.1.3
                              --
                              vgv_etape := '6.24.5.1.3 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                              --
                              vln_mt_calcl := (REC_CUR_non_recrn_anter.nb_hh * REC_CUR_fusn.va_tx * REC_CUR_fusn.va_factr);
                              --
                              vln_nb_hh := REC_CUR_non_recrn_anter.nb_hh;
                              --
                           END IF;
                           --
                           vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
                           --
                           -- 6.24.1.1.4
                           --
                           vgv_etape := '6.24.1.1.4 - id_elemn = ' || REC_CUR_fusn.id_entre_elemn;
                           --
                           vlv_tx_mt := fv_convr_nb_decml_carct(vln_mt_calcl);
                           --
                           -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                           vgrec_gir_rh_fdt := NULL;
                           --
                           vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                           vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                           vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                           vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                           vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                           vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                           vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                           vgrec_gir_rh_fdt.dt_perd_paie_du         := vlrec_perd_paie_gain.dt_debut;
                           vgrec_gir_rh_fdt.dt_perd_paie_au         := vlrec_perd_paie_gain.dt_fin;
                           vgrec_gir_rh_fdt.aa_finnc                := vlrec_perd_paie_gain.aa_finnc;
                           vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_fusn.cd_sagip;
                           vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_fusn.id_entre_elemn;
                           -- Retouche 170
                           -- Le type de l'élément doit faire partie du jeu éligible au pourcentage et taux annuel
                           vgrec_gir_rh_fdt.elemn_type_id := vln_id_type_elemn;
                           vgrec_gir_rh_fdt.dt_gain       := REC_CUR_non_recrn_anter.dt_gain;
                           --DDC 209235
                           vld_dt_gain := REC_CUR_non_recrn_anter.dt_gain;
                           --
                           vgrec_gir_rh_fdt.nb_hh_signe    := vln_nb_hh; --REC_CUR_non_recrn_anter.nb_hh;
                           vgrec_gir_rh_fdt.nb_hh          :=   /* Retouche 123
                                                                                                                                                                                                                                                                                                                    xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                                                                                                                                                       pn_temps_reel => ABS(vln_nb_hh),
                                                                                                                                                                                                                                                                                                                       pv_formt      => 'HHHMM');
                                                                                                                                                                                                                                                                                                                    */
                            fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                                     pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                                     pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                                     pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
                           vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                           vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                           vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                           vgrec_gir_rh_fdt.tx_mt_signe    := vln_mt_calcl;
                           vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                           vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                           vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                           vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                           vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                           vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                           vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                           vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                           vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                           vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                                  vgrec_perd_paie_varbl.dt_debut);
                           vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                           vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                                  vgrec_perd_paie_varbl.dt_fin);
                           vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                           vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                           vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                           vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                           vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                           --
                           p_creer_gain_fdt(vln_id_contr_fdt);
                           --
                           p_log('6_24_11: id fdt   : ' || vln_id_contr_fdt,
                                 vlv_nm_procd_fonct);
                           p_log('6_24_11: id elemn : ' || vgrec_gir_rh_fdt.elemn_entry_id,
                                 vlv_nm_procd_fonct);
                           --
                        END IF;
                        --
                     END LOOP fusion;
                     --
                  ELSE
                     CLOSE CUR_verfr_presn_gain_pc;
                  END IF;
                  --
               END LOOP anterieur;
               --
            END IF; -- nb_hh > 0
            --
            -- 6.24.6
            --
            vgv_etape := '6.24.6 - id_afect = ' || vln_id_afect;
            --
            -- INC00016972
            /*
            vlv_tx_horr := Fv_convr_nb_decml_carct(
                              Fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                               pd_dt_efect => REC_CUR_regrp_anter.dt_gain)
                           );
            */
            --
            -- Obtenir les valeurs dérivées de la clef comptable pour l'affectation
            --
            p_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                               pd_dt_afect     => vlrec_perd_paie_gain.dt_debut,
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               prec_ventl_cout => vlrec_cle_compt);
            --
            vln_tx_horr := REC_CUR_regrp_anter.va_tx;
            --
            -- Début SAGIR CHG246262/INC125796 Julie Goulet
            -- vln_tx_horr n'est pas NULL dans le cas où il est déjà inscrit dans l'entré d'élément (exemple
            -- d'un employé effectuant des heures dans un autre corps/class)
            IF vln_tx_horr IS NULL THEN
               --INC72261
               /*IF REC_CUR_regrp_anter.cd_sagip IN ('029') THEN
                 vln_tx_horr := Fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                  pd_dt_efect => REC_CUR_regrp_anter.dt_gain,
                                                  pv_in_tx_majrt => 'O');
               ELSE*/
               --DDC241595
               IF REC_CUR_regrp_anter.Cd_Sagip IN ('010',
                                                   '015',
                                                   '029') THEN
                  vln_tx_horr := fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                  pd_dt_efect    => REC_CUR_regrp_anter.dt_gain,
                                                  pv_in_tx_majrt => 'O');
               ELSE
                  vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                  pd_dt_efect => REC_CUR_regrp_anter.dt_gain);
                  /* END IF;*/
               END IF;
            END IF;
            -- Fin SAGIR CHG246262/INC125796 Julie Goulet
            --
            -- retouche 158 on doit multiplier le facteur au taux
            --
            vln_tx_horr := vln_tx_horr * REC_CUR_regrp_anter.va_factr;
            --
            vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
            --
            vln_mt_calcl := NULL;
            --
            -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
            vgrec_gir_rh_fdt := NULL;
            --
            vgrec_gir_rh_fdt.nm_fiche       := 'H620';
            vgrec_gir_rh_fdt.dt_statu_sagip := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.statu_sagip    := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.cd_actio       := cv_cd_actio_creat;
            --
            -- INC00017473
            --
            IF REC_CUR_regrp_anter.nb_hh = 0 THEN
               --
               vgrec_gir_rh_fdt.in_trans_anul := 'O';
               --
            ELSE
               --
               vgrec_gir_rh_fdt.in_trans_anul := 'N';
               --
            END IF;
            --
            vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
            vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
            vgrec_gir_rh_fdt.dt_perd_paie_du         := vlrec_perd_paie_gain.dt_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au         := vlrec_perd_paie_gain.dt_fin;
            vgrec_gir_rh_fdt.aa_finnc                := vlrec_perd_paie_gain.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_regrp_anter.cd_sagip;
            vgrec_gir_rh_fdt.elemn_entry_id          := NULL;
            /* INC00017528
            vgREC_gir_rh_fdt.elemn_type_id           := NULL;*/
            vgrec_gir_rh_fdt.elemn_type_id := REC_CUR_regrp_anter.id_type_elemn;
            vgrec_gir_rh_fdt.dt_gain       := REC_CUR_regrp_anter.dt_gain;
            --DDC 209235
            vld_dt_gain := REC_CUR_regrp_anter.dt_gain;
            --
            vgrec_gir_rh_fdt.nb_hh_signe := REC_CUR_regrp_anter.nb_hh;
            vgrec_gir_rh_fdt.nb_hh       :=   /* Retouche 123
                                                                                                                                                                             xxgir_rh_23000_convr_du.Fv_convr_nb_hh_mint(
                                                                                                                                                                                pn_temps_reel => ABS(vgREC_gir_rh_fdt.nb_hh_signe),
                                                                                                                                                                                pv_formt      => 'HHHMM');
                                                                                                                                                                             */
             fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                   pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                   pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                   pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
            vgrec_gir_rh_fdt.cd_paiem    := NULL;
            vgrec_gir_rh_fdt.tx_horr     := vlv_tx_horr;
            vgrec_gir_rh_fdt.tx_mt       := NULL;
            vgrec_gir_rh_fdt.tx_mt_signe := vln_mt_calcl;
            vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
            vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
            vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.dt_debut    := vlrec_perd_paie_gain.dt_debut;
            vgrec_gir_rh_fdt.hh_debut    := NULL;
            vgrec_gir_rh_fdt.dt_fin      := vlrec_perd_paie_gain.dt_fin;
            vgrec_gir_rh_fdt.hh_fin      := NULL;
            /* Retouche 202 Si corps emploi n'est pas vide mettre la valeur
                            afin de pouvoir majorer le taux horaire car employé a changé de classe
            vgREC_gir_rh_fdt.sectn                   := NULL;
            vgREC_gir_rh_fdt.clas                    := NULL; */
            IF REC_CUR_regrp_anter.corps_emplo IS NOT NULL THEN
               vgrec_gir_rh_fdt.sectn := SUBSTR(REC_CUR_regrp_anter.corps_emplo,
                                                1,
                                                3);
               vgrec_gir_rh_fdt.clas  := SUBSTR(REC_CUR_regrp_anter.corps_emplo,
                                                4,
                                                2);
            END IF;
            -- fin retouche 202
            vgrec_gir_rh_fdt.id_bloc_temps  := NULL;
            vgrec_gir_rh_fdt.no_versn_objet := NULL;
            --
            p_creer_gain_fdt(vln_id_contr_fdt);
            --
            -- 6.24.7
            --
            vgv_etape := '6.24.7 - id_afect = ' || vln_id_afect;
            --
            <<maj_suivi>>
            FOR REC_CUR_non_recrn_anter IN CUR_non_recrn_anter(vln_id_afect,
                                                               REC_CUR_regrp_anter.cd_sagip,
                                                               --INC00017528
                                                               REC_CUR_regrp_anter.id_type_elemn,
                                                               REC_CUR_regrp_anter.dt_gain) LOOP
               --
               p_log('6_24_12: id fdt   : ' || vln_id_contr_fdt,
                     vlv_nm_procd_fonct);
               p_log('6_24_12: id elemn : ' || REC_CUR_non_recrn_anter.id_entre_elemn,
                     vlv_nm_procd_fonct);
               --
               -- INC00018584 Garder les valeurs pour un FORALL UPDATE
               --
               vltab_maj_suivi.extend;
               vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := REC_CUR_non_recrn_anter.id_entre_elemn;
               vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
               --
            END LOOP maj_suivi;
            --
         END IF; -- nb_hh < 0
      --
      END LOOP traitement_2;
      --
      IF vlTAB_maj_suivi.EXISTS(1) THEN
         --
         FORALL vln_cp IN INDICES OF vltab_maj_suivi
            UPDATE gir_rh_suivi_elemn rse
               SET rse.id_contr_fdt = vltab_maj_suivi(vln_cp).id_contr_fdt,
                   rse.in_trait     = 'O'
             WHERE rse.element_entry_id = vltab_maj_suivi(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N'
               AND rse.trans_type IN ('I',
                                      'C',
                                      'M');
         --
         -- Début INc-89949
         FORALL vln_cp IN INDICES OF vltab_maj_suivi
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.id_contr_fdt = vltab_maj_suivi(vln_cp).id_contr_fdt,
                   rse.in_trait     = 'O'
             WHERE rse.element_entry_id = vltab_maj_suivi(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N'
               AND rse.trans_type IN ('I',
                                      'C',
                                      'M');
         -- Fin INC-89949
         --
      END IF;
      --
      vlTAB_maj_suivi.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_24.
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h620 THEN
         -- Fermer les curseurs
         --
         IF CUR_elemn_avant_socl%ISOPEN THEN
            CLOSE CUR_elemn_avant_socl;
         END IF;
         IF CUR_verfr_fdt%ISOPEN THEN
            CLOSE CUR_verfr_fdt;
         END IF;
         IF CUR_verfr_versn_fdt%ISOPEN THEN
            CLOSE CUR_verfr_versn_fdt;
         END IF;
         IF CUR_verfr_presn_gain_pc%ISOPEN THEN
            CLOSE CUR_verfr_presn_gain_pc;
         END IF;
         --
         vlTAB_maj_suivi.DELETE;
      
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80379';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         RAISE vgexc_trait_h620;
         --
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_elemn_avant_socl%ISOPEN THEN
            CLOSE CUR_elemn_avant_socl;
         END IF;
         IF CUR_verfr_fdt%ISOPEN THEN
            CLOSE CUR_verfr_fdt;
         END IF;
         IF CUR_verfr_versn_fdt%ISOPEN THEN
            CLOSE CUR_verfr_versn_fdt;
         END IF;
         IF CUR_verfr_presn_gain_pc%ISOPEN THEN
            CLOSE CUR_verfr_presn_gain_pc;
         END IF;
         --
         vlTAB_maj_suivi.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80379';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_24;

   --
   -- Étape 6.25
   -- ============================================================================
   -- P_trait_elemn_etape_6_25
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des autres éléments non récurrents.
   *       (Nombre d'heures provenant de l'écran des absences)
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-03  INC00016333  Obtenir la période de paie du gain antérieur.
   *                                               Utiliser INSERT tout de suite plutôt qu'en table PL/SQL
   * Michel Dessureault   2012-12-06  INC00016333  Diviser par 100 les montants provenant de GIR_TRANS_H620 pour comparaison.
   * Michel Dessureault   2013-01-22  INC00016972  Afficher/utiliser le taux horaire du changement de corps d'emploi dans le H620.
   * Michel Dessureault   2013-01-30  Retouche 123 Inscrire les heures en « Heure et minute » ou en « Heure centième » .
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement du code SAGIP de «A010» à «A015» d'une H620
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Michel Dessureault   2013-06-04  INC00018514  Ajouter dans le critère de vérification de la H620 que celle-ci soit dans la période courante
   * Michel Dessureault   2013-06-11  Retouche 237 Gérer les absences par élément d'entrée pour tenir compte du changement de taux horaire.
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_25(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_25';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_25';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      -- vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_id_afect    NUMBER; -- Identifiant de l'affectation en cours
      vlrec_cle_compt type_rec_ventl_cout; -- infos budgétaires
      vlrec_persn     type_rec_persn; -- Infos de la personne
      vlv_cd_paiem    gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vlv_nb_hh       gir_rh_fdt.nb_hh%TYPE; -- pour comparer avec gir_trans_h620
      --vln_difrn_nb_hh      NUMBER; -- Différence entre le nombre d'heure liste 6.10 et H620.
      -- INC00016333
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain antérieur
      vlv_tx_horr          gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      -- INC00016333
      vlv_tx_mt        gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      vln_tx_horr      NUMBER;
      -- performance
      vltab_liste_elemn tab_elemn; -- Table PL/SQL pour les numéros d'éléments.
      vltab_maj_suivi   tab_maj_suivi := tab_maj_suivi(); -- Table pour la maj du suivi d'élément
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des autres éléments non récurrents des absences
      -- (liste 6.9)
      ----------------------------------------------------------------------
      -- 6.25.1
      CURSOR CUR_absen_nouvl IS
         SELECT id_afect,
                catgr_emplo,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_gain,
                nb_hh
                -- Retouche 237
               ,
                dt_debut,
                dt_fin
           FROM (SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        id_entre_elemn,
                        nm_elemn,
                        cd_elemn,
                        cd_sagip,
                        NVL(FND_DATE.CANONICAL_TO_DATE(dt_gain),
                            vgrec_perd_paie_varbl.dt_debut) dt_gain,
                        FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh
                        -- Retouche 237
                       ,
                        dt_debut,
                        dt_fin
                   FROM (SELECT reht.id_afect,
                                reht.catgr_emplo,
                                reht.id_type_elemn,
                                reht.id_entre_elemn,
                                reht.nm_elemn,
                                reht.cd_elemn,
                                reht.cd_sagip,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn
                                -- Retouche 237
                               ,
                                reht.dt_debut,
                                reht.dt_fin
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_9'
                               --DDC 209235 par employé (=assignment_id)
                            AND reht.id_afect = pn_assignment_id)
                 -- placer en colonne les lignes des valeurs des éléments
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Heures' nb_hh)))
         -- Trier la liste
          ORDER BY id_afect;
      --
      -- Retouche 237
      --------------------------------------------------------------------------------
      -- Déclaration du curseur pour les absences modifiées dans la période courante.
      -- liste 6_10
      --------------------------------------------------------------------------------
      CURSOR CUR_absen_courn IS
         SELECT id_afect,
                catgr_emplo,
                id_type_elemn,
                id_entre_elemn,
                nm_elemn,
                cd_elemn,
                cd_sagip,
                dt_gain,
                nb_hh,
                dt_debut,
                dt_fin
           FROM (SELECT id_afect,
                        catgr_emplo,
                        id_type_elemn,
                        id_entre_elemn,
                        nm_elemn,
                        cd_elemn,
                        cd_sagip,
                        NVL(FND_DATE.CANONICAL_TO_DATE(dt_gain),
                            vgrec_perd_paie_varbl.dt_debut) dt_gain,
                        FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh) nb_hh,
                        dt_debut,
                        dt_fin
                   FROM (SELECT reht.id_afect,
                                reht.catgr_emplo,
                                reht.id_type_elemn,
                                reht.id_entre_elemn,
                                reht.nm_elemn,
                                reht.cd_elemn,
                                reht.cd_sagip,
                                reht.nm_va_entre_elemn,
                                reht.va_entre_elemn,
                                reht.dt_debut,
                                reht.dt_fin
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_10'
                               --DDC 209235 par employé (=assignment_id)
                            AND reht.id_afect = pn_assignment_id)
                 -- placer en colonne les lignes des valeurs des éléments
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Heures' nb_hh)))
         -- à l'intérieur de la période courante
          WHERE TRUNC(dt_gain) BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin
         -- Trier la liste
          ORDER BY id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la somme des heures de la transaction H620.
      ----------------------------------------------------------------------
      -- 6.25.3
      CURSOR CUR_trans_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.id_trans_h620,
                h620.statu_trans,
                TRIM(leading '0' FROM h620.grand_total_unite) nb_hh,
                fdt.id_contr_fdt
                -- Retouche 183 on prend fdt au lieu de h620 car si dans le passé, h620 reçoit le présent
               ,
                fdt.budgt,
                fdt.centr_respn
                -- Retouche 237 Valider la différence entre la date de début et la date de fin
               ,
                fdt.dt_debut,
                fdt.dt_fin
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE -- 6.25.3.1.1
          h620.elemn_entry_id = pn_id_entre_elemn
         -- INC00018514 Transaction pour la période de paie courante.
          AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
          AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
         -- 6.25.3.1.2
          AND h620.in_trans_anul = 'N'
          AND fdt.id_trans = h620.id_trans_h620
          AND fdt.nm_fiche = 'H620';
      --
      REC_h620 CUR_trans_h620%ROWTYPE; -- Enregistrement de type CUR_trans_h620
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- Retouche 237 6.25.1
      --
      vgv_etape := '6.25.1  ';
      --
      <<absen_nouvl>>
      FOR REC_CUR_absen_nouvl IN CUR_absen_nouvl LOOP
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_absen_nouvl.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_absen_nouvl.dt_gain;
         --
         -- INC00016333 Obtenir la période de paie antérieure pour la date de gain
         --
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => REC_CUR_absen_nouvl.dt_gain,
                                prec_perd_paie  => vlrec_perd_paie_gain);
         --
         -- 6.25.1
         --
         IF vln_id_afect <> REC_CUR_absen_nouvl.id_afect THEN
            --
            vln_id_afect := REC_CUR_absen_nouvl.id_afect;
            --
            p_log('  vln_id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vlrec_perd_paie_gain.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         vgv_etape := '6.25.1.1 - id_elemn = ' || REC_CUR_absen_nouvl.id_entre_elemn;
         --
         -- Retouche 183 On tient compte de l'élément pour la clef comptable
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_absen_nouvl.dt_gain,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_absen_nouvl.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                         pd_dt_efect => REC_CUR_absen_nouvl.dt_gain);
         --
         vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
         --
         vgrec_gir_rh_fdt := NULL;
         --
         vgrec_gir_rh_fdt.nm_fiche                := 'H620';
         vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
         vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
         vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
         vgrec_gir_rh_fdt.in_trans_anul           := 'N';
         vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
         vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
         vgrec_gir_rh_fdt.dt_perd_paie_du         := vlrec_perd_paie_gain.dt_debut;
         vgrec_gir_rh_fdt.dt_perd_paie_au         := vlrec_perd_paie_gain.dt_fin;
         vgrec_gir_rh_fdt.aa_finnc                := vlrec_perd_paie_gain.aa_finnc;
         vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_absen_nouvl.cd_sagip;
         vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_absen_nouvl.id_entre_elemn;
         vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_absen_nouvl.id_type_elemn;
         vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_absen_nouvl.dt_gain;
         --DDC 209235
         vld_dt_gain := REC_CUR_absen_nouvl.dt_gain;
         --
         vgrec_gir_rh_fdt.nb_hh_signe := REC_CUR_absen_nouvl.nb_hh;
         vgrec_gir_rh_fdt.nb_hh       := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vgrec_gir_rh_fdt.tx_horr     := vlv_tx_horr;
         vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
         vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
         vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
         vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
         vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
         vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
         vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
         vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
         vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
         vgrec_gir_rh_fdt.dt_debut    := REC_CUR_absen_nouvl.dt_debut;
         -- On va chercher la valeur de l'heure de début stockée dans le champ catgr_emplo
         -- le champ catgr_emplo contient hh_debut || '*' || hh_fin de per_absence_attendances (voir 6_9_6_12)
         vgrec_gir_rh_fdt.hh_debut := REPLACE(SUBSTR(REC_CUR_absen_nouvl.catgr_emplo,
                                                     1,
                                                     INSTR(REC_CUR_absen_nouvl.catgr_emplo,
                                                           '*',
                                                           1,
                                                           1) - 1),
                                              ':',
                                              '');
         vgrec_gir_rh_fdt.dt_fin   := REC_CUR_absen_nouvl.dt_fin;
         -- On va chercher la valeur de l'heure de fin stockée dans le champ catgr_emplo
         -- le champ catgr_emplo contient hh_debut || '*' || hh_fin de per_absence_attendances (voir 6_9_6_12)
         vgrec_gir_rh_fdt.hh_fin := REPLACE(SUBSTR(REC_CUR_absen_nouvl.catgr_emplo,
                                                   INSTR(REC_CUR_absen_nouvl.catgr_emplo,
                                                         '*',
                                                         1,
                                                         1) + 1,
                                                   5),
                                            ':',
                                            '');
         --
         p_creer_gain_fdt(vln_id_contr_fdt);
         --
         -- Garder les valeurs pour un FORALL UPDATE
         --
         vltab_maj_suivi.extend;
         vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := REC_CUR_absen_nouvl.id_entre_elemn;
         vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
         --
      END LOOP absen_nouvl;
      --
      -- Retouche 237
      --
      vgv_etape := '6.25.3 - ';
      --
      vln_id_afect := 0;
      --
      <<absen_courn>>
      FOR REC_CUR_absen_courn IN CUR_absen_courn LOOP
         --
         vgv_etape := '6.25.3.1 - id_elemn = ' || REC_CUR_absen_courn.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_absen_courn.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_absen_courn.dt_gain;
         --
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => REC_CUR_absen_courn.dt_gain,
                                prec_perd_paie  => vlrec_perd_paie_gain);
         --
         IF vln_id_afect <> REC_CUR_absen_courn.id_afect THEN
            --
            vln_id_afect := REC_CUR_absen_courn.id_afect;
            --
            p_log('  vln_id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vlrec_perd_paie_gain.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         -- Retouche 183 On tient compte de l'élément pour la clef comptable
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_absen_courn.dt_gain,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_absen_courn.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         vln_tx_horr := fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                         pd_dt_efect => REC_CUR_absen_courn.dt_gain);
         --
         vlv_tx_horr := fv_convr_nb_decml_carct(vln_tx_horr);
         --
         OPEN CUR_trans_h620(REC_CUR_absen_courn.id_entre_elemn);
         --
         FETCH CUR_trans_h620
            INTO REC_h620;
         --
         --DDC 209235
         vln_id_trans     := REC_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         IF CUR_trans_h620%NOTFOUND THEN
            CLOSE CUR_trans_h620;
            --
            vgv_etape := '6.25.3.2 - id_elemn = ' || REC_CUR_absen_courn.id_entre_elemn;
            --
            vgrec_gir_rh_fdt := NULL;
            --
            vgrec_gir_rh_fdt.nm_fiche                := 'H620';
            vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
            vgrec_gir_rh_fdt.in_trans_anul           := 'N';
            vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
            vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
            vgrec_gir_rh_fdt.dt_perd_paie_du         := vlrec_perd_paie_gain.dt_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au         := vlrec_perd_paie_gain.dt_fin;
            vgrec_gir_rh_fdt.aa_finnc                := vlrec_perd_paie_gain.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_absen_courn.cd_sagip;
            vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_absen_courn.id_entre_elemn;
            vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_absen_courn.id_type_elemn;
            vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_absen_courn.dt_gain;
            --DDC 209235
            vld_dt_gain := REC_CUR_absen_courn.dt_gain;
            --
            vgrec_gir_rh_fdt.nb_hh_signe := REC_CUR_absen_courn.nb_hh;
            vgrec_gir_rh_fdt.nb_hh       := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                   pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                   pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                   pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
            vgrec_gir_rh_fdt.tx_horr     := vlv_tx_horr;
            vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
            vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
            vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.dt_debut    := REC_CUR_absen_courn.dt_debut;
            -- On va chercher la valeur de l'heure de début stockée dans le champ catgr_emplo
            -- le champ catgr_emplo contient hh_debut || '*' || hh_fin de per_absence_attendances (voir 6_10_6_12)
            vgrec_gir_rh_fdt.hh_debut := REPLACE(SUBSTR(REC_CUR_absen_courn.catgr_emplo,
                                                        1,
                                                        INSTR(REC_CUR_absen_courn.catgr_emplo,
                                                              '*',
                                                              1,
                                                              1) - 1),
                                                 ':',
                                                 '');
            vgrec_gir_rh_fdt.dt_fin   := REC_CUR_absen_courn.dt_fin;
            -- On va chercher la valeur de l'heure de fin stockée dans le champ catgr_emplo
            -- le champ catgr_emplo contient hh_debut || '*' || hh_fin de per_absence_attendances (voir 6_10_6_12)
            vgrec_gir_rh_fdt.hh_fin := REPLACE(SUBSTR(REC_CUR_absen_courn.catgr_emplo,
                                                      INSTR(REC_CUR_absen_courn.catgr_emplo,
                                                            '*',
                                                            1,
                                                            1) + 1,
                                                      5),
                                               ':',
                                               '');
            --
            vgv_etape := '6.25.3.2.1 - id_elemn = ' || REC_CUR_absen_courn.id_entre_elemn;
            --
            p_creer_gain_fdt(vln_id_contr_fdt);
            --
            -- Garder les valeurs pour un FORALL UPDATE
            --
            vltab_maj_suivi.extend;
            vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := REC_CUR_absen_courn.id_entre_elemn;
            vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
            --
         ELSE
            CLOSE CUR_trans_h620;
            --
            -- 6.25.1.3
            --
            vgv_etape := '6.25.3.3';
            --
            -- Arrondir le montant issu des calculs pour comparer au montant arrondi dans la table H620
            --
            p_log('mt_h620=' || (REC_h620.nb_hh) || ' , calcul=' || ROUND(REC_CUR_absen_courn.nb_hh,
                                                                          2),
                  vlv_nm_procd_fonct);
            --
            -- Retouche 237 comparer avec les litéraux
            --
            vlv_nb_hh := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_absen_courn.nb_hh,
                                                pv_cd_gain       => 'A' || REC_CUR_absen_courn.cd_sagip,
                                                pd_dt_gain       => REC_CUR_absen_courn.dt_gain,
                                                pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
            --
            vlv_nb_hh := TRIM(leading '0' FROM vlv_nb_hh);
            --
            /*vln_difrn_nb_hh := ROUND(REC_CUR_absen_courn.nb_hh, 2) - (REC_h620.nb_hh);
            --
            IF vln_difrn_nb_hh      <> 0                            OR*/
            IF vlv_nb_hh <> REC_h620.nb_hh OR
              -- Retouche 183
               REC_h620.budgt <> vlrec_cle_compt.budgt OR
               REC_h620.centr_respn <> vlrec_cle_compt.centr_respn OR
              -- Retouche 237
               REC_h620.dt_debut <> REC_CUR_absen_courn.dt_debut OR
               REC_h620.Dt_Fin <> REC_CUR_absen_courn.dt_fin THEN
               --
               IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
                  --
                  -- 6.25.3.5
                  --
                  vgv_etape := '6.25.3.5 - id_elemn = ' || REC_CUR_absen_courn.id_entre_elemn;
                  --
                  -- Incrémente le nombre d'enregistrements lus et rejetés.
                  --
                  p_incre_cp(pv_nm_table => cv_nm_table_h620,
                             pb_in_rejt  => TRUE);
                  --
                  -- remplir tableau des rejets
                  --
                  vln_id_afect := REC_CUR_absen_courn.id_afect;
               
                  p_ajout_rejt(pn_id_afect       => vln_id_afect,
                               pn_id_entre_elemn => REC_CUR_absen_courn.id_entre_elemn,
                               pn_id_trans       => REC_h620.id_trans_h620,
                               pv_cd_ereur       => 'GIR-100153',
                               pd_dt_perd_couvr  => REC_CUR_absen_courn.dt_gain,
                               pv_nm_procd       => vlv_nm_procd_fonct,
                               pv_no_emplo       => vlrec_persn.no_emplo,
                               pv_cd_gain        => 'A' || REC_CUR_absen_courn.cd_sagip,
                               pn_id_contr_fdt   => REC_h620.id_contr_fdt);
                  --
                  --DDC 209235
                  vlv_code_erreur_gir := 'GIR-100153';
                  vln_id_entre_elemn  := REC_CUR_absen_courn.id_entre_elemn;
                  vln_id_trans        := REC_h620.id_trans_h620;
                  vln_id_contr_fdt    := REC_h620.id_contr_fdt;
                  vld_dt_gain         := REC_CUR_absen_courn.dt_gain;
                  --"TOKEN1:VALUE1;TOKEN2:VALUE2"
                  vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                       ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                       ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                       TO_CHAR(vld_dt_gain,
                                               'YYYY-MM-DD') || ';';
                  vlv_de_mesg_techn := NULL;
                  vlv_nm_procd      := vlv_nm_procd;
               
                  p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                                 pv_token_value     => vlv_token_value,
                                 pn_id_demnd        => vgn_id_demnd,
                                 pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                                 pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                                 pv_nm_procd        => vlv_nm_procd,
                                 pv_de_mesg_techn   => vlv_de_mesg_techn);
               ELSE
                  --
                  vgv_etape := '6.25.3.6 - id_trans = ' || REC_h620.id_trans_h620;
                  --
                  vgv_etape := '6.25.3.6.1 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_trans = REC_h620.id_trans_h620
                     AND fdt.nm_fiche = 'H620'
                     AND fdt.in_trans_anul = 'N';
                  --
                  vgv_etape := '6.25.3.6.2 - id_trans = ' || REC_h620.id_trans_h620;
                  --
                  vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
                  --
                  IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                     --
                     vgv_etape := '6.25.3.6.3 - id_trans = ' || REC_h620.id_trans_h620;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     --
                     vgvar_liste_id_h620_h010.extend;
                     vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                     --
                  END IF;
                  --
                  vgv_etape := '6.25.3.6.4 - id_elemn = ' || REC_CUR_absen_courn.id_entre_elemn;
                  --
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vlrec_perd_paie_gain.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vlrec_perd_paie_gain.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vlrec_perd_paie_gain.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_absen_courn.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_absen_courn.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_absen_courn.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_absen_courn.dt_gain;
                  --DDC 209235
                  vld_dt_gain := REC_CUR_absen_courn.dt_gain;
                  --
                  vgrec_gir_rh_fdt.nb_hh_signe := REC_CUR_absen_courn.nb_hh;
                  vgrec_gir_rh_fdt.nb_hh       := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                         pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                         pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                         pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
                  vgrec_gir_rh_fdt.cd_paiem    := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr     := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt       := vlv_tx_mt;
                  vgrec_gir_rh_fdt.tx_mt_signe := NULL;
                  vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut    := REC_CUR_absen_courn.dt_debut;
                  -- On va chercher la valeur de l'heure de début stockée dans le champ catgr_emplo
                  vgrec_gir_rh_fdt.hh_debut := REPLACE(SUBSTR(REC_CUR_absen_courn.catgr_emplo,
                                                              1,
                                                              INSTR(REC_CUR_absen_courn.catgr_emplo,
                                                                    '*',
                                                                    1,
                                                                    1) - 1),
                                                       ':',
                                                       '');
                  vgrec_gir_rh_fdt.dt_fin   := REC_CUR_absen_courn.dt_fin;
                  -- On va chercher la valeur de l'heure de fin stockée dans le champ catgr_emplo
                  vgrec_gir_rh_fdt.hh_fin := REPLACE(SUBSTR(REC_CUR_absen_courn.catgr_emplo,
                                                            INSTR(REC_CUR_absen_courn.catgr_emplo,
                                                                  '*',
                                                                  1,
                                                                  1) + 1,
                                                            5),
                                                     ':',
                                                     '');
                  --
                  p_creer_gain_fdt(vln_id_contr_fdt);
                  --
                  -- Garder les valeurs pour un FORALL UPDATE
                  --
                  vltab_maj_suivi.extend;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := REC_CUR_absen_courn.id_entre_elemn;
                  vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := vln_id_contr_fdt;
                  --
               END IF; -- statut transféré
               --
            END IF; -- différence dans nb heure ou budget ou centre responsable
            --
         END IF; -- transaction H620 existante
      --
      END LOOP absen_courn;
      --
      IF vltab_liste_elemn.count > 0 THEN
         --
         FORALL vln_cp IN INDICES OF vltab_liste_elemn
            UPDATE gir_rh_suivi_elemn rse
               SET rse.in_trait = 'N'
             WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type IN ('I',
                                      'C',
                                      'M');
         --
         -- Début INC-89949
         FORALL vln_cp IN INDICES OF vltab_liste_elemn
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.in_trait = 'N'
             WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type IN ('I',
                                      'C',
                                      'M');
         -- Fin INC-89949
         --
      END IF;
      --
      IF vlTAB_maj_suivi.EXISTS(1) THEN
         --
         FORALL vln_cp IN INDICES OF vltab_maj_suivi
            UPDATE gir_rh_suivi_elemn rse
               SET rse.id_contr_fdt = vltab_maj_suivi(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_maj_suivi(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type IN ('I',
                                      'C',
                                      'M');
         --
         -- Début INC-89949
         FORALL vln_cp IN INDICES OF vltab_maj_suivi
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.id_contr_fdt = vltab_maj_suivi(vln_cp).id_contr_fdt
             WHERE rse.element_entry_id = vltab_maj_suivi(vln_cp).id_entre_elemn
               AND rse.in_trait = 'O'
               AND rse.trans_type IN ('I',
                                      'C',
                                      'M');
         -- Fin INC-89949
         --
      END IF;
      --
      vlTAB_liste_elemn.DELETE;
      vlTAB_maj_suivi.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_25.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_liste_elemn.DELETE;
         vlTAB_maj_suivi.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_trans_h620%ISOPEN THEN
            CLOSE CUR_trans_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80380';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_25;

   --
   -- Étape 6.26
   -- ============================================================================
   -- P_verfr_elemn_etape_6_26
   -- ============================================================================
   /**************************************************************************
   * But : Vérification des suppressions des autres éléments non récurrents (absences).
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-05  INC00016333  Remplacer new par old car traite des destructions
   * Michel Dessureault   2013-06-04  INC00018514  Ajouter dans le critère de vérification de la H620 que celle-ci soit dans la période courante
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_26(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_26';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_verfr_elemn_etape_6_26';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h620.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vltab_maj_suivi tab_maj_suivi := tab_maj_suivi(); -- Table pour la maj du suivi d'élément
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments supprimés.  (6.26.1)
      ----------------------------------------------------------------------
      --
      CURSOR CUR_hh_absen_suprm IS
         SELECT rse.assignment_id id_afect,
                rse.suivi_elemn_record_id id_suivi,
                rse.element_type_id id_type_elemn,
                rse.element_entry_id id_entre_elemn,
                (SELECT DISTINCT reht.nm_elemn
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste = 'jeu_h620'
                    AND reht.id_type_elemn = rse.element_type_id) nm_elemn,
                NULL cd_elemn,
                (SELECT DISTINCT reht.cd_sagip
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste = 'jeu_h620'
                    AND reht.id_type_elemn = rse.element_type_id) cd_sagip,
                NULL nm_va_entre_elemn,
                rse.old_screen_entry_value va_entre_elemn,
                rse.old_effective_start_date dt_debut,
                rse.old_effective_end_date dt_fin,
                '6_26' nm_liste
           FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                -- Table temporaire contenant la liste des affectations principales à paie variable en vigueur à la période de paie courante.
               ,
                xxgir_rh_afect_tempr rat
          WHERE -- 6.26.1.1 Élément lié à l'affectation.
          rse.assignment_id = rat.id_afect
         --DDC 209235 par employé (=assignment_id)
          AND rat.id_afect = pn_assignment_id
          AND rat.in_type_paie = cv_id_type_paie_varbl
         -- 6.26.1.2 non récurrent
         -- 6.26.1.5 avec un « CREATOR_TYPE = A »
          AND EXISTS (SELECT 'X'
             FROM pay_element_types_f pet
            WHERE pet.element_type_id = rse.element_type_id
              AND pet.processing_type = 'N'
              AND pet.creator_type = cv_cd_type_creat_absen
              AND pet.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
              AND pet.effective_end_date >= vgrec_perd_paie_varbl.dt_debut)
         -- 6.26.1.3  Élément avec un type de transaction « Suppression »  (TRANS_TYPE = « Suppression »)
          AND rse.trans_type = 'D'
         --  6.26.1.4 Élément en vigueur dans la période de paie courante
          AND rse.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
          AND rse.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
         -- 6.26.1.6 Élément non traité (STATUT = Non traité)
          AND rse.in_trait = 'N'
         -- 6.26.1.7 Élément présent dans le jeu d'éléments pour H620 déterminé au point 2
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_h620'
              AND reht.id_type_elemn = rse.element_type_id);
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la transaction H620.
      ----------------------------------------------------------------------
      -- 6.26.3
      CURSOR CUR_trans_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.id_trans_h620,
                h620.statu_trans,
                fdt.id_contr_fdt,
                fdt.dt_gain
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620'
               -- 6.26.3.1
            AND fdt.elemn_entry_id = pn_id_entre_elemn
               -- INC00018514 Transaction pour la période de paie courante.
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
               -- 6.26.3.2
            AND h620.in_trans_anul = 'N';
      --
      REC_h620 CUR_trans_h620%ROWTYPE; -- Enregistrement de type CUR_trans_h620
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      vgv_etape := '6.26.1';
      --
      <<hh_absen_suprm>>
      FOR REC_CUR_hh_absen_suprm IN CUR_hh_absen_suprm LOOP
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_hh_absen_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         p_log('  id_afect: ' || REC_CUR_hh_absen_suprm.id_afect,
               vlv_nm_procd_fonct);
         --
         vgv_etape := '6.26.3 - id_elemn = ' || REC_CUR_hh_absen_suprm.id_entre_elemn;
         --
         OPEN CUR_trans_h620(REC_CUR_hh_absen_suprm.id_entre_elemn);
         --
         FETCH CUR_trans_h620
            INTO REC_h620;
         --
         --DDC 209235
         vln_id_trans     := REC_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
         vld_dt_gain      := REC_h620.dt_gain;
         --
         IF CUR_trans_h620%FOUND THEN
            CLOSE CUR_trans_h620;
            --
            --DDC 209235
            vld_dt_gain := REC_h620.dt_gain;
            --
            vgv_etape := '6.26.4 - id_elemn = ' || REC_CUR_hh_absen_suprm.id_entre_elemn;
            --
            IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.26.4.1 - id_elemn = ' || REC_CUR_hh_absen_suprm.id_entre_elemn;
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               p_ajout_rejt(pn_id_afect       => REC_CUR_hh_absen_suprm.id_afect,
                            pn_id_entre_elemn => REC_CUR_hh_absen_suprm.id_entre_elemn,
                            pn_id_trans       => REC_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => REC_CUR_hh_absen_suprm.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_cd_gain        => 'A' || REC_CUR_hh_absen_suprm.cd_sagip,
                            pn_id_contr_fdt   => REC_h620.id_contr_fdt);
               --
               --DDC 209235
               vlv_code_erreur_gir := 'GIR-100153';
               vln_id_afect        := REC_CUR_hh_absen_suprm.id_afect;
               vln_id_entre_elemn  := REC_CUR_hh_absen_suprm.id_entre_elemn;
               vln_id_trans        := REC_h620.id_trans_h620;
               vln_id_contr_fdt    := REC_h620.id_contr_fdt;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               --
               vgv_etape := '6.26.2 - id_suivi = ' || REC_CUR_hh_absen_suprm.id_suivi;
               --
               -- Garder les valeurs pour un FORALL UPDATE
               --
               vltab_maj_suivi.extend;
               vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := REC_CUR_hh_absen_suprm.id_suivi;
               vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := REC_h620.id_contr_fdt;
               --
               vgv_etape := '6.26.4.2 id_trans =' || REC_h620.id_trans_h620;
               p_log(vgv_etape,
                     vlv_nm_procd_fonct);
               --
               UPDATE gir_rh_fdt fdt
                  SET fdt.in_trans_anul = 'O'
                WHERE fdt.id_trans = REC_h620.id_trans_h620
                  AND fdt.nm_fiche = 'H620'
                  AND fdt.in_trans_anul = 'N';
               --
               vgv_etape := '6.26.4.2.2 - id_trans = ' || REC_h620.id_trans_h620;
               --
               vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
               --
               IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                  --
                  vgv_etape := '6.26.4.3 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  p_log('122 - ANNUL=' || REC_h620.id_trans_h620,
                        vlv_nm_procd_fonct);
                  p_log('123 - cd_gain=' || REC_CUR_hh_absen_suprm.Id_Entre_Elemn,
                        vlv_nm_procd_fonct);
                  p_log('124 - cd_gain=' || REC_h620.Id_Contr_Fdt,
                        vlv_nm_procd_fonct);
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                  --
               END IF;
               --
            END IF;
            --
         ELSE
            CLOSE CUR_trans_h620;
            --
            vgv_etape := '6.26.2 - id_suivi = ' || REC_CUR_hh_absen_suprm.id_suivi;
            --
            -- Garder les valeurs pour un FORALL UPDATE
            --
            vltab_maj_suivi.extend;
            vltab_maj_suivi(vltab_maj_suivi.last).id_entre_elemn := REC_CUR_hh_absen_suprm.id_suivi;
            vltab_maj_suivi(vltab_maj_suivi.last).id_contr_fdt := NULL;
            --
         END IF;
         --
      END LOOP hh_absen_suprm;
      --
      IF vlTAB_maj_suivi.EXISTS(1) THEN
         --
         FORALL vln_cp IN INDICES OF vltab_maj_suivi
            UPDATE gir_rh_suivi_elemn rse
               SET rse.in_trait     = 'O',
                   rse.id_contr_fdt = NVL(vltab_maj_suivi(vln_cp).id_contr_fdt,
                                          rse.id_contr_fdt)
             WHERE rse.suivi_elemn_record_id = vltab_maj_suivi(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N'
               AND rse.trans_type = 'D';
         --
         -- Début INC-89949
         FORALL vln_cp IN INDICES OF vltab_maj_suivi
            UPDATE gir_rh_suivi_entre_elemn_paie rse
               SET rse.in_trait     = 'O',
                   rse.id_contr_fdt = NVL(vltab_maj_suivi(vln_cp).id_contr_fdt,
                                          rse.id_contr_fdt)
             WHERE rse.suivi_elemn_record_id = vltab_maj_suivi(vln_cp).id_entre_elemn
               AND rse.in_trait = 'N'
               AND rse.trans_type = 'D';
         -- Fin INC-89949
         --
      END IF;
      --
      vlTAB_maj_suivi.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_26.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_maj_suivi.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_trans_h620%ISOPEN THEN
            CLOSE CUR_trans_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         pv_code_erreur_gir := 'GIR-80381';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_26;

   --
   -- Étape 6.27
   -- ============================================================================
   -- P_trait_elemn_etape_6_27
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des éléments non récurrents avec heures supplémentaires remboursées.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-30  Retouche 123 Inscrire les heures en « Heure et minute » ou en « Heure centième » .
   * Michel Dessureault   2013-01-31  INC00016966 et INC00016973 On corrige comment on traite le supplémentaire
   * Michel Dessureault   2013-03-19  Retouche 169 Ajout des Heures supplémentaires résiduelles
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_27(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_27';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_27';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_id_afect         NUMBER; -- Identifiant de l'affectation en cours
      vln_hh_rembr_gain    NUMBER; -- heures remboursées à la date du gain
      vln_solde_acuml_regm NUMBER; -- Solde accumulé du régime
      vln_solde_acuml      NUMBER; -- Solde accumulé
      vln_sous_total       NUMBER; -- Sous total pour la comparaison des heures accumulées et remboursées
      vlrec_cle_compt      type_rec_ventl_cout; -- infos budgétaires
      vlrec_persn          type_rec_persn; -- Infos de la personne
      /* Retouche 169
      vlREC_dt_hh              TYPE_REC_dt_hh; -- Dates et heures début fin  */
      -- INC00016333
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      -- Retouche 169
      --vlv_cd_paiem             gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vltab_liste_elemn tab_elemn; -- Table PL/SQL pour les numéros d'éléments.
      vltab_elemn_trait tab_elemn_rembr; -- table pour les éléments traités
      vln_hh_compn      NUMBER; -- Heures compensées qui seront remboursées.
      vln_index         PLS_INTEGER; -- index de la table d'enregistrement
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments non récurrents des heures
      -- supplémentaires à rembourser.
      ----------------------------------------------------------------------
      -- 6.27.1
      CURSOR CUR_total_hh_rembr IS
         SELECT reht.id_afect,
                SUM(FND_NUMBER.CANONICAL_TO_NUMBER(reht.va_entre_elemn)) total_hh_rembr
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = '6_11'
            AND reht.nm_va_entre_elemn IN (cv_nm_hh,
                                           cv_nm_hh_plan)
            AND reht.cd_elemn = cv_cd_elemn_suplm_rembr
            AND reht.va_entre_elemn IS NOT NULL
               --DDC 209235 par employé (=assignment_id)
            AND reht.id_afect = pn_assignment_id
          GROUP BY reht.id_afect;
      --
      -- Retouche 169  Récupérer les identifiants pour mettre à jour le suivi
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments non récurrents des heures
      -- supplémentaires à rembourser.
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_rembr(pn_id_afect IN NUMBER) IS
         SELECT id_entre_elemn
           FROM (SELECT id_entre_elemn
                   FROM (SELECT reht.id_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nbr_va_entre
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_11'
                            AND reht.cd_elemn = cv_cd_elemn_suplm_rembr
                            AND reht.id_afect = pn_id_afect
                            AND reht.nm_va_entre_elemn IN (cv_nm_hh,
                                                           cv_nm_dt_efect)
                            AND reht.va_entre_elemn IS NOT NULL)
                  WHERE nbr_va_entre = 2
                 UNION ALL
                 SELECT id_entre_elemn
                   FROM (SELECT reht.id_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nbr_va_entre
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_11'
                            AND reht.cd_elemn = cv_cd_elemn_suplm_rembr
                            AND reht.id_afect = pn_id_afect
                            AND reht.nm_va_entre_elemn IN (cv_nm_hh_plan,
                                                           cv_nm_dt_entre_vigr)
                            AND reht.va_entre_elemn IS NOT NULL)
                  WHERE nbr_va_entre = 2)
          GROUP BY id_entre_elemn;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour obtenir l'identifiant du régime d'accumulation
      ----------------------------------------------------------------------
      -- 6.27.2
      CURSOR CUR_regm_acuml(pn_id_afect IN NUMBER) IS
         SELECT rdra.id_regm_acuml
           FROM xxgir_rh_elemn_afect_v     rea,
                xxgir_rh_detl_regm_acuml_v rdra
          WHERE rea.id_afect = pn_id_afect
            AND rea.id_type_elemn = rdra.id_type_elemn_regm_acuml
            AND rdra.nm_regm_acuml = cv_nm_regm_acuml_suplm
            AND rdra.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rdra.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rdra.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rdra.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut;
      --
      REC_regm_acuml CUR_regm_acuml%ROWTYPE;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur des transactions d'heures supplémentaires
      -- accumulées en ordre de date de création descendante
      ----------------------------------------------------------------------
      -- 6.27.3 6.27.4
      CURSOR CUR_trans_hh_suplm(pn_id_afect IN NUMBER) IS
         WITH liste_suivi AS
          (SELECT rse.element_entry_id id_entre_elemn
             FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
            WHERE -- 6.27.3.1 Élément lié à l'affectation
            rse.assignment_id = pn_id_afect
           -- 6.27.3.2 Élément en vigueur à la période courante
         AND rse.new_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
         AND rse.new_effective_end_date >= TRUNC(cd_dt_prodc)
         AND rse.element_type_id IN (SELECT rdra.id_type_elemn
                                      FROM xxgir_rh_detl_regm_acuml_v rdra
                                     WHERE rdra.nm_regm_acuml = cv_nm_regm_acuml_suplm
                                       AND rdra.cd_soust_aditn = cv_cd_aditn
                                          --INC 74743
                                       AND NVL(rdra.cd_elemn,
                                               'X') <> cv_cd_elemn_suplm_rembr
                                       AND NVL(rdra.cd_elemn,
                                               'X') <> cv_cd_elemn_inter_rembr)
            GROUP BY rse.element_entry_id)
         SELECT id_afect,
                id_type_elemn,
                id_entre_elemn,
                cd_gain,
                dt_gain,
                --inc 74743
                nb_hh_derv,
                --
                nb_hh,
                tx_horr
           FROM (SELECT id_afect,
                        id_type_elemn,
                        id_entre_elemn,
                        cd_gain,
                        FND_DATE.CANONICAL_TO_DATE(dt_gain) dt_gain,
                        FND_NUMBER.CANONICAL_TO_NUMBER(nb_hh_derv) nb_hh_derv
                        -- 6.27.5
                       ,
                        --INC 74743
                        FND_NUMBER.CANONICAL_TO_NUMBER(NVL(nb_hh,
                                                           '0')) nb_hh,
                        --
                        -- 6.27.5
                        NVL(FND_NUMBER.CANONICAL_TO_NUMBER(va_tx),
                            /*DDC 239545 */
                            /*xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => fnd_date.canonical_to_date(dt_gain),*/
                            xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => vgd_dt_exect,
                                                                     pn_id_afect => id_afect)) tx_horr
                   FROM (SELECT rea.id_afect id_afect,
                                rea.id_type_elemn id_type_elemn,
                                rea.id_entre_elemn id_entre_elemn,
                                rea.cd_sagip cd_gain,
                                rea.nm_elemn,
                                rea.nm_va_entre_elemn nm_va_entre_elemn,
                                rea.va_entre_elemn,
                                COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre,
                                rea.peev_dt_debut_efect
                           FROM xxgir_rh_elemn_afect_v rea,
                                liste_suivi            ls
                          WHERE rea.id_entre_elemn = ls.id_entre_elemn
                               --INC 74743
                               --AND rea.cd_elemn = cv_cd_elemn_suplm_compn
                            AND rea.type_elemn = cv_cd_type_elemn_efect
                               --INC 74743
                               --AND rea.cd_sagip = '030'
                            AND rea.nm_va_entre_elemn IN (cv_nm_dt_efect,
                                                          cv_nm_hh_compn_derv,
                                                          --INC 74743
                                                          cv_nm_hh,
                                                          --
                                                          cv_nm_tx)
                            AND rea.cd_sagip IS NOT NULL)
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Hres comp dérivées' nb_hh_derv,
                                            --INC 74743
                                            'Heures' nb_hh,
                                            --
                                            'Taux' va_tx))
                  WHERE nbr_va_entre = 4 --3   --INC 74743
                 
                 --INC74743
                 UNION ALL
                 SELECT id_afect,
                        id_type_elemn,
                        id_entre_elemn,
                        cd_gain,
                        FND_DATE.CANONICAL_TO_DATE(dt_gain) dt_gain,
                        --INC 74743
                        NULL nb_hh_derv,
                        --
                        FND_NUMBER.CANONICAL_TO_NUMBER(NVL(nb_hh,
                                                           '0')) nb_hh,
                        /*DDC 239545*/
                        /*xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => fnd_date.canonical_to_date(dt_gain),*/
                        xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => vgd_dt_exect,
                                                                 pn_id_afect => id_afect) tx_horr
                   FROM (SELECT rea.id_afect id_afect,
                                rea.id_type_elemn id_type_elemn,
                                rea.id_entre_elemn id_entre_elemn,
                                rea.cd_sagip cd_gain,
                                rea.nm_elemn,
                                rea.nm_va_entre_elemn nm_va_entre_elemn,
                                rea.va_entre_elemn,
                                COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre,
                                rea.peev_dt_debut_efect
                           FROM xxgir_rh_elemn_afect_v rea,
                                liste_suivi            ls
                          WHERE rea.id_entre_elemn = ls.id_entre_elemn
                               --AND rea.type_elemn = cv_cd_type_elemn_efect
                            AND rea.nm_elemn IN ('Ajust supplémentaire reporté',
                                                 'Ajust supplémentaire effectué',
                                                 'Heures supplémentaire Reporté')
                            AND rea.nm_va_entre_elemn IN (cv_nm_hh,
                                                          cv_nm_dt_efect))
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Heures' nb_hh))
                  WHERE nbr_va_entre = 2
                    AND FND_DATE.CANONICAL_TO_DATE(dt_gain) = cd_dt_prodc)
         -- fin 74743
          ORDER BY id_afect,
                   dt_gain DESC;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur des transactions d'heures supplémentaires
      -- en ordre de date de gain ascendante
      ----------------------------------------------------------------------
      -- 6.27.9
      CURSOR CUR_gain_hh_suplm(pn_id_afect IN NUMBER) IS
         SELECT rsht.id_afect,
                rsht.dt_gain,
                SUM(rsht.nb_hh) nb_hh,
                rsht.tx_horr,
                --IN74743
                rsht.id_type_elemn
         --
           FROM xxgir_rh_suplm_h620_tempr rsht
          WHERE rsht.id_afect = pn_id_afect
          GROUP BY rsht.id_afect,
                   rsht.dt_gain,
                   rsht.tx_horr,
                   rsht.id_type_elemn
         -- 6.27.6
          ORDER BY rsht.dt_gain ASC;
      --
      --INC 74743
      CURSOR CUR_element_type_type(pn_id_type_elemn IN NUMBER) IS
         SELECT pet.attribute2 type_elemn
           FROM pay_element_types_f pet
          WHERE pet.element_type_id = pn_id_type_elemn;
   
      CURSOR CUR_factr_majrt(pn_assignment_id IN NUMBER) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(flv.description) factr_majrt
           FROM per_all_assignments_f paaf
           JOIN pay_people_groups ppg
             ON (ppg.people_group_id = paaf.people_group_id AND ppg.segment9 IS NOT NULL)
           JOIN fnd_lookup_values flv
             ON (flv.lookup_type = 'GIR_FACTR_MAJRT_SUPLM_H620_1' AND flv.language = 'FRC' AND flv.enabled_flag = 'Y' AND
                flv.lookup_code = ppg.segment9)
          WHERE paaf.assignment_id = pn_assignment_id
            AND paaf.primary_flag = 'Y'
            AND paaf.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
            AND paaf.effective_end_date >= vgrec_perd_paie_varbl.dt_debut;
   
      CURSOR CUR_element_type_id_030 IS
         SELECT pet.element_type_id
           FROM pay_element_types_f pet
          WHERE pet.attribute1 = '030'
            AND pet.attribute2 = 'EF'
            AND pet.attribute3 = 'SUPLM_COMPN';
   
      CURSOR CUR_employee_number(pn_assignment_id IN NUMBER) IS
         SELECT papf.employee_number
           FROM per_all_people_f papf
           JOIN per_all_assignments_f paaf
             ON (papf.person_id = paaf.person_id AND vgd_dt_exect BETWEEN paaf.effective_start_date AND paaf.effective_end_date AND
                paaf.primary_flag = 'Y')
          WHERE paaf.assignment_id = pn_assignment_id
            AND vgd_dt_exect /*Enlever SYSDATE*/
                BETWEEN papf.effective_start_date AND papf.effective_end_date;
   
      --INC 85944
      CURSOR CUR_perd_ref(pd_dt_debut        IN DATE,
                          pd_dt_fin          IN DATE,
                          pn_accrual_plan_id IN NUMBER) IS
         SELECT CASE
                   WHEN INSTR(ff.formula_name,
                              'JANVR') > 0 THEN
                    TO_DATE(EXTRACT(YEAR FROM pd_dt_debut) || '-12-31',
                            'YYYY-MM-DD')
                   WHEN INSTR(ff.formula_name,
                              'GIR') > 0 THEN
                    CASE
                       WHEN TO_NUMBER(ptp.attribute3) >= 3 THEN
                        TO_DATE(EXTRACT(YEAR FROM pd_dt_debut) + 1 || '03-31',
                                'YYYY-MM-DD')
                       ELSE
                        TO_DATE(EXTRACT(YEAR FROM pd_dt_debut) || '03-31',
                                'YYYY-MM-DD')
                    END
                END dt_perd_ref
           FROM ff_formulas_f     ff,
                pay_accrual_plans pap,
                per_time_periods  ptp
          WHERE pap.accrual_formula_id = ff.formula_id
            AND pap.accrual_plan_id = pn_accrual_plan_id
            AND ptp.start_date = pd_dt_debut
            AND ptp.end_date = pd_dt_fin
            AND ptp.payroll_id = 62; -- paie variable.
      --
      vlv_element_name VARCHAR2(100);
      --INC 74743
      vlv_elemn_type    VARCHAR2(10);
      vln_nb_hh         NUMBER;
      vln_sous_total_hh NUMBER;
      vln_factr_majrt   NUMBER;
      -- INC 85862
      vln_element_type_id NUMBER;
      vlv_employee_number VARCHAR2(30);
      vln_hh_restn_rembr  NUMBER;
   
      --INC 85944
      vld_perd_ref DATE;
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- S'assurer que la table est bien vide
      --
      DELETE FROM xxgir_rh_suplm_h620_tempr
       WHERE id_afect = pn_assignment_id; --DDC 209235 par employé (=assignment_id)
      --
      vln_id_afect := 0;
      --
      vgv_etape := '6.27.1';
      --
      p_log('62700 - <<Heure_rembourse>> ' || vln_id_afect,
            vlv_nm_procd_fonct);
      --INC 85862
      --Aller chercher le element_type_id des A030
      OPEN CUR_element_type_id_030;
      FETCH CUR_element_type_id_030
         INTO vln_element_type_id;
      CLOSE CUR_element_type_id_030;
   
      <<heure_rembourse>>
      FOR REC_CUR_total_hh_rembr IN CUR_total_hh_rembr LOOP
         --
         /* fnd_file.put_line(fnd_file.log,'|----0----1----1----2----2----3----3----4----4----5----5----6----6----7----7----8|');
         fnd_file.put_line(fnd_file.log,'|----5----0----5----0----5----0----5----0----5----0----5----0----5----0----5----0|');
         fnd_file.put_line(fnd_file.log,'|'||RPAD(' ',80,' ') || '|');*/
         IF vln_id_afect <> REC_CUR_total_hh_rembr.id_afect THEN
            --
            vln_id_afect      := REC_CUR_total_hh_rembr.id_afect;
            vln_nb_hh         := 0;
            vln_sous_total_hh := 0;
         
            --Modif INC 74743 2014-03-30
            --INC74743
            -- aller chercher le facteur de majoration pour pouvoir diviser le nb_hh par ce facteur.
            -- sagip de son bord, multiplie par ce facteur
            vln_factr_majrt := 1;
            OPEN CUR_factr_majrt(vln_id_afect);
            FETCH CUR_factr_majrt
               INTO vln_factr_majrt;
            CLOSE CUR_factr_majrt;
            --
            -- Obtenir les valeurs dérivées
            --
            p_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                               pd_dt_afect     => vgrec_perd_paie_varbl.dt_debut,
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               prec_ventl_cout => vlrec_cle_compt);
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            OPEN CUR_regm_acuml(vln_id_afect);
            --
            FETCH CUR_regm_acuml
               INTO REC_regm_acuml;
            --
            CLOSE CUR_regm_acuml;
            --
            p_log('62701 - id_afect    : ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            p_log('62702 - régime id   : ' || REC_regm_acuml.id_regm_acuml,
                  vlv_nm_procd_fonct);
            p_log('62703 - hh rembr    : ' || REC_CUR_total_hh_rembr.total_hh_rembr,
                  vlv_nm_procd_fonct);
            --
            p_log('     hh rembr=' || REC_CUR_total_hh_rembr.total_hh_rembr,
                  vlv_nm_procd_fonct);
         
            IF REC_regm_acuml.id_regm_acuml IS NOT NULL THEN
               --
               vgv_etape := '6.27.2 - id_regm = ' || REC_regm_acuml.id_regm_acuml;
               --
               -- 6.27.2 Obtenir le solde de la réserve d'heures supplémentaires
               --
               --INC 74743
               BEGIN
                  --INC 85944
                  OPEN CUR_perd_ref(vgrec_perd_paie_varbl.dt_debut,
                                    vgrec_perd_paie_varbl.dt_fin,
                                    REC_regm_acuml.id_regm_acuml);
                  FETCH CUR_perd_ref
                     INTO vld_perd_ref;
                  CLOSE CUR_perd_ref;
                  --
                  vln_solde_acuml_regm := xxgir_rh_23000_regm_acuml.fn_obten_qt_regm_solde_admis(pd_dt_sesn       => vld_perd_ref,
                                                                                                 pn_id_afect      => vln_id_afect,
                                                                                                 pn_id_regm_acuml => REC_regm_acuml.id_regm_acuml);
               EXCEPTION
                  WHEN OTHERS THEN
                     vln_solde_acuml_regm := 0;
                  
                  /*fnd_file.put_line(fnd_file.log,'Erreur lors de l''obtention du solde de la réserve d''heures suppl');
                  fnd_file.put_line(fnd_file.log,'Assignment_id    : '||vln_id_afect);
                  fnd_file.put_line(fnd_file.log,'Date de periode de reference     : '||TO_CHAR(vld_perd_ref,'YYYY-MM-DD'));
                  fnd_file.put_line(fnd_file.log,'Id Regime accuml : '||REC_regm_acuml.id_regm_acuml);*/
               
               END;
               --
            END IF;
            --
         END IF;
         --
      
         IF REC_regm_acuml.id_regm_acuml IS NOT NULL THEN
            --
            p_log('62704 - Réserve  : ' || vln_solde_acuml_regm,
                  vlv_nm_procd_fonct);
            --
            vln_solde_acuml := vln_solde_acuml_regm + REC_CUR_total_hh_rembr.total_hh_rembr;
            --
         
            /*fnd_file.put_line(fnd_file.log,'|'||LPAD('Total Hre Rembr = '||REC_CUR_total_hh_rembr.total_hh_rembr,80,' ') || '|');
            fnd_file.put_line(fnd_file.log,'|'||LPAD('Réserve         = '||vln_solde_acuml_regm,80,' ') || '|');
            fnd_file.put_line(fnd_file.log,'|'||LPAD('                 ========',80,' ') || '|');
            fnd_file.put_line(fnd_file.log,'|'||LPAD('                 '||vln_solde_acuml,80,' ') || '|');*/
         
            p_log('Edgar     vln_solde_acuml=' || vln_solde_acuml,
                  vlv_nm_procd_fonct);
            p_log('62705 - solde acum : ' || vln_solde_acuml,
                  vlv_nm_procd_fonct);
            --
            -- Retouche 169
            -- Récupérer les éléments pour le suivi
            --
            vgv_etape := '6.27.3 - Solde acumulé = ' || vln_solde_acuml;
            --
            OPEN CUR_elemn_rembr(vln_id_afect);
            --
            FETCH CUR_elemn_rembr BULK COLLECT
               INTO vltab_liste_elemn;
            --
            CLOSE CUR_elemn_rembr;
            --
            -- Initialiser pour la prochaine comparaison des heures effectuées avec le solde accumulé
            --
            vln_sous_total := 0;
            --INC 74743
            vln_sous_total_hh := 0;
            --
            -- pour chaque 6.27.3 trié par date création descendante pour
            -- 6.27.4 obtenir la date du gain (date effective) et le nombre d'heures
            --
            p_log('62710 - <<Heure_effectue>> ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
            /*fnd_file.put_line(fnd_file.log,'|'||RPAD('              Boucle du Curseur CUR_trans_hh_suplm',80,' ') || '|');
            fnd_file.put_line(fnd_file.log,'|'||RPAD('  DT_GAIN   |  Sous-Tot-Derv  |  Sous-Tot-hre  |  hre-derv  |  hre  |  tx-horr  ',80,' ') || '|');*/
         
            <<heure_effectue>>
            FOR REC_CUR_trans_hh_suplm IN CUR_trans_hh_suplm(vln_id_afect) LOOP
               --
               vgv_etape := '6.27.4 - id_elemn = ' || REC_CUR_trans_hh_suplm.id_entre_elemn;
               --
               --DDC 209235
               vgv_id_entre_elemn := REC_CUR_trans_hh_suplm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
               vld_dt_gain        := REC_CUR_trans_hh_suplm.dt_gain;
               --
               p_log('62711 - sous total : ' || vln_sous_total,
                     vlv_nm_procd_fonct);
               --
               -- garder les enreg jusqu'au solde accumulé
               --
            
               IF vln_sous_total < vln_solde_acuml THEN
                  --13
                  --
                  -- Retouche 169
                  --
                  --INC 85862
                  IF NVL(REC_CUR_trans_hh_suplm.nb_hh_derv,
                         0) <> 0 THEN
                     --
                     vln_index := vltab_elemn_trait.count + 1;
                     --
                     vltab_elemn_trait(vln_index).id_entre_elemn := REC_CUR_trans_hh_suplm.id_entre_elemn;
                     vltab_elemn_trait(vln_index).dt_gain := REC_CUR_trans_hh_suplm.dt_gain;
                     --
                     vgv_etape := '6.27.7 - id_elemn = ' || REC_CUR_trans_hh_suplm.id_entre_elemn;
                     --INC 74743
                     --vln_sous_total := vln_sous_total + REC_CUR_trans_hh_suplm.nb_hh;
                     vln_sous_total    := vln_sous_total + NVL(REC_CUR_trans_hh_suplm.nb_hh_derv,
                                                               REC_CUR_trans_hh_suplm.nb_hh); --3
                     vln_sous_total_hh := vln_sous_total_hh + REC_CUR_trans_hh_suplm.nb_hh; --2
                  
                     --
                  
                     -- 6.27.5 Obtenir le taux horaire selon la date du gain
                     --
                     /* Retouche 169 Le taux est extrait directement dans le select
                     vln_tx_horr := Fn_obten_tx_horr( pn_id_afect => vln_id_afect
                                                     ,pd_dt_efect => REC_CUR_trans_hh_suplm.dt_gain
                                                    );
                     */
                     --
                     p_log('62712 - xxgir_rh_suplm_h620_tempr ',
                           vlv_nm_procd_fonct);
                     p_log('62713 - afect ' || vln_id_afect,
                           vlv_nm_procd_fonct);
                     p_log('62714 - id type ' || REC_CUR_trans_hh_suplm.id_type_elemn,
                           vlv_nm_procd_fonct);
                     p_log('62715 - id elemn ' || REC_CUR_trans_hh_suplm.id_entre_elemn,
                           vlv_nm_procd_fonct);
                     p_log('62716 - cd_gain ' || REC_CUR_trans_hh_suplm.cd_gain,
                           vlv_nm_procd_fonct);
                     p_log('62717 - dt_gain ' || REC_CUR_trans_hh_suplm.dt_gain,
                           vlv_nm_procd_fonct);
                     --INC 74743
                     p_log('62718 - heures ' || NVL(REC_CUR_trans_hh_suplm.nb_hh_derv,
                                                    REC_CUR_trans_hh_suplm.nb_hh),
                           vlv_nm_procd_fonct);
                     /*p_log('62718 - heures ' ||  REC_CUR_trans_hh_suplm.nb_hh,
                     vlv_nm_procd_fonct);*/
                     --
                     p_log('62719 - tx hor ' || REC_CUR_trans_hh_suplm.tx_horr,
                           vlv_nm_procd_fonct);
                     --
                     -- Retouche 169
                     -- Si le sous-total dépasse le solde, il faut enlever les heures excédentaires
                     --
                     --INC 74743
                     --vln_hh_compn := REC_CUR_trans_hh_suplm.nb_hh;
                     vln_hh_compn := NVL(REC_CUR_trans_hh_suplm.nb_hh_derv,
                                         REC_CUR_trans_hh_suplm.nb_hh);
                     vln_nb_hh    := REC_CUR_trans_hh_suplm.nb_hh;
                  
                     --
                     IF vln_sous_total > vln_solde_acuml THEN
                        --
                        -- On ne traite les heures que jusqu'à la limite du solde accumulé (réserve)
                        --
                        vgv_etape := '6.27.8 - id_elemn = ' || REC_CUR_trans_hh_suplm.id_entre_elemn;
                        --
                        --INC74743
                        --vln_hh_compn := REC_CUR_trans_hh_suplm.nb_hh - (vln_sous_total - vln_solde_acuml);
                        vln_hh_compn := NVL(REC_CUR_trans_hh_suplm.nb_hh_derv,
                                            REC_CUR_trans_hh_suplm.nb_hh) - (vln_sous_total - vln_solde_acuml);
                        --vln_nb_hh    := REC_CUR_trans_hh_suplm.nb_hh - (vln_sous_total - vln_solde_acuml);
                     
                        p_log('Facteur de majoration pour assignment_id(' || vln_id_afect || ') est de ' || vln_factr_majrt,
                              vlv_nm_procd_fonct);
                        vln_nb_hh := REC_CUR_trans_hh_suplm.nb_hh -
                                     (vln_sous_total_hh - (ROUND(vln_solde_acuml / vln_factr_majrt,
                                                                 3)));
                        --
                     END IF;
                     -- fin Retouche 169
                  
                     /*fnd_file.put_line(fnd_file.log,'|'||RPAD(RPAD(REC_CUR_trans_hh_suplm.dt_gain,12,' ')||'|'||
                          RPAD(vln_sous_total,16,' ')|| '|'||
                          RPAD(vln_sous_total_hh,15,' ')|| '|'||
                          RPAD(vln_hh_compn,11,' ')||'|'||
                          RPAD(vln_nb_hh,7,' ')||'|'||
                          REC_CUR_trans_hh_suplm.tx_horr
                     ,80,' ') || '|');*/
                     --
                     INSERT INTO xxgir_rh_suplm_h620_tempr
                     VALUES
                        (vln_id_afect,
                         vln_element_type_id,
                         REC_CUR_trans_hh_suplm.id_entre_elemn,
                         REC_CUR_trans_hh_suplm.cd_gain,
                         REC_CUR_trans_hh_suplm.dt_gain,
                         /* Retouche 169
                         REC_CUR_trans_hh_suplm.nb_hh,
                         vln_tx_horr*/
                         --vln_hh_compn
                         vln_nb_hh,
                         REC_CUR_trans_hh_suplm.tx_horr);
                     --
                     --INC 85862
                  END IF;
                  --
                  -- Retouche 169
               ELSE
                  -- On quitte car on a toutes les heures à rembourser
                  --
                  EXIT heure_effectue;
                  --
                  -- Fin retouche 169
               END IF;
               --
            END LOOP heure_effectue;
            --
            --INC 85862
            --fnd_file.put_line(fnd_file.log,'|'||RPAD('  IF vln_sous_total_hh('|| vln_sous_total_hh ||')< vln_solde_acuml/vln_factr_majrt ('|| ROUND(vln_solde_acuml/vln_factr_majrt,3) ||')'    ,80,' ') || '|');
            IF vln_sous_total_hh < vln_solde_acuml / vln_factr_majrt THEN
               --2015-04-02
               vln_hh_restn_rembr := ROUND((vln_solde_acuml / vln_factr_majrt),
                                           3) - vln_sous_total_hh;
               --
               /*DDC 239545*/
               /*vlv_tx_horr := fv_convr_nb_decml_carct(xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => vgrec_perd_paie_varbl.dt_debut,*/
               vlv_tx_horr := fv_convr_nb_decml_carct(xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => vgd_dt_exect,
                                                                                               pn_id_afect => vln_id_afect));
            
               INSERT INTO xxgir_rh_suplm_h620_tempr
               VALUES
                  (vln_id_afect,
                   vln_element_type_id,
                   NULL,
                   '030',
                   vgrec_perd_paie_varbl.dt_debut,
                   vln_hh_restn_rembr,
                   vlv_tx_horr);
               --
               OPEN CUR_employee_number(vln_id_afect);
               FETCH CUR_employee_number
                  INTO vlv_employee_number;
               CLOSE CUR_employee_number;
               FND_FILE.PUT_LINE(FND_FILE.LOG,
                                 '|' || RPAD('Remboursement d''heure non disponible',
                                             80,
                                             ' ') || '|');
               FND_FILE.PUT_LINE(FND_FILE.LOG,
                                 '|' || RPAD('Numéro employé: ' || vlv_employee_number || '    assignment_id: ' || vln_id_afect,
                                             80,
                                             ' ') || '|');
               FND_FILE.PUT_LINE(FND_FILE.LOG,
                                 '|' || RPAD('Heure demandé: ' || ROUND(REC_CUR_total_hh_rembr.total_hh_rembr / vln_factr_majrt,
                                                                        3) || '     Heure disponible: ' || vln_sous_total_hh,
                                             80,
                                             ' ') || '|');
               FND_FILE.PUT_LINE(FND_FILE.LOG,
                                 '|' || RPAD('Heure Payé non disponible: ' || vln_hh_restn_rembr || '     Au Taux de : ' || vlv_tx_horr,
                                             80,
                                             ' ') || '|');
            END IF;
            --
            /* Retouche 169
            vln_sous_total := REC_CUR_total_hh_rembr.total_hh_rembr;*/
            vln_sous_total    := 0;
            vln_sous_total_hh := 0;
            --
            -- 6.27.6 créer fdt jusqu'à concurrence des heures à rembourser
            --
            p_log('62720 - <<Gain_suplm>> ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
            vgv_etape := '6.27.9';
            --
            /*fnd_file.put_line(fnd_file.log,'');
            fnd_file.put_line(fnd_file.log,'');
            fnd_file.put_line(fnd_file.log,'|'||RPAD('              Boucle du Curseur CUR_gain_hh_suplm',80,' ') || '|');
            fnd_file.put_line(fnd_file.log,'|'||RPAD('  DT_GAIN   |  Sous-Tot  |  hre  |  tx-horr  ',80,' ') || '|');*/
            <<gain_suplm>>
            FOR REC_CUR_gain_hh_suplm IN CUR_gain_hh_suplm(vln_id_afect) LOOP
               --
               -- Pour ne pas créer un enregistrement avec 0 heure à rembourser
               --
               IF REC_CUR_gain_hh_suplm.nb_hh <> 0 THEN
                  --
               
                  IF vln_sous_total < ROUND(REC_CUR_total_hh_rembr.total_hh_rembr / vln_factr_majrt,
                                            3) THEN
                     --
                     vln_sous_total := vln_sous_total + REC_CUR_gain_hh_suplm.nb_hh;
                     --INC 74743
                     vln_hh_rembr_gain := REC_CUR_gain_hh_suplm.nb_hh;
                     --
                  
                     IF vln_sous_total > ROUND(REC_CUR_total_hh_rembr.total_hh_rembr / vln_factr_majrt,
                                               3) THEN
                        --
                        -- On ne rembourse que la partie qui atteint le total du remboursement demandé.
                        --INC 74743
                        vln_hh_rembr_gain := REC_CUR_gain_hh_suplm.nb_hh -
                                             (vln_sous_total - ROUND(REC_CUR_total_hh_rembr.total_hh_rembr / vln_factr_majrt,
                                                                     3));
                     
                        --
                     END IF;
                  
                     -- INC 74743
                     OPEN CUR_element_type_type(vln_element_type_id);
                     FETCH CUR_element_type_type
                        INTO vlv_elemn_type;
                     CLOSE CUR_element_type_type;
                  
                     IF vlv_elemn_type = 'EF' THEN
                        /*DDC 239545*/
                        /*vlv_tx_horr := fv_convr_nb_decml_carct(xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => REC_CUR_gain_hh_suplm.dt_gain,*/
                        vlv_tx_horr := fv_convr_nb_decml_carct(xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => vgd_dt_exect,
                                                                                                        pn_id_afect => REC_CUR_gain_hh_suplm.id_afect));
                     ELSE
                        vlv_tx_horr := fv_convr_nb_decml_carct(REC_CUR_gain_hh_suplm.tx_horr);
                     END IF;
                     --
                  
                     /* fnd_file.put_line(fnd_file.log,'|'||RPAD(RPAD(REC_CUR_gain_hh_suplm.dt_gain,12,' ')||'|'||
                          RPAD(vln_sous_total,15,' ')|| '|'||
                          RPAD(vln_hh_rembr_gain,7,' ')||'|'||
                          vlv_tx_horr
                     ,80,' ') || '|');*/
                     --
                     vgv_etape := '6.27.10 - id_afect = ' || vln_id_afect;
                     --
                     -- Créer l'enregistrement
                     --
                  
                     --
                  
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := 'A030';
                     --INC 74743
                     vgrec_gir_rh_fdt.elemn_type_id  := NULL; -- REC_CUR_total_hh_rembr.id_type_elemn;
                     vgrec_gir_rh_fdt.elemn_entry_id := NULL; --REC_CUR_total_hh_rembr.Id_Entre_Elemn;
                     --en attente vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_total_hh_rembr.dt_gain;
                     vgrec_gir_rh_fdt.dt_gain := vgrec_perd_paie_varbl.dt_debut;
                     --DDC 209235
                     vld_dt_gain := vgrec_perd_paie_varbl.dt_debut;
                     --
                     --
                     --inc 74743
                     vgrec_gir_rh_fdt.nb_hh_signe := vln_hh_rembr_gain;
                     vgrec_gir_rh_fdt.nb_hh       := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
                  
                     vgrec_gir_rh_fdt.tx_horr := vlv_tx_horr;
                     --INC 74743
                     vgrec_gir_rh_fdt.tx_mt_signe := vlv_tx_horr;
                     --
                     vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
                     vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
                     vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
                     vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
                     vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
                     vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
                     vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
                     vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
                     vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
                     vgrec_gir_rh_fdt.dt_debut    := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_fin      := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.raisn_3     := cv_hh_rembr;
                     --
                     p_log('62728 - Appeler P_creer_gain_fdt',
                           vlv_nm_procd_fonct);
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                     FORALL vln_cp IN INDICES OF vltab_liste_elemn
                        UPDATE gir_rh_suivi_elemn rse
                           SET rse.id_contr_fdt = vln_id_contr_fdt,
                               rse.in_trait     = 'O'
                         WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
                           AND rse.in_trait = 'N'
                           AND rse.id_contr_fdt IS NULL;
                     --
                     -- Début INC-89949
                     FORALL vln_cp IN INDICES OF vltab_liste_elemn
                        UPDATE gir_rh_suivi_entre_elemn_paie rse
                           SET rse.id_contr_fdt = vln_id_contr_fdt,
                               rse.in_trait     = 'O'
                         WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
                           AND rse.in_trait = 'N'
                           AND rse.id_contr_fdt IS NULL;
                     -- Fin INC-89949
                     --
                     -- On relie l'identifiant fdt à celui de l'élément pour la date de gain traitée
                     --
                     vln_index := vltab_elemn_trait.first;
                     --
                     LOOP
                        EXIT WHEN vln_index IS NULL;
                        --
                        IF vltab_elemn_trait(vln_index).dt_gain = REC_CUR_gain_hh_suplm.dt_gain THEN
                           --
                           vltab_elemn_trait(vln_index).id_contr_fdt := vln_id_contr_fdt;
                           --
                           -- On a trouvé donc on sort.
                           --
                           EXIT;
                           --
                        END IF;
                        --
                        vln_index := vltab_elemn_trait.NEXT(vln_index);
                        --
                     END LOOP;
                     --
                  END IF;
                  --
               END IF;
               --
            END LOOP gain_suplm;
            --
            -- Retouche 169
            --
            IF vltab_elemn_trait.count > 0 THEN
               --
               FORALL vln_cp IN INDICES OF vltab_elemn_trait
                  UPDATE gir_rh_suivi_elemn rse
                     SET rse.id_contr_fdt = vln_id_contr_fdt,
                         rse.in_trait     = 'O'
                   WHERE rse.element_entry_id = vltab_elemn_trait(vln_cp).id_entre_elemn
                     AND rse.in_trait = 'N'
                     AND rse.id_contr_fdt IS NULL;
               --
               -- Début INC-89949
               FORALL vln_cp IN INDICES OF vltab_elemn_trait
                  UPDATE gir_rh_suivi_entre_elemn_paie rse
                     SET rse.id_contr_fdt = vln_id_contr_fdt,
                         rse.in_trait     = 'O'
                   WHERE rse.element_entry_id = vltab_elemn_trait(vln_cp).id_entre_elemn
                     AND rse.in_trait = 'N'
                     AND rse.id_contr_fdt IS NULL;
               -- Fin INC-89949
               --
               vlTAB_elemn_trait.DELETE;
               --
            END IF;
            --
            vlTAB_liste_elemn.DELETE;
            --
         END IF; -- identifiant du régime accumulé
      --
      END LOOP heure_rembourse;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_27.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_regm_acuml%ISOPEN THEN
            CLOSE CUR_regm_acuml;
         END IF;
         --
         -- Retouche 169
         --
         vlTAB_liste_elemn.DELETE;
         vlTAB_elemn_trait.DELETE;
         -- fin Retouche 169
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80382';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_27;

   --
   -- Étape 6.28
   -- ============================================================================
   -- P_trait_elemn_etape_6_28
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des éléments non récurrents avec heures intermédiaires remboursées.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2013-03-19  Création Retouche 169 Ajout des Heures intermédiaires (résiduelles et autres)
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_28(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_28';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_28';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_id_afect         NUMBER; -- Identifiant de l'affectation en cours
      vln_hh_rembr_gain    NUMBER; -- heures remboursées à la date du gain
      vln_solde_acuml_regm NUMBER; -- Solde accumulé du régime
      vln_solde_acuml      NUMBER; -- Solde accumulé
      vln_sous_total       NUMBER; -- Sous total pour la comparaison des heures accumulées et remboursées
      vlrec_cle_compt      type_rec_ventl_cout; -- infos budgétaires
      vlrec_persn          type_rec_persn; -- Infos de la personne
      vlv_tx_horr          gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vln_id_contr_fdt     gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      vltab_liste_elemn    tab_elemn; -- Table PL/SQL pour les numéros d'éléments.
      vltab_elemn_trait    tab_elemn_rembr; -- table pour les éléments traités
      vln_hh_compn         NUMBER; -- Heures compensées qui seront remboursées.
      vln_index            PLS_INTEGER; -- index de la table d'enregistrement
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments non récurrents des heures
      -- intermédiaires à rembourser.
      ----------------------------------------------------------------------
      -- 6.28.1
      CURSOR CUR_total_hh_rembr IS
         SELECT reht.id_afect,
                SUM(FND_NUMBER.CANONICAL_TO_NUMBER(reht.va_entre_elemn)) total_hh_rembr
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = '6_11'
            AND reht.nm_va_entre_elemn IN (cv_nm_hh,
                                           cv_nm_hh_plan)
            AND reht.cd_elemn = cv_cd_elemn_inter_rembr
            AND reht.va_entre_elemn IS NOT NULL
               --DDC 209235 par employé (=assignment_id)
            AND reht.id_afect = pn_assignment_id
          GROUP BY reht.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments non récurrents des heures
      -- intermédiaires à rembourser.
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_rembr(pn_id_afect IN NUMBER) IS
         SELECT id_entre_elemn
           FROM (SELECT id_entre_elemn
                   FROM (SELECT reht.id_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nbr_va_entre
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_11'
                            AND reht.cd_elemn = cv_cd_elemn_inter_rembr
                            AND reht.id_afect = pn_id_afect
                            AND reht.nm_va_entre_elemn IN (cv_nm_hh,
                                                           cv_nm_dt_efect)
                            AND reht.va_entre_elemn IS NOT NULL)
                  WHERE nbr_va_entre = 2
                 UNION ALL
                 SELECT id_entre_elemn
                   FROM (SELECT reht.id_entre_elemn,
                                COUNT(*) over(PARTITION BY reht.id_entre_elemn) nbr_va_entre
                           FROM xxgir_rh_elemn_h620_tempr reht
                          WHERE reht.nm_liste = '6_11'
                            AND reht.cd_elemn = cv_cd_elemn_inter_rembr
                            AND reht.id_afect = pn_id_afect
                            AND reht.nm_va_entre_elemn IN (cv_nm_hh_plan,
                                                           cv_nm_dt_entre_vigr)
                            AND reht.va_entre_elemn IS NOT NULL)
                  WHERE nbr_va_entre = 2)
          GROUP BY id_entre_elemn;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour obtenir l'identifiant du régime d'accumulation
      ----------------------------------------------------------------------
      -- 6.28.2
      CURSOR CUR_regm_acuml(pn_id_afect IN NUMBER) IS
         SELECT rdra.id_regm_acuml
           FROM xxgir_rh_elemn_afect_v     rea,
                xxgir_rh_detl_regm_acuml_v rdra
          WHERE rea.id_afect = pn_id_afect
            AND rea.id_type_elemn = rdra.id_type_elemn_regm_acuml
            AND rdra.nm_regm_acuml = cv_nm_regm_acuml_inter
            AND rdra.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rdra.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rdra.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rdra.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut;
      --
      REC_regm_acuml CUR_regm_acuml%ROWTYPE;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur des transactions d'heures supplémentaires
      -- accumulées en ordre de date de création descendante
      ----------------------------------------------------------------------
      -- 6.28.3 6.28.4
      CURSOR CUR_trans_hh_inter(pn_id_afect IN NUMBER) IS
         WITH liste_suivi AS
          (SELECT rse.element_entry_id id_entre_elemn
             FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
            WHERE -- 6.28.3.1 Élément lié à l'affectation
            rse.assignment_id = pn_id_afect
           -- 6.28.3.2 Élément en vigueur à la période courante
         AND rse.new_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
         AND rse.new_effective_end_date >= TRUNC(cd_dt_prodc)
         AND rse.element_type_id IN (SELECT rdra.id_type_elemn
                                      FROM xxgir_rh_detl_regm_acuml_v rdra
                                     WHERE rdra.nm_regm_acuml = cv_nm_regm_acuml_inter
                                       AND rdra.cd_soust_aditn = cv_cd_aditn
                                       AND rdra.cd_elemn <> cv_cd_elemn_inter_rembr
                                       AND rdra.cd_elemn <> cv_cd_elemn_suplm_rembr)
            GROUP BY rse.element_entry_id)
         SELECT id_afect,
                id_type_elemn,
                id_entre_elemn,
                cd_gain,
                dt_gain,
                nb_hh,
                tx_horr
           FROM (SELECT id_afect,
                        id_type_elemn,
                        id_entre_elemn,
                        cd_gain,
                        FND_DATE.CANONICAL_TO_DATE(dt_gain) dt_gain,
                        FND_NUMBER.CANONICAL_TO_NUMBER(NVL(nb_hh_derv,
                                                           '0')) nb_hh,
                        NVL(FND_NUMBER.CANONICAL_TO_NUMBER(va_tx),
                            /*DDC 239545*/
                            /*xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => fnd_date.canonical_to_date(dt_gain),*/
                            xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => vgd_dt_exect,
                                                                     pn_id_afect => id_afect)) tx_horr
                   FROM (SELECT rea.id_afect id_afect,
                                rea.id_type_elemn id_type_elemn,
                                rea.id_entre_elemn id_entre_elemn,
                                rea.cd_sagip cd_gain,
                                rea.nm_elemn,
                                rea.nm_va_entre_elemn nm_va_entre_elemn,
                                rea.va_entre_elemn,
                                COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre,
                                rea.peev_dt_debut_efect
                           FROM xxgir_rh_elemn_afect_v rea,
                                liste_suivi            ls
                          WHERE rea.id_entre_elemn = ls.id_entre_elemn
                            AND rea.cd_elemn = cv_cd_elemn_inter_compn
                            AND rea.type_elemn = cv_cd_type_elemn_efect
                            AND rea.cd_sagip = '029'
                            AND rea.nm_va_entre_elemn IN (cv_nm_dt_efect,
                                                          cv_nm_hh_compn_derv,
                                                          cv_nm_tx)
                            AND rea.cd_sagip IS NOT NULL)
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date effective' dt_gain,
                                            'Hres comp dérivées' nb_hh_derv,
                                            'Taux' va_tx))
                  WHERE nbr_va_entre = 3
                 UNION ALL
                 SELECT id_afect,
                        id_type_elemn,
                        id_entre_elemn,
                        cd_gain,
                        FND_DATE.CANONICAL_TO_DATE(dt_gain) dt_gain,
                        FND_NUMBER.CANONICAL_TO_NUMBER(NVL(nb_hh_plan,
                                                           '0')) nb_hh,
                        /*DDC 239545*/
                        /*xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => fnd_date.canonical_to_date(dt_gain),*/
                        xxgir_rh_23000_convr_du.fn_obten_tx_horr(pd_dt_efect => vgd_dt_exect,
                                                                 pn_id_afect => id_afect) tx_horr
                   FROM (SELECT rea.id_afect id_afect,
                                rea.id_type_elemn id_type_elemn,
                                rea.id_entre_elemn id_entre_elemn,
                                rea.cd_sagip cd_gain,
                                rea.nm_elemn,
                                rea.nm_va_entre_elemn nm_va_entre_elemn,
                                rea.va_entre_elemn,
                                COUNT(*) over(PARTITION BY rea.id_entre_elemn) nbr_va_entre,
                                rea.peev_dt_debut_efect
                           FROM xxgir_rh_elemn_afect_v rea,
                                liste_suivi            ls
                          WHERE rea.id_entre_elemn = ls.id_entre_elemn
                            AND rea.type_elemn = cv_cd_type_elemn_efect
                            AND rea.nm_va_entre_elemn IN (cv_nm_hh_plan,
                                                          cv_nm_dt_entre_vigr))
                 pivot(MAX(va_entre_elemn)
                    FOR nm_va_entre_elemn IN('Date d''entrée en vigueur' dt_gain,
                                            'Heures du plan' nb_hh_plan))
                  WHERE nbr_va_entre = 2)
          ORDER BY id_afect,
                   dt_gain DESC;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur des transactions d'heures supplémentaires
      -- en ordre de date de gain ascendante
      ----------------------------------------------------------------------
      -- 6.28.9
      CURSOR CUR_gain_hh_inter(pn_id_afect IN NUMBER) IS
         SELECT rsht.id_afect,
                rsht.dt_gain,
                SUM(rsht.nb_hh) nb_hh,
                rsht.tx_horr
           FROM xxgir_rh_suplm_h620_tempr rsht
          WHERE rsht.id_afect = pn_id_afect
          GROUP BY rsht.id_afect,
                   rsht.dt_gain,
                   rsht.tx_horr
          ORDER BY rsht.dt_gain ASC;
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- S'assurer que la table est bien vide
      --
      DELETE FROM xxgir_rh_suplm_h620_tempr
       WHERE id_afect = pn_assignment_id; --DDC 209235 par employé (=assignment_id)
      --
      vln_id_afect := 0;
      --
      vgv_etape := '6.28.1';
      --
      p_log('62800 - <<Heure_rembourse>> ' || vln_id_afect,
            vlv_nm_procd_fonct);
      --
      <<heure_rembourse>>
      FOR REC_CUR_total_hh_rembr IN CUR_total_hh_rembr LOOP
         --
         IF vln_id_afect <> REC_CUR_total_hh_rembr.id_afect THEN
            --
            vln_id_afect := REC_CUR_total_hh_rembr.id_afect;
            --
            -- Obtenir les valeurs dérivées
            --
            p_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                               pd_dt_afect     => vgrec_perd_paie_varbl.dt_debut,
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               prec_ventl_cout => vlrec_cle_compt);
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            OPEN CUR_regm_acuml(vln_id_afect);
            --
            FETCH CUR_regm_acuml
               INTO REC_regm_acuml;
            --
            CLOSE CUR_regm_acuml;
            --
            p_log('62801 - id_afect    : ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            p_log('62802 - régime id   : ' || REC_regm_acuml.id_regm_acuml,
                  vlv_nm_procd_fonct);
            p_log('62803 - hh rembr    : ' || REC_CUR_total_hh_rembr.total_hh_rembr,
                  vlv_nm_procd_fonct);
            --
            IF REC_regm_acuml.id_regm_acuml IS NOT NULL THEN
               --
               vgv_etape := '6.28.2 - id_regm = ' || REC_regm_acuml.id_regm_acuml;
               --
               -- 6.28.2 Obtenir le solde de la réserve d'heures supplémentaires
               --
               vln_solde_acuml_regm := xxgir_rh_23000_regm_acuml.fn_obten_qt_regm_solde_admis(pd_dt_sesn       => vgd_dt_exect,
                                                                                              pn_id_afect      => vln_id_afect,
                                                                                              pn_id_regm_acuml => REC_regm_acuml.id_regm_acuml);
               --
               p_log('62804 - solde pto  : ' || vln_solde_acuml_regm,
                     vlv_nm_procd_fonct);
               --
            END IF;
            --
         END IF;
         --
         IF REC_regm_acuml.id_regm_acuml IS NOT NULL THEN
            --
            vln_solde_acuml := vln_solde_acuml_regm + REC_CUR_total_hh_rembr.total_hh_rembr;
            --
            p_log('62805 - solde acum : ' || vln_solde_acuml,
                  vlv_nm_procd_fonct);
            --
            vgv_etape := '6.28.3 - Solde acumulé = ' || vln_solde_acuml;
            --
            OPEN CUR_elemn_rembr(vln_id_afect);
            --
            FETCH CUR_elemn_rembr BULK COLLECT
               INTO vltab_liste_elemn;
            --
            CLOSE CUR_elemn_rembr;
            --
            -- Initialiser pour la prochaine comparaison des heures effectuées avec le solde accumulé
            --
            vln_sous_total := 0;
            --
            -- pour chaque 6.28.3 trié par date création descendante pour
            -- 6.28.4 obtenir la date du gain (date effective) et le nombre d'heures
            --
            p_log('62810 - <<Heure_effectue>> ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
            <<heure_effectue>>
            FOR REC_CUR_trans_hh_inter IN CUR_trans_hh_inter(vln_id_afect) LOOP
               --
               vgv_etape := '6.28.4 - id_elemn = ' || REC_CUR_trans_hh_inter.id_entre_elemn;
               --
               --DDC 209235
               vgv_id_entre_elemn := REC_CUR_trans_hh_inter.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
               vld_dt_gain        := REC_CUR_trans_hh_inter.dt_gain;
               --
               p_log('62811 - sous total : ' || vln_sous_total,
                     vlv_nm_procd_fonct);
               --
               -- garder les enreg jusqu'au solde accumulé
               --
               IF vln_sous_total < vln_solde_acuml THEN
                  --
                  vln_index := vltab_elemn_trait.count + 1;
                  --
                  vltab_elemn_trait(vln_index).id_entre_elemn := REC_CUR_trans_hh_inter.id_entre_elemn;
                  vltab_elemn_trait(vln_index).dt_gain := REC_CUR_trans_hh_inter.dt_gain;
                  --
                  vgv_etape := '6.28.7 - id_elemn = ' || REC_CUR_trans_hh_inter.id_entre_elemn;
                  --
                  vln_sous_total := vln_sous_total + REC_CUR_trans_hh_inter.nb_hh;
                  --
                  p_log('62812 - xxgir_rh_suplm_h620_tempr ',
                        vlv_nm_procd_fonct);
                  p_log('62813 - afect ' || vln_id_afect,
                        vlv_nm_procd_fonct);
                  p_log('62814 - id type ' || REC_CUR_trans_hh_inter.id_type_elemn,
                        vlv_nm_procd_fonct);
                  p_log('62815 - id elemn ' || REC_CUR_trans_hh_inter.id_entre_elemn,
                        vlv_nm_procd_fonct);
                  p_log('62816 - cd_gain ' || REC_CUR_trans_hh_inter.cd_gain,
                        vlv_nm_procd_fonct);
                  p_log('62817 - dt_gain ' || REC_CUR_trans_hh_inter.dt_gain,
                        vlv_nm_procd_fonct);
                  p_log('62818 - heures ' || REC_CUR_trans_hh_inter.nb_hh,
                        vlv_nm_procd_fonct);
                  p_log('62819 - tx hor ' || REC_CUR_trans_hh_inter.tx_horr,
                        vlv_nm_procd_fonct);
                  --
                  -- Si le sous-total dépasse le solde, il faut enlever les heures excédentaires
                  --
                  vln_hh_compn := REC_CUR_trans_hh_inter.nb_hh;
                  --
                  IF vln_sous_total > vln_solde_acuml THEN
                     --
                     -- On ne traite les heures que jusqu'à la limite du solde accumulé (réserve)
                     --
                     vgv_etape := '6.28.8 - id_elemn = ' || REC_CUR_trans_hh_inter.id_entre_elemn;
                     --
                     vln_hh_compn := REC_CUR_trans_hh_inter.nb_hh - (vln_sous_total - vln_solde_acuml);
                     --
                  END IF;
                  --
                  INSERT INTO xxgir_rh_suplm_h620_tempr
                  VALUES
                     (vln_id_afect,
                      REC_CUR_trans_hh_inter.id_type_elemn,
                      REC_CUR_trans_hh_inter.id_entre_elemn,
                      REC_CUR_trans_hh_inter.cd_gain,
                      REC_CUR_trans_hh_inter.dt_gain,
                      vln_hh_compn,
                      REC_CUR_trans_hh_inter.tx_horr);
                  --
               ELSE
                  -- On quitte car on a toutes les heures à rembourser
                  --
                  EXIT heure_effectue;
                  --
               END IF;
               --
            END LOOP heure_effectue;
            --
            vln_sous_total := 0;
            --
            -- 6.28.6 créer fdt jusqu'à concurrence des heures à rembourser
            --
            p_log('62820 - <<Gain_inter>> ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
            vgv_etape := '6.28.9';
            --
            <<gain_inter>>
            FOR REC_CUR_gain_hh_inter IN CUR_gain_hh_inter(vln_id_afect) LOOP
               --
               IF REC_CUR_gain_hh_inter.nb_hh <> 0 THEN
                  --
                  IF vln_sous_total < REC_CUR_total_hh_rembr.total_hh_rembr THEN
                     --
                     vln_sous_total := vln_sous_total + REC_CUR_gain_hh_inter.nb_hh;
                     --
                     vln_hh_rembr_gain := REC_CUR_gain_hh_inter.nb_hh;
                     --
                     IF vln_sous_total > REC_CUR_total_hh_rembr.total_hh_rembr THEN
                        --
                        -- On ne rembourse que la partie qui atteint le total du remboursement demandé.
                        --
                        vln_hh_rembr_gain := REC_CUR_gain_hh_inter.nb_hh - (vln_sous_total - REC_CUR_total_hh_rembr.total_hh_rembr);
                        --
                     END IF;
                     --
                     vlv_tx_horr := fv_convr_nb_decml_carct(REC_CUR_gain_hh_inter.tx_horr);
                     --
                     vgv_etape := '6.28.10 - id_afect = ' || vln_id_afect;
                     --
                     -- Créer l'enregistrement
                     --
                     vgrec_gir_rh_fdt := NULL;
                     --
                     vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                     vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                     vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                     vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                     vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                     vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                     vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'N';
                     vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                     vgrec_gir_rh_fdt.cd_gain                 := 'A030';
                     vgrec_gir_rh_fdt.dt_gain                 := vgrec_perd_paie_varbl.dt_debut;
                     --DDC 209235
                     vld_dt_gain := vgrec_perd_paie_varbl.dt_debut;
                     --
                     vgrec_gir_rh_fdt.nb_hh_signe := vln_hh_rembr_gain;
                     vgrec_gir_rh_fdt.nb_hh       := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                            pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                            pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                            pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
                     vgrec_gir_rh_fdt.tx_horr     := vlv_tx_horr;
                     vgrec_gir_rh_fdt.id_afect    := vln_id_afect;
                     vgrec_gir_rh_fdt.id_persn    := vlrec_persn.id_persn;
                     vgrec_gir_rh_fdt.minst       := vlrec_cle_compt.minst;
                     vgrec_gir_rh_fdt.unite_admin := vlrec_cle_compt.unite_admin;
                     vgrec_gir_rh_fdt.type_budgt  := vlrec_cle_compt.type_budgt;
                     vgrec_gir_rh_fdt.progr       := vlrec_cle_compt.progr;
                     vgrec_gir_rh_fdt.captl       := vlrec_cle_compt.captl;
                     vgrec_gir_rh_fdt.budgt       := vlrec_cle_compt.budgt;
                     vgrec_gir_rh_fdt.centr_respn := vlrec_cle_compt.centr_respn;
                     vgrec_gir_rh_fdt.dt_debut    := vgrec_perd_paie_varbl.dt_debut;
                     vgrec_gir_rh_fdt.dt_fin      := vgrec_perd_paie_varbl.dt_fin;
                     vgrec_gir_rh_fdt.raisn_3     := cv_hh_rembr;
                     --
                     p_log('62728 - Appeler P_creer_gain_fdt',
                           vlv_nm_procd_fonct);
                     --
                     p_creer_gain_fdt(vln_id_contr_fdt);
                     --
                     FORALL vln_cp IN INDICES OF vltab_liste_elemn
                        UPDATE gir_rh_suivi_elemn rse
                           SET rse.id_contr_fdt = vln_id_contr_fdt,
                               rse.in_trait     = 'O'
                         WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
                           AND rse.in_trait = 'N'
                           AND rse.id_contr_fdt IS NULL;
                     --
                     -- Début INC-89949
                     FORALL vln_cp IN INDICES OF vltab_liste_elemn
                        UPDATE gir_rh_suivi_entre_elemn_paie rse
                           SET rse.id_contr_fdt = vln_id_contr_fdt,
                               rse.in_trait     = 'O'
                         WHERE rse.element_entry_id = vltab_liste_elemn(vln_cp).id_entre_elemn
                           AND rse.in_trait = 'N'
                           AND rse.id_contr_fdt IS NULL;
                     -- Fin INC-89949
                     --
                     -- On relie l'identifiant fdt à celui de l'élément pour la date de gain traitée
                     --
                     vln_index := vltab_elemn_trait.first;
                     --
                     LOOP
                        EXIT WHEN vln_index IS NULL;
                        --
                        IF vltab_elemn_trait(vln_index).dt_gain = REC_CUR_gain_hh_inter.dt_gain THEN
                           --
                           vltab_elemn_trait(vln_index).id_contr_fdt := vln_id_contr_fdt;
                           --
                           -- On a trouvé donc on sort.
                           --
                           EXIT;
                           --
                        END IF;
                        --
                        vln_index := vltab_elemn_trait.NEXT(vln_index);
                        --
                     END LOOP;
                     --
                  END IF;
                  --
               END IF;
               --
            END LOOP gain_inter;
            --
            IF vltab_elemn_trait.count > 0 THEN
               --
               FORALL vln_cp IN INDICES OF vltab_elemn_trait
                  UPDATE gir_rh_suivi_elemn rse
                     SET rse.id_contr_fdt = vln_id_contr_fdt,
                         rse.in_trait     = 'O'
                   WHERE rse.element_entry_id = vltab_elemn_trait(vln_cp).id_entre_elemn
                     AND rse.in_trait = 'N'
                     AND rse.id_contr_fdt IS NULL;
               --
               -- Début INC-89949
               FORALL vln_cp IN INDICES OF vltab_elemn_trait
                  UPDATE gir_rh_suivi_entre_elemn_paie rse
                     SET rse.id_contr_fdt = vln_id_contr_fdt,
                         rse.in_trait     = 'O'
                   WHERE rse.element_entry_id = vltab_elemn_trait(vln_cp).id_entre_elemn
                     AND rse.in_trait = 'N'
                     AND rse.id_contr_fdt IS NULL;
               -- Fin INC-89949
               --
               vlTAB_elemn_trait.DELETE;
               --
            END IF;
            --
            vlTAB_liste_elemn.DELETE;
            --
         END IF; -- identifiant du régime accumulé
      --
      END LOOP heure_rembourse;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_28.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs
         --
         IF CUR_regm_acuml%ISOPEN THEN
            CLOSE CUR_regm_acuml;
         END IF;
         --
         IF CUR_elemn_rembr%ISOPEN THEN
            CLOSE CUR_elemn_rembr;
         END IF;
         --
         vlTAB_liste_elemn.DELETE;
         vlTAB_elemn_trait.DELETE;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80383';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_28;

   --
   -- Étape 6.29
   -- ============================================================================
   -- P_trait_elemn_etape_6_29
   -- ============================================================================
   /**************************************************************************
   * But : Traitement de la liste des éléments non récurrents avec montant de remplacement.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-06  INC00016333  Diviser par 100 les montants provenant de GIR_TRANS_H620 pour comparaison.
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Edgar  Doiron        2015-11-03  --DDC175592
   *************************************************************************/
   PROCEDURE p_trait_elemn_etape_6_29(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_trait_elemn_etape_6_29';
      --DDC 209235
      vld_dt_gain        DATE;
      vlv_nm_procd       VARCHAR2(100) := 'p_trait_elemn_etape_6_29';
      vlv_type_trans     VARCHAR2(10) := vgv_type_trans;
      vln_id_trans       NUMBER;
      vln_id_contr_absen NUMBER;
      --vln_id_contr_fdt    NUMBER;
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vln_id_afect    NUMBER; -- Identifiant de l'affectation en cours
      vlv_cd_paiem    gir_rh_fdt.cd_paiem%TYPE; -- Code de paiement de l'élément
      vlrec_cle_compt type_rec_ventl_cout; -- infos budgétaires
      vlrec_persn     type_rec_persn; -- Infos de la personne
      vlrec_dt_hh     type_rec_dt_hh; -- Dates et heures début fin
      -- INC00016333
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vlv_tx_mt        gir_rh_fdt.tx_mt%TYPE; -- Taux ou montant en date du gain
      vln_id_contr_fdt gir_rh_fdt.id_contr_fdt%TYPE; -- Identifiant de contrôle
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des éléments non récurrents avec montant de
      -- remplacement.
      ----------------------------------------------------------------------
      -- 6.29.1
      CURSOR CUR_mt_rempl IS
         SELECT reht.id_afect,
                reht.id_type_elemn,
                reht.id_entre_elemn,
                reht.cd_sagip,
                FND_NUMBER.CANONICAL_TO_NUMBER(reht.va_entre_elemn) mt_rempl,
                reht.dt_debut,
                reht.dt_fin
           FROM xxgir_rh_elemn_h620_tempr reht
          WHERE reht.nm_liste = '6_5'
               --DDC 209235 par employé (=assignment_id)
            AND reht.id_afect = pn_assignment_id
          ORDER BY reht.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la transaction H620 avec élément différent.
      ----------------------------------------------------------------------
      -- 6.29.1.1
      CURSOR CUR_trans_h620_difrn(pn_id_entre_elemn IN NUMBER,
                                  pv_cd_gain        IN VARCHAR2,
                                  --INC00017528
                                  pn_id_type_elemn IN NUMBER,
                                  --INC00017437
                                  pn_id_afect IN NUMBER) IS
         SELECT h620.id_trans_h620,
                h620.id_afect,
                fdt.elemn_entry_id id_entre_elemn,
                h620.statu_trans
                -- INC00017359
               ,
                fdt.id_contr_fdt
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620'
               -- INC00017437 Pour l'affectation en cours
            AND h620.id_afect = fdt.id_afect
            AND h620.id_afect = pn_id_afect
               -- 6.28.4.2.1.1
            AND h620.cd_gain = pv_cd_gain
            AND fdt.cd_gain = h620.cd_gain
               -- 6.29.1.1.2
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
               -- 6.29.1.1.3
            AND fdt.elemn_entry_id <> pn_id_entre_elemn
               -- INC00017528
            AND fdt.elemn_type_id = pn_id_type_elemn
               -- 6.29.1.1.4
            AND h620.in_trans_anul = 'N'
          ORDER BY h620.statu_trans DESC;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la transaction H620 pour le même élément.
      ----------------------------------------------------------------------
      -- 6.29.1.3
      CURSOR CUR_trans_h620_rempl(pn_id_entre_elemn IN NUMBER,
                                  pv_cd_gain        IN VARCHAR2) IS
         SELECT h620.id_afect,
                h620.id_trans_h620,
                fdt.elemn_entry_id id_entre_elemn
                -- INC00016333 Il faut diviser par 100 pour comparer aux montants calculés.
               ,
                FND_NUMBER.CANONICAL_TO_NUMBER(h620.tx_mt) / 100 mt_rempl,
                h620.statu_trans
                -- retouche 170
               ,
                h620.cd_paiem
                --INC00017359
               ,
                fdt.id_contr_fdt
                -- Retouche 183 on prend fdt au lieu de h620 car si dans le passé h620 reçoit le présent
               ,
                fdt.budgt,
                fdt.centr_respn
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE -- 6.29.1.3.1
          h620.cd_gain = pv_cd_gain
         -- 6.29.1.3.2
          AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
          AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
         -- 6.29.1.3.3
          AND h620.elemn_entry_id = pn_id_entre_elemn
         -- 6.29.1.3.4
          AND h620.in_mt_rempl = 'O'
         -- 6.29.1.3.5
          AND h620.in_trans_anul = 'N'
          AND fdt.id_trans = h620.id_trans_h620
          AND fdt.nm_fiche = 'H620'
          ORDER BY h620.statu_trans DESC;
      --
      REC_h620 CUR_trans_h620_rempl%ROWTYPE; -- Enregistrement de type CUR_trans_h620
      --
      ----DDC175592
      CURSOR CUR_hh_carra(p_element_entry_id IN NUMBER) IS
         SELECT FND_NUMBER.CANONICAL_TO_NUMBER(rea.va_entre_elemn) nb_hh
           FROM xxgir_rh_elemn_afect_v rea
           JOIN fnd_lookup_values flv
             ON (flv.lookup_type = 'GIR_RH_CD_GAIN_2' AND flv.language = 'FRC' AND flv.enabled_flag = 'Y' AND
                flv.start_date_active <= vgrec_perd_paie_varbl.dt_fin AND
                NVL(flv.end_date_active,
                     vgrec_perd_paie_varbl.dt_debut) >= vgrec_perd_paie_varbl.dt_debut AND flv.lookup_code = 'A' || rea.cd_sagip)
          WHERE rea.nm_va_entre_elemn = cv_nm_hh_carra
            AND rea.id_entre_elemn = p_element_entry_id
               -- Début SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004 : enlever code ancien code DateTrack
               --AND  ( rea.pee_dt_fin_efect BETWEEN vgrec_perd_paie_varbl.dt_debut AND vgrec_perd_paie_varbl.dt_fin OR rea.pee_dt_fin_efect = hr_general.end_of_time)
               -- 2015-12-09 DDC 204441 INC-97004 : nouvel façon
            AND rea.pee_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pee_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.peev_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.peev_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pel_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pel_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.pet_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.pet_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
            AND rea.piv_dt_debut_efect <= vgrec_perd_paie_varbl.dt_fin
            AND rea.piv_dt_fin_efect >= vgrec_perd_paie_varbl.dt_debut
          ORDER BY rea.pee_dt_debut_efect  DESC,
                   rea.peev_dt_debut_efect DESC;
      -- Fin SAGIR F.Aubin  2015-12-09 DDC 204441 INC-97004
      ----INC00097074
      vln_nb_hh_signe NUMBER;
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      -- 6.29.1
      --
      <<montant>>
      FOR REC_CUR_mt_rempl IN CUR_mt_rempl LOOP
         --
         vgv_etape := '6.29.1 - id_elemn = ' || REC_CUR_mt_rempl.id_entre_elemn;
         --
         --DDC 209235
         vld_dt_gain        := REC_CUR_mt_rempl.dt_debut;
         vgv_id_entre_elemn := REC_CUR_mt_rempl.id_entre_elemn; -- INC00106352 : toujours avoir le element_entry_id lorsque possible.
         --
         IF vln_id_afect <> REC_CUR_mt_rempl.id_afect THEN
            --
            vln_id_afect := REC_CUR_mt_rempl.id_afect;
            --
            p_log('  vln_id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
            -- Obtenir l'identifiant de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
         END IF;
         --
         -- Retouche 183 On tient compte de l'élément pour la clef comptable
         --
         p_obten_ventl_cout(pn_id_afect       => vln_id_afect,
                            pd_dt_afect       => REC_CUR_mt_rempl.dt_debut,
                            pv_id_type_paie   => cv_id_type_paie_varbl,
                            pn_id_entre_elemn => REC_CUR_mt_rempl.id_entre_elemn,
                            prec_ventl_cout   => vlrec_cle_compt);
         --
         p_obten_dt_hh(pn_id_entre_elemn => REC_CUR_mt_rempl.id_entre_elemn,
                       pd_dt_efect       => REC_CUR_mt_rempl.dt_fin,
                       prec_dt_hh        => vlrec_dt_hh);
         --
         vlv_cd_paiem := fv_obten_va_entre_elemn(pn_id_afect          => vln_id_afect,
                                                 pn_id_entre_elemn    => REC_CUR_mt_rempl.id_entre_elemn,
                                                 pd_dt_efect          => REC_CUR_mt_rempl.dt_fin,
                                                 pv_nm_va_entre_elemn => cv_nm_cd_paiem);
         --
         vgv_etape := '6.29.1.1 - id_elemn = ' || REC_CUR_mt_rempl.id_entre_elemn;
         --
         <<different>>
         FOR REC_CUR_trans_h620 IN CUR_trans_h620_difrn(REC_CUR_mt_rempl.id_entre_elemn,
                                                        'A' || REC_CUR_mt_rempl.cd_sagip,
                                                        REC_CUR_mt_rempl.id_type_elemn,
                                                        vln_id_afect) LOOP
            --
            vgv_etape := '6.29.1.2 - id_elemn = ' || REC_CUR_mt_rempl.id_entre_elemn;
            --
            --DDC 209235
            vln_id_trans     := REC_CUR_trans_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
            vln_id_contr_fdt := REC_CUR_trans_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
            --
            IF REC_CUR_trans_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.29.1.2.1 - id_trans = ' || REC_CUR_trans_h620.id_trans_h620;
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               vln_id_afect := REC_CUR_trans_h620.id_afect;
            
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_trans_h620.id_entre_elemn,
                            pn_id_trans       => REC_CUR_trans_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => 'A' || REC_CUR_mt_rempl.cd_sagip,
                            pn_id_contr_fdt   => REC_CUR_trans_h620.id_contr_fdt);
               --
               --DDC 209235
               vlv_code_erreur_gir := 'GIR-100153';
               vln_id_trans        := REC_CUR_trans_h620.id_trans_h620;
               vln_id_entre_elemn  := REC_CUR_trans_h620.id_entre_elemn;
               vln_id_contr_fdt    := REC_CUR_trans_h620.id_contr_fdt;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               --
               vgv_etape := '6.29.1.2.2 - id_trans = ' || REC_CUR_trans_h620.id_trans_h620;
               --
               vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_CUR_trans_h620.id_trans_h620;
               --
               vgv_etape := '6.29.1.2.3 - id_trans = ' || REC_CUR_trans_h620.id_trans_h620;
               p_log(vgv_etape,
                     vlv_nm_procd_fonct);
               --
               UPDATE gir_rh_fdt fdt
                  SET fdt.in_trans_anul = 'O'
                WHERE fdt.id_trans = REC_CUR_trans_h620.id_trans_h620
                  AND fdt.nm_fiche = 'H620'
                  AND fdt.in_trans_anul = 'N';
               --
               IF REC_CUR_trans_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                  --
                  vgv_etape := '6.29.1.2.4 - id_trans = ' || REC_CUR_trans_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_CUR_trans_h620.id_trans_h620;
                  --
               END IF;
               --
            END IF;
            --
         END LOOP different;
         --
         vgv_etape := '6.29.1.3 - id_elemn = ' || REC_CUR_mt_rempl.id_entre_elemn;
         --
      
         ----DDC175592
         OPEN CUR_hh_carra(REC_CUR_mt_rempl.id_entre_elemn);
         --INC00097074
         FETCH CUR_hh_carra
            INTO vln_nb_hh_signe;
         --FIN INC00097074
         CLOSE CUR_hh_carra;
         OPEN CUR_trans_h620_rempl(REC_CUR_mt_rempl.id_entre_elemn,
                                   'A' || REC_CUR_mt_rempl.cd_sagip);
         --
         FETCH CUR_trans_h620_rempl
            INTO REC_h620;
         --
         --DDC 209235
         vln_id_trans     := REC_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
         --
         IF CUR_trans_h620_rempl%NOTFOUND THEN
            CLOSE CUR_trans_h620_rempl;
            --
            vgv_etape := '6.29.1.4 - id_elemn = ' || REC_CUR_mt_rempl.id_entre_elemn;
            --
            --
            -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
            --
            vlv_tx_horr := NULL;
            --
            vlv_tx_mt := fv_convr_nb_decml_carct(REC_CUR_mt_rempl.mt_rempl);
            --
            vgrec_gir_rh_fdt := NULL;
            --
            vgrec_gir_rh_fdt.nm_fiche                := 'H620';
            vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
            vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
            vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
            vgrec_gir_rh_fdt.in_trans_anul           := 'N';
            vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
            vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'O';
            vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
            vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
            vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
            vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_mt_rempl.cd_sagip;
            vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_mt_rempl.id_entre_elemn;
            vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_mt_rempl.id_type_elemn;
            vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_mt_rempl.dt_debut;
         
            --INC00097074
            --vgrec_gir_rh_fdt.nb_hh_signe             := NULL;
            vgrec_gir_rh_fdt.nb_hh_signe := vln_nb_hh_signe;
            IF vgrec_gir_rh_fdt.nb_hh_signe IS NOT NULL THEN
            
               vgrec_gir_rh_fdt.nb_hh := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
            END IF;
         
            --
         
            vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
            vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
            vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
            vgrec_gir_rh_fdt.tx_mt_signe    := REC_CUR_mt_rempl.mt_rempl;
            vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
            vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
            vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
            vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
            vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
            vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
            vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
            vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
            vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
            vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                   vgrec_perd_paie_varbl.dt_debut);
            vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
            vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                   vgrec_perd_paie_varbl.dt_fin);
            vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
            vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
            vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
            vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
            vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
            --
            p_creer_gain_fdt(vln_id_contr_fdt);
            --
         ELSE
            CLOSE CUR_trans_h620_rempl;
            --
            IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.29.1.5 - id_trans = ' || REC_h620.id_trans_h620;
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               vln_id_afect := REC_CUR_mt_rempl.id_afect;
            
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_mt_rempl.id_entre_elemn,
                            pn_id_trans       => REC_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_cd_gain        => 'A' || REC_CUR_mt_rempl.cd_sagip,
                            pn_id_contr_fdt   => REC_h620.id_contr_fdt);
               --
               --DDC 209235
               vlv_code_erreur_gir := 'GIR-100153';
               vln_id_entre_elemn  := REC_CUR_mt_rempl.id_entre_elemn;
               vln_id_trans        := REC_h620.id_trans_h620;
               vln_id_contr_fdt    := REC_h620.id_contr_fdt;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               --
               vgv_etape := '6.29.1.6 - id_elemn = ' || REC_CUR_mt_rempl.id_entre_elemn;
               --
               p_log('mt_620=' || (REC_h620.mt_rempl) || ' ,mt_rempl=' || ROUND(REC_CUR_mt_rempl.mt_rempl,
                                                                                2),
                     vlv_nm_procd_fonct);
               --
               IF (REC_h620.mt_rempl) <> ROUND(REC_CUR_mt_rempl.mt_rempl,
                                               2) OR
                 -- retouche170
                  REC_h620.cd_paiem <> vlv_cd_paiem OR
                 -- retouche 183
                  REC_h620.budgt <> vlrec_cle_compt.budgt OR
                  REC_h620.centr_respn <> vlrec_cle_compt.centr_respn THEN
                  --
                  vgv_etape := '6.29.1.8 - id_trans = ' || REC_h620.id_trans_h620;
                  --
                  vgv_etape := '6.29.1.8.1 - id_trans = ' || REC_h620.id_trans_h620;
                  --
                  vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
                  --
                  vgv_etape := '6.29.1.8.2 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  UPDATE gir_rh_fdt fdt
                     SET fdt.in_trans_anul = 'O'
                   WHERE fdt.id_trans = REC_h620.id_trans_h620
                     AND fdt.nm_fiche = 'H620'
                     AND fdt.in_trans_anul = 'N';
                  --
                  IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                     --
                     vgv_etape := '6.29.1.8.3 - id_trans = ' || REC_h620.id_trans_h620;
                     p_log(vgv_etape,
                           vlv_nm_procd_fonct);
                     --
                     vgvar_liste_id_h620_h010.extend;
                     vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                     --
                  END IF;
                  --
                  -- 6.29.1.8.4 Créér l'enregistrement dans FDT
                  --
                  -- INC00016333 Utiliser P_creer_gain_fdt 2012-12-04
                  --
                  vlv_tx_horr := NULL;
                  --
                  vlv_tx_mt := fv_convr_nb_decml_carct(REC_CUR_mt_rempl.mt_rempl);
                  --
                  vgv_etape := '6.29.1.8.4 - id_elemn = ' || REC_CUR_mt_rempl.id_entre_elemn;
                  --
                  vgrec_gir_rh_fdt := NULL;
                  --
                  vgrec_gir_rh_fdt.nm_fiche                := 'H620';
                  vgrec_gir_rh_fdt.dt_statu_sagip          := TRUNC(vgd_dt_exect);
                  vgrec_gir_rh_fdt.statu_sagip             := cv_statu_sagip_non_trans;
                  vgrec_gir_rh_fdt.cd_actio                := cv_cd_actio_creat;
                  vgrec_gir_rh_fdt.in_trans_anul           := 'N';
                  vgrec_gir_rh_fdt.in_mt_suplm_specl_input := 'N';
                  vgrec_gir_rh_fdt.in_mt_rempl_specl_input := 'O';
                  vgrec_gir_rh_fdt.dt_perd_paie_du         := vgrec_perd_paie_varbl.dt_debut;
                  vgrec_gir_rh_fdt.dt_perd_paie_au         := vgrec_perd_paie_varbl.dt_fin;
                  vgrec_gir_rh_fdt.aa_finnc                := vgrec_perd_paie_varbl.aa_finnc;
                  vgrec_gir_rh_fdt.cd_gain                 := 'A' || REC_CUR_mt_rempl.cd_sagip;
                  vgrec_gir_rh_fdt.elemn_entry_id          := REC_CUR_mt_rempl.id_entre_elemn;
                  vgrec_gir_rh_fdt.elemn_type_id           := REC_CUR_mt_rempl.id_type_elemn;
                  vgrec_gir_rh_fdt.dt_gain                 := REC_CUR_mt_rempl.dt_debut;
                  --INC00097074
                  --vgrec_gir_rh_fdt.nb_hh_signe             := NULL;
                  --vgrec_gir_rh_fdt.nb_hh                   := NULL;
               
                  --vgrec_gir_rh_fdt.nb_hh_signe             := NULL;
                  vgrec_gir_rh_fdt.nb_hh_signe := vln_nb_hh_signe;
                  IF vgrec_gir_rh_fdt.nb_hh_signe IS NOT NULL THEN
                  
                     vgrec_gir_rh_fdt.nb_hh := fv_inscr_hh_mint_centm(pn_nb_hh         => vgrec_gir_rh_fdt.nb_hh_signe,
                                                                      pv_cd_gain       => vgrec_gir_rh_fdt.cd_gain,
                                                                      pd_dt_gain       => vgrec_gir_rh_fdt.dt_gain,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219
                  END IF;
                  --FIN
                  vgrec_gir_rh_fdt.cd_paiem       := vlv_cd_paiem;
                  vgrec_gir_rh_fdt.tx_horr        := vlv_tx_horr;
                  vgrec_gir_rh_fdt.tx_mt          := vlv_tx_mt;
                  vgrec_gir_rh_fdt.tx_mt_signe    := REC_CUR_mt_rempl.mt_rempl;
                  vgrec_gir_rh_fdt.id_afect       := vln_id_afect;
                  vgrec_gir_rh_fdt.id_persn       := vlrec_persn.id_persn;
                  vgrec_gir_rh_fdt.minst          := vlrec_cle_compt.minst;
                  vgrec_gir_rh_fdt.unite_admin    := vlrec_cle_compt.unite_admin;
                  vgrec_gir_rh_fdt.type_budgt     := vlrec_cle_compt.type_budgt;
                  vgrec_gir_rh_fdt.progr          := vlrec_cle_compt.progr;
                  vgrec_gir_rh_fdt.captl          := vlrec_cle_compt.captl;
                  vgrec_gir_rh_fdt.budgt          := vlrec_cle_compt.budgt;
                  vgrec_gir_rh_fdt.centr_respn    := vlrec_cle_compt.centr_respn;
                  vgrec_gir_rh_fdt.dt_debut       := NVL(vlrec_dt_hh.dt_debut,
                                                         vgrec_perd_paie_varbl.dt_debut);
                  vgrec_gir_rh_fdt.hh_debut       := vlrec_dt_hh.hh_debut;
                  vgrec_gir_rh_fdt.dt_fin         := NVL(vlrec_dt_hh.dt_fin,
                                                         vgrec_perd_paie_varbl.dt_fin);
                  vgrec_gir_rh_fdt.hh_fin         := vlrec_dt_hh.hh_fin;
                  vgrec_gir_rh_fdt.sectn          := vlrec_dt_hh.sectn;
                  vgrec_gir_rh_fdt.clas           := vlrec_dt_hh.clas;
                  vgrec_gir_rh_fdt.id_bloc_temps  := vlrec_dt_hh.id_bloc_temps;
                  vgrec_gir_rh_fdt.no_versn_objet := vlrec_dt_hh.no_versn_objet;
                  --
                  p_creer_gain_fdt(vln_id_contr_fdt);
                  --
               END IF;
               --
            END IF;
            --
         END IF;
         --
      END LOOP montant; -- 6.29.1
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_trait_elemn_etape_6_29.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Fermer es objets
         --
         IF CUR_trans_h620_rempl%ISOPEN THEN
            CLOSE CUR_trans_h620_rempl;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80384';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_trait_elemn_etape_6_29;

   --
   -- Étape 6.30
   -- ============================================================================
   -- P_verfr_elemn_etape_6_30
   -- ============================================================================
   /**************************************************************************
   * But : Vérification de la suppression des éléments non récurrents avec montant de remplacement.
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-12-05  INC00016333  Remplacer new par old car traite des destructions
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_30(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_30';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_verfr_elemn_etape_6_30';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h620.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      -- retouche 170
      vltab_elemn_suprm   sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les éléments supprimés
      vltab_id_trans_h620 sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les id du H620
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des autres éléments non récurrents à
      -- l'intérieur de la paie courante.
      ----------------------------------------------------------------------
      -- 6.29.1
      CURSOR CUR_mt_rempl_suprm IS
         SELECT rse.element_entry_id id_entre_elemn
           FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                -- Table temporaire contenant la liste des affectations principales à paie variable en vigueur à la période de paie courante.
               ,
                xxgir_rh_afect_tempr rat
          WHERE -- 6.29.1.1 Élément lié à l'affectation.
          rse.assignment_id = rat.id_afect
         --DDC 209235 par employé (=assignment_id)
          AND rat.id_afect = pn_assignment_id
          AND rat.in_type_paie = cv_id_type_paie_varbl
         --  6.29.1.2 Élément en vigueur dans la période de paie courante
          AND rse.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
          AND rse.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
         -- 6.29.1.3
         -- 6.29.1.4
          AND EXISTS (SELECT 'X'
             FROM pay_element_types_f_vl pet
            WHERE pet.element_type_id = rse.element_type_id
              AND pet.processing_type = 'N'
              AND REGEXP_INSTR(pet.element_name,
                               cv_nm_specl_input,
                               1,
                               1,
                               0,
                               'i') > 0
              AND pet.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
              AND pet.effective_end_date >= vgrec_perd_paie_varbl.dt_debut)
         -- 6.29.1.5 Élément avec date de début et date de fin à l'intérieur période courante
          AND rse.element_entry_id IN (SELECT rse2.element_entry_id
                                     FROM (SELECT element_entry_id
                                             FROM (SELECT element_entry_id,
                                                          nm_va,
                                                          dt_va
                                                     FROM (SELECT element_entry_id,
                                                                  nm_va,
                                                                  FND_DATE.CANONICAL_TO_DATE(old_screen_entry_value) dt_va,
                                                                  COUNT(*) over(PARTITION BY element_entry_id) nbr_va_entre
                                                             FROM (SELECT DISTINCT rse1.element_entry_id,
                                                                                   (SELECT piv.name
                                                                                      FROM pay_input_values_f_vl piv
                                                                                     WHERE piv.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                                                       AND piv.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                                                       AND piv.element_type_id = rse1.element_type_id
                                                                                       AND piv.input_value_id = rse1.input_value_id) nm_va,
                                                                                   rse1.old_screen_entry_value
                                                                     FROM gir_rh_suivi_entre_elemn_paie rse1 -- INC-89949
                                                                    WHERE rse1.element_entry_id IS NOT NULL
                                                                      AND rse1.input_value_id IS NOT NULL
                                                                      AND rse1.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                                      AND rse1.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                                      AND rse1.in_trait = 'N'
                                                                      AND rse1.trans_type = 'D'
                                                                         --DDC 209235 par employé (=assignment_id)
                                                                      AND rse1.assignment_id = pn_assignment_id)
                                                            WHERE (nm_va = cv_nm_dt_debut OR nm_va = cv_nm_dt_fin))
                                                    WHERE nbr_va_entre = 2)
                                           pivot(MAX(dt_va)
                                              FOR nm_va IN('Date de début' dt_debut,
                                                          'Date de fin' dt_fin))
                                            WHERE dt_debut <= vgrec_perd_paie_varbl.dt_fin
                                              AND dt_fin >= vgrec_perd_paie_varbl.dt_debut) rse2)
         -- 6.29.1.6 possède un montant de remplacement
          AND rse.element_entry_id IN (SELECT element_entry_id
                                     FROM (SELECT DISTINCT rse1.element_entry_id,
                                                           (SELECT piv.name
                                                              FROM pay_input_values_f_vl piv
                                                             WHERE piv.effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                                               AND piv.effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                                               AND piv.element_type_id = rse1.element_type_id
                                                               AND piv.input_value_id = rse1.input_value_id) nm_va,
                                                           rse1.old_screen_entry_value
                                             FROM gir_rh_suivi_entre_elemn_paie rse1 -- INC-89949
                                            WHERE rse1.element_entry_id IS NOT NULL
                                              AND rse1.input_value_id IS NOT NULL
                                              AND rse1.old_effective_start_date <= vgrec_perd_paie_varbl.dt_fin
                                              AND rse1.old_effective_end_date >= vgrec_perd_paie_varbl.dt_debut
                                              AND rse1.in_trait = 'N'
                                              AND rse1.trans_type = 'D'
                                                 --DDC 209235 par employé (=assignment_id)
                                              AND rse1.assignment_id = pn_assignment_id)
                                    WHERE nm_va = cv_nm_mt_rempl
                                      AND old_screen_entry_value IS NOT NULL)
         -- 6.29.1.7 non traité
          AND rse.in_trait = 'N'
         -- 6.29.1.8 présent dans le jeu d'éléments pour H620 définie au point 2a
          AND EXISTS (SELECT 'X'
             FROM xxgir_rh_elemn_h620_tempr reht
            WHERE reht.nm_liste = 'jeu_specl'
              AND reht.id_type_elemn = rse.element_type_id)
         -- 6.29.1.9 avec un type de transaction = « Supprimé »
          AND rse.trans_type = 'D'
         -- retouche 170
          GROUP BY rse.element_entry_id;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur pour la transaction H620.
      ----------------------------------------------------------------------
      -- 6.26.3
      CURSOR CUR_trans_h620(pn_id_entre_elemn IN NUMBER) IS
         SELECT h620.id_afect,
                h620.id_trans_h620,
                fdt.elemn_entry_id id_entre_elemn,
                h620.statu_trans,
                fdt.id_contr_fdt,
                h620.cd_gain,
                fdt.dt_gain
           FROM gir_trans_h620 h620,
                gir_rh_fdt     fdt
          WHERE fdt.id_trans = h620.id_trans_h620
            AND fdt.nm_fiche = 'H620'
               -- 6.29.3.1.1
            AND fdt.elemn_entry_id = pn_id_entre_elemn
               -- 6.29.3.1.2
            AND h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin
               -- 6.29.3.1.3
            AND h620.in_mt_rempl = 'O'
               -- 6.29.3.1.4
            AND h620.in_trans_anul = 'N';
      --
      REC_h620 CUR_trans_h620%ROWTYPE; -- Enregistrement de type CUR_trans_h620
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      vgv_etape := '6.30.1';
      --
      <<suppression>>
      FOR REC_CUR_mt_rempl_suprm IN CUR_mt_rempl_suprm LOOP
         --
         vgv_etape := '6.30.3 - id_elemn = ' || REC_CUR_mt_rempl_suprm.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_mt_rempl_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         OPEN CUR_trans_h620(REC_CUR_mt_rempl_suprm.id_entre_elemn);
         --
         FETCH CUR_trans_h620
            INTO REC_h620;
         --
         vgv_etape := '6.30.3.1 - id_elemn = ' || REC_CUR_mt_rempl_suprm.id_entre_elemn;
         --
         --DDC 209235
         vln_id_trans     := REC_h620.id_trans_h620; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_h620.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
         --
         IF CUR_trans_h620%FOUND THEN
            CLOSE CUR_trans_h620;
            --
            IF REC_h620.statu_trans = cv_cd_statu_sagip_trans THEN
               --
               vgv_etape := '6.30.3.3 - id_trans = ' || REC_h620.id_trans_h620;
               --
               -- Incrémente le nombre d'enregistrements lus et rejetés.
               --
               p_incre_cp(pv_nm_table => cv_nm_table_h620,
                          pb_in_rejt  => TRUE);
               --
               -- remplir tableau des rejets
               --
               p_ajout_rejt(pn_id_afect       => REC_h620.id_afect,
                            pn_id_entre_elemn => REC_h620.id_entre_elemn,
                            pn_id_trans       => REC_h620.id_trans_h620,
                            pv_cd_ereur       => 'GIR-100153',
                            pd_dt_perd_couvr  => vgrec_perd_paie_varbl.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_cd_gain        => REC_h620.cd_gain,
                            pn_id_contr_fdt   => REC_h620.id_contr_fdt);
               --
               --DDC 209235
               vlv_code_erreur_gir := 'GIR-100153';
               vln_id_contr_fdt    := REC_h620.id_contr_fdt;
               vln_id_afect        := REC_h620.id_afect;
               vln_id_trans        := REC_h620.id_trans_h620;
               vln_id_contr_fdt    := REC_h620.id_contr_fdt;
               --DDC 209235
               vld_dt_gain := REC_h620.dt_gain;
               --
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || vln_id_afect ||
                                    ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                                    TO_CHAR(vld_dt_gain,
                                            'YYYY-MM-DD') || ';';
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            ELSE
               -- On le fait ici car on ne veut pas mettre traité à oui quand rejet
               vltab_elemn_suprm.extend;
               vltab_elemn_suprm(vltab_elemn_suprm.count) := REC_CUR_mt_rempl_suprm.id_entre_elemn;
               --
               vgv_etape := '6.30.3.4 - id_trans = ' || REC_h620.id_trans_h620;
               p_log(vgv_etape,
                     vlv_nm_procd_fonct);
               --
               vltab_id_trans_h620.extend;
               vltab_id_trans_h620(vltab_id_trans_h620.count) := REC_h620.id_trans_h620;
               vgtab_trans_anul_h620(vgtab_trans_anul_h620.count + 1) := REC_h620.id_trans_h620;
               --
               IF REC_h620.statu_trans = cv_cd_statu_sagip_acept THEN
                  --
                  vgv_etape := '6.30.3.6 - id_trans = ' || REC_h620.id_trans_h620;
                  p_log(vgv_etape,
                        vlv_nm_procd_fonct);
                  --
                  vgvar_liste_id_h620_h010.extend;
                  vgvar_liste_id_h620_h010(vgvar_liste_id_h620_h010.count) := REC_h620.id_trans_h620;
                  --
               END IF;
               --
            END IF;
            --
         ELSE
            CLOSE CUR_trans_h620;
            --
            vgv_etape := '6.30.3.2 - id_elemn = ' || REC_CUR_mt_rempl_suprm.id_entre_elemn;
            p_log(vgv_etape,
                  vlv_nm_procd_fonct);
            --
            -- On le fait ici car on ne veut pas mettre traité à oui quand rejet
            vltab_elemn_suprm.extend;
            vltab_elemn_suprm(vltab_elemn_suprm.count) := REC_CUR_mt_rempl_suprm.id_entre_elemn;
            --
         END IF;
         --
      END LOOP suppression;
      --
      vgv_etape := '6.30.2';
      --
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_elemn rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      --
      -- Début INC-89949
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_entre_elemn_paie rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      -- Fin INC-89949
      --
      vgv_etape := '6.30.3.5';
      --
      FORALL vln_cp IN INDICES OF vltab_id_trans_h620
         UPDATE gir_rh_fdt fdt
            SET fdt.in_trans_anul = 'O'
          WHERE fdt.id_trans = vltab_id_trans_h620(vln_cp)
            AND fdt.nm_fiche = 'H620'
            AND fdt.in_trans_anul = 'N';
      --
      vlTAB_id_trans_h620.DELETE;
      vlTAB_elemn_suprm.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_30.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_elemn_suprm.DELETE;
         vlTAB_id_trans_h620.DELETE;
         --
         -- Fermer les curseurs
         --
         IF CUR_trans_h620%ISOPEN THEN
            CLOSE CUR_trans_h620;
         END IF;
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80385';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_30;

   --
   -- Étape 6.31
   -- ============================================================================
   -- P_verfr_elemn_etape_6_31
   -- ============================================================================
   /**************************************************************************
   * But : 10.   VÉRIFICATION DES SUPPRESSIONS DES AUTRES ÉLÉMENTS NON
   *           RECURRENTS DANS UNE PÉRIODE ANTÉRIEURE À LA PÉRIODE DE PAIE
   *           COURANTE (Retouche #339)
   *
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Edgar Doiron         2014-04-07  Création
   *************************************************************************/
   PROCEDURE p_verfr_elemn_etape_6_31(pn_assignment_id   IN NUMBER,
                                      pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                      pv_token_value     OUT NOCOPY VARCHAR2,
                                      pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                      pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_verfr_elemn_etape_6_31';
      --DDC 209235
      vld_dt_gain         DATE;
      vlv_nm_procd        VARCHAR2(100) := 'p_verfr_elemn_etape_6_31';
      vlv_type_trans      VARCHAR2(10) := vgv_type_trans;
      vln_id_trans        NUMBER;
      vln_id_contr_absen  NUMBER;
      vln_id_contr_fdt    NUMBER;
      vlv_no_docmn        gir_trans_h620.no_docmn%TYPE;
      vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vltab_elemn_suprm   sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les éléments supprimés
      vltab_id_trans_h620 sys.odcinumberlist := sys.odcinumberlist(); -- VARRAY de TYPE NUMBER pour les id du H620
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur des autres éléments non récurrents
      -- antérieur de la paie courante.
      ----------------------------------------------------------------------
      -- 6.29.1
      CURSOR CUR_mt_rempl_suprm IS
         SELECT h620.id_afect,
                h620.id_trans_h620,
                fdt.elemn_entry_id id_entre_elemn,
                h620.statu_trans,
                fdt.id_contr_fdt,
                h620.cd_gain
           FROM gir_rh_suivi_entre_elemn_paie rse, -- INC-89949
                gir_rh_fdt                    fdt,
                gir_trans_h620                h620,
                pay_element_types_f           pet
          WHERE rse.element_entry_id = fdt.elemn_entry_id
            AND rse.element_type_id = pet.element_type_id
            AND fdt.id_trans = h620.id_trans_h620
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D'
            AND rse.input_value_id IS NULL
            AND fdt.nm_fiche = 'H620'
            AND h620.in_trans_anul = 'N'
            AND h620.statu_trans = 'R'
            AND pet.processing_type = 'N'
            AND fdt.dt_perd_paie_au < vgrec_perd_paie_varbl.dt_debut
            AND rse.old_effective_end_date < vgrec_perd_paie_varbl.dt_debut
            AND h620.perd_paie_varbl_au < vgrec_perd_paie_varbl.dt_debut
               --DDC 209235 par employé (=assignment_id)
            AND rse.assignment_id = pn_assignment_id;
      REC_mt_rempl_suprm CUR_mt_rempl_suprm%ROWTYPE; -- Enregistrement de type CUR_trans_h620
      --
      --
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      vgv_etape := '6.31.1';
      --
      <<supp>>
      FOR REC_mt_rempl_suprm IN CUR_mt_rempl_suprm LOOP
         --
         vgv_etape := '6.31.3 - id_elemn = ' || REC_mt_rempl_suprm.id_entre_elemn;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_mt_rempl_suprm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         vltab_elemn_suprm.extend;
         vltab_elemn_suprm(vltab_elemn_suprm.count) := REC_mt_rempl_suprm.id_entre_elemn;
         vltab_id_trans_h620.extend;
         vltab_id_trans_h620(vltab_id_trans_h620.count) := REC_mt_rempl_suprm.id_trans_h620;
         --
      END LOOP supp;
      --
      vgv_etape := '6.31.2';
      --
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_elemn rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      --
      -- Début INC-89949
      FORALL vln_cp IN INDICES OF vltab_elemn_suprm
         UPDATE gir_rh_suivi_entre_elemn_paie rse
            SET rse.in_trait = 'O'
          WHERE rse.element_entry_id = vltab_elemn_suprm(vln_cp)
            AND rse.in_trait = 'N'
            AND rse.trans_type = 'D';
      -- Fin INC-89949
      --
      /*fnd_file.put_line(fnd_file.log,
      '6_31 - UPDATE COUNT gir_rh_suivi_entre_elemn_paie: ' || SQL%ROWCOUNT); -- INC-89949*/
      vgv_etape := '6.31.3.5';
      --
      FORALL vln_cp IN INDICES OF vltab_id_trans_h620
         UPDATE gir_rh_fdt fdt
            SET fdt.in_trans_anul = 'O'
          WHERE fdt.id_trans = vltab_id_trans_h620(vln_cp)
            AND fdt.nm_fiche = 'H620'
            AND fdt.in_trans_anul = 'N';
      /*fnd_file.put_line(fnd_file.log,
      '6_31 - UPDATE COUNT gir_rh_fdt: ' || SQL%ROWCOUNT);*/
      FORALL vln_cp IN INDICES OF vltab_id_trans_h620
         UPDATE gir_trans_h620 h620
            SET h620.in_trans_anul = 'O'
          WHERE h620.id_trans_h620 = vltab_id_trans_h620(vln_cp)
            AND h620.in_trans_anul = 'N';
      /*fnd_file.put_line(fnd_file.log,
      '6_31 - UPDATE COUNT gir_trans_h620: ' || SQL%ROWCOUNT);*/
      --
      vlTAB_id_trans_h620.DELETE;
      vlTAB_elemn_suprm.DELETE;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_verfr_elemn_etape_6_31.
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Vider les objets
         --
         vlTAB_elemn_suprm.DELETE;
         vlTAB_id_trans_h620.DELETE;
         --
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80386';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || vln_id_trans || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                             ';ID_CONTR_FDT:' || vln_id_contr_fdt || ';NO_DOCMN:' || vlv_no_docmn || ';ID_AFECT:' || pn_assignment_id ||
                             ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_verfr_elemn_etape_6_31;

   --
   -- ============================================================================
   -- P_valdr_trans_h620:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de valider les données avant le mappage
   *       de GIR_TRANS_H620.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pREC_h620          : Enregistrement des valeurs à valider pour la transaction H620
   *
   * Paramètres de sortie :
   *   - pv_in_carte        : Indicateur que la carte B ou O est transmise
   *   - pd_dt_trans        : Date à laquelle la transaction est transférée à SAGIP
   *   - pv_cd_ereur        : Code de l'erreur de validation
   *
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-04-17  INC00018102  La date de début de couverture doit être >= à la date d'implantation.
   *************************************************************************/
   PROCEDURE p_valdr_trans_h620(prec_h620 IN OUT NOCOPY type_rec_trans_h620) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_valdr_trans_h620';
      --
   BEGIN
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      prec_h620.cd_ereur := NULL;
      prec_h620.jeton    := FALSE;
      prec_h620.nm_jeton := NULL;
      vgb_in_statu_termn := FALSE;
      --
      -- INC00018102 La date de début doit être >= date implantation
      --
      IF prec_h620.dt_debut < cd_dt_prodc THEN
         --
         prec_h620.dt_debut := cd_dt_prodc;
         --
      END IF;
      -- fin INC00018102
      --
      -- Valider les données pour le mappage de GIR_TRANS_H620
      --
      -- Carte A
      --
      -- S202 La date de début doit être inférieure à la date de fin
      -- S203 La date de fin du gain doit être inférieure ou égale à la date de fin de la période.
      -- S209 Le taux ou montant et le total des unités 1, des unités 2 ainsi le grand total des unités doivent être différent de zéro.
      -- S210 Si la date de début du gain est présente, la date de fin du gain doit être inscrite et vice versa.
      --
      -- S211 La date de fin doit être inférieure ou égale à la date de départ si le statut de l'affectation est terminé.
      -- (période couverte)
      --
      IF prec_h620.dt_fin IS NOT NULL THEN
         vgd_dt_least := NULL;
         --
         CASE
            WHEN REGEXP_INSTR(prec_h620.statu_afect,
                              'terminé',
                              1,
                              1,
                              0,
                              'i') > 0 THEN
               --
               /* Retouche 121
               IF pREC_h620.dt_fin > NVL(pREC_h620.dt_debut_termn, pREC_h620.dt_fin) THEN
                  pREC_h620.cd_ereur := 'GIR-100117';
               END IF; */
               IF prec_h620.dt_fin > NVL(prec_h620.dt_debut_termn,
                                         prec_h620.dt_fin) THEN
                  prec_h620.dt_fin := prec_h620.dt_debut_termn;
                  vgd_dt_least     := prec_h620.dt_debut_termn;
               END IF;
               --
            WHEN REGEXP_INSTR(prec_h620.statu_afect,
                              'liste de rappel',
                              1,
                              1,
                              0,
                              'i') > 0 THEN
               --
               /* Retouche 121
               IF pREC_h620.dt_fin > NVL(pREC_h620.dt_statu_afect, pREC_h620.dt_fin) THEN
                  pREC_h620.cd_ereur := 'GIR-100118';
               END IF;*/
               IF prec_h620.dt_fin > NVL(prec_h620.dt_statu_afect,
                                         prec_h620.dt_fin) THEN
                  prec_h620.dt_fin := prec_h620.dt_statu_afect;
                  vgd_dt_least     := prec_h620.dt_statu_afect;
               END IF;
               --
            WHEN REGEXP_INSTR(prec_h620.statu_afect,
                              'active',
                              1,
                              1,
                              0,
                              'i') > 0 THEN
               --
               /* Retouche 121
               IF pREC_h620.dt_fin > NVL(pREC_h620.dt_fin_prevu_contr, pREC_h620.dt_fin) THEN
                  pREC_h620.cd_ereur := 'GIR-100119';
               END IF;*/
               IF prec_h620.dt_fin > NVL(prec_h620.dt_fin_prevu_contr,
                                         prec_h620.dt_fin) THEN
                  prec_h620.dt_fin := prec_h620.dt_fin_prevu_contr;
                  vgd_dt_least     := prec_h620.dt_fin_prevu_contr;
               END IF;
               --
            ELSE
               --
               prec_h620.cd_ereur := NULL;
               --
         END CASE;
      
         p_log('15 - prec_h620.cd_ereur=' || prec_h620.cd_ereur || ', prec_h620.cd_paiem=' || prec_h620.cd_paiem || ', prec_h620.cd_gain=' ||
               prec_h620.cd_gain || ', prec_h620.dt_fin=' || prec_h620.dt_fin || ', prec_h620.dt_debut=' || prec_h620.dt_debut,
               vlv_nm_procd_fonct);
         --
         IF prec_h620.cd_ereur IS NULL THEN
            --
            -- S303 Pour certains gains, l'écart entre la date de début et la date de fin de période ne doit pas dépasser 14 jours
            -- (Code de gain)
            --
            IF (prec_h620.dt_fin - prec_h620.dt_debut) > 14 THEN
               --
               IF prec_h620.cd_paiem = '99' THEN
                  --
                  CASE prec_h620.cd_gain
                  --
                     WHEN 'A010' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     WHEN 'A013' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     WHEN 'A014' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     WHEN 'A093' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     ELSE
                        --
                        prec_h620.cd_ereur := NULL;
                        --
                  END CASE;
                  --
               ELSE
                  -- cd_paiem <> 99
                  --
                  CASE prec_h620.cd_gain
                  --
                     WHEN 'A011' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     WHEN 'A012' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     WHEN 'A019' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     WHEN 'A023' THEN
                        --
                        prec_h620.jeton := TRUE;
                        --
                     ELSE
                        --
                        prec_h620.cd_ereur := NULL;
                        --
                  END CASE;
                  --
               END IF;
               --
               IF prec_h620.jeton THEN
                  --
                  prec_h620.cd_ereur := 'GIR-100120';
                  prec_h620.nm_jeton := 'CD_GAIN';
                  --
               END IF;
               --
            END IF;
            --
         ELSE
            --
            vgb_in_statu_termn := TRUE;
            --
         END IF; -- pas d'erreur
         --
      END IF; -- date fin du gain est pas nulle
      --
      -- Carte B
      --
      --  aucune validation sur les données à faire
      --
      p_log('20 - Fin procédure.',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_valdr_trans_h620
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         fnd_file.put_line(fnd_file.log,
                           ' est en erreur dans la procédure P_valdr_trans_h620');
         fnd_file.put_line(fnd_file.log,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80437',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || prec_h620.id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(prec_h620.dt_debut,
                                                                                           'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_valdr_trans_h620',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_valdr_trans_h620;

   --
   -- ============================================================================
   -- P_valdr_trans_gain_h620:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de valider les données avant le mappage
   *       de GIR_TRANS_H620.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pREC_h620          : Enregistrement des valeurs à valider pour la transaction H620
   *
   * Paramètres de sortie :
   *   - pv_in_carte        : Indicateur que la carte B ou O est transmise
   *   - pd_dt_trans        : Date à laquelle la transaction est transférée à SAGIP
   *   - pv_cd_ereur        : Code de l'erreur de validation
   *
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-28  Création
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement d'année financière et de période
   * Michel Dessureault   2013-03-20  INC00017875  Pour les codes de gain, A015, A020, A022, inscrire le Montant à verser par unité pour la période couverte par le gain.
   * Edgar  Doiron        2015-11-03  --DDC175592
   * Geneviève Bélanger   2016-04-15  CHG206235 (INC 86765) Un gain transmis durant les périodes transitoires 1 et 2
   *                                  doit avoir l'année financière précédente, et non celle en cours
   * Geneviève Bélanger   2016-09-13  INC00104143 - Si c'est la période 01 ou 02 et avant le 1er avril, l'année financière doit être la précédente
   * Geneviève Bélanger   2017-01-10  CHG220437 - Ne pas obtenir la combinaison comptable si c'est la période 01 ou 02 et creator_type F
   *                                  Ajouter un paramètre spécifiant le creator_type
   * Geneviève Bélanger   2017-03-03  CHG225373 - Pour le calcul de l'année financière, la date à utiliser peut être soit
   *                                  la date du gain, soit la date de début
   * Geneviève Bélanger   2017-03-29  CHG226617 - Commenter le CHG225373
   * Geneviève Bélanger   2017-03-30  CHG226617 - l'étape 6_22 étant remise comme avant, réintégrer le CHG225373
   * Geneviève Bélanger   2017-03-31  CHG226472 - corriger l'année financière précédente
   *************************************************************************/
   PROCEDURE p_valdr_trans_gain_h620(prec_gain_h620 IN OUT NOCOPY type_rec_trans_h620,
                                     -- CHG220437 2017-01-23 ajout du creator_type
                                     pv_creat_type IN VARCHAR2 DEFAULT NULL,
                                     -- CHG225373 2017-03-03 ajout d'un flag pour la vérification de la date du gain
                                     pv_utils_autre_dt IN VARCHAR2 DEFAULT 'N') IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_valdr_trans_gain_h620';
      vlv_exist          VARCHAR2(1); -- Pour valider l'existence
      -- retouche 126
      vlrec_cle_compt type_rec_ventl_cout; -- infos budgétaires
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      --------------------------------------------------------------------------
      -- Déclaration du curseur permettant de déterminer les codes de gain valides
      --------------------------------------------------------------------------
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
      --
      --DDC 175592
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les identifiants entrée elément
      ----------------------------------------------------------------------
      CURSOR CUR_id_entre_elemn(pn_id_afect IN NUMBER,
                                pv_cd_gain  IN VARCHAR2,
                                pv_tx_horr  IN VARCHAR2) IS
      
         SELECT SUM(fdt.nb_hh_signe) nb_hh_signe
           FROM gir_rh_suivi_entre_elemn_paie rse, -- INC-89949
                gir_rh_fdt                    fdt
          WHERE rse.assignment_id = pn_id_afect
            AND fdt.elemn_entry_id = rse.element_entry_id
            AND fdt.id_afect = rse.assignment_id
            AND rse.id_contr_fdt IN (SELECT fdt.id_contr_fdt
                                       FROM gir_rh_fdt fdt
                                      WHERE fdt.id_afect = pn_id_afect
                                        AND fdt.cd_gain = pv_cd_gain
                                        AND fdt.tx_horr = pv_tx_horr
                                        AND fdt.dt_gain = vgrec_perd_paie_varbl.dt_debut
                                        AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                                        AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                                        AND fdt.nm_fiche = 'H620'
                                        AND fdt.statu_sagip = cv_statu_sagip_non_trans
                                        AND fdt.in_trans_anul = 'N'
                                        AND fdt.in_mt_suplm_specl_input = 'N'
                                        AND fdt.in_mt_rempl_specl_input = 'N'
                                        AND NVL(fdt.raisn_3,
                                                '!') = cv_hh_rembr)
          GROUP BY rse.element_entry_id;
   
      -- CHG225373 2017-03-03 ajout d'un flag pour la vérification de la date du gain
      vld_dt_gain_aa_finnc DATE;
   
   BEGIN
   
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
   
      p_log('20 - cd_gain= ' || prec_gain_h620.cd_gain || ' cd_paiem= ' || prec_gain_h620.cd_paiem || '  grand_total_unite= ' ||
            prec_gain_h620.grand_total_unite || '  total_unite_1= ' || prec_gain_h620.total_unite_1 || '  total_unite_2= ' ||
            prec_gain_h620.total_unite_2,
            vlv_nm_procd_fonct);
   
      p_log('25 - prec_gain_h620.dt_debut = ' || TO_CHAR(prec_gain_h620.dt_debut,
                                                         'YYYY-MM-DD') || ', prec_gain_h620.dt_fin = ' ||
            TO_CHAR(prec_gain_h620.dt_fin,
                    'YYYY-MM-DD'),
            vlv_nm_procd_fonct);
   
      -- CHG225373 Début 2017-03-03
      -- Si on provient par exemple de l'étape 3, il faut vérifier l'année financière du gain à l'aide de la date de fin
      -- Sinon, utiliser la date de début
      IF pv_utils_autre_dt = 'O' THEN
         vld_dt_gain_aa_finnc := prec_gain_h620.dt_fin;
      ELSE
         vld_dt_gain_aa_finnc := prec_gain_h620.dt_debut;
      END IF;
      -- CHG225373 Fin
   
      p_log('28 - pv_utils_autre_dt=' || pv_utils_autre_dt || ', prec_gain_h620.dt_fin=' ||
            TO_CHAR(prec_gain_h620.dt_fin,
                    'YYYY-MM-DD') || ', prec_gain_h620.dt_debut=' || TO_CHAR(prec_gain_h620.dt_debut,
                                                                             'YYYY-MM-DD') || ', vld_dt_gain_aa_finnc=' ||
            TO_CHAR(vld_dt_gain_aa_finnc,
                    'YYYY-MM-DD'),
            vlv_nm_procd_fonct);
   
      --
      -- retouche 126
      --
      -- Si le gain est dans l'année précédente
      --    le numéro de période est celui de la période courante
      --    l'année devient l'année précédente
      --    les périodes de paie début et fin deviennent celles de la période courante
      --    la clé comptable est celle de la période courante
      --
   
      -- CHG225373 Début 2017-03-03 appeler la fonction avec la nouvelle variable
      --IF fb_verfr_dt_gain(prec_gain_h620.dt_debut) THEN
      IF fb_verfr_dt_gain(vld_dt_gain_aa_finnc) THEN
         -- CHG225373 Fin
      
         p_log('30 - Appel de P_obten_ventl_cout, vgrec_perd_paie_varbl.no_perd=' || vgrec_perd_paie_varbl.no_perd || ', creator_type=' ||
               pv_creat_type,
               vlv_nm_procd_fonct);
      
         -- CHG220437 Début 2017-01-10
         -- Si provient de l'étape 5 avec creator_type F à la période 01 ou 02, ne rien faire
         IF NVL(pv_creat_type,
                '£') = cv_cd_type_creat_pgi AND
            TO_NUMBER(vgrec_perd_paie_varbl.no_perd) IN (1,
                                                         2) THEN
            p_log('32 - période 01-02 et provient de l''étape 5 avec creator_type = F',
                  vlv_nm_procd_fonct);
         ELSE
            p_log('35 - ne provient pas de l''étape 5 avec creator_type = F',
                  vlv_nm_procd_fonct);
         
            p_obten_ventl_cout(pn_id_afect     => prec_gain_h620.id_afect,
                               pd_dt_afect     => vgrec_perd_paie_varbl.dt_debut,
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               prec_ventl_cout => vlrec_cle_compt);
         
            prec_gain_h620.minst       := NVL(vlrec_cle_compt.minst,
                                              '000');
            prec_gain_h620.budgt       := vlrec_cle_compt.budgt;
            prec_gain_h620.centr_respn := vlrec_cle_compt.centr_respn;
         END IF;
         -- CHG220437 Fin
      
         p_log('40 - id afect=' || prec_gain_h620.id_afect,
               vlv_nm_procd_fonct);
         p_log('50 - vgrec_perd_paie_varbl.dt_debut (dt_gain)=' || vgrec_perd_paie_varbl.dt_debut,
               vlv_nm_procd_fonct);
         p_log('60 - vgrec_perd_paie_varbl.aa_finnc=' || vgrec_perd_paie_varbl.aa_finnc || ', prec_gain_h620.aa_finnc=' || prec_gain_h620.aa_finnc,
               vlv_nm_procd_fonct);
         --
         prec_gain_h620.no_perd := vgrec_perd_paie_varbl.no_perd;
      
         -- INC00104143 Début Geneviève Bélanger 2016-09-13
         -- Si c'est la période 01 ou 02 et que le gain est avant le 1er avril,
         -- l'année financière du gain doit être l'année précédente
      
         IF vgrec_perd_paie_varbl.no_perd IN ('01',
                                              '02') AND
            prec_gain_h620.dt_debut < TO_DATE(EXTRACT(YEAR FROM vgd_dt_exect) || '-04-01',
                                              'YYYY-MM-DD') THEN
            -- CHG226472 Début 2017-03-31
            --prec_gain_h620.aa_finnc := vgrec_perd_paie_varbl.aa_finnc -1;
            prec_gain_h620.aa_finnc := EXTRACT(YEAR FROM vgd_dt_exect) - 1;
            -- CHG226472 Fin
         ELSE
            prec_gain_h620.aa_finnc := vgrec_perd_paie_varbl.aa_finnc;
         END IF;
      
         p_log('70 - prec_gain_h620.aa_finnc=' || prec_gain_h620.aa_finnc,
               vlv_nm_procd_fonct);
         -- INC00104143 Fin
      
         prec_gain_h620.dt_perd_paie_du := vgrec_perd_paie_varbl.dt_debut;
         prec_gain_h620.dt_perd_paie_au := vgrec_perd_paie_varbl.dt_fin;
      
         -- CHG220437 Début 2017-01-30
         -- ce code a été remonté un peu plus haut
         --prec_gain_h620.minst           := NVL(vlrec_cle_compt.minst, '000');
         --prec_gain_h620.budgt           := vlrec_cle_compt.budgt;
         --prec_gain_h620.centr_respn     := vlrec_cle_compt.centr_respn;
         -- CHG220437 Fin
      END IF;
      -- fin retouche 126
      --
      -- S312  pas besoin car géré dans la création fdt dans PGI
      --
      -- Pour savoir si on affiche le taux ou montant dans le champ tx_mt
      --
      vlv_exist := NULL;
      --
      OPEN CUR_cd_gain(cv_nm_table_consl_gain_1,
                       prec_gain_h620.cd_gain,
                       prec_gain_h620.dt_debut,
                       prec_gain_h620.dt_fin);
      FETCH CUR_cd_gain
         INTO vlv_exist;
      CLOSE CUR_cd_gain;
      --
      --
      -- Si le code de gain est présent dans la table GIR_RH_CD_GAIN_1,
      -- ce sont des unités donc taux si valeur dans le champ Heures
      --
      IF NVL(vlv_exist,
             '!') = 'X' THEN
         p_log('16 - Gain 1 Existe',
               vlv_nm_procd_fonct);
         --
         IF prec_gain_h620.grand_total_unite IS NULL OR
            prec_gain_h620.grand_total_unite = '0' THEN
            --
            prec_gain_h620.total_unite_1     := '00100';
            prec_gain_h620.total_unite_2     := NULL;
            prec_gain_h620.grand_total_unite := '000100';
         
            --
         END IF;
         --
      END IF;
      --
      vlv_exist := NULL;
      --
      OPEN CUR_cd_gain(cv_nm_table_consl_gain_2,
                       prec_gain_h620.cd_gain,
                       prec_gain_h620.dt_debut,
                       prec_gain_h620.dt_fin);
      FETCH CUR_cd_gain
         INTO vlv_exist;
      CLOSE CUR_cd_gain;
      --
      -- Si le code de gain est présent dans la table GIR_RH_CD_GAIN_2,
      -- et code de paiement autre que 99, ce sont des unités donc taux
      --
      IF NVL(vlv_exist,
             '!') = 'X' AND
         NVL(prec_gain_h620.cd_paiem,
             '!') <> '99' THEN
         --
         --DDC175592
         p_log('80 - Gain 2 Existe et cd_paiem != 99',
               vlv_nm_procd_fonct);
      
         IF prec_gain_h620.grand_total_unite IS NULL OR
            prec_gain_h620.grand_total_unite = '0' THEN
            prec_gain_h620.total_unite_1     := '00100';
            prec_gain_h620.total_unite_2     := NULL;
            prec_gain_h620.grand_total_unite := '000100';
         END IF;
      
      END IF;
      --
      -- S313
      --
      -- Si le code de gain est présent dans la table GIR_RH_CD_GAIN_2
      -- et un code de paiement 99
      --
      IF NVL(vlv_exist,
             '!') = 'X' AND
         NVL(prec_gain_h620.cd_paiem,
             '!') = '99' THEN
         --
         p_log('90 - Gain 2 Existe et cd_paiem = 99',
               vlv_nm_procd_fonct);
         prec_gain_h620.total_unite_1     := NULL;
         prec_gain_h620.total_unite_2     := NULL;
         prec_gain_h620.grand_total_unite := NULL;
         --
      END IF;
      --
      -- INC00017875
      -- Si le code de gain est dans la table GIR_RH_CD_GAIN_4
      -- on affiche le taux horaire dans le champ tx_mt
      --
      vlv_exist := NULL;
      --
      OPEN CUR_cd_gain(cv_nm_table_consl_gain_4,
                       prec_gain_h620.cd_gain,
                       prec_gain_h620.dt_debut,
                       prec_gain_h620.dt_fin);
      FETCH CUR_cd_gain
         INTO vlv_exist;
      CLOSE CUR_cd_gain;
      --
      -- Si le code de gain est présent dans la table GIR_RH_CD_GAIN_4,
      -- ce sont des unités donc taux si valeur dans le champ Heures
      --
      IF NVL(vlv_exist,
             '!') = 'X' THEN
         -- Retouche 170
         IF NVL(prec_gain_h620.nb_hh,
                0) <> 0 THEN
            p_log('19 - Gain 4 Existe',
                  vlv_nm_procd_fonct);
            --
            prec_gain_h620.tx_mt := prec_gain_h620.tx_horr;
            --
         END IF;
         --
      END IF;
      -- fin INC00017875
      --
      p_log('100 - cd_gain= ' || prec_gain_h620.cd_gain || ' cd_paiem= ' || prec_gain_h620.cd_paiem || '  grand_total_unite= ' ||
            prec_gain_h620.grand_total_unite || '  total_unite_1= ' || prec_gain_h620.total_unite_1 || '  total_unite_2= ' ||
            prec_gain_h620.total_unite_2 || ', tx_mt= ' || prec_gain_h620.tx_mt || ', tx_horr= ' || prec_gain_h620.tx_horr,
            vlv_nm_procd_fonct);
   
      p_log('110 - Fin procédure.',
            vlv_nm_procd_fonct);
   
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_valdr_trans_gain_h620
      ***********************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         /*fnd_file.put_line(fnd_file.log,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         fnd_file.put_line(fnd_file.log,
                           ' est en erreur dans la procédure P_valdr_trans_gain_h620');
         fnd_file.put_line(fnd_file.log,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         fnd_file.put_line(fnd_file.log,
                           dbms_utility.format_error_backtrace);*/
      
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         --Début SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         p_creer_erreur(pv_code_erreur_gir => 'GIR-80436',
                        pv_token_value     => 'TYPE_TRANS:' || vgv_type_trans || ';ID_AFECT:' || prec_gain_h620.id_afect || ';ID_ENTRE_ELEMN:' ||
                                              vgv_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(prec_gain_h620.dt_debut,
                                                                                           'YYYY-MM-DD') || ';',
                        pn_id_demnd        => vgn_id_demnd,
                        pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                        pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                        pv_nm_procd        => 'p_valdr_trans_gain_h620',
                        pv_de_mesg_techn   => vgv_texte_ereur);
      
         --Fin SAGIR F.Aubin 2016-07-19 DDC 209235 : retour d'erreur
         --
         --
         RAISE vgexc_trait_h620;
         --
   END p_valdr_trans_gain_h620;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_1:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les éléments à pourcentage.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-05  INC00017154  Gains sans unités
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement d'année financière et de période
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger   2016-11-01  INC00109354 - Corriger CUR_fdt pour préciser les dates de période de paie.
   * Geneviève Bélanger   2017-01-23  CHG217615 - Séparer les transactions H620 qui chevauchent l'année financière
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_1(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_1';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_1';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
      -- retouche 126
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      vlv_in_rempl_dt      VARCHAR2(1); -- CHG217615
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les éléments à pourcentage
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_recrn_pc IS
         SELECT fdt.id_afect       id_afect,
                fdt.elemn_entry_id id_entre_elemn,
                -- INC00103225 Début 2016-09-16 pour grouper par période de paie
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                -- INC00103225 Fin
                fdt.aa_finnc, -- CHG217615 2017-01-23
                SUM(fdt.tx_mt_signe) total_tx_mt,
                MIN(fdt.dt_gain) dt_debut,
                MAX(fdt.dt_gain) dt_fin
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND EXISTS (SELECT 'X'
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste = 'jeu_pc'
                    AND reht.id_type_elemn = fdt.elemn_type_id)
            AND EXISTS (SELECT 'X'
                   FROM xxgir_rh_h620_pc_tx_tempr hptt
                  WHERE hptt.in_type_liste = 'P'
                    AND hptt.id_entre_elemn = fdt.elemn_entry_id)
          GROUP BY fdt.id_afect,
                   fdt.elemn_entry_id,
                   -- INC00103225 Début 2016-09-16 pour grouper par période de paie
                   fdt.dt_perd_paie_du,
                   fdt.dt_perd_paie_au,
                   -- INC00103225 Fin
                   fdt.aa_finnc -- CHG217615 2017-01-23 grouper par aa_finnc
          ORDER BY fdt.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les données de
      -- la feuille de temps pour un élément d'entrée
      ----------------------------------------------------------------------
      CURSOR CUR_fdt(pn_id_entre_elemn  IN NUMBER,
                     pd_dt_perd_paie_du IN DATE, --INC00109354
                     pd_dt_perd_paie_au IN DATE, --INC00109354
                     pv_aa_finnc        IN VARCHAR2 -- CHG217615
                     ) IS
         SELECT fdt.id_afect,
                fdt.cd_gain,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                fdt.cd_paiem
                -- retouche 126
               ,
                fdt.dt_gain,
                fdt.aa_finnc,
                fdt.minst,
                fdt.budgt,
                fdt.centr_respn,
                fdt.in_mt_rempl_specl_input,
                fdt.in_mt_suplm_specl_input
                --INC00017359
               ,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.elemn_entry_id = pn_id_entre_elemn
            AND fdt.nm_fiche = 'H620'
               -- Retouche 183
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
               -- INC00109354 Début 2016-11-01
               -- Ajouter les dates de période de paie dans les conditions
            AND fdt.dt_perd_paie_du = pd_dt_perd_paie_du
            AND fdt.dt_perd_paie_au = pd_dt_perd_paie_au
               -- INC00109354 Fin
            AND fdt.aa_finnc = pv_aa_finnc -- CHG217615 2017-01-23 tenir compte de aa_finnc
            AND EXISTS (SELECT 'X'
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste = 'jeu_pc'
                    AND reht.id_type_elemn = fdt.elemn_type_id);
      --
      REC_fdt CUR_fdt%ROWTYPE; -- Enregistrement de type CUR_fdt.
      --
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM per_time_periods ptp2
                               WHERE ptp2.attribute2 = pv_aa
                               AND   ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
   
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
   
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
   
      <<elemn_recrn_pc>>
      FOR REC_CUR_elemn_recrn_pc IN CUR_elemn_recrn_pc LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_elemn_recrn_pc.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_elemn_recrn_pc.id_afect THEN
            --
            vln_id_afect := REC_CUR_elemn_recrn_pc.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('etap1: afect: ' || vln_id_afect,
               vlv_nm_procd_fonct);
         p_log('etap1: elemn: ' || REC_CUR_elemn_recrn_pc.id_entre_elemn,
               vlv_nm_procd_fonct);
         p_log('etap1: total: ' || REC_CUR_elemn_recrn_pc.Total_Tx_Mt,
               vlv_nm_procd_fonct);
         p_log('etap1: debut: ' || REC_CUR_elemn_recrn_pc.Dt_Debut,
               vlv_nm_procd_fonct);
         p_log('etap1: fin  : ' || REC_CUR_elemn_recrn_pc.Dt_fin,
               vlv_nm_procd_fonct);
      
         -- INC00109354 Début 2016-11-01
         -- Ajouter 2 paramètres à l'ouverture du curseur
         --OPEN CUR_fdt(REC_CUR_elemn_recrn_pc.id_entre_elemn);
         OPEN CUR_fdt(REC_CUR_elemn_recrn_pc.id_entre_elemn,
                      REC_CUR_elemn_recrn_pc.dt_perd_paie_du,
                      REC_CUR_elemn_recrn_pc.dt_perd_paie_au,
                      -- CHG217615 2017-01-23 Ajout de l'année financière
                      REC_CUR_elemn_recrn_pc.aa_finnc);
         -- INC00109354 Fin
         --
         FETCH CUR_fdt
            INTO REC_fdt;
         --
         CLOSE CUR_fdt;
         --
         --DDC 209235
         vld_dt_gain      := REC_fdt.dt_gain; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_fdt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         -- S210
      
         -- CHG217615 Début 2017-01-27
         -- si la date est remplacée par la période de paie, assigner un indicateur
         --vld_dt_debut := NVL(REC_CUR_elemn_recrn_pc.dt_debut,
         --                    vgrec_perd_paie_varbl.dt_debut);
         --vld_dt_fin   := NVL(REC_CUR_elemn_recrn_pc.dt_fin,
         --                    vgrec_perd_paie_varbl.dt_fin);
      
         vlv_in_rempl_dt := 'N';
      
         IF REC_CUR_elemn_recrn_pc.dt_debut IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_debut    := vgrec_perd_paie_varbl.dt_debut;
         ELSE
            vld_dt_debut := REC_CUR_elemn_recrn_pc.dt_debut;
         END IF;
      
         IF REC_CUR_elemn_recrn_pc.dt_fin IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_fin      := vgrec_perd_paie_varbl.dt_fin;
         ELSE
            vld_dt_fin := REC_CUR_elemn_recrn_pc.dt_fin;
         END IF;
      
         p_log('12 - vlv_in_rempl_dt=' || vlv_in_rempl_dt,
               vlv_nm_procd_fonct);
         -- CHG217615 Fin
      
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF; */
         --
         -- fin INC00016333
         --
      
         p_log('etap1-2: perd_du  : ' || REC_fdt.dt_perd_paie_du,
               vlv_nm_procd_fonct);
         p_log('etap1-2: perd_au  : ' || REC_fdt.dt_perd_paie_au,
               vlv_nm_procd_fonct);
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_fdt.cd_gain;
         vlrec_trans_h620.cd_paiem           := REC_fdt.cd_paiem;
         vlrec_trans_h620.dt_perd_paie_du    := REC_fdt.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_fdt.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         vlrec_trans_h620.tx_mt              := fv_convr_nb_decml_carct(REC_CUR_elemn_recrn_pc.total_tx_mt);
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
         --
         p_log('etap1-3: perd_du  : ' || vlrec_trans_h620.dt_perd_paie_du,
               vlv_nm_procd_fonct);
         p_log('etap1-3: perd_au  : ' || vlrec_trans_h620.dt_perd_paie_au,
               vlv_nm_procd_fonct);
      
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- INC00109354 Début 2016-11-01
            -- Ajouter 2 paramètres à l'ouverture du curseur
            --FOR REC_CUR_fdt IN CUR_fdt(REC_CUR_elemn_recrn_pc.id_entre_elemn) LOOP
            FOR REC_CUR_fdt IN CUR_fdt(REC_CUR_elemn_recrn_pc.id_entre_elemn,
                                       REC_CUR_elemn_recrn_pc.dt_perd_paie_du,
                                       REC_CUR_elemn_recrn_pc.dt_perd_paie_au,
                                       -- CHG217615 2017-01-23 Ajout de l'année financière
                                       REC_CUR_elemn_recrn_pc.aa_finnc) LOOP
               -- INC00109354 Fin
               --
               -- remplir tableau des rejets
               --
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_elemn_recrn_pc.id_entre_elemn,
                            pn_id_trans       => NULL,
                            pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                            pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => vlrec_trans_h620.cd_gain,
                            pb_jeton          => vlrec_trans_h620.jeton,
                            pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                            pv_va_jeton       => vlrec_trans_h620.cd_gain,
                            pn_id_contr_fdt   => REC_CUR_fdt.id_contr_fdt);
               --
               --DDC 209235
            
               vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                          'GIR-80398');
               vln_id_entre_elemn  := REC_CUR_elemn_recrn_pc.id_entre_elemn;
               vln_id_contr_fdt    := REC_CUR_fdt.id_contr_fdt;
            
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                    vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                                 'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                    vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                      'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                    vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            END LOOP;
            --
            IF vgb_in_statu_termn THEN
               --
               -- Le statut de l'affectation étant terminée, on fait le ménage
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
            --retouche 126
            --
            vlrec_perd_paie_gain := NULL;
            --
            p_log('15 - Appel de la procédure P_obten_perd_paie_gain.',
                  vlv_nm_procd_fonct);
            --
            p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                   pd_dt_gain      => REC_fdt.dt_gain,
                                   prec_perd_paie  => vlrec_perd_paie_gain);
            --
            vlrec_trans_h620.id_afect    := vln_id_afect;
            vlrec_trans_h620.no_perd     := vlrec_perd_paie_gain.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_fdt.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_fdt.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_fdt.budgt;
            vlrec_trans_h620.centr_respn := REC_fdt.centr_respn;
            -- fin retouche 126
            --
            -- INC00017154 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
         
            --
            p_log('etap1-4: perd_du  : ' || vlrec_trans_h620.dt_perd_paie_du,
                  vlv_nm_procd_fonct);
            p_log('etap1-4: perd_au  : ' || vlrec_trans_h620.dt_perd_paie_au,
                  vlv_nm_procd_fonct);
            --
         
            --DDC 200241 INC 82025
            p_log('DDC 200241 INC 82025 - ETAPE 1',
                  vlv_nm_procd_fonct);
         
            OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                             vlrec_trans_h620.cd_gain,
                             vlrec_trans_h620.dt_debut,
                             vlrec_trans_h620.dt_fin);
            FETCH CUR_cd_gain
               INTO vlv_exist;
            CLOSE CUR_cd_gain;
         
            p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
                  vlv_nm_procd_fonct);
         
            IF vlv_exist = 'X' THEN
               p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                     vlv_nm_procd_fonct);
               p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                     'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
               p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                   'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
            
               -- vérifier si le gain est saisi sur 1 journée seulement
               IF vlrec_trans_h620.dt_debut = vlrec_trans_h620.dt_fin THEN
                  OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
                  FETCH CUR_dern_perd_aa_civl
                     INTO vln_retr_aa_civl;
                  IF CUR_dern_perd_aa_civl%FOUND THEN
                     -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                     -- la date de début devient le début de la période du gain
                     vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
                  
                     -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                     -- sinon, la date de fin du gain est assignée au lendemain
                     --ELSE
                     --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                     -- INC00103225 Fin
                  END IF;
                  CLOSE CUR_dern_perd_aa_civl;
               END IF;
            
               p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                     'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
               p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                   'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
            
               -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
               --ELSE
               -- retouche 121
               --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
               --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;-
               --END IF;
               -- INC00103225 Fin
            END IF;
            -- Fin 200241
            --
            -- Récupérer le numéro de document SAGIP
            --
            --Edgar Doiron INC71083
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
            --
            --
            p_log('tx_mt: ' || LPAD(NVL(TO_CHAR(REC_CUR_elemn_recrn_pc.total_tx_mt),
                                        '0'),
                                    7,
                                    '0'),
                  vlv_nm_procd_fonct);
         
            -- CHG217615 Début 2017-01-27
            -- faire la vérification des dates de couverture du gain
            p_chevc_aa_finnc(pd_dt_debut_gain      => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_gain        => vlrec_trans_h620.dt_fin,
                             pd_dt_debut_perd_gain => vlrec_perd_paie_gain.dt_debut,
                             pd_dt_fin_perd_gain   => vlrec_perd_paie_gain.dt_fin,
                             pd_dt_debut_perd_paie => vgrec_perd_paie_varbl.dt_debut,
                             pd_dt_fin_perd_paie   => vgrec_perd_paie_varbl.dt_fin,
                             pv_no_perd            => vgrec_perd_paie_varbl.no_perd,
                             pn_id_afect           => pn_assignment_id,
                             pv_aa_finnc           => vlrec_trans_h620.aa_finnc,
                             pv_in_rempl_dt        => vlv_in_rempl_dt,
                             pd_dt_debut_trans     => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_trans       => vlrec_trans_h620.dt_fin,
                             pv_aa_finnc_trans     => vlrec_trans_h620.aa_finnc);
            -- CHG217615 Fin
         
            -- créer la transaction dans GIR_TRANS_H620
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               (REC_CUR_elemn_recrn_pc.id_entre_elemn,
                vgd_dt_exect,
                'N',
                NVL(REC_fdt.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_fdt.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_fdt.dt_perd_paie_du,
                REC_fdt.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                vlrec_trans_h620.total_unite_1,
                vlrec_trans_h620.total_unite_2,
                vlrec_trans_h620.grand_total_unite,
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_fdt.aa_finnc,
                REC_fdt.minst,
                REC_fdt.budgt,
                REC_fdt.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                --Edgar Doiron INC71083
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000')
                --
                )
            RETURNING id_trans_h620 INTO vln_id_trans;
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.elemn_entry_id = REC_CUR_elemn_recrn_pc.id_entre_elemn
               AND fdt.id_trans IS NULL
                  -- INC00109354 Début 2016-11-01
                  -- Ajouter aussi les dates de période de paie
               AND fdt.dt_perd_paie_du = REC_CUR_elemn_recrn_pc.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_elemn_recrn_pc.dt_perd_paie_au
                  -- INC00109354 Fin
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_elemn_recrn_pc.aa_finnc
                  -- CHG217615 Fin
               AND EXISTS (SELECT 'X'
                      FROM xxgir_rh_elemn_h620_tempr reht
                     WHERE reht.nm_liste = 'jeu_pc'
                       AND reht.id_type_elemn = fdt.elemn_type_id);
            --
            -- 2013-06-06
            -- Il faut mettre le no_docmn pour les fdt annulées aussi pour l'élément en question
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.no_docmn = vlv_no_docmn
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'O'
               AND fdt.elemn_entry_id = REC_CUR_elemn_recrn_pc.id_entre_elemn
               AND fdt.id_trans IS NULL
                  -- INC00109354 Début 2016-11-01
                  -- Ajouter aussi les dates de période de paie
               AND fdt.dt_perd_paie_du = REC_CUR_elemn_recrn_pc.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_elemn_recrn_pc.dt_perd_paie_au
                  -- INC00109354 Fin
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_elemn_recrn_pc.aa_finnc
                  -- CHG217615 Fin
               AND EXISTS (SELECT 'X'
                      FROM xxgir_rh_elemn_h620_tempr reht
                     WHERE reht.nm_liste = 'jeu_pc'
                       AND reht.id_type_elemn = fdt.elemn_type_id);
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP elemn_recrn_pc;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_1.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80387';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_1;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_2:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les éléments récurrents basés
   *       sur le taux annuel - prorata en fonction des heures.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-05  INC00017154  Gains sans unités
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement d'année financière et de période
   * Michel Dessureault   2013-04-17  Retouche 183 Gérer le centre de coûts lors de la création et la modification de l'élément.
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger   2016-11-01  INC00109354 - Corriger CUR_fdt pour préciser les dates de période de paie.
   * Geneviève Bélanger   2017-01-23  CHG217615 - Séparer les transactions H620 qui chevauchent l'année financière
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_2(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_2';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := '';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
      -- retouche 126
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      vlv_in_rempl_dt      VARCHAR2(1); --CHG 217615
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les éléments récurrents
      -- basés sur le taux annuel - prorata en fonction des heures
      ----------------------------------------------------------------------
      CURSOR CUR_elemn_recrn_tx_anuel IS
         SELECT fdt.id_afect       id_afect,
                fdt.elemn_entry_id id_entre_elemn,
                -- INC00103225 Début 2016-09-16 pour grouper par période de paie
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                -- INC00103225 Fin
                fdt.aa_finnc, -- CHG217615 2017-01-23
                SUM(fdt.tx_mt_signe) total_tx_mt,
                MIN(fdt.dt_gain) dt_debut,
                MAX(fdt.dt_gain) dt_fin
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND EXISTS (SELECT 'X'
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste = 'jeu_tx_anuel'
                    AND reht.id_type_elemn = fdt.elemn_type_id)
            AND EXISTS (SELECT 'X'
                   FROM xxgir_rh_h620_pc_tx_tempr hptt
                  WHERE hptt.in_type_liste = 'T'
                    AND hptt.id_entre_elemn = fdt.elemn_entry_id)
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
          GROUP BY fdt.id_afect,
                   fdt.elemn_entry_id,
                   -- INC00103225 Début 2016-09-16 pour grouper par période de paie
                   fdt.dt_perd_paie_du,
                   fdt.dt_perd_paie_au,
                   -- INC00103225 Fin
                   fdt.aa_finnc -- CHG217615 2017-01-23 grouper par aa_finnc
          ORDER BY fdt.id_afect;
      --
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les données de
      -- la feuille de temps pour un élément d'entrée
      ----------------------------------------------------------------------
      CURSOR CUR_fdt(pn_id_entre_elemn  IN NUMBER,
                     pd_dt_perd_paie_du IN DATE, --INC00109354
                     pd_dt_perd_paie_au IN DATE, --INC00109354
                     pv_aa_finnc        IN VARCHAR2 -- CHG217615
                     ) IS
         SELECT fdt.id_afect,
                fdt.cd_gain,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                fdt.cd_paiem
                -- retouche 126
               ,
                fdt.dt_gain,
                fdt.aa_finnc,
                fdt.minst,
                fdt.budgt,
                fdt.centr_respn,
                fdt.in_mt_rempl_specl_input,
                fdt.in_mt_suplm_specl_input
                --INC00017359
               ,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.elemn_entry_id = pn_id_entre_elemn
            AND fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
               -- Retouche 183
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
               -- INC00109354 Début 2016-11-01
               -- Ajouter les dates de période de paie dans les conditions
            AND fdt.dt_perd_paie_du = pd_dt_perd_paie_du
            AND fdt.dt_perd_paie_au = pd_dt_perd_paie_au
               -- INC00109354 Fin
            AND fdt.aa_finnc = pv_aa_finnc -- CHG217615 2017-01-23 tenir compte de aa_finnc
            AND EXISTS (SELECT 'X'
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste = 'jeu_tx_anuel'
                    AND reht.id_type_elemn = fdt.elemn_type_id);
      --
      REC_fdt CUR_fdt%ROWTYPE; -- Enregistrement de type CUR_fdt.
      --
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM   per_time_periods ptp2
                               WHERE  ptp2.attribute2 = pv_aa
                               AND    ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<elemn_recrn_tx_anuel>>
      FOR REC_CUR_elemn_recrn_tx_anuel IN CUR_elemn_recrn_tx_anuel LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_elemn_recrn_tx_anuel.id_afect THEN
            --
            vln_id_afect := REC_CUR_elemn_recrn_tx_anuel.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('  id_entre_elemn: ' || REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn,
               vlv_nm_procd_fonct);
         --
         -- INC00109354 Début 2016-11-01
         -- Ajouter 2 paramètres à l'ouverture du curseur
         --OPEN CUR_fdt(REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn);
         OPEN CUR_fdt(REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn,
                      REC_CUR_elemn_recrn_tx_anuel.dt_perd_paie_du,
                      REC_CUR_elemn_recrn_tx_anuel.dt_perd_paie_au,
                      -- CHG217615 2017-01-23 Ajout de l'année financière
                      REC_CUR_elemn_recrn_tx_anuel.aa_finnc);
         -- INC00109354 Fin
         --
         FETCH CUR_fdt
            INTO REC_fdt;
         --
         CLOSE CUR_fdt;
         --
         --DDC 209235
         vld_dt_gain      := REC_fdt.dt_gain; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
         vln_id_contr_fdt := REC_fdt.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         --
      
         -- CHG217615 Début 2017-01-27
         -- si la date est remplacée par la période de paie, assigner un indicateur
         --vld_dt_debut := NVL(REC_CUR_elemn_recrn_tx_anuel.dt_debut,
         --                    vgrec_perd_paie_varbl.dt_debut);
         --vld_dt_fin   := NVL(REC_CUR_elemn_recrn_tx_anuel.dt_fin,
         --                    vgrec_perd_paie_varbl.dt_fin);
      
         vlv_in_rempl_dt := 'N';
      
         IF REC_CUR_elemn_recrn_tx_anuel.dt_debut IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_debut    := vgrec_perd_paie_varbl.dt_debut;
         ELSE
            vld_dt_debut := REC_CUR_elemn_recrn_tx_anuel.dt_debut;
         END IF;
      
         IF REC_CUR_elemn_recrn_tx_anuel.dt_fin IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_fin      := vgrec_perd_paie_varbl.dt_fin;
         ELSE
            vld_dt_fin := REC_CUR_elemn_recrn_tx_anuel.dt_fin;
         END IF;
      
         p_log('12 - vlv_in_rempl_dt=' || vlv_in_rempl_dt,
               vlv_nm_procd_fonct);
         -- CHG217615 Fin
      
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_fdt.cd_gain;
         vlrec_trans_h620.cd_paiem           := REC_fdt.cd_paiem;
         vlrec_trans_h620.dt_perd_paie_du    := REC_fdt.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_fdt.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         vlrec_trans_h620.tx_mt              := fv_convr_nb_decml_carct(REC_CUR_elemn_recrn_tx_anuel.total_tx_mt);
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
         --
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            --
            p_ajout_rejt(pn_id_afect       => vln_id_afect,
                         pn_id_entre_elemn => REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn,
                         pn_id_trans       => NULL,
                         pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                         pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_no_emplo       => vlrec_persn.no_emplo,
                         pv_cd_gain        => vlrec_trans_h620.cd_gain,
                         pb_jeton          => vlrec_trans_h620.jeton,
                         pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                         pv_va_jeton       => vlrec_trans_h620.cd_gain,
                         pn_id_contr_fdt   => REC_fdt.id_contr_fdt);
            --
            --DDC 209235
            vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                       'GIR-80398');
            vln_id_entre_elemn  := REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn;
            vln_id_contr_fdt    := REC_fdt.id_contr_fdt;
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                 vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                              'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                 vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                   'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                 vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
            --retouche 126
            --
            -- Début CHG200241 Déplacer un peu plus haut 2016-03-16
            vlrec_perd_paie_gain := NULL;
         
            p_log('15 - Appel de la procédure P_obten_perd_paie_gain.',
                  vlv_nm_procd_fonct);
         
            p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                   pd_dt_gain      => REC_fdt.dt_gain,
                                   prec_perd_paie  => vlrec_perd_paie_gain);
         
            -- DDC 200241 INC 82025
            vlrec_trans_h620.id_afect    := vln_id_afect;
            vlrec_trans_h620.no_perd     := vlrec_perd_paie_gain.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_fdt.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_fdt.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_fdt.budgt;
            vlrec_trans_h620.centr_respn := REC_fdt.centr_respn;
            -- fin retouche 126
            --
            -- INC00017154 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
         
            p_log('DDC 200241 INC 82025 - ETAPE 2',
                  vlv_nm_procd_fonct);
            OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                             vlrec_trans_h620.cd_gain,
                             vlrec_trans_h620.dt_debut,
                             vlrec_trans_h620.dt_fin);
            --
            FETCH CUR_cd_gain
               INTO vlv_exist;
            CLOSE CUR_cd_gain;
         
            p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
                  vlv_nm_procd_fonct);
         
            IF vlv_exist = 'X' THEN
               --Ajout du plus 1
               p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                     vlv_nm_procd_fonct);
               p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                     'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
               p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                   'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
            
               -- vérifier si le gain est saisi sur 1 journée seulement
               IF vlrec_trans_h620.dt_debut = vlrec_trans_h620.dt_fin THEN
                  OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
                  FETCH CUR_dern_perd_aa_civl
                     INTO vln_retr_aa_civl;
                  IF CUR_dern_perd_aa_civl%FOUND THEN
                     -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                     -- la date de début devient le début de la période du gain
                     vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
                  
                     -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                     -- sinon, la date de fin du gain est assignée au lendemain
                     --ELSE
                     --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                     -- INC00103225 Fin
                  END IF;
                  CLOSE CUR_dern_perd_aa_civl;
               END IF;
            
               p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                     'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
               p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                   'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
            
               -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
               --ELSE
               -- retouche 121
               --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
               --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
               --END IF;
               -- INC00103225 Fin
            END IF;
            -- Fin 200241
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
         
            -- CHG217615 Début 2017-01-27
            -- faire la vérification des dates de couverture du gain
            p_chevc_aa_finnc(pd_dt_debut_gain      => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_gain        => vlrec_trans_h620.dt_fin,
                             pd_dt_debut_perd_gain => vlrec_perd_paie_gain.dt_debut,
                             pd_dt_fin_perd_gain   => vlrec_perd_paie_gain.dt_fin,
                             pd_dt_debut_perd_paie => vgrec_perd_paie_varbl.dt_debut,
                             pd_dt_fin_perd_paie   => vgrec_perd_paie_varbl.dt_fin,
                             pv_no_perd            => vgrec_perd_paie_varbl.no_perd,
                             pn_id_afect           => pn_assignment_id,
                             pv_aa_finnc           => vlrec_trans_h620.aa_finnc,
                             pv_in_rempl_dt        => vlv_in_rempl_dt,
                             pd_dt_debut_trans     => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_trans       => vlrec_trans_h620.dt_fin,
                             pv_aa_finnc_trans     => vlrec_trans_h620.aa_finnc);
            -- CHG217615 Fin
         
            -- créer la transaction dans GIR_TRANS_H620
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               (REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn,
                vgd_dt_exect,
                'N',
                NVL(REC_fdt.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_fdt.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_fdt.dt_perd_paie_du,
                REC_fdt.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                vlrec_trans_h620.total_unite_1,
                vlrec_trans_h620.total_unite_2,
                vlrec_trans_h620.grand_total_unite,
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_fdt.aa_finnc,
                REC_fdt.minst,
                REC_fdt.budgt,
                REC_fdt.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.elemn_entry_id = REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn
               AND fdt.id_trans IS NULL
                  -- INC00109354 Début 2016-11-01
                  -- Ajouter aussi les dates de période de paie
               AND fdt.dt_perd_paie_du = REC_CUR_elemn_recrn_tx_anuel.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_elemn_recrn_tx_anuel.dt_perd_paie_au
                  -- INC00109354 Fin
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_elemn_recrn_tx_anuel.aa_finnc
                  -- CHG217615 Fin
               AND EXISTS (SELECT 'X'
                      FROM xxgir_rh_elemn_h620_tempr reht
                     WHERE reht.nm_liste = 'jeu_tx_anuel'
                       AND reht.id_type_elemn = fdt.elemn_type_id);
            --
            -- 2013-06-06
            -- Il faut mettre le no_docmn pour les fdt annulées aussi pour l'élément en question
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.no_docmn = vlv_no_docmn
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'O'
               AND fdt.elemn_entry_id = REC_CUR_elemn_recrn_tx_anuel.id_entre_elemn
               AND fdt.id_trans IS NULL
                  -- INC00109354 Début 2016-11-01
                  -- Ajouter aussi les dates de période de paie
               AND fdt.dt_perd_paie_du = REC_CUR_elemn_recrn_tx_anuel.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_elemn_recrn_tx_anuel.dt_perd_paie_au
                  -- INC00109354 Fin
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_elemn_recrn_tx_anuel.aa_finnc
                  -- CHG217615 Fin
               AND EXISTS (SELECT 'X'
                      FROM xxgir_rh_elemn_h620_tempr reht
                     WHERE reht.nm_liste = 'jeu_tx_anuel'
                       AND reht.id_type_elemn = fdt.elemn_type_id);
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP elemn_recrn_tx_anuel;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_2.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80388';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_2;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_3:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les autres éléments récurrents.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-28  INC00016333  Ajouter le lien à la table des suivis d'éléments
   *                                               pour la validation des types et entrées d'élément
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-05  INC00017154  Gains sans unités
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement d'année financière et de période
   * Michel Dessureault   2013-02-27  INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-29  INC00018212  Remplacer dt_perd_paie_du par dt_perd_paie_au car la date d'implantation peut débuter après le début de la période.
   * Edgar  Doiron        2015-11-03  --DDC175592
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger   2017-03-03  CHG225373 - Pour le calcul de l'année financière, la date à utiliser peut être soit
   *                                  la date du gain, soit la date de début
   * Geneviève Bélanger   2017-03-29  CHG226617 - Commenter le CHG225373
   * Geneviève Bélanger   2017-03-30  CHG226617 - l'étape 6_22 étant remise comme avant, réintégrer le CHG225373
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_3(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_3';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_3';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
   
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les autres éléments récurrents
      ----------------------------------------------------------------------
      CURSOR CUR_autre_elemn_recrn IS
         SELECT fdt.id_afect id_afect,
                fdt.cd_gain  cd_gain
                --INC00017528
               ,
                fdt.elemn_type_id id_type_elemn
                -- Retouche 170
               ,
                fdt.elemn_entry_id id_entre_elemn,
                --DDC175592
                (SELECT fdt1.nb_hh_signe
                   FROM gir_rh_fdt fdt1
                  WHERE fdt1.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt1.nm_fiche = 'H620'
                    AND fdt1.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt1.in_trans_anul = 'N'
                       -- Première semaine de la période
                    AND fdt1.dt_gain BETWEEN fdt1.dt_perd_paie_du AND fdt1.dt_perd_paie_du + 6) total_unite_semn_1,
                (SELECT fdt2.nb_hh_signe
                   FROM gir_rh_fdt fdt2
                  WHERE fdt2.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt2.nm_fiche = 'H620'
                    AND fdt2.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt2.in_trans_anul = 'N'
                       -- Deuxième semaine de la période
                    AND fdt2.dt_gain BETWEEN fdt2.dt_perd_paie_au - 6 AND fdt2.dt_perd_paie_au) total_unite_semn_2,
                fdt.nb_hh_signe grand_total_unite,
                fdt.tx_mt_signe,
                fdt.dt_debut,
                fdt.dt_fin,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                fdt.cd_paiem,
                fdt.aa_finnc,
                fdt.minst,
                fdt.budgt,
                fdt.centr_respn,
                fdt.in_mt_rempl_specl_input,
                fdt.in_mt_suplm_specl_input,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.in_trans_anul = 'N'
            AND EXISTS (SELECT 'X'
                   FROM pay_element_types_f pet
                        -- INC00016333
                       ,
                        gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                    AND pet.element_type_id = rse.element_type_id
                    AND pet.processing_type = 'R'
                    AND TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date AND pet.effective_end_date
                 UNION ALL
                 SELECT 'X'
                   FROM pay_element_types_f pet
                  WHERE pet.element_type_id = fdt.elemn_type_id
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                    AND pet.processing_type = 'R')
            AND NOT EXISTS (SELECT 'X'
                   FROM xxgir_rh_elemn_h620_tempr reht
                        -- INC00016333
                       ,
                        gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE reht.nm_liste IN ('jeu_pc',
                                          'jeu_tx_anuel')
                    AND rse.id_contr_fdt = fdt.id_contr_fdt
                    AND reht.id_type_elemn = rse.element_type_id
                 UNION ALL
                 SELECT 'X'
                   FROM xxgir_rh_elemn_h620_tempr reht
                  WHERE reht.nm_liste IN ('jeu_pc',
                                          'jeu_tx_anuel')
                    AND reht.id_type_elemn = fdt.elemn_type_id)
         /* Retouche 170
         GROUP BY fdt.id_afect
                 ,fdt.cd_gain
                 --INC00017528
                 ,fdt.elemn_type_id
         */
          ORDER BY fdt.id_afect;
      --
      /* Retouche 170
      --INC00017359
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les identifiants entrée elément
      ----------------------------------------------------------------------
      CURSOR CUR_id_entre_elemn(pn_id_afect      IN NUMBER,
                                pv_cd_gain       IN VARCHAR2,
                                --INC00017528
                                pn_id_type_elemn IN NUMBER) IS
         SELECT fdt.elemn_entry_id id_entre_elemn
               ,fdt.id_contr_fdt
         FROM   gir_rh_fdt fdt
         WHERE  fdt.nm_fiche      = 'H620'
         AND    fdt.statu_sagip   = cv_statu_sagip_non_trans
         AND    fdt.in_trans_anul = 'N'
         AND    EXISTS(SELECT 'X'
                       FROM   pay_element_types_f pet
                              -- INC00016333
                             ,gir_rh_suivi_entre_elemn_paie        rse -- INC-89949
                       WHERE  rse.id_contr_fdt    = fdt.id_contr_fdt
                       AND    pet.element_type_id = rse.element_type_id
                       AND    pet.processing_type = 'R'
                       AND    TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date
                                                                      AND pet.effective_end_date
                       UNION ALL
                       SELECT 'X'
                       FROM   pay_element_types_f pet
                       WHERE  pet.element_type_id = fdt.elemn_type_id
                       AND    TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date
                                                             AND pet.effective_end_date
                       AND    pet.processing_type = 'R'
                      )
         AND    NOT EXISTS(SELECT 'X'
                           FROM   xxgir_rh_elemn_h620_tempr reht
                                  -- INC00016333
                                  ,gir_rh_suivi_entre_elemn_paie        rse -- INC-89949
                           WHERE  reht.nm_liste IN ('jeu_pc', 'jeu_tx_anuel')
                           AND    rse.id_contr_fdt   = fdt.id_contr_fdt
                           AND    reht.id_type_elemn = rse.element_type_id
                           UNION ALL
                           SELECT 'X'
                           FROM   xxgir_rh_elemn_h620_tempr reht
                           WHERE  reht.nm_liste IN ('jeu_pc', 'jeu_tx_anuel')
                           AND    reht.id_type_elemn = fdt.elemn_type_id
                          )
         AND    fdt.id_afect              = pn_id_afect
         AND    fdt.cd_gain               = pv_cd_gain
         -- INC00017528
         AND    NVL(fdt.elemn_type_id, 0) = NVL(pn_id_type_elemn, 0);
      */
      --
      --DDC175592
      vln_sem_2 NUMBER;
   
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM   per_time_periods ptp2
                               WHERE  ptp2.attribute2 = pv_aa
                               AND    ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<autre_elemn_recrn>>
      FOR REC_CUR_autre_elemn_recrn IN CUR_autre_elemn_recrn LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_autre_elemn_recrn.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_autre_elemn_recrn.id_afect THEN
            --
            vln_id_afect := REC_CUR_autre_elemn_recrn.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('  cd_gain: ' || REC_CUR_autre_elemn_recrn.cd_gain,
               vlv_nm_procd_fonct);
         --
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         --
         vld_dt_debut := NVL(REC_CUR_autre_elemn_recrn.dt_debut,
                             vgrec_perd_paie_varbl.dt_debut);
         vld_dt_fin   := NVL(REC_CUR_autre_elemn_recrn.dt_fin,
                             vgrec_perd_paie_varbl.dt_fin);
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_autre_elemn_recrn.cd_gain;
         vlrec_trans_h620.cd_paiem           := REC_CUR_autre_elemn_recrn.cd_paiem;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_autre_elemn_recrn.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_autre_elemn_recrn.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         /* Retouche 170
         vlREC_trans_h620.tx_mt              := Fv_convr_nb_decml_carct(REC_CUR_autre_elemn_recrn.total_tx_mt);*/
         --
         vlrec_trans_h620.tx_mt := fv_convr_nb_decml_carct(REC_CUR_autre_elemn_recrn.tx_mt_signe);
         --
         --DDC175592
         --INC 204445
         p_split_hh_carra(pv_cd_gain       => vlrec_trans_h620.cd_gain,
                          pn_assignment_id => vln_id_afect,
                          pd_dt_gain       => vlrec_trans_h620.dt_debut,
                          pn_total_semn_1  => REC_CUR_autre_elemn_recrn.total_unite_semn_1,
                          pn_total_semn_2  => REC_CUR_autre_elemn_recrn.total_unite_semn_2,
                          pn_grand_total   => REC_CUR_autre_elemn_recrn.grand_total_unite);
         --FIN
         vlrec_trans_h620.total_unite_1     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_autre_elemn_recrn.total_unite_semn_1,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_autre_elemn_recrn.total_unite_semn_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_autre_elemn_recrn.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
      
         -- CHG200241 Début
         vlrec_perd_paie_gain := NULL;
      
         p_log('15 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vld_dt_gain,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         /*DDC 200241 INC 82025*/
         p_log('DDC 200241 INC 82025 - ETAPE 3',
               vlv_nm_procd_fonct);
      
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vlrec_trans_h620.dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vlrec_trans_h620.dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- la date de début devient le début de la période du gain
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
               
                  -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                  -- sinon, la date de fin du gain est assignée au lendemain
                  --ELSE
                  --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                  -- INC00103225 Fin
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
            --ELSE
            -- retouche 121
            --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
            --END IF;
            --
         END IF;
         -- Fin 200241
      
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            -- INC00017359
            /* Retouche 170
            FOR REC_CUR_id_entre_elemn IN CUR_id_entre_elemn(vln_id_afect
                                                            ,REC_CUR_autre_elemn_recrn.cd_gain
                                                            -- INC00017528
                                                            ,REC_CUR_autre_elemn_recrn.id_type_elemn) LOOP
            FOR REC_CUR_id_fdt IN CUR_id_fdt(REC_CUR_autre_elemn_recrn.id_entre_elemn) LOOP
            */
            --
            p_ajout_rejt(pn_id_afect       => vln_id_afect,
                         pn_id_entre_elemn => REC_CUR_autre_elemn_recrn.id_entre_elemn,
                         pn_id_trans       => NULL,
                         pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                         pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_no_emplo       => vlrec_persn.no_emplo,
                         pv_cd_gain        => vlrec_trans_h620.cd_gain,
                         pb_jeton          => vlrec_trans_h620.jeton,
                         pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                         pv_va_jeton       => vlrec_trans_h620.cd_gain
                         /* Retouche 170
                                                                                                                                                                                                                              ,pn_id_contr_fdt   => REC_CUR_id_fdt.id_contr_fdt*/,
                         pn_id_contr_fdt => REC_CUR_autre_elemn_recrn.id_contr_fdt);
            --
            --DDC 209235
            vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                       'GIR-80398');
            vln_id_entre_elemn  := REC_CUR_autre_elemn_recrn.id_entre_elemn;
            vln_id_contr_fdt    := REC_CUR_autre_elemn_recrn.id_contr_fdt;
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                 vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                              'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                 vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                   'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                 vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            /* Retouche 170
            END LOOP;
            */
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
            --retouche 126
            --
            vlrec_trans_h620.id_afect    := vln_id_afect;
            vlrec_trans_h620.no_perd     := vgrec_perd_paie_varbl.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_autre_elemn_recrn.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_CUR_autre_elemn_recrn.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_CUR_autre_elemn_recrn.budgt;
            vlrec_trans_h620.centr_respn := REC_CUR_autre_elemn_recrn.centr_respn;
            -- fin retouche 126
            --
            -- INC00017154 Valider le total unité
         
            -- CHG225373 Début 2017-03-03
            -- Pour cette étape, valider l'année financière à l'aide de la date de fin du gain
            --p_valdr_trans_gain_h620(vlrec_trans_h620);
            p_valdr_trans_gain_h620(prec_gain_h620    => vlrec_trans_h620,
                                    pv_utils_autre_dt => 'O');
            -- CHG225373 Fin
         
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '080'));
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
            --DDC175592
            vln_sem_2 := NVL(TO_NUMBER(vlrec_trans_h620.grand_total_unite),
                             0) - NVL(TO_NUMBER(vlrec_trans_h620.total_unite_1),
                                      0);
         
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               ( -- retouche 170 NULL,
                REC_CUR_autre_elemn_recrn.id_entre_elemn,
                vgd_dt_exect,
                'N',
                REC_CUR_autre_elemn_recrn.in_mt_suplm_specl_input,
                REC_CUR_autre_elemn_recrn.in_mt_rempl_specl_input,
                'N',
                /* retouche 126
                REC_CUR_autre_elemn_recrn.dt_perd_paie_du,
                REC_CUR_autre_elemn_recrn.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                -- DDC175592
                LPAD(vlrec_trans_h620.total_unite_1,
                     5,
                     '0'),
                LPAD(vln_sem_2,
                     5,
                     '0') /*vlrec_trans_h620.total_unite_2*/,
                LPAD(vlrec_trans_h620.grand_total_unite,
                     6,
                     '0'),
                --
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_autre_elemn_recrn.aa_finnc,
                REC_CUR_autre_elemn_recrn.minst,
                REC_CUR_autre_elemn_recrn.budgt,
                REC_CUR_autre_elemn_recrn.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
         
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            /* Retouche 170
            UPDATE gir_rh_fdt fdt
            SET    fdt.id_trans              = vln_id_trans
                  ,fdt.dt_trans              = TRUNC(vgd_dt_exect)
                  ,fdt.no_docmn              = vlv_no_docmn
                  ,fdt.statu_sagip           = cv_statu_sagip_trans
            WHERE  fdt.id_afect              = REC_CUR_autre_elemn_recrn.id_afect
            AND    fdt.cd_gain               = REC_CUR_autre_elemn_recrn.cd_gain
            -- INC00017528
            AND    NVL(fdt.elemn_type_id, 0) = NVL(REC_CUR_autre_elemn_recrn.id_type_elemn, 0)
            AND    fdt.nm_fiche              = 'H620'
            AND    fdt.statu_sagip           = cv_statu_sagip_non_trans
            AND    fdt.in_trans_anul         = 'N'
            -- INC00016333 2012-12-05 Vérifier si elemn_type_id existe aussi en utilisant la fdt
            AND    EXISTS(SELECT 'X'
                          FROM   pay_element_types_f pet
                                 -- INC00016333
                                ,gir_rh_suivi_entre_elemn_paie        rse -- INC-89949
                          WHERE  rse.id_contr_fdt    = fdt.id_contr_fdt
                          AND    pet.element_type_id = rse.element_type_id
                          AND    pet.processing_type = 'R'
                          AND    TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date
                                                                         AND pet.effective_end_date
                          UNION ALL
                          SELECT 'X'
                          FROM   pay_element_types_f pet
                          WHERE  pet.element_type_id = fdt.elemn_type_id
                          AND    TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date
                                                                AND pet.effective_end_date
                          AND    pet.processing_type = 'R'
                         )
            AND    NOT EXISTS(SELECT 'X'
                              FROM   xxgir_rh_elemn_h620_tempr reht
                                     -- INC00016333
                                     ,gir_rh_suivi_entre_elemn_paie        rse -- INC-89949
                              WHERE  reht.nm_liste IN ('jeu_pc', 'jeu_tx_anuel')
                              AND    rse.id_contr_fdt   = fdt.id_contr_fdt
                              AND    reht.id_type_elemn = rse.element_type_id
                              UNION ALL
                              SELECT 'X'
                              FROM   xxgir_rh_elemn_h620_tempr reht
                              WHERE  reht.nm_liste IN ('jeu_pc', 'jeu_tx_anuel')
                              AND    reht.id_type_elemn = fdt.elemn_type_id
                             );
            */
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.elemn_entry_id = REC_CUR_autre_elemn_recrn.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            -- 2013-06-06
            -- Il faut mettre le no_docmn pour les fdt annulées aussi pour l'élément en question
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.no_docmn = vlv_no_docmn
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'O'
               AND fdt.elemn_entry_id = REC_CUR_autre_elemn_recrn.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP autre_elemn_recrn;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_3.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80389';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_3;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_4:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les éléments non récurrents
   *       avec montant supplémentaire.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-05  INC00017154  Gains sans unités
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) Les date de début et fin doivent être celles du DFF et non celles de la période
   * Michel Dessureault   2013-02-27  INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   * Michel Dessureault   2013-02-28  INC00017475  Les autres éléments non récurrents qui possèdent une date de début et une date de fin (A015 par exemple--> Ajust sal rég ou indemn) doivent avoir le numéro de période de paie de la carte B = au numéro de la période de paie courante.
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_4(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_4';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_4';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
   
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les éléments non
      -- récurrents avec montant supplémentaire.
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_suplm IS
         SELECT fdt.id_afect id_afect,
                --DDC175592
                (SELECT fdt1.nb_hh_signe
                   FROM gir_rh_fdt fdt1
                  WHERE fdt1.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt1.nm_fiche = 'H620'
                    AND fdt1.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt1.in_trans_anul = 'N'
                       -- Première semaine de la période
                    AND fdt1.dt_debut BETWEEN fdt1.dt_perd_paie_du AND fdt1.dt_perd_paie_du + 6) total_unite_semn_1,
                (SELECT fdt2.nb_hh_signe
                   FROM gir_rh_fdt fdt2
                  WHERE fdt2.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt2.nm_fiche = 'H620'
                    AND fdt2.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt2.in_trans_anul = 'N'
                       -- Deuxième semaine de la période
                    AND fdt2.dt_debut BETWEEN fdt2.dt_perd_paie_au - 6 AND fdt2.dt_perd_paie_au) total_unite_semn_2,
                fdt.nb_hh_signe grand_total_unite,
                fdt.cd_gain cd_gain,
                fdt.elemn_type_id id_type_elemn,
                fdt.dt_debut dt_debut,
                fdt.dt_fin dt_fin,
                fdt.elemn_entry_id id_entre_elemn,
                fdt.tx_mt_signe,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                fdt.cd_paiem,
                fdt.aa_finnc,
                fdt.minst,
                fdt.budgt,
                fdt.centr_respn,
                fdt.in_mt_rempl_specl_input,
                fdt.in_mt_suplm_specl_input,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND fdt.in_mt_suplm_specl_input = 'O'
            AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
            AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
          ORDER BY fdt.id_afect;
      --
      vln_sem_2 NUMBER;
   
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM per_time_periods ptp2
                               WHERE ptp2.attribute2 = pv_aa
                               AND   ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<non_recrn_suplm>>
      FOR REC_CUR_non_recrn_suplm IN CUR_non_recrn_suplm LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_non_recrn_suplm.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_non_recrn_suplm.id_afect THEN
            --
            vln_id_afect := REC_CUR_non_recrn_suplm.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('  cd_gain: ' || REC_CUR_non_recrn_suplm.cd_gain,
               vlv_nm_procd_fonct);
         --
         /* retouche 132
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         --
         vld_dt_debut := NVL(REC_CUR_non_recrn_suplm.dt_debut, vgREC_perd_paie_varbl.dt_debut);
         vld_dt_fin   := NVL(REC_CUR_non_recrn_suplm.dt_fin, vgREC_perd_paie_varbl.dt_fin);*/
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         --
         -- fin INC00016333
         --
         vld_dt_debut := REC_CUR_non_recrn_suplm.dt_debut;
         vld_dt_fin   := REC_CUR_non_recrn_suplm.dt_fin;
         -- fin retouche 132
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_non_recrn_suplm.cd_gain;
         vlrec_trans_h620.cd_paiem           := REC_CUR_non_recrn_suplm.cd_paiem;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_non_recrn_suplm.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_non_recrn_suplm.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         /* Retouche 170
         vlREC_trans_h620.tx_mt              := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_suplm.total_tx_mt);*/
         vlrec_trans_h620.tx_mt := fv_convr_nb_decml_carct(REC_CUR_non_recrn_suplm.tx_mt_signe);
         --DDC175592
         p_log('  REC_CUR_non_recrn_suplm.total_unite_semn_1: ' || REC_CUR_non_recrn_suplm.total_unite_semn_1,
               vlv_nm_procd_fonct);
         p_log('  REC_CUR_non_recrn_suplm.total_unite_semn_2: ' || REC_CUR_non_recrn_suplm.total_unite_semn_2,
               vlv_nm_procd_fonct);
         p_log('  REC_CUR_non_recrn_suplm.grand_total_unite: ' || REC_CUR_non_recrn_suplm.grand_total_unite,
               vlv_nm_procd_fonct);
         --INC 204445
         p_split_hh_carra(pv_cd_gain       => vlrec_trans_h620.cd_gain,
                          pn_assignment_id => vln_id_afect,
                          pd_dt_gain       => vlrec_trans_h620.dt_debut,
                          pn_total_semn_1  => REC_CUR_non_recrn_suplm.total_unite_semn_1,
                          pn_total_semn_2  => REC_CUR_non_recrn_suplm.total_unite_semn_2,
                          pn_grand_total   => REC_CUR_non_recrn_suplm.grand_total_unite);
         --FIN
         vlrec_trans_h620.total_unite_1     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_suplm.total_unite_semn_1,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_suplm.total_unite_semn_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_suplm.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
      
         -- CHG200241 Début
         vlrec_perd_paie_gain := NULL;
      
         p_log('15 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vld_dt_gain,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         /*DDC 200241 INC 82025*/
         p_log('DDC 200241 INC 82025 - ETAPE 4',
               vlv_nm_procd_fonct);
      
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vlrec_trans_h620.dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vlrec_trans_h620.dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- la date de début devient le début de la période du gain
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
               
                  -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                  -- sinon, la date de fin du gain est assignée au lendemain
                  --ELSE
                  --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                  -- INC00103225 Fin
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
            --ELSE
            -- retouche 121
            --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
            --END IF;
            -- INC00103225 Fin
         END IF;
         -- Fin 200241
      
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            /* Retouche 170
            -- INC00017359
            FOR REC_CUR_id_entre_elemn IN CUR_id_entre_elemn(vln_id_afect
                                                            ,REC_CUR_non_recrn_suplm.cd_gain
                                                            --INC00017528
                                                            ,REC_CUR_non_recrn_suplm.id_type_elemn
                                                            ,REC_CUR_non_recrn_suplm.dt_debut
                                                            ,REC_CUR_non_recrn_suplm.dt_fin) LOOP
            */
            --
            p_ajout_rejt(pn_id_afect => vln_id_afect
                         /* Retouche 170
                                                                                                                                                                                                                              ,pn_id_entre_elemn => REC_CUR_id_entre_elemn.id_entre_elemn*/,
                         pn_id_entre_elemn => REC_CUR_non_recrn_suplm.id_entre_elemn,
                         pn_id_trans       => NULL,
                         pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                         pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_no_emplo       => vlrec_persn.no_emplo,
                         pv_cd_gain        => vlrec_trans_h620.cd_gain,
                         pb_jeton          => vlrec_trans_h620.jeton,
                         pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                         pv_va_jeton       => vlrec_trans_h620.cd_gain
                         /* retouche 170
                                                                                                                                                                                                                              ,pn_id_contr_fdt   => REC_CUR_id_entre_elemn.id_contr_fdt*/,
                         pn_id_contr_fdt => REC_CUR_non_recrn_suplm.id_contr_fdt);
            --DDC 209235
            vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                       'GIR-80398');
            vln_id_entre_elemn  := REC_CUR_non_recrn_suplm.id_entre_elemn;
            vln_id_contr_fdt    := REC_CUR_non_recrn_suplm.id_contr_fdt;
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                 vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                              'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                 vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                   'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                 vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            --
            /* Retouche 170
            END LOOP;*/
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
         
            vlrec_trans_h620.id_afect := vln_id_afect;
            --INC00017475
            vlrec_trans_h620.no_perd     := vgrec_perd_paie_varbl.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_non_recrn_suplm.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_CUR_non_recrn_suplm.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_CUR_non_recrn_suplm.budgt;
            vlrec_trans_h620.centr_respn := REC_CUR_non_recrn_suplm.centr_respn;
            -- fin retouche 126
            --
            -- INC00017154 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
            --DDC175592
            vln_sem_2 := NVL(TO_NUMBER(vlrec_trans_h620.grand_total_unite),
                             0) - NVL(TO_NUMBER(vlrec_trans_h620.total_unite_1),
                                      0);
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               ( -- Retouche 170 NULL,
                REC_CUR_non_recrn_suplm.id_entre_elemn,
                vgd_dt_exect,
                'N',
                NVL(REC_CUR_non_recrn_suplm.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_CUR_non_recrn_suplm.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_CUR_non_recrn_suplm.dt_perd_paie_du,
                REC_CUR_non_recrn_suplm.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                -- DDC175592
                LPAD(vlrec_trans_h620.total_unite_1,
                     5,
                     '0'),
                LPAD(vln_sem_2,
                     5,
                     '0') /*vlrec_trans_h620.total_unite_2*/,
                LPAD(vlrec_trans_h620.grand_total_unite,
                     6,
                     '0'),
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_non_recrn_suplm.aa_finnc,
                REC_CUR_non_recrn_suplm.minst,
                REC_CUR_non_recrn_suplm.budgt,
                REC_CUR_non_recrn_suplm.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            /* Retouche 170
            UPDATE gir_rh_fdt fdt
            SET    fdt.id_trans                = vln_id_trans
                  ,fdt.dt_trans                = TRUNC(vgd_dt_exect)
                  ,fdt.no_docmn                = vlv_no_docmn
                  ,fdt.statu_sagip             = cv_statu_sagip_trans
            WHERE  fdt.id_afect                = REC_CUR_non_recrn_suplm.id_afect
            AND    fdt.cd_gain                 = REC_CUR_non_recrn_suplm.cd_gain
            -- INC00017528
            AND    NVL(fdt.elemn_type_id, 0)   = NVL(REC_CUR_non_recrn_suplm.id_type_elemn, 0)
            AND    fdt.nm_fiche                = 'H620'
            AND    fdt.statu_sagip             = cv_statu_sagip_non_trans
            AND    fdt.in_trans_anul           = 'N'
            AND    fdt.in_mt_suplm_specl_input = 'O'
            -- Retouche 132
            AND    fdt.dt_debut                = REC_CUR_non_recrn_suplm.dt_debut
            AND    fdt.dt_fin                  = REC_CUR_non_recrn_suplm.dt_fin
            -- INC00016333
            --AND    fdt.dt_perd_paie_du         = vgREC_perd_paie_varbl.dt_debut
            --AND    fdt.dt_perd_paie_au         = vgREC_perd_paie_varbl.dt_fin
            AND    fdt.dt_perd_paie_du         = REC_CUR_non_recrn_suplm.dt_perd_paie_du
            AND    fdt.dt_perd_paie_au         = REC_CUR_non_recrn_suplm.dt_perd_paie_au;
            */
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.elemn_entry_id = REC_CUR_non_recrn_suplm.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            -- 2013-06-06
            -- Il faut mettre le no_docmn pour les fdt annulées aussi pour l'élément en question
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.no_docmn = vlv_no_docmn
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'O'
               AND fdt.elemn_entry_id = REC_CUR_non_recrn_suplm.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP non_recrn_suplm;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_4.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80390';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_4;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_5:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les autres éléments non récurrents.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-28  INC00016333  Ajouter le lien à la table des suivis d'éléments
   *                                               pour la validation des types et entrées d'élément
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-04  Retouche 123 (INC00016964) Selon le code SAGIP, on doit inscrire les heures en « Heure et minute » ou en « Heure centième » dans le formulaire H620
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-27  INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   * Michel Dessureault   2013-02-28  INC00017475  Les autres éléments non récurrents qui possèdent une date de début et une date de fin (A015 par exemple--> Ajust sal rég ou indemn) doivent avoir le numéro de période de paie de la carte B = au numéro de la période de paie courante.
   * Michel Dessureault   2013-02-28  Retouche 151 (INC00017508) Traitement particulier du code A082
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-04  INC00017565  Les éléments non récurrents WEB ADI ne sont pas bien gérés.
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Michel Dessureault   2013-04-29  INC00018212  Remplacer dt_perd_paie_du par dt_perd_paie_au car la date d'implantation peut débuter après le début de la période.
   * Michel Dessureault   2013-06-03  INC00018369  Corriger le select du curseur CUR_va_tx pour aller chercher les éléments spéciaux.
   * Edgar  Doiron        2015-11-03  --DDC175592
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger   2017-01-23  CHG220437 - Obtenir le creator_type pour la validation du gain
   **************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_5(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_5';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_5';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
      --DDC175592
      vln_sem_2 NUMBER;
      vln_sem_1 NUMBER;
   
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les autres éléments
      -- non récurrents.
      ----------------------------------------------------------------------
      CURSOR CUR_autre_elemn_non_recrn IS
      --DDC 199119
         SELECT fdt.id_afect id_afect,
                fdt.cd_gain cd_gain,
                fdt.elemn_type_id id_type_elemn,
                fdt.elemn_entry_id id_entre_elemn,
                fdt.id_contr_fdt id_contr_fdt,
                fdt.dt_debut dt_debut,
                fdt.dt_fin dt_fin,
                (SELECT fdt1.nb_hh_signe
                   FROM gir_rh_fdt fdt1
                  WHERE fdt1.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt1.nm_fiche = 'H620'
                    AND fdt1.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt1.in_trans_anul = 'N'
                       -- Première semaine de la période
                       --DDC175592
                    AND DECODE(fdt1.cd_gain,
                               'A082',
                               fdt1.dt_debut,
                               fdt1.dt_gain) BETWEEN fdt1.dt_perd_paie_du AND fdt1.dt_perd_paie_du + 6) total_unite_semn_1,
                (SELECT fdt2.nb_hh_signe
                   FROM gir_rh_fdt fdt2
                  WHERE fdt2.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt2.nm_fiche = 'H620'
                    AND fdt2.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt2.in_trans_anul = 'N'
                       -- Deuxième semaine de la période
                       ----DDC175592
                    AND DECODE(fdt2.cd_gain,
                               'A082',
                               fdt2.dt_debut,
                               fdt2.dt_gain) BETWEEN fdt2.dt_perd_paie_au - 6 AND fdt2.dt_perd_paie_au) total_unite_semn_2,
                fdt.nb_hh_signe grand_total_unite,
                fdt.tx_mt_signe total_tx_mt,
                fdt.dt_perd_paie_du dt_perd_paie_du,
                fdt.dt_perd_paie_au dt_perd_paie_au,
                fdt.cd_paiem cd_paiem,
                fdt.aa_finnc aa_finnc,
                fdt.minst minst,
                fdt.budgt budgt,
                fdt.centr_respn centr_respn,
                fdt.in_mt_rempl_specl_input in_mt_rempl_specl_input,
                fdt.in_mt_suplm_specl_input in_mt_suplm_specl_input,
                fdt.tx_horr tx_horr,
                -- CHG220437 Début 2017-01-23
                -- Obtenir le creator type
                (SELECT DISTINCT pee.creator_type
                   FROM pay_element_entries_f pee
                  WHERE pee.element_entry_id = fdt.elemn_entry_id
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))) creator_type
         -- CHG220437 Fin
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND fdt.in_mt_suplm_specl_input = 'N'
            AND fdt.in_mt_rempl_specl_input = 'N'
            AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
            AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
            AND NVL(fdt.raisn_3,
                    '!') <> cv_hh_rembr
            AND EXISTS
          (SELECT 'X'
                   FROM pay_element_types_f pet
                  WHERE pet.element_type_id = fdt.elemn_type_id
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                    AND pet.processing_type = 'N')
            AND (EXISTS
                 (SELECT 'X'
                    FROM pay_element_entries_f pee
                   WHERE pee.element_entry_id = fdt.elemn_entry_id
                        -- INC00018212
                     AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                         (TRUNC(fdt.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                         (TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))
                     AND pee.creator_type IN (cv_cd_type_creat_pgi,
                                              cv_cd_type_creat_fdt)
                     AND NOT EXISTS
                   (SELECT 'X'
                            FROM pay_input_values_f_vl pivv
                           WHERE pivv.element_type_id = fdt.elemn_type_id
                             AND pivv.name = cv_nm_hh
                                --INC00018369  On ne veut pas les heures qui proviennent de la feuille de temps
                             AND EXISTS (SELECT 'X'
                                    FROM xxgir_rh_elemn_afect_v rea
                                   WHERE rea.id_type_elemn = pivv.element_type_id
                                     AND rea.id_entre_elemn = fdt.elemn_entry_id
                                     AND rea.cd_type_creat = cv_cd_type_creat_fdt
                                     AND rea.pee_dt_debut_efect = pee.effective_start_date
                                     AND rea.pee_dt_fin_efect = pee.effective_end_date)
                                -- INC00018212
                             AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                                 (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                                 (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))) OR fdt.cd_gain = 'A082')
          ORDER BY fdt.id_afect;
      --
      --
      CURSOR CUR_element_type_name(pn_id_type_elemn IN NUMBER) IS
         SELECT pet.attribute2 type_elemn
           FROM pay_element_types_f pet
          WHERE pet.element_type_id = pn_id_type_elemn;
   
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM per_time_periods ptp2
                               WHERE ptp2.attribute2 = pv_aa
                               AND   ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<autre_elemn_non_recrn>>
      FOR REC_CUR_autre_elemn_non_recrn IN CUR_autre_elemn_non_recrn LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_autre_elemn_non_recrn.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_autre_elemn_non_recrn.id_afect THEN
            --
            vln_id_afect := REC_CUR_autre_elemn_non_recrn.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('  cd_gain: ' || REC_CUR_autre_elemn_non_recrn.cd_gain,
               vlv_nm_procd_fonct);
         --
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         --
         vld_dt_debut := NVL(REC_CUR_autre_elemn_non_recrn.dt_debut,
                             vgrec_perd_paie_varbl.dt_debut);
         vld_dt_fin   := NVL(REC_CUR_autre_elemn_non_recrn.dt_fin,
                             vgrec_perd_paie_varbl.dt_fin);
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_autre_elemn_non_recrn.cd_gain;
         vlrec_trans_h620.cd_paiem           := REC_CUR_autre_elemn_non_recrn.cd_paiem;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_autre_elemn_non_recrn.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_autre_elemn_non_recrn.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         vlrec_trans_h620.tx_mt              := fv_convr_nb_decml_carct(REC_CUR_autre_elemn_non_recrn.total_tx_mt);
         /* Retouche 123
         vlREC_trans_h620.total_unite_1      := Fv_convr_nb_decml_carct(REC_CUR_autre_elemn_non_recrn.total_unite_semn_1);
         vlREC_trans_h620.total_unite_2      := Fv_convr_nb_decml_carct(REC_CUR_autre_elemn_non_recrn.total_unite_semn_2);
         vlREC_trans_h620.grand_total_unite  := Fv_convr_nb_decml_carct(REC_CUR_autre_elemn_non_recrn.grand_total_unite);*/
         --DDC175592
         vln_sem_1 := REC_CUR_autre_elemn_non_recrn.total_unite_semn_1;
      
         /*IF vln_sem_1 > 24 THEN
            vln_sem_2 := MOD(vln_sem_1,24);
            vln_sem_1 := 24;
         END IF;*/
      
         --DDC175592 Popol et fred, ajout nvl
         vln_sem_2 := REC_CUR_autre_elemn_non_recrn.grand_total_unite - NVL(REC_CUR_autre_elemn_non_recrn.total_unite_semn_1,
                                                                            0);
         --fin DDC175592
         --INC 204445
         p_split_hh_carra(pv_cd_gain       => vlrec_trans_h620.cd_gain,
                          pn_assignment_id => vln_id_afect,
                          pd_dt_gain       => vlrec_trans_h620.dt_debut,
                          pn_total_semn_1  => REC_CUR_autre_elemn_non_recrn.total_unite_semn_1,
                          pn_total_semn_2  => REC_CUR_autre_elemn_non_recrn.total_unite_semn_2,
                          pn_grand_total   => REC_CUR_autre_elemn_non_recrn.grand_total_unite);
         -- FIN
         vlrec_trans_h620.total_unite_1     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_autre_elemn_non_recrn.total_unite_semn_1,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => vln_sem_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_autre_elemn_non_recrn.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         -- fin retouche 123
      
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
      
         -- CHG200241 Début
         vlrec_perd_paie_gain := NULL;
      
         p_log('15 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vld_dt_gain,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         /*DDC 200241 INC 82025*/
         p_log('DDC 200241 INC 82025 - ETAPE 5',
               vlv_nm_procd_fonct);
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vlrec_trans_h620.dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vlrec_trans_h620.dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- la date de début devient le début de la période du gain
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
               
                  -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                  -- sinon, la date de fin du gain est assignée au lendemain
                  --ELSE
                  --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                  -- INC00103225 Fin
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
            --ELSE
            -- retouche 121
            --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
            --END IF;
            -- INC00103225 Fin
         END IF;
         -- Fin 200241
      
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            /* Retouche 170
            -- INC00017359
            FOR REC_CUR_id_entre_elemn IN CUR_id_entre_elemn(vln_id_afect
                                                            ,REC_CUR_autre_elemn_non_recrn.cd_gain
                                                            --INC00017528
                                                            ,REC_CUR_autre_elemn_non_recrn.id_type_elemn
                                                            ,REC_CUR_autre_elemn_non_recrn.dt_debut
                                                            ,REC_CUR_autre_elemn_non_recrn.dt_fin) LOOP
            */
            --
            p_ajout_rejt(pn_id_afect => vln_id_afect
                         /*Retouche 170
                                                                                                                                                                                                                              ,pn_id_entre_elemn => REC_CUR_id_entre_elemn.id_entre_elemn*/,
                         pn_id_entre_elemn => REC_CUR_autre_elemn_non_recrn.id_entre_elemn,
                         pn_id_trans       => NULL,
                         pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                         pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_no_emplo       => vlrec_persn.no_emplo,
                         pv_cd_gain        => vlrec_trans_h620.cd_gain,
                         pb_jeton          => vlrec_trans_h620.jeton,
                         pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                         pv_va_jeton       => vlrec_trans_h620.cd_gain
                         /* Retouche 170
                                                                                                                                                                                                                              ,pn_id_contr_fdt   => REC_CUR_id_entre_elemn.id_contr_fdt*/,
                         pn_id_contr_fdt => REC_CUR_autre_elemn_non_recrn.id_contr_fdt);
            --
            --DDC 209235
            vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                       'GIR-80398');
            vln_id_entre_elemn  := REC_CUR_autre_elemn_non_recrn.id_entre_elemn;
            vln_id_contr_fdt    := REC_CUR_autre_elemn_non_recrn.id_contr_fdt;
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                 vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                              'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                 vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                   'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                 vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            /* Retouche 170
            END LOOP;*/
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.cd_gain = vlrec_trans_h620.cd_gain
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
            vlrec_trans_h620.id_afect := vln_id_afect;
            --INC00017475
            vlrec_trans_h620.no_perd     := vgrec_perd_paie_varbl.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_autre_elemn_non_recrn.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_CUR_autre_elemn_non_recrn.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_CUR_autre_elemn_non_recrn.budgt;
            vlrec_trans_h620.centr_respn := REC_CUR_autre_elemn_non_recrn.centr_respn;
            -- fin retouche 126
            --
            -- INC00016333 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620,
                                    -- CHG220437 spécifier le creator_type à l'étape 5
                                    REC_CUR_autre_elemn_non_recrn.creator_type);
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
         
            p_log('ÉTAPE 5 avant création : dt_debut=' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD') || ', dt_fin=' ||
                  TO_CHAR(vlrec_trans_h620.dt_fin,
                          'YYYY-MM-DD') || ', aa_finnc=' || vlrec_trans_h620.aa_finnc,
                  vlv_nm_procd_fonct);
         
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               ( --Retouche 170 NULL,
                REC_CUR_autre_elemn_non_recrn.id_entre_elemn,
                vgd_dt_exect,
                'N',
                REC_CUR_autre_elemn_non_recrn.in_mt_suplm_specl_input,
                REC_CUR_autre_elemn_non_recrn.in_mt_rempl_specl_input,
                'N',
                /* retouche 126
                REC_CUR_autre_elemn_non_recrn.dt_perd_paie_du,
                REC_CUR_autre_elemn_non_recrn.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       --INC 74743
                       REC_CUR_autre_elemn_non_recrn.Tx_Horr,
                       --
                       vlrec_trans_h620.tx_mt),
                vlrec_trans_h620.total_unite_1,
                vlrec_trans_h620.total_unite_2,
                vlrec_trans_h620.grand_total_unite,
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_autre_elemn_non_recrn.aa_finnc,
                REC_CUR_autre_elemn_non_recrn.minst,
                REC_CUR_autre_elemn_non_recrn.budgt,
                REC_CUR_autre_elemn_non_recrn.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
         
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.elemn_entry_id = REC_CUR_autre_elemn_non_recrn.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            -- 2013-06-06
            -- Il faut mettre le no_docmn pour les fdt annulées aussi pour l'élément en question
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.no_docmn = vlv_no_docmn
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'O'
               AND fdt.elemn_entry_id = REC_CUR_autre_elemn_non_recrn.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP autre_elemn_non_recrn;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_5.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80391';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_5;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_6:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les autres éléments non récurrents
   *       (Nombre d'heures).
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-23  INC00016333  Ne pas exclure les période de paie antérieure
   * Michel Dessureault   2012-11-28  INC00016333  Ajouter le lien à la table des suivis d'éléments
   *                                               pour la validation des types et entrées d'élément
   * Michel Dessureault   2012-11-30  INC00016333  Suite à la correction du traitement 6_24
   *                                               il faut traiter la période en cours autrement.
   * Michel Dessureault   2013-01-31  INC00016966 et INC00016973 On corrige comment on traite le supplémentaire
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-04  Retouche 123 (INC00016964) Selon le code SAGIP, on doit inscrire les heures en « Heure et minute » ou en « Heure centième » dans le formulaire H620
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement d'année financière et de période
   * Michel Dessureault   2013-02-27  INC00017475  Les autres éléments non récurrents qui possèdent une date de début et une date de fin (A015 par exemple--> Ajust sal rég ou indemn) doivent avoir le numéro de période de paie de la carte B = au numéro de la période de paie courante.
   * Michel Dessureault   2013-02-27  INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   * Michel Dessureault   2013-03-04  INC00017528  Les gains avec même code sagip mais de nom différent sont à différencier.
   * Michel Dessureault   2013-03-04  INC00017565  Les éléments non récurrents WEB ADI ne sont pas bien gérés.
   * Michel Dessureault   2013-03-20  INC00017875  Pour les codes de gain, A015, A020, A022, inscrire le Montant à verser par unité pour la période couverte par le gain.
   * Michel Dessureault   2013-04-03  Retouche 163 (INC00017912)  Majoration du taux horaire.
   * Michel Dessureault   2013-04-29  INC00018212  Remplacer dt_perd_paie_du par dt_perd_paie_au car la date d'implantation peut débuter après le début de la période.
   * Edgar  Doiron        2014-06-19  INC70457     semaine 1 semaine 2 total
   * Edgar  Doiron        2015-11-04  --DDC189924
   * Edgar  Doiron        2015-12-16  --DDC195202
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger   2017-01-10  CHG220439 - Pour les gains antérieurs A010 et A014 soumis pour une période de paie déjà rémunérée
   *                                  avec un taux antérieur différent du taux actuel, il faut retenir le taux antérieur.
   * Geneviève Bélanger   2017-01-23  CHG217615 - Séparer les transactions H620 qui chevauchent l'année financière
   * François Lachance    2017-08-01  CHG229379 - Correction à la 28045 afin de payer adéquatement le nouveau gain A290 (maladies remb réserve)
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_6(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_6';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_6';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vlrec_cle_compt  type_rec_ventl_cout; -- infos budgétaires
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vld_dt_cours     DATE; -- SAGIR F.Aubin INC00106122 2016-08-18 : Date pour exécuter certaines procédures une seule fois.
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
      vlv_tx_horr  gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      -- retouche 126
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      -- retouche 163
      vlv_in_tx_majrt VARCHAR2(1) := 'N'; -- Pour indiquer de majorer le taux horaire
      --incident70457
      vln_total_2_semn   NUMBER;
      vln_bidon          NUMBER;
      vln_grand_total_mi NUMBER;
      vln_grand_total_hh NUMBER;
      vln_total_unite_mi NUMBER;
      vln_total_unite_hh NUMBER;
      --inc72261
      vlv_afect_valide VARCHAR2(1); --N
      --inc 70575
      vlv_paie_trait             VARCHAR2(3); --Oui/Non
      vld_min_effective_start_dt DATE;
      vld_max_effective_end_dt   DATE;
      vlv_in_rempl_dt            VARCHAR2(1); -- CHG217615
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      --Code de Gain
      CURSOR CUR_gain_decml(cd_gain IN VARCHAR2) IS
         SELECT 1
           FROM fnd_lookup_values_vl flv
          WHERE flv.lookup_type = 'GIR_RH_GAIN_DECML'
            AND flv.lookup_code = cd_gain;
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les autres éléments
      -- non récurrents (Nombre d'heures).
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_hh IS
      --DDC 199119
         SELECT fdt.id_afect id_afect,
                fdt.cd_gain  cd_gain
                --INC00017528
               ,
                fdt.elemn_type_id   id_type_elemn,
                fdt.dt_perd_paie_du dt_perd_paie_du,
                fdt.dt_perd_paie_au dt_perd_paie_au,
                fdt.tx_horr         tx_horr
                -- Date de début de la période couverte
               ,
                MIN(fdt.dt_gain) dt_debut
                -- Date de fin de la période couverte
               ,
                MAX(fdt.dt_gain) dt_fin
                -- Taux payé
               ,
                MAX(fdt.tx_mt_signe) tx_mt
                -- Somme des 14 jours de la période de paie
               ,
                SUM(fdt.nb_hh_signe) grand_total_unite,
                (SELECT SUM(fdt1.nb_hh_signe) nb_hh_signe
                    FROM gir_rh_fdt fdt1
                   WHERE -- Première semaine de la période
                   fdt1.dt_gain BETWEEN fdt1.dt_perd_paie_du AND fdt1.dt_perd_paie_du + 6
                AND fdt1.nm_fiche = 'H620'
                AND fdt1.statu_sagip = cv_statu_sagip_non_trans
                AND fdt1.in_trans_anul = 'N'
                AND fdt1.in_mt_suplm_specl_input = 'N'
                AND fdt1.in_mt_rempl_specl_input = 'N'
                AND fdt1.dt_perd_paie_du = fdt.dt_perd_paie_du
                AND fdt1.dt_perd_paie_au = fdt.dt_perd_paie_au
                  -- CHG217615 Début 2017-01-23 filtrer par aa_finnc
                AND fdt1.aa_finnc = fdt.aa_finnc
                  -- CHG217615 Fin
                AND fdt1.id_afect = fdt.id_afect
                AND fdt1.cd_gain = fdt.cd_gain
                  --INC00017528
                AND NVL(fdt1.elemn_type_id,
                       0) = NVL(fdt.elemn_type_id,
                                0)
                AND fdt1.tx_horr = fdt.tx_horr
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                  --AND    fdt1.cd_gain                <> 'A030'
                AND NVL(fdt1.raisn_3,
                       '!') <> cv_hh_rembr
                AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f pet
                     WHERE pet.element_type_id = fdt1.elemn_type_id
                          -- INC00018212
                       AND ((TRUNC(fdt1.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt1.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt1.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                       AND pet.processing_type = 'N')
                AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                     WHERE pee.element_entry_id = fdt1.elemn_entry_id
                          -- INC00018212
                       AND ((TRUNC(fdt1.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt1.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt1.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
                AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt1.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt1.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt1.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt1.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
                   GROUP BY fdt1.id_afect,
                            fdt1.cd_gain
                            -- INC00017528
                           ,
                            fdt1.elemn_type_id,
                            fdt1.dt_perd_paie_du,
                            fdt1.dt_perd_paie_au,
                            fdt1.tx_horr) total_unite_semn_1,
                (SELECT SUM(fdt2.nb_hh_signe)
                    FROM gir_rh_fdt fdt2
                   WHERE -- Deuxième semaine de la période
                   fdt2.dt_gain BETWEEN fdt2.dt_perd_paie_au - 6 AND fdt2.dt_perd_paie_au
                AND fdt2.nm_fiche = 'H620'
                AND fdt2.statu_sagip = cv_statu_sagip_non_trans
                AND fdt2.in_trans_anul = 'N'
                AND fdt2.in_mt_suplm_specl_input = 'N'
                AND fdt2.in_mt_rempl_specl_input = 'N'
                AND fdt2.dt_perd_paie_du = fdt.dt_perd_paie_du
                AND fdt2.dt_perd_paie_au = fdt.dt_perd_paie_au
                  -- CHG217615 Début 2017-01-23 filtrer par aa_finnc
                AND fdt2.aa_finnc = fdt.aa_finnc
                  -- CHG217615 Fin
                AND fdt2.id_afect = fdt.id_afect
                AND fdt2.cd_gain = fdt.cd_gain
                  --INC00017528
                AND NVL(fdt2.elemn_type_id,
                       0) = NVL(fdt.elemn_type_id,
                                0)
                AND fdt2.tx_horr = fdt.tx_horr
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                AND NVL(fdt2.raisn_3,
                       '!') <> cv_hh_rembr
                AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f pet
                     WHERE pet.element_type_id = fdt2.elemn_type_id
                          -- INC00018212
                       AND ((TRUNC(fdt2.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt2.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt2.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                       AND pet.processing_type = 'N')
                AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                     WHERE pee.element_entry_id = fdt2.elemn_entry_id
                          -- INC00018212
                       AND ((TRUNC(fdt2.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt2.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt2.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
                AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt2.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt2.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt2.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt2.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
                   GROUP BY fdt2.id_afect,
                            fdt2.cd_gain
                            -- INC00017528
                           ,
                            fdt2.elemn_type_id,
                            fdt2.dt_perd_paie_du,
                            fdt2.dt_perd_paie_au,
                            fdt2.tx_horr) total_unite_semn_2,
                MAX(fdt.aa_finnc) aa_finnc,
                MAX(fdt.minst) minst,
                MAX(fdt.budgt) budgt,
                MAX(fdt.centr_respn) centr_respn,
                MAX(fdt.in_mt_rempl_specl_input) in_mt_rempl_specl_input,
                MAX(fdt.in_mt_suplm_specl_input) in_mt_suplm_specl_input
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND fdt.in_mt_suplm_specl_input = 'N'
            AND fdt.in_mt_rempl_specl_input = 'N'
               -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
            AND NVL(fdt.raisn_3,
                    '!') <> cv_hh_rembr
               -- Pour la période courante seulement
            AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
            AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
            AND EXISTS (SELECT 'X'
                   FROM pay_element_types_f pet
                  WHERE pet.element_type_id = fdt.elemn_type_id
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                    AND pet.processing_type = 'N')
            AND EXISTS (SELECT 'X'
                   FROM pay_element_entries_f pee
                  WHERE pee.element_entry_id = fdt.elemn_entry_id
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))
                    AND pee.creator_type <> cv_cd_type_creat_pgi
                    AND pee.creator_type <> cv_cd_type_creat_absen)
               -- INC00017565
            AND EXISTS (SELECT 'X'
                   FROM pay_input_values_f_vl pivv
                  WHERE pivv.element_type_id = fdt.elemn_type_id
                    AND pivv.name = cv_nm_hh
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
          GROUP BY fdt.id_afect,
                   fdt.cd_gain
                   -- INC00017528
                  ,
                   fdt.elemn_type_id,
                   fdt.dt_perd_paie_du,
                   fdt.dt_perd_paie_au,
                   fdt.aa_finnc, -- CHG217615 2017-01-23 grouper par aa_finnc
                   fdt.tx_horr
          ORDER BY fdt.id_afect;
      --
      --INC00017359
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les identifiants entrée elément
      ----------------------------------------------------------------------
      CURSOR CUR_id_entre_elemn(pn_id_afect IN NUMBER,
                                pv_cd_gain  IN VARCHAR2,
                                --INC00017528
                                pn_id_type_elemn IN NUMBER,
                                pd_dt_perd_du    IN DATE,
                                pd_dt_perd_au    IN DATE,
                                pv_tx_horr       IN VARCHAR2) IS
         SELECT fdt.elemn_entry_id id_entre_elemn,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND fdt.in_mt_suplm_specl_input = 'N'
            AND fdt.in_mt_rempl_specl_input = 'N'
            AND NVL(fdt.raisn_3,
                    '!') <> cv_hh_rembr
            AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
            AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
            AND EXISTS (SELECT 'X'
                   FROM pay_element_types_f pet
                  WHERE pet.element_type_id = fdt.elemn_type_id
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                    AND pet.processing_type = 'N')
            AND EXISTS (SELECT 'X'
                   FROM pay_element_entries_f pee
                  WHERE pee.element_entry_id = fdt.elemn_entry_id
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))
                    AND pee.creator_type <> cv_cd_type_creat_pgi
                    AND pee.creator_type <> cv_cd_type_creat_absen)
               -- INC00017565
            AND EXISTS (SELECT 'X'
                   FROM pay_input_values_f_vl pivv
                  WHERE pivv.element_type_id = fdt.elemn_type_id
                    AND pivv.name = cv_nm_hh
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
            AND fdt.id_afect = pn_id_afect
            AND fdt.cd_gain = pv_cd_gain
               -- INC00017528
            AND fdt.elemn_type_id = pn_id_type_elemn
            AND fdt.dt_perd_paie_du = pd_dt_perd_du
            AND fdt.dt_perd_paie_au = pd_dt_perd_au
            AND fdt.tx_horr = pv_tx_horr;
      --
      -- INC00016333 On doit gérer les antérieures à part, dû à la correction de 6.24
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les autres éléments
      -- non récurrents (Nombre d'heures) dans les périodes antérieures.
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_hh_anter IS
      --DDC 199119
         SELECT fdt.id_afect id_afect,
                fdt.cd_gain  cd_gain
                --INC00017528
               ,
                fdt.elemn_type_id   id_type_elemn,
                fdt.dt_perd_paie_du dt_perd_paie_du,
                fdt.dt_perd_paie_au dt_perd_paie_au,
                fdt.tx_horr         tx_horr
                -- Date de début de la période couverte
               ,
                MIN(fdt.dt_gain) dt_debut
                -- Date de fin de la période couverte
               ,
                MAX(fdt.dt_gain) dt_fin
                -- Taux payé
               ,
                MAX(fdt.tx_mt_signe) tx_mt
                -- Somme des 14 jours de la période de paie
               ,
                SUM(fdt.nb_hh_signe) grand_total_unite,
                (SELECT SUM(fdt1.nb_hh_signe) nb_hh_signe
                    FROM gir_rh_fdt fdt1
                   WHERE -- Première semaine de la période
                   fdt1.dt_gain BETWEEN fdt1.dt_perd_paie_du AND fdt1.dt_perd_paie_du + 6
                AND fdt1.nb_hh IS NOT NULL
                AND fdt1.nm_fiche = 'H620'
                AND fdt1.statu_sagip = cv_statu_sagip_non_trans
                AND fdt1.in_trans_anul = 'N'
                AND fdt1.in_mt_suplm_specl_input = 'N'
                AND fdt1.in_mt_rempl_specl_input = 'N'
                AND fdt1.dt_perd_paie_du = fdt.dt_perd_paie_du
                AND fdt1.dt_perd_paie_au = fdt.dt_perd_paie_au
                  -- CHG217615 Début 2017-01-23 filtrer par aa_finnc
                AND fdt1.aa_finnc = fdt.aa_finnc
                  -- CHG217615 Fin
                AND fdt1.id_afect = fdt.id_afect
                AND fdt1.cd_gain = fdt.cd_gain
                  --INC00017528
                AND NVL(fdt1.elemn_type_id,
                       0) = NVL(fdt.elemn_type_id,
                                0)
                AND fdt1.tx_horr = fdt.tx_horr
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                  --AND    fdt1.cd_gain                <> 'A030'
                AND NVL(fdt1.raisn_3,
                       '!') <> cv_hh_rembr
                AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f           pet,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt1.id_contr_fdt
                       AND pet.element_type_id = rse.element_type_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date AND pet.effective_end_date
                       AND pet.processing_type = 'N')
                  /* INC00016966
                  AND    NOT EXISTS(SELECT 'X'
                                    FROM   pay_element_types_f pet
                                       -- INC00016333
                                          ,gir_rh_suivi_entre_elemn_paie  rse -- INC-89949
                                    WHERE  rse.id_contr_fdt    = fdt1.id_contr_fdt
                                    AND    pet.element_type_id = rse.element_type_id
                                    AND    TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date
                                                                                   AND pet.effective_end_date
                                       -- Ne pas prendre les heures remboursées
                                    AND    REGEXP_INSTR(pet.attribute3,cv_hh_rembr,1,1,0,'i') > 0
                                   )
                  */
                AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                           -- INC00016333
                          ,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt1.id_contr_fdt
                       AND pee.element_entry_id = rse.element_entry_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pee.effective_start_date AND pee.effective_end_date
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
                AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt1.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt1.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt1.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt1.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
                   GROUP BY fdt1.id_afect,
                            fdt1.cd_gain
                            -- INC00017528
                           ,
                            fdt1.elemn_type_id,
                            fdt1.dt_perd_paie_du,
                            fdt1.dt_perd_paie_au,
                            fdt1.tx_horr) total_unite_semn_1,
                (SELECT SUM(fdt2.nb_hh_signe)
                    FROM gir_rh_fdt fdt2
                   WHERE -- Deuxième semaine de la période
                   fdt2.dt_gain BETWEEN fdt2.dt_perd_paie_au - 6 AND fdt2.dt_perd_paie_au
                AND fdt2.nb_hh IS NOT NULL
                AND fdt2.nm_fiche = 'H620'
                AND fdt2.statu_sagip = cv_statu_sagip_non_trans
                AND fdt2.in_trans_anul = 'N'
                AND fdt2.in_mt_suplm_specl_input = 'N'
                AND fdt2.in_mt_rempl_specl_input = 'N'
                AND fdt2.dt_perd_paie_du = fdt.dt_perd_paie_du
                AND fdt2.dt_perd_paie_au = fdt.dt_perd_paie_au
                  -- CHG217615 Début 2017-01-23 filtrer par aa_finnc
                AND fdt2.aa_finnc = fdt.aa_finnc
                  -- CHG217615 Fin
                AND fdt2.id_afect = fdt.id_afect
                AND fdt2.cd_gain = fdt.cd_gain
                  --INC00017528
                AND NVL(fdt2.elemn_type_id,
                       0) = NVL(fdt.elemn_type_id,
                                0)
                AND fdt2.tx_horr = fdt.tx_horr
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                  --AND    fdt2.cd_gain                <> 'A030'
                AND NVL(fdt2.raisn_3,
                       '!') <> cv_hh_rembr
                AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f           pet,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt2.id_contr_fdt
                       AND pet.element_type_id = rse.element_type_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date AND pet.effective_end_date
                       AND pet.processing_type = 'N')
                AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                           -- INC00016333
                          ,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt2.id_contr_fdt
                       AND pee.element_entry_id = rse.element_entry_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pee.effective_start_date AND pee.effective_end_date
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
                AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt2.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt2.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt2.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt2.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
                   GROUP BY fdt2.id_afect,
                            fdt2.cd_gain
                            -- INC00017528
                           ,
                            fdt2.elemn_type_id,
                            fdt2.dt_perd_paie_du,
                            fdt2.dt_perd_paie_au,
                            fdt2.tx_horr) total_unite_semn_2,
                MAX(fdt.aa_finnc) aa_finnc,
                MAX(fdt.minst) minst,
                MAX(fdt.budgt) budgt,
                MAX(fdt.centr_respn) centr_respn,
                MAX(fdt.in_mt_rempl_specl_input) in_mt_rempl_specl_input,
                MAX(fdt.in_mt_suplm_specl_input) in_mt_suplm_specl_input
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND fdt.in_mt_suplm_specl_input = 'N'
            AND fdt.in_mt_rempl_specl_input = 'N'
               -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
               --AND    fdt.cd_gain                <> 'A030'
            AND NVL(fdt.raisn_3,
                    '!') <> cv_hh_rembr
               -- Pour aller chercher seulement les périodes antérieures
            AND fdt.dt_perd_paie_au < vgrec_perd_paie_varbl.dt_debut
            AND EXISTS (SELECT 'X'
                   FROM pay_element_types_f           pet,
                        gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                    AND pet.element_type_id = rse.element_type_id
                    AND TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date AND pet.effective_end_date
                    AND pet.processing_type = 'N')
            AND EXISTS (SELECT 'X'
                   FROM pay_element_entries_f pee
                        -- INC00016333
                       ,
                        gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                    AND pee.element_entry_id = rse.element_entry_id
                    AND TRUNC(rse.new_effective_start_date) BETWEEN pee.effective_start_date AND pee.effective_end_date
                    AND pee.creator_type <> cv_cd_type_creat_pgi
                    AND pee.creator_type <> cv_cd_type_creat_absen)
               -- INC00017565
            AND EXISTS (SELECT 'X'
                   FROM pay_input_values_f_vl pivv
                  WHERE pivv.element_type_id = fdt.elemn_type_id
                    AND pivv.name = cv_nm_hh
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
          GROUP BY fdt.id_afect,
                   fdt.cd_gain
                   -- INC00017528
                  ,
                   fdt.elemn_type_id,
                   fdt.dt_perd_paie_du,
                   fdt.dt_perd_paie_au,
                   fdt.aa_finnc, -- CHG217615 2017-01-23 grouper par aa_finnc
                   fdt.tx_horr
          ORDER BY fdt.id_afect;
   
      vlv_tx_horr_actue gir_rh_fdt.tx_horr%TYPE; -- CHG220439
      --
      --INC00017359
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les identifiants entrée elément
      ----------------------------------------------------------------------
      CURSOR CUR_id_entre_elemn_anter(pn_id_afect IN NUMBER,
                                      pv_cd_gain  IN VARCHAR2,
                                      --INC00017528
                                      pn_id_type_elemn IN NUMBER,
                                      pd_dt_perd_du    IN DATE,
                                      pd_dt_perd_au    IN DATE,
                                      pv_tx_horr       IN VARCHAR2) IS
         SELECT fdt.elemn_entry_id id_entre_elemn,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND fdt.in_mt_suplm_specl_input = 'N'
            AND fdt.in_mt_rempl_specl_input = 'N'
            AND NVL(fdt.raisn_3,
                    '!') <> cv_hh_rembr
            AND fdt.dt_perd_paie_au < vgrec_perd_paie_varbl.dt_debut
            AND EXISTS (SELECT 'X'
                   FROM pay_element_types_f           pet,
                        gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                    AND pet.element_type_id = rse.element_type_id
                    AND TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date AND pet.effective_end_date
                    AND pet.processing_type = 'N')
            AND EXISTS (SELECT 'X'
                   FROM pay_element_entries_f         pee,
                        gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                  WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                    AND pee.element_entry_id = rse.element_entry_id
                    AND TRUNC(rse.new_effective_start_date) BETWEEN pee.effective_start_date AND pee.effective_end_date
                    AND pee.creator_type <> cv_cd_type_creat_pgi
                    AND pee.creator_type <> cv_cd_type_creat_absen)
               -- INC00017565
            AND EXISTS (SELECT 'X'
                   FROM pay_input_values_f_vl pivv
                  WHERE pivv.element_type_id = fdt.elemn_type_id
                    AND pivv.name = cv_nm_hh
                       -- INC00018212
                    AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                        (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
            AND fdt.id_afect = pn_id_afect
            AND fdt.cd_gain = pv_cd_gain
               -- INC00017528
            AND fdt.elemn_type_id = pn_id_type_elemn
            AND fdt.dt_perd_paie_du = pd_dt_perd_du
            AND fdt.dt_perd_paie_au = pd_dt_perd_au
            AND fdt.tx_horr = pv_tx_horr;
      --
      --INC72261
      CURSOR CUR_afect_valide(pn_assignment_id IN NUMBER) IS
         SELECT 'N'
           FROM xxgir_rh_afect_tempr rat
          WHERE rat.id_afect = pn_assignment_id
               -- affectation ce termine avant la date de début de la périod
            AND rat.dt_fin < vgrec_perd_paie_varbl.dt_debut
            AND rat.in_type_paie = cv_id_type_paie_varbl;
      --INC70575
      CURSOR CUR_paie_perd_trait(pv_aa            IN VARCHAR2,
                                 pv_perd          IN VARCHAR2,
                                 pn_assignment_id IN NUMBER) IS
         SELECT 'X'
           FROM per_bf_payroll_runs pbpr
           JOIN per_bf_processed_assignments pbpa
             ON pbpa.payroll_run_id = pbpr.payroll_run_id
          WHERE pbpa.assignment_id IN (SELECT DISTINCT paa1.assignment_id
                                         FROM per_all_assignments_f paa1
                                        WHERE paa1.person_id = (SELECT DISTINCT paa2.person_id
                                                                  FROM per_all_assignments_f paa2
                                                                 WHERE paa2.assignment_id = pn_assignment_id)) --id_afect
               --INC 82813
            AND CASE
                   WHEN TO_NUMBER(pv_perd) >= 21 THEN
                    '2015'
                   ELSE
                    pv_aa --aa
                END = pbpr.bpr_attribute1
               --
            AND pbpr.bpr_attribute2 = pv_perd --perd
            AND pbpr.payroll_id = 62; --Paie Variable;
   
      --DDC189924
      CURSOR CUR_trans_acept(pd_dt_debut IN DATE,
                             pd_dt_fin   IN DATE,
                             pd_id_afect IN NUMBER) IS
         SELECT 'X'
           FROM gir_trans_h620 h620
           JOIN gir_rh_fdt fdt
             ON (fdt.nm_fiche = 'H620' AND fdt.id_trans = h620.id_trans_h620)
          WHERE h620.statu_trans = 'A'
            AND h620.in_trans_anul = 'N'
               -- AND pd_dt_debut = h620.perd_paie_varbl_du
               -- AND pd_dt_fin   = h620.perd_paie_varbl_au
               -- F.Aubin 2015-11-18
            AND pd_dt_debut BETWEEN h620.perd_paie_varbl_du AND h620.perd_paie_varbl_au
            AND pd_dt_fin BETWEEN h620.perd_paie_varbl_du AND h620.perd_paie_varbl_au
            AND h620.perd_paie_varbl_du = vlrec_perd_paie_gain.dt_debut
            AND h620.perd_paie_varbl_au = vlrec_perd_paie_gain.dt_fin
               -- Fin F.Aubin 2015-11-18
            AND TRUNC(fdt.dt_statu_sagip) < TRUNC(vgrec_perd_paie_varbl.dt_du_achem)
            AND h620.id_afect = pd_id_afect; -- Ajout F.Aubin 2015-11-18
   
      CURSOR CUR_afect_effective_start_dt(pn_assignment_id IN NUMBER) IS
         SELECT MIN(effective_start_date) min_effective_start_date
           FROM per_all_assignments_f paaf
          WHERE paaf.assignment_id = pn_assignment_id;
      CURSOR CUR_afect_effective_end_dt(pn_assignment_id IN NUMBER) IS
         SELECT MAX(effective_end_date) max_effective_end_date
           FROM per_all_assignments_f paaf
          WHERE paaf.assignment_id = pn_assignment_id;
      --
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM   per_time_periods ptp2
                               WHERE  ptp2.attribute2 = pv_aa
                               AND    ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<non_recrn_hh>>
      FOR REC_CUR_non_recrn_hh IN CUR_non_recrn_hh LOOP
         --
         p_log('20- FOR REC_CUR_non_recrn_hh...',
               vlv_nm_procd_fonct);
         vlrec_trans_h620 := NULL;
         --
         IF vln_id_afect <> REC_CUR_non_recrn_hh.id_afect THEN
            --
            vln_id_afect := REC_CUR_non_recrn_hh.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          --INC-70638 Edgar Doiron 2014-06-25
                          --pd_dt_fin   => vgREC_perd_paie_varbl.dt_fin,
                          pd_dt_fin  => REC_CUR_non_recrn_hh.dt_debut,
                          prec_persn => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                --INC-70638 Edgar Doiron 2014-06-25
                                --pd_perd_fin   => vgREC_perd_paie_varbl.dt_fin,
                                pd_perd_fin => REC_CUR_non_recrn_hh.dt_debut,
                                prec_statu  => vlrec_statu);
            --
            -- Obtenir les valeurs dérivées
            --
            p_obten_ventl_cout(pn_id_afect => vln_id_afect,
                               --INC-70638 Edgar Doiron 2014-06-25
                               --pd_dt_afect     => vgREC_perd_paie_varbl.dt_fin,
                               pd_dt_afect     => REC_CUR_non_recrn_hh.dt_debut,
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               prec_ventl_cout => vlrec_cle_compt);
            --
            p_log('30- id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('40-  cd_gain: ' || REC_CUR_non_recrn_hh.cd_gain,
               vlv_nm_procd_fonct);
         --
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
      
         -- CHG217615 Début 2017-01-27
         -- si la date est remplacée par la période de paie, assigner un indicateur
         --vld_dt_debut := NVL(REC_CUR_non_recrn_hh.dt_debut,
         --                    vgrec_perd_paie_varbl.dt_debut);
         --vld_dt_fin   := NVL(REC_CUR_non_recrn_hh.dt_fin,
         --                    vgrec_perd_paie_varbl.dt_fin);
      
         vlv_in_rempl_dt := 'N';
      
         IF REC_CUR_non_recrn_hh.dt_debut IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_debut    := vgrec_perd_paie_varbl.dt_debut;
         ELSE
            vld_dt_debut := REC_CUR_non_recrn_hh.dt_debut;
         END IF;
      
         IF REC_CUR_non_recrn_hh.dt_fin IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_fin      := vgrec_perd_paie_varbl.dt_fin;
         ELSE
            vld_dt_fin := REC_CUR_non_recrn_hh.dt_fin;
         END IF;
      
         p_log('50- vld_dt_debut=' || vld_dt_debut || ', vld_dt_fin=' || vld_dt_fin || ', vlv_in_rempl_dt=' || vlv_in_rempl_dt,
               vlv_nm_procd_fonct);
         -- CHG217615 Fin
      
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
         vlrec_trans_h620.dt_debut           := vld_dt_debut;
         vld_dt_gain                         := vld_dt_debut;
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_non_recrn_hh.cd_gain;
         vlrec_trans_h620.cd_paiem           := NULL;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_non_recrn_hh.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_non_recrn_hh.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         /* Retouche 123
         vlREC_trans_h620.total_unite_1      := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh.total_unite_semn_1);
         vlREC_trans_h620.total_unite_2      := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh.total_unite_semn_2);
         vlREC_trans_h620.grand_total_unite  := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh.grand_total_unite);*/
         vlrec_trans_h620.total_unite_1     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh.total_unite_semn_1,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh.total_unite_semn_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
      
         -- fin retouche 123
         --
         -- Début CHG-229379
         /*vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                 pd_dt_efect => vld_dt_fin));
         --
         IF REC_CUR_non_recrn_hh.tx_horr = vlv_tx_horr THEN
            vlrec_trans_h620.tx_mt := NULL;
         ELSE
            vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh.tx_horr;
         END IF;*/
      
         IF REC_CUR_non_recrn_hh.cd_gain = 'A290' THEN
         
            vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                    pd_dt_efect => vgd_dt_exect));
         
            vlrec_trans_h620.tx_mt := vlv_tx_horr;
         
         ELSE
         
            vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                    pd_dt_efect => vld_dt_fin));
            --DDC241595
            IF REC_CUR_non_recrn_hh.cd_gain IN ('A010',
                                                'A015',
                                                'A029') THEN
               vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                                       pd_dt_efect    => vld_dt_fin,
                                                                       pv_in_tx_majrt => 'O'));
            END IF;
            IF REC_CUR_non_recrn_hh.tx_horr = vlv_tx_horr THEN
               vlrec_trans_h620.tx_mt := NULL;
            ELSE
               vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh.tx_horr;
            END IF;
         
         END IF;
         -- Fin CHG-229379
      
         p_log('60- vlv_tx_horr=' || vlv_tx_horr || ' REC_CUR_non_recrn_hh.tx_horr=' || REC_CUR_non_recrn_hh.tx_horr || ' vlrec_trans_h620.tx_mt=' ||
               vlrec_trans_h620.tx_mt,
               vlv_nm_procd_fonct);
         --INC72261
         vlv_afect_valide := NULL;
         OPEN CUR_afect_valide(vln_id_afect);
         FETCH CUR_afect_valide
            INTO vlv_afect_valide;
         CLOSE CUR_afect_valide;
         IF vlv_afect_valide = 'N' THEN
            vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh.tx_horr;
         END IF;
         p_log('70- vlv_afect_valide=' || vlv_afect_valide || ' vlrec_trans_h620.tx_mt=' || vlrec_trans_h620.tx_mt,
               vlv_nm_procd_fonct);
         --
         -- retouche 170
         vlrec_trans_h620.nb_hh := REC_CUR_non_recrn_hh.grand_total_unite;
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
      
         -- retouche 121
         IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
         END IF;
      
         -- Début CHG200241 Geneviève Bélanger
         -- Obtenir la période du gain
         vlrec_perd_paie_gain := NULL;
      
         p_log('80 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vlrec_trans_h620.dt_debut,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         p_log('DDC 200241 INC 82025 - ETAPE 6',
               vlv_nm_procd_fonct);
      
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vld_dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('90 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('90.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('90.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('90.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('90.05 vld_dt_fin = ' || TO_CHAR(vld_dt_fin,
                                                   'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vld_dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- il ne faut pas faire +1 à la date de fin, écraser la valeur assignée plus haut
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
                  vlrec_trans_h620.dt_fin   := vld_dt_fin;
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('90.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('90.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
         END IF;
         -- Fin CHG200241
      
         p_log('100- vlrec_trans_h620.dt_debut=' || vlrec_trans_h620.dt_debut || ' vlrec_trans_h620.dt_fin=' || vlrec_trans_h620.dt_fin,
               vlv_nm_procd_fonct);
      
         --
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            p_log('110- vlrec_trans_h620.cd_ereur IS NOT NULL',
                  vlv_nm_procd_fonct);
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            -- INC00017359
            FOR REC_CUR_id_entre_elemn IN CUR_id_entre_elemn(vln_id_afect,
                                                             REC_CUR_non_recrn_hh.cd_gain
                                                             --INC00017528
                                                            ,
                                                             REC_CUR_non_recrn_hh.id_type_elemn,
                                                             REC_CUR_non_recrn_hh.dt_perd_paie_du,
                                                             REC_CUR_non_recrn_hh.dt_perd_paie_au,
                                                             REC_CUR_non_recrn_hh.tx_horr) LOOP
               --
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_id_entre_elemn.id_entre_elemn,
                            pn_id_trans       => NULL,
                            pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                            pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => vlrec_trans_h620.cd_gain,
                            pb_jeton          => vlrec_trans_h620.jeton,
                            pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                            pv_va_jeton       => vlrec_trans_h620.cd_gain,
                            pn_id_contr_fdt   => REC_CUR_id_entre_elemn.id_contr_fdt);
            
               --DDC 209235
               vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                          'GIR-80398');
               vln_id_entre_elemn  := REC_CUR_id_entre_elemn.id_entre_elemn;
               vln_id_contr_fdt    := REC_CUR_id_entre_elemn.id_contr_fdt;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                    vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                                 'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                    vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                      'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                    vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
               --
            END LOOP;
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            p_log('120- vlrec_trans_h620.cd_ereur IS NULL',
                  vlv_nm_procd_fonct);
            --
            --retouche 126
            --
            vlrec_perd_paie_gain := NULL;
            --
            p_log('130 - Appel de la procédure P_obten_perd_paie_gain.',
                  vlv_nm_procd_fonct);
            --
            p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                   pd_dt_gain      => REC_CUR_non_recrn_hh.dt_debut,
                                   prec_perd_paie  => vlrec_perd_paie_gain);
            --
            p_log('140 - Minst avant=' || NVL(vlrec_cle_compt.minst,
                                              '000'),
                  vlv_nm_procd_fonct);
            --
            vlrec_trans_h620.id_afect    := vln_id_afect;
            vlrec_trans_h620.no_perd     := vlrec_perd_paie_gain.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_non_recrn_hh.aa_finnc;
            vlrec_trans_h620.minst       := NVL(vlrec_cle_compt.minst,
                                                '000');
            vlrec_trans_h620.budgt       := vlrec_cle_compt.budgt;
            vlrec_trans_h620.centr_respn := vlrec_cle_compt.centr_respn;
            -- fin retouche 126
            --INC 70575 Edgar Doiron
            vlv_paie_trait := NULL;
            --DDC189924 remplacer le curseur
            /*OPEN CUR_paie_perd_trait(REC_CUR_non_recrn_hh.aa_finnc,
                                     vlrec_perd_paie_gain.no_perd,
                                     vln_id_afect);
            FETCH CUR_paie_perd_trait
               INTO vlv_paie_trait;
            CLOSE CUR_paie_perd_trait;*/
         
            --DDC189924 nouveau curseur
            p_log('140a - REC_CUR_non_recrn_hh.dt_perd_paie_du:' || REC_CUR_non_recrn_hh.dt_perd_paie_du,
                  vlv_nm_procd_fonct);
            p_log('140b - REC_CUR_non_recrn_hh.dt_perd_paie_au:' || REC_CUR_non_recrn_hh.dt_perd_paie_au,
                  vlv_nm_procd_fonct);
            p_log('140c - vlrec_perd_paie_gain.dt_debut:' || vlrec_perd_paie_gain.dt_debut,
                  vlv_nm_procd_fonct);
            p_log('140d - vlrec_perd_paie_gain.dt_fin:' || vlrec_perd_paie_gain.dt_fin,
                  vlv_nm_procd_fonct);
            p_log('140e - vgrec_perd_paie_varbl.dt_du_achem:' || vgrec_perd_paie_varbl.dt_du_achem,
                  vlv_nm_procd_fonct);
         
            OPEN CUR_trans_acept(REC_CUR_non_recrn_hh.dt_perd_paie_du,
                                 REC_CUR_non_recrn_hh.dt_perd_paie_au,
                                 vlrec_trans_h620.id_afect);
            FETCH CUR_trans_acept
               INTO vlv_paie_trait;
            CLOSE CUR_trans_acept;
         
            p_log('150 - Traitement paye=' || vlv_paie_trait,
                  vlv_nm_procd_fonct);
         
            IF vlv_paie_trait = 'X' THEN
               p_log('160 - employé déjà payé',
                     vlv_nm_procd_fonct);
               p_log('160a - vgrec_perd_paie_varbl.no_perd:' || vgrec_perd_paie_varbl.no_perd,
                     vlv_nm_procd_fonct);
               p_log('160b - vgrec_perd_paie_varbl.dt_debut:' || vgrec_perd_paie_varbl.dt_debut,
                     vlv_nm_procd_fonct);
               p_log('160c - vgrec_perd_paie_varbl.dt_fin:' || vgrec_perd_paie_varbl.dt_fin,
                     vlv_nm_procd_fonct);
            
               -- Paie déja passée
               -- Lorsque l'employé a déjà une paie pour la période de paie antérieure en traitement,
               -- la période de paie est remplacée par la période de paie courante.
               vlrec_trans_h620.no_perd         := vgrec_perd_paie_varbl.no_perd;
               vlrec_trans_h620.dt_perd_paie_du := vgrec_perd_paie_varbl.dt_debut;
               vlrec_trans_h620.dt_perd_paie_au := vgrec_perd_paie_varbl.dt_fin;
            
               --Si A010 ou A014 on doit calculer la date de début du gain et de fin.
               IF vlrec_trans_h620.cd_gain IN ('A010',
                                               'A014') THEN
                  -- CHG217615 Début 2017-02-15
                  -- Assigner le paramètre utilisé dans p_chevc_aa_finnc
                  vlv_in_rempl_dt := 'O';
                  p_log('165 - employé déjà payé, vlv_in_rempl_dt = O',
                        vlv_nm_procd_fonct);
                  -- CHG217615 Fin
               
                  p_log('170 - recalcul des dates vlrec_trans_h620.cd_gain=' || vlrec_trans_h620.cd_gain,
                        vlv_nm_procd_fonct);
               
                  OPEN CUR_afect_effective_start_dt(vln_id_afect);
                  FETCH CUR_afect_effective_start_dt
                     INTO vld_min_effective_start_dt;
                  CLOSE CUR_afect_effective_start_dt;
               
                  vlrec_trans_h620.dt_debut := GREATEST(vgrec_perd_paie_varbl.dt_debut,
                                                        vld_min_effective_start_dt);
               
                  OPEN CUR_afect_effective_end_dt(vln_id_afect);
                  FETCH CUR_afect_effective_end_dt
                     INTO vld_max_effective_end_dt;
                  CLOSE CUR_afect_effective_end_dt;
               
                  vlrec_trans_h620.dt_fin := LEAST(vgrec_perd_paie_varbl.dt_fin,
                                                   vld_max_effective_end_dt,
                                                   NVL(vgd_dt_least,
                                                       HR_GENERAL.END_OF_TIME));
               
                  IF vlrec_trans_h620.dt_fin < vgrec_perd_paie_varbl.dt_debut THEN
                     vlrec_trans_h620.dt_fin := vgrec_perd_paie_varbl.dt_fin;
                  END IF;
               END IF;
            END IF;
            --
            -- INC00017875
            vlrec_trans_h620.tx_horr := REC_CUR_non_recrn_hh.tx_horr;
            p_log('180 - taux horr=' || vlrec_trans_h620.tx_horr,
                  vlv_nm_procd_fonct);
            --
            -- INC00016333 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
            --
            p_log('190- Minst après=' || NVL(vlrec_trans_h620.minst,
                                             '000'),
                  vlv_nm_procd_fonct);
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
         
            p_log('200 - (1) vlv_no_docmn=' || vlv_no_docmn,
                  vlv_nm_procd_fonct);
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
            --Incident 70457  Edgar 2014-06-18
            vln_total_unite_mi := 0;
            vln_total_unite_hh := 0;
            vln_grand_total_hh := 0;
            vln_grand_total_mi := 0;
            vln_total_2_semn   := 0;
         
            OPEN CUR_gain_decml(vlrec_trans_h620.cd_gain);
            FETCH CUR_gain_decml
               INTO vln_bidon;
            IF CUR_gain_decml%NOTFOUND THEN
               CLOSE CUR_gain_decml;
               p_log('210 - Pas de gain decimal',
                     vlv_nm_procd_fonct);
               IF vlrec_trans_h620.total_unite_1 IS NOT NULL AND
                  vlrec_trans_h620.total_unite_2 IS NOT NULL THEN
                  vln_total_2_semn := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                       -2)) + TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_2,
                                                                               -2));
                  IF (vln_total_2_semn) >= 60 THEN
                     vln_total_2_semn := vln_total_2_semn - 60;
                  END IF;
                  IF vln_total_2_semn < TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                         -2)) THEN
                     vln_total_unite_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            -2));
                     vln_total_unite_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            0,
                                                            3));
                     vln_total_unite_mi := vln_total_unite_mi + 1;
                     IF vln_total_unite_mi = 60 THEN
                        vln_total_unite_mi := vln_total_unite_mi - 60;
                        vln_total_unite_hh := vln_total_unite_hh + 1;
                     END IF;
                     vlrec_trans_h620.total_unite_1 := LPAD(TO_CHAR(vln_total_unite_hh),
                                                            3,
                                                            '0') || LPAD(TO_CHAR(vln_total_unite_mi),
                                                                         2,
                                                                         '0');
                  ELSIF vln_total_2_semn > TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2)) THEN
                     vln_grand_total_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2));
                     vln_grand_total_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            0,
                                                            4));
                     vln_grand_total_mi := vln_grand_total_mi + 1;
                     IF vln_grand_total_mi = 60 THEN
                        vln_grand_total_mi := vln_grand_total_mi - 60;
                        vln_grand_total_hh := vln_grand_total_hh + 1;
                     END IF;
                     vlrec_trans_h620.grand_total_unite := LPAD(TO_CHAR(vln_grand_total_hh),
                                                                4,
                                                                '0') || LPAD(TO_CHAR(vln_grand_total_mi),
                                                                             2,
                                                                             '0');
                  END IF;
               END IF;
            
            ELSE
               CLOSE CUR_gain_decml;
            END IF;
         
            -- CHG217615 Début 2017-01-27
            -- faire la vérification des dates de couverture du gain
            p_chevc_aa_finnc(pd_dt_debut_gain      => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_gain        => vlrec_trans_h620.dt_fin,
                             pd_dt_debut_perd_gain => vlrec_perd_paie_gain.dt_debut,
                             pd_dt_fin_perd_gain   => vlrec_perd_paie_gain.dt_fin,
                             pd_dt_debut_perd_paie => vgrec_perd_paie_varbl.dt_debut,
                             pd_dt_fin_perd_paie   => vgrec_perd_paie_varbl.dt_fin,
                             pv_no_perd            => vgrec_perd_paie_varbl.no_perd,
                             pn_id_afect           => pn_assignment_id,
                             pv_aa_finnc           => vlrec_trans_h620.aa_finnc,
                             pv_in_rempl_dt        => vlv_in_rempl_dt,
                             pd_dt_debut_trans     => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_trans       => vlrec_trans_h620.dt_fin,
                             pv_aa_finnc_trans     => vlrec_trans_h620.aa_finnc);
            -- CHG217615 Fin
         
            p_log('220 - INSERT INTO gir_trans_h620',
                  vlv_nm_procd_fonct);
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               (NULL,
                vgd_dt_exect,
                'N',
                NVL(REC_CUR_non_recrn_hh.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_CUR_non_recrn_hh.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_CUR_non_recrn_hh.dt_perd_paie_du,
                REC_CUR_non_recrn_hh.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                -- DDC175592
                vlrec_trans_h620.total_unite_1,
                vlrec_trans_h620.total_unite_2,
                vlrec_trans_h620.grand_total_unite,
                --
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_non_recrn_hh.aa_finnc,
                REC_CUR_non_recrn_hh.minst,
                REC_CUR_non_recrn_hh.budgt,
                REC_CUR_non_recrn_hh.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
         
            p_log('230 - (1) après INSERT, gir_trans_h620.id_trans_h620=' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
         
            p_log('240 - (1) avant UPDATE pour FDT non annulé, id_afect=' || REC_CUR_non_recrn_hh.id_afect || ', cd_gain=' ||
                  REC_CUR_non_recrn_hh.cd_gain || ', id_type_elemn=' || REC_CUR_non_recrn_hh.id_type_elemn || ', dt_perd_paie_du=' ||
                  TO_CHAR(REC_CUR_non_recrn_hh.dt_perd_paie_du,
                          'yyyy-mm-dd') || ', dt_perd_paie_au=' || TO_CHAR(REC_CUR_non_recrn_hh.dt_perd_paie_au,
                                                                           'yyyy-mm-dd') || ', tx_horr=' || REC_CUR_non_recrn_hh.tx_horr,
                  vlv_nm_procd_fonct);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
                   -- INC00016333 pour quand le gain change de A010 à A015
                  ,
                   fdt.cd_gain = vlrec_trans_h620.cd_gain
             WHERE fdt.id_afect = REC_CUR_non_recrn_hh.id_afect
               AND fdt.cd_gain = REC_CUR_non_recrn_hh.cd_gain
                  -- INC00017528
               AND NVL(fdt.elemn_type_id,
                       0) = NVL(REC_CUR_non_recrn_hh.id_type_elemn,
                                0)
               AND fdt.dt_perd_paie_du = REC_CUR_non_recrn_hh.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_non_recrn_hh.dt_perd_paie_au
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_non_recrn_hh.aa_finnc
                  -- CHG217615 Fin
               AND fdt.tx_horr = REC_CUR_non_recrn_hh.tx_horr
               AND fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.in_mt_suplm_specl_input = 'N'
               AND fdt.in_mt_rempl_specl_input = 'N'
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                  --AND    fdt.cd_gain                <> 'A030'
               AND NVL(fdt.raisn_3,
                       '!') <> cv_hh_rembr
               AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f pet
                     WHERE pet.element_type_id = fdt.elemn_type_id
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                       AND pet.processing_type = 'N')
               AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                     WHERE pee.element_entry_id = fdt.elemn_entry_id
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
               AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)));
         
            p_log('250 - (1) après UPDATE pour FDT non annulé, NB mis à jour : ' || SQL%ROWCOUNT,
                  vlv_nm_procd_fonct);
         
            p_log('260 - (1) avant UPDATE pour FDT annulé, id_afect=' || REC_CUR_non_recrn_hh.id_afect || ', cd_gain=' ||
                  REC_CUR_non_recrn_hh.cd_gain || ', id_type_elemn=' || REC_CUR_non_recrn_hh.id_type_elemn || ', dt_perd_paie_du=' ||
                  TO_CHAR(REC_CUR_non_recrn_hh.dt_perd_paie_du,
                          'yyyy-mm-dd') || ', dt_perd_paie_au=' || TO_CHAR(REC_CUR_non_recrn_hh.dt_perd_paie_au,
                                                                           'yyyy-mm-dd') || ', tx_horr=' || REC_CUR_non_recrn_hh.tx_horr,
                  vlv_nm_procd_fonct);
            --
            -- 2013-06-06
            -- Il faut mettre le no_docmn pour les fdt annulées aussi pour l'élément en question
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.no_docmn = vlv_no_docmn
             WHERE fdt.id_afect = REC_CUR_non_recrn_hh.id_afect
               AND fdt.cd_gain = REC_CUR_non_recrn_hh.cd_gain
                  -- INC00017528
               AND NVL(fdt.elemn_type_id,
                       0) = NVL(REC_CUR_non_recrn_hh.id_type_elemn,
                                0)
               AND fdt.dt_perd_paie_du = REC_CUR_non_recrn_hh.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_non_recrn_hh.dt_perd_paie_au
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_non_recrn_hh.aa_finnc
                  -- CHG217615 Fin
               AND fdt.tx_horr = REC_CUR_non_recrn_hh.tx_horr
               AND fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'O'
               AND fdt.in_mt_suplm_specl_input = 'N'
               AND fdt.in_mt_rempl_specl_input = 'N'
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                  --AND    fdt.cd_gain                <> 'A030'
               AND NVL(fdt.raisn_3,
                       '!') <> cv_hh_rembr
               AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f pet
                     WHERE pet.element_type_id = fdt.elemn_type_id
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pet.effective_start_date AND pet.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pet.effective_start_date AND pet.effective_end_date))
                       AND pet.processing_type = 'N')
               AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                     WHERE pee.element_entry_id = fdt.elemn_entry_id
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pee.effective_start_date AND pee.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date))
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
               AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
               AND fdt.id_trans IS NULL;
         
            p_log('270 - (1) après UPDATE pour FDT annulé, NB mis à jour : ' || SQL%ROWCOUNT,
                  vlv_nm_procd_fonct);
            --
            p_log('280-  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP non_recrn_hh;
      --
      vln_id_afect := 0;
      vld_dt_cours := HR_GENERAL.END_OF_TIME; -- SAGIR F.Aubin INC00106122 2016-08-18 : Date pour exécuter certaines procédures une seule fois.
      --
      <<non_recrn_hh_anter>>
      FOR REC_CUR_non_recrn_hh_anter IN CUR_non_recrn_hh_anter LOOP
         --
         vlrec_trans_h620 := NULL;
         p_log('290 - FOR REC_CUR_non_recrn_hh_anter...',
               vlv_nm_procd_fonct);
         --
         IF vln_id_afect <> REC_CUR_non_recrn_hh_anter.id_afect OR
            vld_dt_cours <> REC_CUR_non_recrn_hh_anter.dt_fin THEN
            --
            vln_id_afect := REC_CUR_non_recrn_hh_anter.id_afect;
            vld_dt_cours := REC_CUR_non_recrn_hh_anter.dt_fin; -- SAGIR F.Aubin INC00106122 2016-08-18 : Date pour exécuter certaines procédures une seule fois.
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vld_dt_cours, -- SAGIR F.Aubin INC00106122 2016-08-18 : Date pour exécuter certaines procédures une seule fois.
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vld_dt_cours, -- SAGIR F.Aubin INC00106122 2016-08-18 : Date pour exécuter certaines procédures une seule fois.
                                prec_statu  => vlrec_statu);
            --
            -- Obtenir les valeurs dérivées
            --
            p_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                               pd_dt_afect     => vld_dt_cours, -- SAGIR F.Aubin INC00106122 2016-08-18 : Date pour exécuter certaines procédures une seule fois.
                               pv_id_type_paie => cv_id_type_paie_varbl,
                               prec_ventl_cout => vlrec_cle_compt);
            --
            p_log('300-  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('310-  cd_gain: ' || REC_CUR_non_recrn_hh_anter.cd_gain,
               vlv_nm_procd_fonct);
         --
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         --
      
         -- CHG217615 Début 2017-01-27
         -- si la date est remplacée par la période de paie, assigner un indicateur
         --vld_dt_debut := NVL(REC_CUR_non_recrn_hh_anter.dt_debut,
         --                    vgrec_perd_paie_varbl.dt_debut);
         --vld_dt_fin   := NVL(REC_CUR_non_recrn_hh_anter.dt_fin,
         --                    vgrec_perd_paie_varbl.dt_fin);
      
         vlv_in_rempl_dt := 'N';
      
         IF REC_CUR_non_recrn_hh_anter.dt_debut IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_debut    := vgrec_perd_paie_varbl.dt_debut;
         ELSE
            vld_dt_debut := REC_CUR_non_recrn_hh_anter.dt_debut;
         END IF;
      
         IF REC_CUR_non_recrn_hh_anter.dt_fin IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_fin      := vgrec_perd_paie_varbl.dt_fin;
         ELSE
            vld_dt_fin := REC_CUR_non_recrn_hh_anter.dt_fin;
         END IF;
      
         p_log('320- vld_dt_debut=' || vld_dt_debut || ', vld_dt_fin=' || vld_dt_fin || ', vlv_in_rempl_dt=' || vlv_in_rempl_dt,
               vlv_nm_procd_fonct);
         -- CHG217615 Fin
      
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_non_recrn_hh_anter.cd_gain;
         vlrec_trans_h620.cd_paiem           := NULL;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_non_recrn_hh_anter.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_non_recrn_hh_anter.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         /* Retouche 123
         vlREC_trans_h620.total_unite_1      := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh_anter.total_unite_semn_1);
         vlREC_trans_h620.total_unite_2      := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh_anter.total_unite_semn_2);
         vlREC_trans_h620.grand_total_unite  := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh_anter.grand_total_unite);*/
         vlrec_trans_h620.total_unite_1     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh_anter.total_unite_semn_1,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh_anter.total_unite_semn_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh_anter.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
      
         -- Début CHG200241 Geneviève Bélanger
         -- Obtenir la période du gain
         vlrec_perd_paie_gain := NULL;
      
         p_log('330 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vlrec_trans_h620.dt_debut,
                                prec_perd_paie  => vlrec_perd_paie_gain);
         -- Fin CHG200241
         --
         -- retouche 163
         --
         vlv_in_tx_majrt := 'N';
         --
         -- Puisque le code A015 est pour des A010 dans l'année financière précédente
         -- et qu'on a fait la substitution lors de la création de la liste 6_8
         -- on n'a qu'à vérifier si le code est A015 pour appliquer la majoration du taux horaire
         --
         IF vlrec_trans_h620.cd_gain = 'A015' OR -- Début SAGIR INC-70575 2014-09-15
            vlrec_trans_h620.cd_gain = 'A010' OR
            vlrec_trans_h620.cd_gain = 'A029' THEN
            --
            vlv_in_tx_majrt := 'O';
            --
         END IF;
      
         -- Début CHG-229379
         /*-- fin retouche 163
         --
         vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                 pd_dt_efect => vld_dt_fin
                                                                 -- retouche 163
                                                                ,
                                                                 pv_in_tx_majrt => vlv_in_tx_majrt));
         --
         --DDC195202
         IF vlrec_trans_h620.cd_gain IN ('A032', 'A067', 'A083') THEN
            -- Début F.Aubin 2015-12-15 195202 : prennait le Tx_Mt au lieu du tx_horr
                --vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh_anter.Tx_Mt;
            vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh_anter.tx_horr;
            vlv_tx_horr            := REC_CUR_non_recrn_hh_anter.tx_horr;
            -- Début F.Aubin 2015-12-15 195202
         ELSIF REC_CUR_non_recrn_hh_anter.tx_horr = vlv_tx_horr THEN
            vlrec_trans_h620.tx_mt := NULL;
         ELSE
         
               vlrec_trans_h620.tx_mt := CASE vlv_in_tx_majrt
                                           WHEN 'O' THEN
                                             vlv_tx_horr
                                           ELSE
                                             REC_CUR_non_recrn_hh_anter.tx_horr
                                           END;
         
         END IF;*/
      
         IF vlrec_trans_h620.cd_gain = 'A290' THEN
         
            vlv_tx_horr            := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                               pd_dt_efect => vgd_dt_exect));
            vlrec_trans_h620.tx_mt := vlv_tx_horr;
         
         ELSE
         
            vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                    pd_dt_efect => vld_dt_fin,
                                                                    -- retouche 163
                                                                    pv_in_tx_majrt => vlv_in_tx_majrt));
         
            --DDC195202
            IF vlrec_trans_h620.cd_gain IN ('A032',
                                            'A067',
                                            'A083') THEN
            
               -- Début F.Aubin 2015-12-15 195202 : prennait le Tx_Mt au lieu du tx_horr
               --vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh_anter.Tx_Mt;
               vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh_anter.tx_horr;
               vlv_tx_horr            := REC_CUR_non_recrn_hh_anter.tx_horr;
               -- Début F.Aubin 2015-12-15 195202
            
            ELSIF REC_CUR_non_recrn_hh_anter.tx_horr = vlv_tx_horr AND
                  vlv_in_tx_majrt = 'N' THEN
            
               vlrec_trans_h620.tx_mt := NULL;
            
            ELSE
               vlrec_trans_h620.tx_mt := CASE vlv_in_tx_majrt
                                            WHEN 'O' THEN
                                             vlv_tx_horr
                                            ELSE
                                             REC_CUR_non_recrn_hh_anter.tx_horr
                                         END;
            
            END IF;
         END IF;
         -- Fin CHG-229379
      
         p_log('340- vlv_tx_horr=' || vlv_tx_horr || ' REC_CUR_non_recrn_hh_anter.tx_horr=' || REC_CUR_non_recrn_hh_anter.tx_horr ||
               ' vlrec_trans_h620.tx_mt=' || vlrec_trans_h620.tx_mt || ' vlrec_trans_h620.cd_gain=' || vlrec_trans_h620.cd_gain ||
               ' REC_CUR_non_recrn_hh_anter.Tx_Mt=' || REC_CUR_non_recrn_hh_anter.Tx_Mt || ' vlv_in_tx_majrt=' || vlv_in_tx_majrt,
               vlv_nm_procd_fonct);
      
         --INC72261
         vlv_afect_valide := NULL;
         OPEN CUR_afect_valide(vln_id_afect);
         FETCH CUR_afect_valide
            INTO vlv_afect_valide;
         CLOSE CUR_afect_valide;
      
         IF vlv_afect_valide = 'N' THEN
            -- Début SAGIR INC-70575 2014-09-15 avant : REC_CUR_non_recrn_hh_anter.tx_horr;
            vlrec_trans_h620.tx_mt := vlv_tx_horr;
            -- Fin SAGIR INC-70575 2014-09-15
            p_log('350- Affect. non valide au moment dtdebut=' || vgrec_perd_paie_varbl.dt_debut || ' vlv_afect_valide=' || vlv_afect_valide ||
                  ' vlrec_trans_h620.tx_mt=' || vlrec_trans_h620.tx_mt,
                  vlv_nm_procd_fonct);
         END IF;
      
         p_log('360- vlv_afect_valide=' || vlv_afect_valide || ' vlrec_trans_h620.tx_mt=' || vlrec_trans_h620.tx_mt,
               vlv_nm_procd_fonct);
         --
         -- retouche 170
         vlrec_trans_h620.nb_hh := REC_CUR_non_recrn_hh_anter.grand_total_unite;
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
         --
         -- retouche 121
         IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
         END IF;
      
         -- Début CHG200241 Geneviève Bélanger
         -- Obtenir la période du gain
         vlrec_perd_paie_gain := NULL;
      
         p_log('370 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vlrec_trans_h620.dt_debut,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         /*DDC 200241 INC 82025*/
         p_log('DDC 200241 INC 82025 - ETAPE 6.2',
               vlv_nm_procd_fonct);
      
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vld_dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('375.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('375.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('375.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                   'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('375.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                 'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('375.05 vld_dt_fin = ' || TO_CHAR(vld_dt_fin,
                                                    'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vld_dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- il ne faut pas faire +1 à la date de fin, écraser la valeur assignée plus haut
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
                  vlrec_trans_h620.dt_fin   := vld_dt_fin;
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('375.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                   'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('375.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                 'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
         END IF;
         -- Fin CHG200241
      
         p_log('380- vlrec_trans_h620.dt_debut=' || vlrec_trans_h620.dt_debut || ' vlrec_trans_h620.dt_fin=' || vlrec_trans_h620.dt_fin,
               vlv_nm_procd_fonct);
         --
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            p_log('390- vlrec_trans_h620.cd_ereur IS NOT NULL',
                  vlv_nm_procd_fonct);
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            -- INC00017359
            FOR REC_CUR_id_entre_elemn IN CUR_id_entre_elemn_anter(vln_id_afect,
                                                                   REC_CUR_non_recrn_hh_anter.cd_gain
                                                                   --INC00017528
                                                                  ,
                                                                   REC_CUR_non_recrn_hh_anter.id_type_elemn,
                                                                   REC_CUR_non_recrn_hh_anter.dt_perd_paie_du,
                                                                   REC_CUR_non_recrn_hh_anter.dt_perd_paie_au,
                                                                   REC_CUR_non_recrn_hh_anter.tx_horr) LOOP
               --
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_id_entre_elemn.id_entre_elemn,
                            pn_id_trans       => NULL,
                            pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                            pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => vlrec_trans_h620.cd_gain,
                            pb_jeton          => vlrec_trans_h620.jeton,
                            pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                            pv_va_jeton       => vlrec_trans_h620.cd_gain,
                            pn_id_contr_fdt   => REC_CUR_id_entre_elemn.id_contr_fdt);
               --DDC 209235
               vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                          'GIR-80398');
               vln_id_entre_elemn  := REC_CUR_id_entre_elemn.id_entre_elemn;
               vln_id_contr_fdt    := REC_CUR_id_entre_elemn.id_contr_fdt;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                    vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                                 'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                    vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                      'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                    vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
               --
            END LOOP;
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = REC_CUR_non_recrn_hh_anter.dt_perd_paie_du
                  AND fdt.dt_perd_paie_au = REC_CUR_non_recrn_hh_anter.dt_perd_paie_au
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            p_log('400- vlrec_trans_h620.cd_ereur IS NULL',
                  vlv_nm_procd_fonct);
            --
            --retouche 126
            --
            vlrec_perd_paie_gain := NULL;
            --
            p_log('410 - Appel de la procédure P_obten_perd_paie_gain.',
                  vlv_nm_procd_fonct);
            --
            p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                   pd_dt_gain      => REC_CUR_non_recrn_hh_anter.dt_debut,
                                   prec_perd_paie  => vlrec_perd_paie_gain);
            --
            p_log('420-Minst avant=' || NVL(vlrec_cle_compt.minst,
                                            '000'),
                  vlv_nm_procd_fonct);
            --
            vlrec_trans_h620.id_afect    := vln_id_afect;
            vlrec_trans_h620.no_perd     := vlrec_perd_paie_gain.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_non_recrn_hh_anter.aa_finnc;
            vlrec_trans_h620.minst       := NVL(vlrec_cle_compt.minst,
                                                '000');
            vlrec_trans_h620.budgt       := vlrec_cle_compt.budgt;
            vlrec_trans_h620.centr_respn := vlrec_cle_compt.centr_respn;
            -- fin retouche 126
            --
            --INC 70575 Edgar Doiron
            vlv_paie_trait := NULL;
            --DDC189924 on remplace le curseur suivant
            /*OPEN CUR_paie_perd_trait(REC_CUR_non_recrn_hh_anter.aa_finnc,
                                     vlrec_perd_paie_gain.no_perd,
                                     vln_id_afect);
            FETCH CUR_paie_perd_trait
               INTO vlv_paie_trait;
            CLOSE CUR_paie_perd_trait;*/
         
            --DDC189924 nouveau curseur
            p_log('430a - REC_CUR_non_recrn_hh_anter.dt_perd_paie_du:' ||
                  TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_du,
                          'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('430b - REC_CUR_non_recrn_hh_anter.dt_perd_paie_au:' ||
                  TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_au,
                          'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('430c - vlrec_perd_paie_gain.dt_debut:' || TO_CHAR(vlrec_perd_paie_gain.dt_debut,
                                                                     'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('430d - vlrec_perd_paie_gain.dt_fin:' || TO_CHAR(vlrec_perd_paie_gain.dt_fin,
                                                                   'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('430e - vgrec_perd_paie_varbl.dt_du_achem:' || TO_CHAR(vgrec_perd_paie_varbl.dt_du_achem,
                                                                         'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            OPEN CUR_trans_acept(REC_CUR_non_recrn_hh_anter.dt_perd_paie_du,
                                 REC_CUR_non_recrn_hh_anter.dt_perd_paie_au,
                                 vlrec_trans_h620.id_afect);
            FETCH CUR_trans_acept
               INTO vlv_paie_trait;
            CLOSE CUR_trans_acept;
         
            p_log('440 - Traitement paye=' || vlv_paie_trait,
                  vlv_nm_procd_fonct);
         
            IF vlv_paie_trait = 'X' THEN
               p_log('450 - paye traité',
                     vlv_nm_procd_fonct);
               p_log('450a - vgrec_perd_paie_varbl.dt_debut:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                         'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
               p_log('450b - vgrec_perd_paie_varbl.dt_fin:' || TO_CHAR(vgrec_perd_paie_varbl.dt_fin,
                                                                       'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
               p_log('450c - vgrec_perd_paie_varbl.no_perd:' || vgrec_perd_paie_varbl.no_perd,
                     vlv_nm_procd_fonct);
               p_log('REC_CUR_non_recrn_hh_anter.dt_perd_paie_du=' || TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_du,
                                                                              'YYYY-MM-DD') || 'REC_CUR_non_recrn_hh_anter.dt_perd_paie_au = ' ||
                     TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_au,
                             'YYYY-MM-DD') || 'vgrec_perd_paie.dt_du_achem = ' ||
                     TO_CHAR(vgrec_perd_paie.dt_du_achem,
                             'YYYY-MM-DD'),
                     vlv_nm_procd_fonct);
            
               -- Paie déja passée
               -- Lorsque l'employé a déjà une paie pour la période de paie antérieure en traitement,
               -- la période de paie est remplacée par la période de paie courante.
               vlrec_trans_h620.no_perd         := vgrec_perd_paie_varbl.no_perd;
               vlrec_trans_h620.dt_perd_paie_du := vgrec_perd_paie_varbl.dt_debut;
               vlrec_trans_h620.dt_perd_paie_au := vgrec_perd_paie_varbl.dt_fin;
            
               -- Début F.Aubin 2015-12-15 195202 : désactivé puisqu'il écrasait la valeur calculé préalablement
               --vlrec_trans_h620.tx_mt           := vlv_tx_horr;
               -- Fin F.Aubin 2015-12-15 195202
            
               --Si A010 ou A014 on doit calculer la date de début du gain et de fain.
               IF vlrec_trans_h620.cd_gain IN ('A010',
                                               'A014') THEN
               
                  -- CHG217615 Début 2017-02-15
                  -- Assigner le paramètre utilisé dans p_chevc_aa_finnc
                  vlv_in_rempl_dt := 'O';
                  p_log('455 - employé déjà payé, vlv_in_rempl_dt = O',
                        vlv_nm_procd_fonct);
                  -- CHG217615 Fin
               
                  p_log('460 - recalcul des date vlrec_trans_h620.cd_gain=' || vlrec_trans_h620.cd_gain,
                        vlv_nm_procd_fonct);
               
                  OPEN CUR_afect_effective_start_dt(vln_id_afect);
                  FETCH CUR_afect_effective_start_dt
                     INTO vld_min_effective_start_dt;
                  CLOSE CUR_afect_effective_start_dt;
               
                  vlrec_trans_h620.dt_debut := GREATEST(vgrec_perd_paie_varbl.dt_debut,
                                                        vld_min_effective_start_dt);
                  OPEN CUR_afect_effective_end_dt(vln_id_afect);
                  FETCH CUR_afect_effective_end_dt
                     INTO vld_max_effective_end_dt;
                  CLOSE CUR_afect_effective_end_dt;
               
                  vlrec_trans_h620.dt_fin := LEAST(vgrec_perd_paie_varbl.dt_fin,
                                                   vld_max_effective_end_dt,
                                                   NVL(vgd_dt_least,
                                                       HR_GENERAL.END_OF_TIME));
               
                  IF vlrec_trans_h620.dt_fin < vgrec_perd_paie_varbl.dt_debut THEN
                     vlrec_trans_h620.dt_fin := vgrec_perd_paie_varbl.dt_fin;
                  END IF;
               
                  p_log('462 - vlrec_trans_h620.dt_fin=' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                    'YYYY-MM-DD') || ', vlrec_trans_h620.dt_perd_paie_au=' ||
                        TO_CHAR(vlrec_trans_h620.dt_perd_paie_au,
                                'YYYY-MM-DD') || ', vgrec_perd_paie_varbl.dt_fin=' ||
                        TO_CHAR(vgrec_perd_paie_varbl.dt_fin,
                                'YYYY-MM-DD'),
                        vlv_nm_procd_fonct);
               
                  -- CHG220439 Début 2017-01-10
                  -- vérifier si le taux antérieur est différent du taux actuel
                  vlv_tx_horr_actue := NULL;
                  vlv_tx_horr_actue := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect    => vln_id_afect,
                                                                                pd_dt_efect    => vgrec_perd_paie_varbl.dt_fin,
                                                                                pv_in_tx_majrt => vlv_in_tx_majrt));
               
                  IF vlv_tx_horr <> vlv_tx_horr_actue THEN
                     vlrec_trans_h620.tx_mt := vlv_tx_horr;
                  END IF;
               
                  p_log('465 - vlrec_trans_h620.tx_mt=' || vlrec_trans_h620.tx_mt || ', vlv_tx_horr_actue=' || vlv_tx_horr_actue ||
                        ', REC_CUR_non_recrn_hh_anter.tx_horr=' || REC_CUR_non_recrn_hh_anter.tx_horr || ', vlv_tx_horr=' || vlv_tx_horr,
                        vlv_nm_procd_fonct);
                  -- CHG220439 Fin
               END IF;
            END IF;
            --
            /* Retouche 163
            -- INC00017875 Transmettre le taux horaire si le gain est A015
            vlREC_trans_h620.tx_horr := REC_CUR_non_recrn_hh_anter.tx_horr; */
            /* Début F.Aubin 2015-12-16 : Cette partie semble être inutilisé */
            vlrec_trans_h620.tx_horr := CASE vlv_in_tx_majrt
                                           WHEN 'O' THEN
                                            vlv_tx_horr
                                           ELSE
                                            REC_CUR_non_recrn_hh_anter.tx_horr
                                        END;
            p_log('470 - vlrec_trans_h620.taux horr=' || vlrec_trans_h620.tx_horr || ', vlv_in_tx_majrt=' || vlv_in_tx_majrt ||
                  ', REC_CUR_non_recrn_hh_anter.tx_horr=' || REC_CUR_non_recrn_hh_anter.tx_horr || ', vlrec_trans_h620.tx_mt=' ||
                  vlrec_trans_h620.tx_mt,
                  vlv_nm_procd_fonct);
            /* Fin F.Aubin 2015-12-16 : Cette partie semble être inutilisé */
            --
            -- INC00016333 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
         
            p_log('480 - vlrec_trans_h620.taux horr=' || vlrec_trans_h620.tx_horr || ', vlrec_trans_h620.tx_mt=' || vlrec_trans_h620.tx_mt,
                  vlv_nm_procd_fonct);
            --
            p_log('490- Minst après=' || NVL(vlrec_trans_h620.minst,
                                             '000'),
                  vlv_nm_procd_fonct);
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
         
            p_log('500 - (2) vlv_no_docmn=' || vlv_no_docmn,
                  vlv_nm_procd_fonct);
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
            p_log('Etape 6: no_doc : ' || vlv_no_docmn,
                  vlv_nm_procd_fonct);
            p_log('Etape 6: du : ' || vlrec_trans_h620.dt_perd_paie_du,
                  vlv_nm_procd_fonct);
            p_log('Etape 6: au : ' || vlrec_trans_h620.dt_perd_paie_au,
                  vlv_nm_procd_fonct);
            p_log('Etape 6: afect : ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            p_log('Etape 6: no_doc : ' || vlv_no_docmn,
                  vlv_nm_procd_fonct);
            p_log('Etape 6: no_doc : ' || vlv_no_docmn,
                  vlv_nm_procd_fonct);
            --
            --Incident 70457  Edgar 2014-06-18
            vln_total_unite_mi := 0;
            vln_total_unite_hh := 0;
            vln_grand_total_hh := 0;
            vln_grand_total_mi := 0;
            vln_total_2_semn   := 0;
         
            OPEN CUR_gain_decml(vlrec_trans_h620.cd_gain);
            FETCH CUR_gain_decml
               INTO vln_bidon;
            IF CUR_gain_decml%NOTFOUND THEN
               CLOSE CUR_gain_decml;
               p_log('510 - Pas de gain decimal',
                     vlv_nm_procd_fonct);
            
               IF vlrec_trans_h620.total_unite_1 IS NOT NULL AND
                  vlrec_trans_h620.total_unite_2 IS NOT NULL THEN
                  vln_total_2_semn := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                       -2)) + TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_2,
                                                                               -2));
                  IF (vln_total_2_semn) >= 60 THEN
                     vln_total_2_semn := vln_total_2_semn - 60;
                  END IF;
               
                  IF vln_total_2_semn < TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                         -2)) THEN
                     vln_total_unite_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            -2));
                     vln_total_unite_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            0,
                                                            3));
                     vln_total_unite_mi := vln_total_unite_mi + 1;
                  
                     IF vln_total_unite_mi = 60 THEN
                        vln_total_unite_mi := vln_total_unite_mi - 60;
                        vln_total_unite_hh := vln_total_unite_hh + 1;
                     END IF;
                  
                     vlrec_trans_h620.total_unite_1 := LPAD(TO_CHAR(vln_total_unite_hh),
                                                            3,
                                                            '0') || LPAD(TO_CHAR(vln_total_unite_mi),
                                                                         2,
                                                                         '0');
                  ELSIF vln_total_2_semn > TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2)) THEN
                     vln_grand_total_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2));
                     vln_grand_total_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            0,
                                                            4));
                     vln_grand_total_mi := vln_grand_total_mi + 1;
                  
                     IF vln_grand_total_mi = 60 THEN
                        vln_grand_total_mi := vln_grand_total_mi - 60;
                        vln_grand_total_hh := vln_grand_total_hh + 1;
                     END IF;
                  
                     vlrec_trans_h620.grand_total_unite := LPAD(TO_CHAR(vln_grand_total_hh),
                                                                4,
                                                                '0') || LPAD(TO_CHAR(vln_grand_total_mi),
                                                                             2,
                                                                             '0');
                  END IF;
               END IF;
            ELSE
               CLOSE CUR_gain_decml;
            END IF;
         
            -- CHG217615 Début 2017-01-27
            -- faire la vérification des dates de couverture du gain
            p_chevc_aa_finnc(pd_dt_debut_gain      => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_gain        => vlrec_trans_h620.dt_fin,
                             pd_dt_debut_perd_gain => vlrec_perd_paie_gain.dt_debut,
                             pd_dt_fin_perd_gain   => vlrec_perd_paie_gain.dt_fin,
                             pd_dt_debut_perd_paie => vgrec_perd_paie_varbl.dt_debut,
                             pd_dt_fin_perd_paie   => vgrec_perd_paie_varbl.dt_fin,
                             pv_no_perd            => vgrec_perd_paie_varbl.no_perd,
                             pn_id_afect           => pn_assignment_id,
                             pv_aa_finnc           => vlrec_trans_h620.aa_finnc,
                             pv_in_rempl_dt        => vlv_in_rempl_dt,
                             pd_dt_debut_trans     => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_trans       => vlrec_trans_h620.dt_fin,
                             pv_aa_finnc_trans     => vlrec_trans_h620.aa_finnc);
            -- CHG217615 Fin
         
            p_log('520 - INSERT INTO gir_trans_h620',
                  vlv_nm_procd_fonct);
         
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               (NULL,
                vgd_dt_exect,
                'N',
                NVL(REC_CUR_non_recrn_hh_anter.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_CUR_non_recrn_hh_anter.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_CUR_non_recrn_hh_anter.dt_perd_paie_du,
                REC_CUR_non_recrn_hh_anter.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                -- DDC175592
                vlrec_trans_h620.total_unite_1,
                vlrec_trans_h620.total_unite_2,
                vlrec_trans_h620.grand_total_unite,
                --
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_non_recrn_hh_anter.aa_finnc,
                REC_CUR_non_recrn_hh_anter.minst,
                REC_CUR_non_recrn_hh_anter.budgt,
                REC_CUR_non_recrn_hh_anter.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
         
            p_log('530 - (2) après INSERT, gir_trans_h620.id_trans_h620=' || vln_id_trans,
                  vlv_nm_procd_fonct);
         
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
         
            p_log('540 - (2) avant UPDATE pour FDT non annulé, id_afect=' || REC_CUR_non_recrn_hh_anter.id_afect || ', cd_gain=' ||
                  REC_CUR_non_recrn_hh_anter.cd_gain || ', id_type_elemn=' || REC_CUR_non_recrn_hh_anter.id_type_elemn || ', dt_perd_paie_du=' ||
                  TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_du,
                          'yyyy-mm-dd') || ', dt_perd_paie_au=' || TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_au,
                                                                           'yyyy-mm-dd') || ', tx_horr=' || REC_CUR_non_recrn_hh_anter.tx_horr,
                  vlv_nm_procd_fonct);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
                   -- INC00016333 pour quand le gain change de A010 à A015
                  ,
                   fdt.cd_gain = vlrec_trans_h620.cd_gain
             WHERE fdt.id_afect = REC_CUR_non_recrn_hh_anter.id_afect
               AND fdt.cd_gain = REC_CUR_non_recrn_hh_anter.cd_gain
                  -- INC00017528
               AND NVL(fdt.elemn_type_id,
                       0) = NVL(REC_CUR_non_recrn_hh_anter.id_type_elemn,
                                0)
               AND fdt.dt_perd_paie_du = REC_CUR_non_recrn_hh_anter.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_non_recrn_hh_anter.dt_perd_paie_au
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_non_recrn_hh_anter.aa_finnc
                  -- CHG217615 Fin
               AND fdt.tx_horr = REC_CUR_non_recrn_hh_anter.tx_horr
               AND fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.in_mt_suplm_specl_input = 'N'
               AND fdt.in_mt_rempl_specl_input = 'N'
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                  --AND    fdt.cd_gain                <> 'A030'
               AND NVL(fdt.raisn_3,
                       '!') <> cv_hh_rembr
               AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f           pet,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                       AND pet.element_type_id = rse.element_type_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date AND pet.effective_end_date
                       AND pet.processing_type = 'N')
               AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                           -- INC00016333
                          ,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                       AND pee.element_entry_id = rse.element_entry_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pee.effective_start_date AND pee.effective_end_date
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
               AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
               AND fdt.id_trans IS NULL;
         
            p_log('550 - (2) après UPDATE pour FDT non annulé, NB mis à jour : ' || SQL%ROWCOUNT,
                  vlv_nm_procd_fonct);
         
            p_log('560 - (2) avant UPDATE pour FDT annulé, id_afect=' || REC_CUR_non_recrn_hh_anter.id_afect || ', cd_gain=' ||
                  REC_CUR_non_recrn_hh_anter.cd_gain || ', id_type_elemn=' || REC_CUR_non_recrn_hh_anter.id_type_elemn || ', dt_perd_paie_du=' ||
                  TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_du,
                          'yyyy-mm-dd') || ', dt_perd_paie_au=' || TO_CHAR(REC_CUR_non_recrn_hh_anter.dt_perd_paie_au,
                                                                           'yyyy-mm-dd') || ', tx_horr=' || REC_CUR_non_recrn_hh_anter.tx_horr,
                  vlv_nm_procd_fonct);
            --
            -- 2013-06-06
            -- Il faut mettre le no_docmn pour les fdt annulées aussi pour l'élément en question
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.no_docmn = vlv_no_docmn
             WHERE fdt.id_afect = REC_CUR_non_recrn_hh_anter.id_afect
               AND fdt.cd_gain = REC_CUR_non_recrn_hh_anter.cd_gain
                  -- INC00017528
               AND NVL(fdt.elemn_type_id,
                       0) = NVL(REC_CUR_non_recrn_hh_anter.id_type_elemn,
                                0)
               AND fdt.dt_perd_paie_du = REC_CUR_non_recrn_hh_anter.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_non_recrn_hh_anter.dt_perd_paie_au
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_non_recrn_hh_anter.aa_finnc
                  -- CHG217615 Fin
               AND fdt.tx_horr = REC_CUR_non_recrn_hh_anter.tx_horr
               AND fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'O'
               AND fdt.in_mt_suplm_specl_input = 'N'
               AND fdt.in_mt_rempl_specl_input = 'N'
                  -- INC00016966 et INC00016973 Ne doit pas être un montant supplémentaire qu'on rembourse
                  --AND    fdt.cd_gain                <> 'A030'
               AND NVL(fdt.raisn_3,
                       '!') <> cv_hh_rembr
               AND EXISTS (SELECT 'X'
                      FROM pay_element_types_f           pet,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                       AND pet.element_type_id = rse.element_type_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pet.effective_start_date AND pet.effective_end_date
                       AND pet.processing_type = 'N')
               AND EXISTS (SELECT 'X'
                      FROM pay_element_entries_f pee
                           -- INC00016333
                          ,
                           gir_rh_suivi_entre_elemn_paie rse -- INC-89949
                     WHERE rse.id_contr_fdt = fdt.id_contr_fdt
                       AND pee.element_entry_id = rse.element_entry_id
                       AND TRUNC(rse.new_effective_start_date) BETWEEN pee.effective_start_date AND pee.effective_end_date
                       AND pee.creator_type <> cv_cd_type_creat_pgi
                       AND pee.creator_type <> cv_cd_type_creat_absen)
                  -- INC00017565
               AND EXISTS (SELECT 'X'
                      FROM pay_input_values_f_vl pivv
                     WHERE pivv.element_type_id = fdt.elemn_type_id
                       AND pivv.name = cv_nm_hh
                          -- INC00018212
                       AND ((TRUNC(fdt.dt_perd_paie_au) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_perd_paie_du) BETWEEN pivv.effective_start_date AND pivv.effective_end_date) OR
                           (TRUNC(fdt.dt_gain) BETWEEN pivv.effective_start_date AND pivv.effective_end_date)))
               AND fdt.id_trans IS NULL;
         
            p_log('570 - (2) après UPDATE pour FDT annulé, NB mis à jour : ' || SQL%ROWCOUNT,
                  vlv_nm_procd_fonct);
            --
            p_log('580-  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP non_recrn_hh_anter;
      --
      p_log('590- - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_6.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80392';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_6;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_7:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les éléments non récurrents
   *       avec montant de remplacement.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-05  INC00017154  Gains sans unités
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-07  Retouche 132 (INC00017155) Les date de début et fin doivent être celles du DFF et non celles de la période
   * Michel Dessureault   2013-02-27  INC00017475  Les autres éléments non récurrents qui possèdent une date de début et une date de fin (A015 par exemple--> Ajust sal rég ou indemn) doivent avoir le numéro de période de paie de la carte B = au numéro de la période de paie courante.
   * Edgar  Doiron        2015-11-03  DDC175592
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_7(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_7';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_7';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
      --DDC175592
      vln_sem_2 NUMBER;
   
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les éléments
      -- non récurrents avec montant de remplacement.
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_rempl IS
      --DDC 199119
         SELECT fdt.id_afect       id_afect,
                fdt.elemn_entry_id id_entre_elemn,
                --DDC175592
                (SELECT fdt1.nb_hh_signe
                   FROM gir_rh_fdt fdt1
                  WHERE fdt1.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt1.nm_fiche = 'H620'
                    AND fdt1.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt1.in_trans_anul = 'N'
                       -- Première semaine de la période
                    AND fdt1.dt_gain BETWEEN fdt1.dt_perd_paie_du AND fdt1.dt_perd_paie_du + 6) total_unite_semn_1,
                (SELECT fdt2.nb_hh_signe
                   FROM gir_rh_fdt fdt2
                  WHERE fdt2.elemn_entry_id = fdt.elemn_entry_id
                    AND fdt2.nm_fiche = 'H620'
                    AND fdt2.statu_sagip = cv_statu_sagip_non_trans
                    AND fdt2.in_trans_anul = 'N'
                       -- Deuxième semaine de la période
                    AND fdt2.dt_gain BETWEEN fdt2.dt_perd_paie_au - 6 AND fdt2.dt_perd_paie_au) total_unite_semn_2,
                fdt.nb_hh_signe grand_total_unite,
                fdt.cd_gain cd_gain,
                fdt.dt_debut dt_debut,
                fdt.dt_fin dt_fin,
                fdt.tx_mt_signe tx_mt,
                fdt.dt_perd_paie_du dt_perd_paie_du,
                fdt.dt_perd_paie_au dt_perd_paie_au,
                fdt.cd_paiem cd_paiem,
                fdt.aa_finnc aa_finnc,
                fdt.minst minst,
                fdt.budgt budgt,
                fdt.centr_respn centr_respn,
                fdt.in_mt_rempl_specl_input in_mt_rempl_specl_input,
                fdt.in_mt_suplm_specl_input in_mt_suplm_specl_input
                --INC00017359
               ,
                fdt.id_contr_fdt
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
               -- Indicateur montant remplacement special input à oui
            AND fdt.in_mt_rempl_specl_input = 'O'
               -- Période de paie courante
            AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
            AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
          ORDER BY fdt.id_afect;
      --
   
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM per_time_periods ptp2
                               WHERE ptp2.attribute2 = pv_aa
                               AND   ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<non_recrn_rempl>>
      FOR REC_CUR_non_recrn_rempl IN CUR_non_recrn_rempl LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_non_recrn_rempl.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_non_recrn_rempl.dt_debut;
         --
         IF vln_id_afect <> REC_CUR_non_recrn_rempl.id_afect THEN
            --
            vln_id_afect := REC_CUR_non_recrn_rempl.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('  id_entre_elemn: ' || REC_CUR_non_recrn_rempl.id_entre_elemn,
               vlv_nm_procd_fonct);
         --
         /* retouche 132
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         --
         vld_dt_debut := NVL(REC_CUR_non_recrn_rempl.dt_debut, vgREC_perd_paie_varbl.dt_debut);
         vld_dt_fin   := NVL(REC_CUR_non_recrn_rempl.dt_fin, vgREC_perd_paie_varbl.dt_fin);*/
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
         vld_dt_debut := REC_CUR_non_recrn_rempl.dt_debut;
         vld_dt_fin   := REC_CUR_non_recrn_rempl.dt_fin;
         -- fin retouche 132
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_non_recrn_rempl.cd_gain;
         vlrec_trans_h620.cd_paiem           := REC_CUR_non_recrn_rempl.cd_paiem;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_non_recrn_rempl.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_non_recrn_rempl.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         vlrec_trans_h620.tx_mt              := fv_convr_nb_decml_carct(REC_CUR_non_recrn_rempl.tx_mt);
         --DDC175592
         --INC 204445
         p_split_hh_carra(pv_cd_gain       => vlrec_trans_h620.cd_gain,
                          pn_assignment_id => vln_id_afect,
                          pd_dt_gain       => vlrec_trans_h620.dt_debut,
                          pn_total_semn_1  => REC_CUR_non_recrn_rempl.total_unite_semn_1,
                          pn_total_semn_2  => REC_CUR_non_recrn_rempl.total_unite_semn_2,
                          pn_grand_total   => REC_CUR_non_recrn_rempl.grand_total_unite);
         -- FIN
      
         vlrec_trans_h620.total_unite_1     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_rempl.total_unite_semn_1,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_rempl.total_unite_semn_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_rempl.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
      
         -- CHG200241 Début
         vlrec_perd_paie_gain := NULL;
      
         p_log('15 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vld_dt_gain,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         /*DDC 200241 INC 82025*/
         p_log('DDC 200241 INC 82025 - ETAPE 7',
               vlv_nm_procd_fonct);
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vlrec_trans_h620.dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vlrec_trans_h620.dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- la date de début devient le début de la période du gain
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
               
                  -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                  -- sinon, la date de fin du gain est assignée au lendemain
                  --ELSE
                  --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                  -- INC00103225 Fin
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
            --ELSE
            -- retouche 121
            --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
            --END IF;
            -- INC00103225 Fin
         END IF;
         -- Fin 200241
      
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            --
            p_ajout_rejt(pn_id_afect       => vln_id_afect,
                         pn_id_entre_elemn => REC_CUR_non_recrn_rempl.id_entre_elemn,
                         pn_id_trans       => NULL,
                         pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                         pd_dt_perd_couvr  => vlrec_trans_h620.dt_perd_paie_au,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_no_emplo       => vlrec_persn.no_emplo,
                         pv_cd_gain        => vlrec_trans_h620.cd_gain,
                         pb_jeton          => vlrec_trans_h620.jeton,
                         pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                         pv_va_jeton       => vlrec_trans_h620.cd_gain,
                         pn_id_contr_fdt   => REC_CUR_non_recrn_rempl.id_contr_fdt);
            --DDC 209235
            vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                       'GIR-80398');
            vln_id_entre_elemn  := REC_CUR_non_recrn_rempl.id_entre_elemn;
            vln_id_contr_fdt    := REC_CUR_non_recrn_rempl.id_contr_fdt;
         
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                 vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                              'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                 vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                   'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                 vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
            vlrec_trans_h620.id_afect := vln_id_afect;
            --INC00017475
            vlrec_trans_h620.no_perd     := vgrec_perd_paie_varbl.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_non_recrn_rempl.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_CUR_non_recrn_rempl.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_CUR_non_recrn_rempl.budgt;
            vlrec_trans_h620.centr_respn := REC_CUR_non_recrn_rempl.centr_respn;
            -- fin retouche 126
            --
            -- INC00017154 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
            --DDC175592
            vln_sem_2 := NVL(TO_NUMBER(vlrec_trans_h620.grand_total_unite),
                             0) - NVL(TO_NUMBER(vlrec_trans_h620.total_unite_1),
                                      0);
         
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               (REC_CUR_non_recrn_rempl.id_entre_elemn,
                vgd_dt_exect,
                'N',
                NVL(REC_CUR_non_recrn_rempl.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_CUR_non_recrn_rempl.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_CUR_non_recrn_rempl.dt_perd_paie_du,
                REC_CUR_non_recrn_rempl.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                -- DDC175592
                LPAD(vlrec_trans_h620.total_unite_1,
                     5,
                     '0'),
                LPAD(vln_sem_2,
                     5,
                     '0') /*vlrec_trans_h620.total_unite_2*/,
                LPAD(vlrec_trans_h620.grand_total_unite,
                     6,
                     '0'),
                --
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_non_recrn_rempl.aa_finnc,
                REC_CUR_non_recrn_rempl.minst,
                REC_CUR_non_recrn_rempl.budgt,
                REC_CUR_non_recrn_rempl.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
         
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.elemn_entry_id = REC_CUR_non_recrn_rempl.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP non_recrn_rempl;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_7.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80393';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_7;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_8:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les autres éléments non récurrents
   *       (Nombre d'heures provenant de l'écran des absences).
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-28  INC00016333  Ajouter la mise à jour du code de gain dans fdt
   * Michel Dessureault   2012-12-05  INC00016333  Ajouter les total_unite et grand_total
   * Michel Dessureault   2013-01-22  INC00016972  Afficher/utiliser le taux horaire du changement de corps d'emploi dans le H620.
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-04  Retouche 123 (INC00016964) Selon le code SAGIP, on doit inscrire les heures en « Heure et minute » ou en « Heure centième » dans le formulaire H620
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement d'année financière et de période
   * Michel Dessureault   2013-03-20  INC00017875  Pour les codes de gain, A015, A020, A022, inscrire le Montant à verser par unité pour la période couverte par le gain.
   * Michel Dessureault   2013-04-03  Retouche 163 (INC00017912)  Majoration du taux horaire.
   * Edgar  Doiron        2014-06-19  INC70457     semaine 1 semaine 2 total
   * Edgar  Doiron        2015-11-04  --DDC189924
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger   2016-09-22  INC00107677 - S'assurer que le +1 à la date de fin est fait
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_8(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_8';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_8';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      -- INC00016333
      vld_dt_debut DATE; -- Date de début de la transaction
      vld_dt_fin   DATE; -- Date de fin de la transaction
      vln_semn_1   NUMBER; -- Nombre d'heures de la 1ere semaine
      vln_semn_2   NUMBER; -- Nombre d'heures de la 2e semaine
      -- INC00016972
      vlv_tx_horr gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      -- retouche 126
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      -- retouche 163
      vlv_in_tx_majrt VARCHAR2(1) := 'N'; -- Pour indiquer de majorer le taux horaire
      --incident70457
      vln_total_2_semn   NUMBER;
      vln_bidon          NUMBER;
      vln_grand_total_mi NUMBER;
      vln_grand_total_hh NUMBER;
      vln_total_unite_mi NUMBER;
      vln_total_unite_hh NUMBER;
      --inc72261
      vlv_afect_valide VARCHAR2(1); --N
      --inc 70575
      vlv_paie_trait             VARCHAR2(3); --Oui/Non
      vld_min_effective_start_dt DATE;
      vld_max_effective_end_dt   DATE;
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      --Code de Gain
      CURSOR CUR_gain_decml(cd_gain IN VARCHAR2) IS
         SELECT 1
           FROM fnd_lookup_values_vl flv
          WHERE flv.lookup_type = 'GIR_RH_GAIN_DECML'
            AND flv.lookup_code = cd_gain;
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les autres éléments
      -- non récurrents (Nombre d'heures provenant de l'écran des absences).
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_hh_absen IS
      --DDC 199119
         SELECT fdt.id_afect        id_afect,
                fdt.elemn_entry_id  id_entre_elemn,
                fdt.cd_gain         cd_gain,
                fdt.dt_debut        dt_debut,
                fdt.dt_fin          dt_fin,
                fdt.tx_mt_signe     tx_mt,
                fdt.tx_horr         tx_horr,
                fdt.dt_perd_paie_du dt_perd_paie_du,
                fdt.dt_perd_paie_au dt_perd_paie_au,
                fdt.cd_paiem        cd_paiem
                --INC00017359
               ,
                fdt.id_contr_fdt
                -- retouche 126
               ,
                fdt.dt_gain                 dt_gain,
                fdt.aa_finnc                aa_finnc,
                fdt.minst                   minst,
                fdt.budgt                   budgt,
                fdt.centr_respn             centr_respn,
                fdt.in_mt_rempl_specl_input in_mt_rempl_specl_input,
                fdt.in_mt_suplm_specl_input in_mt_suplm_specl_input
                -- INC00016333
               ,
                CASE
                   WHEN (fdt.dt_gain < fdt.dt_perd_paie_du + 7) THEN
                    fdt.nb_hh_signe
                   ELSE
                    NULL
                END total_unite_semn_1,
                CASE
                   WHEN (fdt.dt_gain > fdt.dt_perd_paie_au - 7) THEN
                    fdt.nb_hh_signe
                   ELSE
                    NULL
                END total_unite_semn_2,
                fdt.nb_hh_signe grand_total_unite
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND EXISTS (SELECT 'X'
                   FROM pay_element_entries_f pee
                  WHERE pee.element_entry_id = fdt.elemn_entry_id
                    AND TRUNC(fdt.dt_gain) BETWEEN pee.effective_start_date AND pee.effective_end_date
                    AND pee.creator_type = cv_cd_type_creat_absen)
          ORDER BY fdt.id_afect;
      --
      --INC72261
      CURSOR CUR_afect_valide(pn_assignment_id IN NUMBER) IS
         SELECT 'N'
           FROM xxgir_rh_afect_tempr rat
          WHERE rat.id_afect = pn_assignment_id
               -- affectation ce termine avant la date de début de la périod
            AND rat.dt_fin < vgrec_perd_paie_varbl.dt_debut
            AND rat.in_type_paie = cv_id_type_paie_varbl;
      --INC70575
      CURSOR CUR_paie_perd_trait(pv_aa            IN VARCHAR2,
                                 pv_perd          IN VARCHAR2,
                                 pn_assignment_id IN NUMBER) IS
         SELECT 'X'
           FROM per_bf_payroll_runs pbpr
           JOIN per_bf_processed_assignments pbpa
             ON pbpa.payroll_run_id = pbpr.payroll_run_id
          WHERE pbpa.assignment_id IN (SELECT DISTINCT paa1.assignment_id
                                         FROM per_all_assignments_f paa1
                                        WHERE paa1.person_id = (SELECT DISTINCT paa2.person_id
                                                                  FROM per_all_assignments_f paa2
                                                                 WHERE paa2.assignment_id = pn_assignment_id)) --id_afect
               --INC 82813
            AND CASE
                   WHEN TO_NUMBER(pv_perd) >= 21 THEN
                    '2015'
                   ELSE
                    pv_aa --aa
                END = pbpr.bpr_attribute1
               --
            AND pbpr.bpr_attribute2 = pv_perd --perd
            AND pbpr.payroll_id = 62; --Paie Variable;
   
      --DDC189924
      CURSOR CUR_trans_acept(pd_dt_debut IN DATE,
                             pd_dt_fin   IN DATE,
                             pd_id_afect IN NUMBER) IS
         SELECT 'X'
           FROM gir_trans_h620 h620
           JOIN gir_rh_fdt fdt
             ON (fdt.nm_fiche = 'H620' AND fdt.id_trans = h620.id_trans_h620)
          WHERE h620.statu_trans = 'A'
            AND h620.in_trans_anul = 'N'
               --AND pd_dt_debut = h620.perd_paie_varbl_du
               --AND pd_dt_fin   = h620.perd_paie_varbl_au
               -- F.Aubin 2015-11-18
            AND pd_dt_debut BETWEEN h620.perd_paie_varbl_du AND h620.perd_paie_varbl_au
            AND pd_dt_fin BETWEEN h620.perd_paie_varbl_du AND h620.perd_paie_varbl_au
            AND h620.perd_paie_varbl_du = vlrec_perd_paie_gain.dt_debut
            AND h620.perd_paie_varbl_au = vlrec_perd_paie_gain.dt_fin
               -- Fin F.Aubin 2015-11-18
            AND TRUNC(fdt.dt_statu_sagip) < TRUNC(vgrec_perd_paie_varbl.dt_du_achem)
            AND h620.id_afect = pd_id_afect; -- Ajout F.Aubin 2015-11-18
   
      CURSOR CUR_afect_effective_start_dt(pn_assignment_id IN NUMBER) IS
         SELECT MIN(effective_start_date) min_effective_start_date
           FROM per_all_assignments_f paaf
          WHERE paaf.assignment_id = pn_assignment_id;
      CURSOR CUR_afect_effective_end_dt(pn_assignment_id IN NUMBER) IS
         SELECT MAX(effective_end_date) max_effective_end_date
           FROM per_all_assignments_f paaf
          WHERE paaf.assignment_id = pn_assignment_id;
   
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM per_time_periods ptp2
                               WHERE ptp2.attribute2 = pv_aa
                               AND   ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<non_recrn_hh_absen>>
      FOR REC_CUR_non_recrn_hh_absen IN CUR_non_recrn_hh_absen LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         --DDC 209235
         vgv_id_entre_elemn := REC_CUR_non_recrn_hh_absen.id_entre_elemn; -- INC00106352 : toujours avoir le id_entre_elemn lorsque possible.
         vld_dt_gain        := REC_CUR_non_recrn_hh_absen.dt_gain; -- INC00106352 : toujours avoir le id_trans_h620 lorsque possible.
      
         --
         IF vln_id_afect <> REC_CUR_non_recrn_hh_absen.id_afect THEN
            --
            vln_id_afect := REC_CUR_non_recrn_hh_absen.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('  id_entre_elemn: ' || REC_CUR_non_recrn_hh_absen.id_entre_elemn,
               vlv_nm_procd_fonct);
         --
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
         --
         vld_dt_debut := NVL(REC_CUR_non_recrn_hh_absen.dt_debut,
                             vgrec_perd_paie_varbl.dt_debut);
         vld_dt_fin   := NVL(REC_CUR_non_recrn_hh_absen.dt_fin,
                             vgrec_perd_paie_varbl.dt_fin);
         --
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_non_recrn_hh_absen.cd_gain;
         vlrec_trans_h620.cd_paiem           := REC_CUR_non_recrn_hh_absen.cd_paiem;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_non_recrn_hh_absen.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_non_recrn_hh_absen.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         --
         -- INC00016972
         /*
         IF REC_CUR_non_recrn_hh_absen.tx_horr IS NOT NULL THEN
            vlREC_trans_h620.tx_mt           := REC_CUR_non_recrn_hh_absen.tx_horr;
         ELSE
            vlREC_trans_h620.tx_mt           := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh_absen.tx_mt);
         END IF;
         */
         --
         -- retouche 163
         --
         vlv_in_tx_majrt := 'N';
         --
         -- Puisque le code A015 est pour des A010 dans l'année financière précédente
         -- et qu'on a fait la substitution lors de la création de la liste 6_10
         -- on n'a qu'à vérifier si le code est A015 pour appliquer la majoration du taux horaire
         --
         IF vlrec_trans_h620.cd_gain = 'A015' OR
            vlrec_trans_h620.cd_gain = 'A010' OR
            vlrec_trans_h620.cd_gain = 'A029' THEN
            --
            vlv_in_tx_majrt := 'O';
            --
         END IF;
         -- fin retouche 163
         --
         vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                 pd_dt_efect => vld_dt_fin
                                                                 -- retouche 163
                                                                ,
                                                                 pv_in_tx_majrt => vlv_in_tx_majrt));
         --
         IF REC_CUR_non_recrn_hh_absen.tx_horr = vlv_tx_horr THEN
            vlrec_trans_h620.tx_mt := NULL;
         ELSE
            vlrec_trans_h620.tx_mt := CASE vlv_in_tx_majrt
                                         WHEN 'O' THEN
                                          vlv_tx_horr
                                         ELSE
                                          REC_CUR_non_recrn_hh_absen.tx_horr
                                      END;
         END IF;
         --
         --INC72261
         vlv_afect_valide := NULL;
         OPEN CUR_afect_valide(vln_id_afect);
         FETCH CUR_afect_valide
            INTO vlv_afect_valide;
         CLOSE CUR_afect_valide;
         IF vlv_afect_valide = 'N' THEN
            --INC72261
            --vlREC_trans_h620.tx_mt           := REC_CUR_non_recrn_hh_absen.tx_horr;
            vlrec_trans_h620.tx_mt := vlv_tx_horr;
         END IF;
         --
         vlrec_trans_h620.nb_hh := REC_CUR_non_recrn_hh_absen.grand_total_unite;
         --
         -- INC00016333
         vln_semn_1 := REC_CUR_non_recrn_hh_absen.total_unite_semn_1;
         vln_semn_2 := REC_CUR_non_recrn_hh_absen.total_unite_semn_2;
         IF NVL(vln_semn_1,
                0) > cn_nb_hh_max_semn THEN
            vln_semn_1 := vln_semn_1 / 2;
            vln_semn_2 := vln_semn_1;
         END IF;
         /* Retouche 123
         vlREC_trans_h620.total_unite_1      := Fv_convr_nb_decml_carct(vln_semn_1);
         vlREC_trans_h620.total_unite_2      := Fv_convr_nb_decml_carct(vln_semn_2);
         vlREC_trans_h620.grand_total_unite  := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh_absen.grand_total_unite);*/
         vlrec_trans_h620.total_unite_1     := fv_inscr_hh_mint_centm(pn_nb_hh         => vln_semn_1,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => vln_semn_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh_absen.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         -- fin retouche 123
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
      
         -- INC00107677 Début
         -- Le +1 à la date de fin doit demeurer
         IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
         END IF;
         -- INC00107677 Fin
      
         -- Début CHG200241 Geneviève Bélanger
         -- Obtenir la période du gain
         vlrec_perd_paie_gain := NULL;
      
         p_log('15.00 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vlrec_trans_h620.dt_debut,
                                prec_perd_paie  => vlrec_perd_paie_gain);
         -- Fin CHG200241
      
         -- DDC 200241 INC 82025
         p_log('DDC 200241 INC 82025 - ETAPE 8',
               vlv_nm_procd_fonct);
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vld_dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.05 vld_dt_fin = ' || TO_CHAR(vld_dt_fin,
                                                   'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vld_dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- la date de début devient le début de la période du gain
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
                  vlrec_trans_h620.dt_fin   := vld_dt_fin; -- INC00107677 ne pas faire +1 ici
               
                  -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                  -- sinon, la date de fin du gain est assignée au lendemain
                  --ELSE
                  --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                  -- INC00103225 Fin
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
            --ELSE
            -- retouche 121
            --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
            --END IF;
            -- INC00103225 Fin
         END IF;
         -- Fin 200241
      
         --
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            --
            p_ajout_rejt(pn_id_afect       => vln_id_afect,
                         pn_id_entre_elemn => REC_CUR_non_recrn_hh_absen.id_entre_elemn,
                         pn_id_trans       => NULL,
                         pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                         pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                         pv_nm_procd       => vlv_nm_procd_fonct,
                         pv_no_emplo       => vlrec_persn.no_emplo,
                         pv_cd_gain        => vlrec_trans_h620.cd_gain,
                         pb_jeton          => vlrec_trans_h620.jeton,
                         pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                         pv_va_jeton       => vlrec_trans_h620.cd_gain,
                         pn_id_contr_fdt   => REC_CUR_non_recrn_hh_absen.id_contr_fdt);
            --DDC 209235
            vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                       'GIR-80398');
            vln_id_entre_elemn  := REC_CUR_non_recrn_hh_absen.id_entre_elemn;
            vln_id_contr_fdt    := REC_CUR_non_recrn_hh_absen.id_contr_fdt;
            --"TOKEN1:VALUE1;TOKEN2:VALUE2"
            -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
            vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                 ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                 vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                              'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                 vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                   'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                 vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
            vlv_de_mesg_techn := NULL;
            vlv_nm_procd      := vlv_nm_procd;
         
            p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                           pv_token_value     => vlv_token_value,
                           pn_id_demnd        => vgn_id_demnd,
                           pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                           pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                           pv_nm_procd        => vlv_nm_procd,
                           pv_de_mesg_techn   => vlv_de_mesg_techn);
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
            --retouche 126
            --
            vlrec_perd_paie_gain := NULL;
            --
            p_log('15 - Appel de la procédure P_obten_perd_paie_gain.',
                  vlv_nm_procd_fonct);
            --
            p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                   pd_dt_gain      => REC_CUR_non_recrn_hh_absen.dt_gain,
                                   prec_perd_paie  => vlrec_perd_paie_gain);
            --
            vlrec_trans_h620.id_afect    := vln_id_afect;
            vlrec_trans_h620.no_perd     := vlrec_perd_paie_gain.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_non_recrn_hh_absen.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_CUR_non_recrn_hh_absen.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_CUR_non_recrn_hh_absen.budgt;
            vlrec_trans_h620.centr_respn := REC_CUR_non_recrn_hh_absen.centr_respn;
            -- fin retouche 126
            vlv_paie_trait := NULL;
            --INC70575--
            --DDC189924 remplacer le curseur suivant
            /*OPEN CUR_paie_perd_trait(REC_CUR_non_recrn_hh_absen.aa_finnc,
                                     vlrec_perd_paie_gain.no_perd,
                                     vln_id_afect);
            FETCH CUR_paie_perd_trait
               INTO vlv_paie_trait;
            CLOSE CUR_paie_perd_trait;*/
            --DDC189924 nouveau curseur
            OPEN CUR_trans_acept(REC_CUR_non_recrn_hh_absen.dt_perd_paie_du,
                                 REC_CUR_non_recrn_hh_absen.dt_perd_paie_au,
                                 vlrec_trans_h620.id_afect);
            FETCH CUR_trans_acept
               INTO vlv_paie_trait;
            CLOSE CUR_trans_acept;
         
            IF vlv_paie_trait = 'X' THEN
               -- Paie déja passé
               --Lorsque l'employé a déjà une paie pour la période de paie
               --antérieure en traitement, la période de paie  est remplacée
               --par la période de paie courante.
               vlrec_trans_h620.no_perd         := vgrec_perd_paie_varbl.no_perd;
               vlrec_trans_h620.dt_perd_paie_du := vgrec_perd_paie_varbl.dt_debut;
               vlrec_trans_h620.dt_perd_paie_au := vgrec_perd_paie_varbl.dt_fin;
               vlrec_trans_h620.tx_mt           := vlv_tx_horr;
               --Si A010 ou A014 on doit calculer la date de début du gain et de fain.
               IF vlrec_trans_h620.cd_gain IN ('A010',
                                               'A014') THEN
                  OPEN CUR_afect_effective_start_dt(vln_id_afect);
                  FETCH CUR_afect_effective_start_dt
                     INTO vld_min_effective_start_dt;
                  CLOSE CUR_afect_effective_start_dt;
                  vlrec_trans_h620.dt_debut := GREATEST(vgrec_perd_paie_varbl.dt_debut,
                                                        vld_min_effective_start_dt);
                  OPEN CUR_afect_effective_end_dt(vln_id_afect);
                  FETCH CUR_afect_effective_end_dt
                     INTO vld_max_effective_end_dt;
                  CLOSE CUR_afect_effective_end_dt;
                  vlrec_trans_h620.dt_fin := LEAST(vgrec_perd_paie_varbl.dt_fin,
                                                   vld_max_effective_end_dt,
                                                   NVL(vgd_dt_least,
                                                       HR_GENERAL.END_OF_TIME));
                  IF vlrec_trans_h620.dt_fin < vgrec_perd_paie_varbl.dt_debut THEN
                     vlrec_trans_h620.dt_fin := vgrec_perd_paie_varbl.dt_fin;
                  END IF;
               END IF;
            END IF;
            --
            /* Retouche 163
            -- INC00017875 Transmettre le taux horaire si le gain est A015
            vlREC_trans_h620.tx_horr := REC_CUR_non_recrn_hh_absen.tx_horr; */
            vlrec_trans_h620.tx_horr := CASE vlv_in_tx_majrt
                                           WHEN 'O' THEN
                                            vlv_tx_horr
                                           ELSE
                                            REC_CUR_non_recrn_hh_absen.tx_horr
                                        END;
            --
            -- INC00016333 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
            --Incident 70457  Edgar 2014-06-18
            vln_total_unite_mi := 0;
            vln_total_unite_hh := 0;
            vln_grand_total_hh := 0;
            vln_grand_total_mi := 0;
            vln_total_2_semn   := 0;
            OPEN CUR_gain_decml(vlrec_trans_h620.cd_gain);
            FETCH CUR_gain_decml
               INTO vln_bidon;
            IF CUR_gain_decml%NOTFOUND THEN
               CLOSE CUR_gain_decml;
               IF vlrec_trans_h620.total_unite_1 IS NOT NULL AND
                  vlrec_trans_h620.total_unite_2 IS NOT NULL THEN
                  vln_total_2_semn := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                       -2)) + TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_2,
                                                                               -2));
                  IF (vln_total_2_semn) >= 60 THEN
                     vln_total_2_semn := vln_total_2_semn - 60;
                  END IF;
                  IF vln_total_2_semn < TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                         -2)) THEN
                     vln_total_unite_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            -2));
                     vln_total_unite_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            0,
                                                            3));
                     vln_total_unite_mi := vln_total_unite_mi + 1;
                     IF vln_total_unite_mi = 60 THEN
                        vln_total_unite_mi := vln_total_unite_mi - 60;
                        vln_total_unite_hh := vln_total_unite_hh + 1;
                     END IF;
                     vlrec_trans_h620.total_unite_1 := LPAD(TO_CHAR(vln_total_unite_hh),
                                                            3,
                                                            '0') || LPAD(TO_CHAR(vln_total_unite_mi),
                                                                         2,
                                                                         '0');
                  ELSIF vln_total_2_semn > TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2)) THEN
                     vln_grand_total_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2));
                     vln_grand_total_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            0,
                                                            4));
                     vln_grand_total_mi := vln_grand_total_mi + 1;
                     IF vln_grand_total_mi = 60 THEN
                        vln_grand_total_mi := vln_grand_total_mi - 60;
                        vln_grand_total_hh := vln_grand_total_hh + 1;
                     END IF;
                     vlrec_trans_h620.grand_total_unite := LPAD(TO_CHAR(vln_grand_total_hh),
                                                                4,
                                                                '0') || LPAD(TO_CHAR(vln_grand_total_mi),
                                                                             2,
                                                                             '0');
                  END IF;
               END IF;
            ELSE
               CLOSE CUR_gain_decml;
            END IF;
         
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               (REC_CUR_non_recrn_hh_absen.id_entre_elemn,
                vgd_dt_exect,
                'N',
                NVL(REC_CUR_non_recrn_hh_absen.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_CUR_non_recrn_hh_absen.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_CUR_non_recrn_hh_absen.dt_perd_paie_du,
                REC_CUR_non_recrn_hh_absen.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                vlrec_trans_h620.total_unite_1,
                vlrec_trans_h620.total_unite_2,
                vlrec_trans_h620.grand_total_unite,
                'B',
                /* retouche 126
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_non_recrn_hh_absen.aa_finnc,
                REC_CUR_non_recrn_hh_absen.minst,
                REC_CUR_non_recrn_hh_absen.budgt,
                REC_CUR_non_recrn_hh_absen.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans
                   -- INC00016333 pour quand le gain change de A010 à A015
                  ,
                   fdt.cd_gain = vlrec_trans_h620.cd_gain
             WHERE fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.elemn_entry_id = REC_CUR_non_recrn_hh_absen.id_entre_elemn
               AND fdt.id_trans IS NULL;
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP non_recrn_hh_absen;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_8.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80394';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM || ' - Employé : ' || vgv_no_emplo;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_8;

   --
   -- ============================================================================
   -- P_creer_trans_h620_etape_9:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H620 pour les autres éléments non récurrents
   *       (Nombre d'heures supplémentaires à rembourser).
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2013-01-15  Création
   * Michel Dessureault   2013-01-31  INC00016966 et INC00016973 On corrige comment on traite le supplémentaire
   * Michel Dessureault   2013-01-31  Retouche 121 (INC00016980) Corriger la date de fin dans la H620
   * Michel Dessureault   2013-02-04  Retouche 123 (INC00016964) Selon le code SAGIP, on doit inscrire les heures en « Heure et minute » ou en « Heure centième » dans le formulaire H620
   * Michel Dessureault   2013-02-05  INC00017167  Le champ "Taux ou Montant" de la H620 doit être laissé À BLANC quand la valeur est zéro.
   * Michel Dessureault   2013-02-27  INC00017475  Les autres éléments non récurrents qui possèdent une date de début et une date de fin (A015 par exemple--> Ajust sal rég ou indemn) doivent avoir le numéro de période de paie de la carte B = au numéro de la période de paie courante.
   * Michel Dessureault   2013-02-27  INC00017359  Les colonnes "Élément", "Date de saisie du gain", Semaine de Saisie du gain",  ne contiennent pas tous les renseignements relatifs à chaque élément.
   * Michel Dessureault   2013-03-19  Retouche 169 Ajout des Heures supplémentaires résiduelles et intermédiaires
   * Edgar  Doiron        2014-06-19  INC70457     semaine 1 semaine 2 total
   * Geneviève Bélanger   2016-02-24  CHG200241 Si un gain est saisi la dernière journée de l'année
   *                                  civile, ne pas appliquer un (+1) à la date de fin du gain
   * Geneviève Bélanger   2016-05-11  INC00103222/INC00103225 - modifier la façon de vérifier si c'est la dernière journée de l'année civile
   * Geneviève Bélanger   2016-09-01  CHG217124 Si une erreur survient, ne pas inscrire id_trans, id_contr_fdt et no_docmn
   *                                  dans la table des rejets/erreurs
   * Geneviève Bélanger   2016-09-09  INC00107268 - Ajouter le jeton CD_GAIN aux descriptions de messages à inscrire dans la nouvelle table
   * Geneviève Bélanger   2017-01-23  CHG217615 - Séparer les transactions H620 qui chevauchent l'année financière
   *************************************************************************/
   PROCEDURE p_creer_trans_h620_etape_9(pn_assignment_id   IN NUMBER,
                                        pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                        pv_token_value     OUT NOCOPY VARCHAR2,
                                        pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                        pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h620_etape_9';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h620_etape_9';
      vlv_type_trans VARCHAR2(10) := vgv_type_trans;
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn  NUMBER;
      vlv_code_erreur_gir VARCHAR2(20);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      --
      vlrec_persn      type_rec_persn; -- Infos de la personne
      vlrec_statu      type_rec_statu; -- Infos de l'affectation
      vlrec_trans_h620 type_rec_trans_h620; -- Enregistrement H620 à valider
      vln_id_afect     NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn     gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans     NUMBER; -- Identifiant de la transaction
      vld_dt_debut     DATE; -- Date de début de la transaction
      vld_dt_fin       DATE; -- Date de fin de la transaction
      vlv_tx_horr      gir_rh_fdt.tx_horr%TYPE; -- Taux horaire en date du gain
      vln_semn_1       NUMBER; -- Nombre d'heures de la 1ere semaine
      vln_semn_2       NUMBER; -- Nombre d'heures de la 2e semaine
      --incident70457
      vln_total_2_semn   NUMBER;
      vln_bidon          NUMBER;
      vln_grand_total_mi NUMBER;
      vln_grand_total_hh NUMBER;
      vln_total_unite_mi NUMBER;
      vln_total_unite_hh NUMBER;
      --inc72261
      vlv_afect_valide VARCHAR2(1); --N
      vlv_in_rempl_dt  VARCHAR2(1); -- CHG217615
   
      vlrec_perd_paie_gain type_rec_plage; -- Pour aller chercher la période de paie du gain
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      --Code de Gain
      CURSOR CUR_gain_decml(cd_gain IN VARCHAR2) IS
         SELECT 1
           FROM fnd_lookup_values_vl flv
          WHERE flv.lookup_type = 'GIR_RH_GAIN_DECML'
            AND flv.lookup_code = cd_gain;
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les autres éléments
      -- non récurrents (Nombre d'heures à rembourser).
      ----------------------------------------------------------------------
      CURSOR CUR_non_recrn_hh IS
         SELECT fdt.id_afect id_afect,
                fdt.cd_gain  cd_gain,
                fdt.tx_horr  tx_horr
                -- Date de début de la période couverte
               ,
                MIN(fdt.dt_gain) dt_debut
                -- Date de fin de la période couverte
               ,
                MAX(fdt.dt_gain) dt_fin,
                MAX(fdt.dt_perd_paie_du) dt_perd_paie_du,
                MAX(fdt.dt_perd_paie_au) dt_perd_paie_au
                -- Taux payé
               ,
                MAX(fdt.tx_mt_signe) tx_mt
                -- Somme des 14 jours de la période de paie
               ,
                SUM(fdt.nb_hh_signe) grand_total_unite,
                MAX(fdt.aa_finnc) aa_finnc,
                MAX(fdt.minst) minst,
                MAX(fdt.budgt) budgt,
                MAX(fdt.centr_respn) centr_respn,
                MAX(fdt.in_mt_rempl_specl_input) in_mt_rempl_specl_input,
                MAX(fdt.in_mt_suplm_specl_input) in_mt_suplm_specl_input
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H620'
               --DDC 209235 par employé (=assignment_id)
            AND fdt.id_afect = pn_assignment_id
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
            AND fdt.in_mt_suplm_specl_input = 'N'
            AND fdt.in_mt_rempl_specl_input = 'N'
               -- Remboursement pour la période courante seulement
            AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
            AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
               -- INC00016966 et INC00016973 Doit être un montant supplémentaire qu'on rembourse
            AND NVL(fdt.raisn_3,
                    '!') = cv_hh_rembr
          GROUP BY fdt.id_afect,
                   fdt.cd_gain,
                   fdt.tx_horr,
                   -- INC00103225 Début 2016-09-19 pour grouper par période de paie
                   fdt.dt_perd_paie_du,
                   fdt.dt_perd_paie_au,
                   -- INC00103225 Fin
                   fdt.aa_finnc -- CHG217615 2017-01-23 grouper par aa_finnc
          ORDER BY fdt.id_afect;
      --
      --INC00017359
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les identifiants entrée elément
      ----------------------------------------------------------------------
      CURSOR CUR_id_entre_elemn(pn_id_afect IN NUMBER,
                                pv_cd_gain  IN VARCHAR2,
                                pv_tx_horr  IN VARCHAR2) IS
         SELECT rse.element_entry_id id_entre_elemn,
                rse.id_contr_fdt
           FROM gir_rh_suivi_entre_elemn_paie rse -- INC-89949
          WHERE rse.assignment_id = pn_id_afect
            AND rse.id_contr_fdt IN (SELECT fdt.id_contr_fdt
                                       FROM gir_rh_fdt fdt
                                      WHERE fdt.id_afect = pn_id_afect
                                        AND fdt.cd_gain = pv_cd_gain
                                        AND fdt.tx_horr = pv_tx_horr
                                        AND fdt.dt_gain = vgrec_perd_paie_varbl.dt_debut
                                        AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                                        AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                                        AND fdt.nm_fiche = 'H620'
                                        AND fdt.statu_sagip = cv_statu_sagip_non_trans
                                        AND fdt.in_trans_anul = 'N'
                                        AND fdt.in_mt_suplm_specl_input = 'N'
                                        AND fdt.in_mt_rempl_specl_input = 'N'
                                        AND NVL(fdt.raisn_3,
                                                '!') = cv_hh_rembr)
          GROUP BY rse.element_entry_id,
                   rse.id_contr_fdt;
      --
      --INC72261
      CURSOR CUR_afect_valide(pn_assignment_id IN NUMBER) IS
         SELECT 'N'
           FROM xxgir_rh_afect_tempr rat
          WHERE rat.id_afect = pn_assignment_id
               -- affectation ce termine avant la date de début de la périod
            AND rat.dt_fin < vgrec_perd_paie_varbl.dt_debut
            AND rat.in_type_paie = cv_id_type_paie_varbl;
   
      /*DDC 200241 INC 82025*/
      CURSOR CUR_cd_gain(pv_nm_table_consl IN VARCHAR2,
                         pv_cd_gain        IN VARCHAR2,
                         pd_dt_debut       IN DATE,
                         pd_dt_fin         IN DATE) IS
         SELECT 'X'
           FROM fnd_lookup_values flv
          WHERE flv.enabled_flag = 'Y'
            AND flv.language = 'FRC'
            AND flv.lookup_type = pv_nm_table_consl
            AND flv.lookup_code = pv_cd_gain
            AND flv.start_date_active <= pd_dt_fin
            AND NVL(flv.end_date_active,
                    pd_dt_debut) >= pd_dt_debut;
   
      vlv_exist        VARCHAR2(1);
      vln_retr_aa_civl NUMBER(1);
      --vln_max_perd         NUMBER;
      --vld_dt_fin_perd      DATE;
   
      CURSOR CUR_dern_perd_aa_civl(pdt_debut_gain IN DATE) IS
      -- Correction curseur INC00103222/INC00103225 2016-05-11
         SELECT 1
           FROM per_time_periods ptp
          WHERE pdt_debut_gain = ptp.end_date
            AND ptp.payroll_id = 62
            AND ptp.period_num = (SELECT MAX(ptp2.period_num)
                                    FROM per_time_periods ptp2
                                   WHERE ptp2.attribute2 = ptp.attribute2
                                     AND ptp2.payroll_id = 62);
      /*SELECT MAX(TO_NUMBER(ptp.attribute3)),
             ptp.end_date
      FROM   per_time_periods ptp
      WHERE  ptp.attribute2 = pv_aa
      AND    ptp.payroll_id = 62--paie variable
      AND    ptp.period_num = (SELECT MAX(ptp2.period_num)
                               FROM   per_time_periods ptp2
                               WHERE  ptp2.attribute2 = pv_aa
                               AND    ptp2.payroll_id = 62)
      GROUP BY ptp.end_date;*/
      -- Fin INC00103222/INC00103225
   BEGIN
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect       := 0;
      vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
      --
      <<non_recrn_hh>>
      FOR REC_CUR_non_recrn_hh IN CUR_non_recrn_hh LOOP
         --
         vlrec_trans_h620 := NULL;
         --
         IF vln_id_afect <> REC_CUR_non_recrn_hh.id_afect THEN
            --
            vln_id_afect := REC_CUR_non_recrn_hh.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_obten_statu_afect(pn_id_afect => vln_id_afect,
                                pd_perd_fin => vgrec_perd_paie_varbl.dt_fin,
                                prec_statu  => vlrec_statu);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
         p_log('  cd_gain: ' || REC_CUR_non_recrn_hh.cd_gain,
               vlv_nm_procd_fonct);
         --
         -- INC00016333
         -- La date de fin doit être plus grande que la date de début pour être acceptée par SAGIP
      
         -- CHG217615 Début 2017-01-27
         -- si la date est remplacée par la période de paie, assigner un indicateur
         --vld_dt_debut := NVL(REC_CUR_non_recrn_hh.dt_debut,
         --                    vgrec_perd_paie_varbl.dt_debut);
         --vld_dt_fin   := NVL(REC_CUR_non_recrn_hh.dt_fin,
         --                    vgrec_perd_paie_varbl.dt_fin);
      
         vlv_in_rempl_dt := 'N';
      
         IF REC_CUR_non_recrn_hh.dt_debut IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_debut    := vgrec_perd_paie_varbl.dt_debut;
         ELSE
            vld_dt_debut := REC_CUR_non_recrn_hh.dt_debut;
         END IF;
      
         IF REC_CUR_non_recrn_hh.dt_fin IS NULL THEN
            vlv_in_rempl_dt := 'O';
            vld_dt_fin      := vgrec_perd_paie_varbl.dt_fin;
         ELSE
            vld_dt_fin := REC_CUR_non_recrn_hh.dt_fin;
         END IF;
      
         p_log('12 - vlv_in_rempl_dt=' || vlv_in_rempl_dt,
               vlv_nm_procd_fonct);
         -- CHG217615 Fin
      
         /* retouche 121
         IF vld_dt_fin = vld_dt_debut THEN
            vld_dt_fin := vld_dt_fin + 1;
         END IF;*/
         --
         -- fin INC00016333
         --
      
         vlrec_trans_h620.dt_debut := vld_dt_debut;
         --DDC 209235
         vld_dt_gain := vld_dt_debut;
         --
         vlrec_trans_h620.dt_fin             := vld_dt_fin;
         vlrec_trans_h620.cd_gain            := REC_CUR_non_recrn_hh.cd_gain;
         vlrec_trans_h620.cd_paiem           := NULL;
         vlrec_trans_h620.dt_perd_paie_du    := REC_CUR_non_recrn_hh.dt_perd_paie_du;
         vlrec_trans_h620.dt_perd_paie_au    := REC_CUR_non_recrn_hh.dt_perd_paie_au;
         vlrec_trans_h620.dt_debut_termn     := vlrec_statu.paf_dt_debut_efect;
         vlrec_trans_h620.dt_fin_prevu_contr := vlrec_statu.dt_fin_prevu_contr;
         vlrec_trans_h620.dt_statu_afect     := vlrec_statu.paf_dt_fin_efect;
         vlrec_trans_h620.statu_afect        := vlrec_statu.statu_afect;
         --
         /*DDC 239545*/
         -- Si le taus horaire est identique èa celui en cours, on ne le transmet pas à SAGIP
         --
         /*
         vlv_tx_horr := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                 pd_dt_efect => vld_dt_fin));
         --
         IF REC_CUR_non_recrn_hh.tx_horr = vlv_tx_horr THEN
            vlrec_trans_h620.tx_mt := NULL;
         ELSE
            vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh.tx_horr;
         END IF;*/
         -- On transmet toujours le taux en date du jour.
         vlrec_trans_h620.tx_mt := fv_convr_nb_decml_carct(fn_obten_tx_horr(pn_id_afect => vln_id_afect,
                                                                            pd_dt_efect => vgd_dt_exect));
         --
      
         --INC72261
         vlv_afect_valide := NULL;
         OPEN CUR_afect_valide(vln_id_afect);
         FETCH CUR_afect_valide
            INTO vlv_afect_valide;
         CLOSE CUR_afect_valide;
         IF vlv_afect_valide = 'N' THEN
            vlrec_trans_h620.tx_mt := REC_CUR_non_recrn_hh.tx_horr;
         END IF;
         --
         --
         -- On ne doit pas transmettre plus de 70 heures par semaine
         --
         vlrec_trans_h620.nb_hh := REC_CUR_non_recrn_hh.grand_total_unite;
         vln_semn_1             := vlrec_trans_h620.nb_hh;
         vln_semn_2             := NULL;
         IF NVL(vln_semn_1,
                0) > cn_nb_hh_max_semn THEN
            vln_semn_1 := vln_semn_1 / 2;
            vln_semn_2 := vln_semn_1;
         END IF;
         /* Retouche 123
         vlREC_trans_h620.total_unite_1      := Fv_convr_nb_decml_carct(vln_semn_1);
         vlREC_trans_h620.total_unite_2      := Fv_convr_nb_decml_carct(vln_semn_2);
         vlREC_trans_h620.grand_total_unite  := Fv_convr_nb_decml_carct(REC_CUR_non_recrn_hh.grand_total_unite);*/
         vlrec_trans_h620.total_unite_1 := fv_inscr_hh_mint_centm(pn_nb_hh         => vln_semn_1,
                                                                  pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                  pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                  pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
      
         vlrec_trans_h620.total_unite_2     := fv_inscr_hh_mint_centm(pn_nb_hh         => vln_semn_2,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
         vlrec_trans_h620.grand_total_unite := fv_inscr_hh_mint_centm(pn_nb_hh         => REC_CUR_non_recrn_hh.grand_total_unite,
                                                                      pv_cd_gain       => vlrec_trans_h620.cd_gain,
                                                                      pd_dt_gain       => vlrec_trans_h620.dt_debut,
                                                                      pv_formt_hh      => 'HHHHMM',
                                                                      pn_assignment_id => vln_id_afect); --Edgar Doiron INC19219);
      
         --
         -- Valider la transaction H620
         --
         p_valdr_trans_h620(vlrec_trans_h620);
      
         -- Début CHG200241 Geneviève Bélanger
         -- Obtenir la période du gain
         vlrec_perd_paie_gain := NULL;
      
         p_log('15.00 - Appel de la procédure P_obten_perd_paie_gain.',
               vlv_nm_procd_fonct);
      
         p_obten_perd_paie_gain(pv_id_type_paie => cv_id_type_paie_varbl,
                                pd_dt_gain      => vlrec_trans_h620.dt_debut,
                                prec_perd_paie  => vlrec_perd_paie_gain);
      
         /*DDC 200241 INC 82025*/
         p_log('DDC 200241 INC 82025 - ETAPE 9',
               vlv_nm_procd_fonct);
         OPEN CUR_cd_gain(cv_nm_table_consl_gain_6,
                          vlrec_trans_h620.cd_gain,
                          vlrec_trans_h620.dt_debut,
                          vlrec_trans_h620.dt_fin);
         FETCH CUR_cd_gain
            INTO vlv_exist;
         CLOSE CUR_cd_gain;
      
         p_log('15.01 CUR_cd_gain -> vlv_exist = ' || vlv_exist,
               vlv_nm_procd_fonct);
      
         IF vlv_exist = 'X' THEN
            --Ajout du plus 1
            p_log('15.02 vlrec_trans_h620.cd_gain = ' || vlrec_trans_h620.cd_gain,
                  vlv_nm_procd_fonct);
            p_log('15.03 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.04 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- vérifier si le gain est saisi sur 1 journée seulement
            IF vlrec_trans_h620.dt_debut = vlrec_trans_h620.dt_fin THEN
               OPEN CUR_dern_perd_aa_civl(vlrec_trans_h620.dt_debut);
               FETCH CUR_dern_perd_aa_civl
                  INTO vln_retr_aa_civl;
               IF CUR_dern_perd_aa_civl%FOUND THEN
                  -- la date du gain (vlrec_trans_h620.dt_debut) correspond à la dernière journée de l'année civile,
                  -- la date de début devient le début de la période du gain
                  vlrec_trans_h620.dt_debut := vlrec_perd_paie_gain.dt_debut;
               
                  -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
                  -- sinon, la date de fin du gain est assignée au lendemain
                  --ELSE
                  --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_debut + 1;
                  -- INC00103225 Fin
               END IF;
               CLOSE CUR_dern_perd_aa_civl;
            END IF;
         
            p_log('15.09 vlrec_trans_h620.dt_debut = ' || TO_CHAR(vlrec_trans_h620.dt_debut,
                                                                  'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
            p_log('15.10 vlrec_trans_h620.dt_fin = ' || TO_CHAR(vlrec_trans_h620.dt_fin,
                                                                'YYYY-MM-DD'),
                  vlv_nm_procd_fonct);
         
            -- INC00103225 Début ne pas modifier la date de fin 2016-09-16
            --ELSE
            -- retouche 121
            --IF vlrec_trans_h620.dt_fin = vlrec_trans_h620.dt_debut THEN
            --   vlrec_trans_h620.dt_fin := vlrec_trans_h620.dt_fin + 1;
            --END IF;
            -- INC00103225 Fin
         END IF;
         -- Fin 200241
      
         IF vlrec_trans_h620.cd_ereur IS NOT NULL THEN
            --
            -- Incrémente le nombre d'enregistrements lus et
            -- le nombre d'enregistrements rejetés.
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_rejt  => TRUE);
            --
            -- remplir tableau des rejets
            -- INC00017359
            FOR REC_CUR_id_entre_elemn IN CUR_id_entre_elemn(vln_id_afect,
                                                             REC_CUR_non_recrn_hh.cd_gain,
                                                             REC_CUR_non_recrn_hh.tx_horr) LOOP
               --
               p_ajout_rejt(pn_id_afect       => vln_id_afect,
                            pn_id_entre_elemn => REC_CUR_id_entre_elemn.id_entre_elemn,
                            pn_id_trans       => NULL,
                            pv_cd_ereur       => vlrec_trans_h620.cd_ereur,
                            pd_dt_perd_couvr  => vlrec_trans_h620.dt_debut,
                            pv_nm_procd       => vlv_nm_procd_fonct,
                            pv_no_emplo       => vlrec_persn.no_emplo,
                            pv_cd_gain        => vlrec_trans_h620.cd_gain,
                            pb_jeton          => vlrec_trans_h620.jeton,
                            pv_nm_jeton       => vlrec_trans_h620.nm_jeton,
                            pv_va_jeton       => vlrec_trans_h620.cd_gain,
                            pn_id_contr_fdt   => REC_CUR_id_entre_elemn.id_contr_fdt);
               --
               --DDC 209235
               vlv_code_erreur_gir := NVL(vlrec_trans_h620.cd_ereur,
                                          'GIR-80398');
               vln_id_entre_elemn  := REC_CUR_id_entre_elemn.id_entre_elemn;
               vln_id_contr_fdt    := REC_CUR_id_entre_elemn.id_contr_fdt;
               --"TOKEN1:VALUE1;TOKEN2:VALUE2"
               -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
               vlv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen ||
                                    ';ID_CONTR_FDT:' || NULL || ';NO_DOCMN:' || NULL || ';ID_AFECT:' || vln_id_afect || ';ID_ENTRE_ELEMN:' ||
                                    vln_id_entre_elemn || ';DT_GAIN:' || TO_CHAR(vld_dt_gain,
                                                                                 'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' ||
                                    vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' || TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                                                                      'YYYY-MM-DD') || ';' || vlrec_trans_h620.nm_jeton || ':' ||
                                    vlrec_trans_h620.cd_gain || ';'; -- INC00107268 2016-09-09
               vlv_de_mesg_techn := NULL;
               vlv_nm_procd      := vlv_nm_procd;
            
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => vlv_de_mesg_techn);
            END LOOP;
            --
            -- Le statut de l'affectation étant terminée, on fait le ménage
            --
            IF vgb_in_statu_termn THEN
               --
               vgb_in_statu_termn := FALSE;
               --
               DELETE FROM gir_rh_fdt fdt
                WHERE fdt.id_afect = vln_id_afect
                  AND fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut
                  AND fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin
                  AND fdt.statu_sagip = cv_statu_sagip_non_trans
                  AND fdt.nm_fiche = 'H620';
               --
            END IF;
            --
         ELSE
            --
            vlrec_trans_h620.id_afect := vln_id_afect;
            --INC00017475
            vlrec_trans_h620.no_perd     := vgrec_perd_paie_varbl.no_perd;
            vlrec_trans_h620.aa_finnc    := REC_CUR_non_recrn_hh.aa_finnc;
            vlrec_trans_h620.minst       := NVL(REC_CUR_non_recrn_hh.minst,
                                                '000');
            vlrec_trans_h620.budgt       := REC_CUR_non_recrn_hh.budgt;
            vlrec_trans_h620.centr_respn := REC_CUR_non_recrn_hh.centr_respn;
            -- fin retouche 126
            --
            -- INC00016333 Valider le total unité
            p_valdr_trans_gain_h620(vlrec_trans_h620);
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_trans_h620.minst,
                                                                                            '000'));
            --
            -- créer la transaction dans GIR_TRANS_H620
            --
            --Incident 70457  Edgar 2014-06-18
            vln_total_unite_mi := 0;
            vln_total_unite_hh := 0;
            vln_grand_total_hh := 0;
            vln_grand_total_mi := 0;
            vln_total_2_semn   := 0;
            OPEN CUR_gain_decml(vlrec_trans_h620.cd_gain);
            FETCH CUR_gain_decml
               INTO vln_bidon;
            IF CUR_gain_decml%NOTFOUND THEN
               CLOSE CUR_gain_decml;
               IF vlrec_trans_h620.total_unite_1 IS NOT NULL AND
                  vlrec_trans_h620.total_unite_2 IS NOT NULL THEN
                  vln_total_2_semn := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                       -2)) + TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_2,
                                                                               -2));
                  IF (vln_total_2_semn) >= 60 THEN
                     vln_total_2_semn := vln_total_2_semn - 60;
                  END IF;
                  IF vln_total_2_semn < TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                         -2)) THEN
                     vln_total_unite_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            -2));
                     vln_total_unite_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.total_unite_1,
                                                            0,
                                                            3));
                     vln_total_unite_mi := vln_total_unite_mi + 1;
                     IF vln_total_unite_mi = 60 THEN
                        vln_total_unite_mi := vln_total_unite_mi - 60;
                        vln_total_unite_hh := vln_total_unite_hh + 1;
                     END IF;
                     vlrec_trans_h620.total_unite_1 := LPAD(TO_CHAR(vln_total_unite_hh),
                                                            3,
                                                            '0') || LPAD(TO_CHAR(vln_total_unite_mi),
                                                                         2,
                                                                         '0');
                  ELSIF vln_total_2_semn > TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2)) THEN
                     vln_grand_total_mi := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            -2));
                     vln_grand_total_hh := TO_NUMBER(SUBSTR(vlrec_trans_h620.grand_total_unite,
                                                            0,
                                                            4));
                     vln_grand_total_mi := vln_grand_total_mi + 1;
                     IF vln_grand_total_mi = 60 THEN
                        vln_grand_total_mi := vln_grand_total_mi - 60;
                        vln_grand_total_hh := vln_grand_total_hh + 1;
                     END IF;
                     vlrec_trans_h620.grand_total_unite := LPAD(TO_CHAR(vln_grand_total_hh),
                                                                4,
                                                                '0') || LPAD(TO_CHAR(vln_grand_total_mi),
                                                                             2,
                                                                             '0');
                  END IF;
               END IF;
            ELSE
               CLOSE CUR_gain_decml;
            END IF;
         
            -- CHG217615 Début 2017-01-27
            -- faire la vérification des dates de couverture du gain
            p_chevc_aa_finnc(pd_dt_debut_gain      => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_gain        => vlrec_trans_h620.dt_fin,
                             pd_dt_debut_perd_gain => vlrec_perd_paie_gain.dt_debut,
                             pd_dt_fin_perd_gain   => vlrec_perd_paie_gain.dt_fin,
                             pd_dt_debut_perd_paie => vgrec_perd_paie_varbl.dt_debut,
                             pd_dt_fin_perd_paie   => vgrec_perd_paie_varbl.dt_fin,
                             pv_no_perd            => vgrec_perd_paie_varbl.no_perd,
                             pn_id_afect           => pn_assignment_id,
                             pv_aa_finnc           => vlrec_trans_h620.aa_finnc,
                             pv_in_rempl_dt        => vlv_in_rempl_dt,
                             pd_dt_debut_trans     => vlrec_trans_h620.dt_debut,
                             pd_dt_fin_trans       => vlrec_trans_h620.dt_fin,
                             pv_aa_finnc_trans     => vlrec_trans_h620.aa_finnc);
            -- CHG217615 Fin
         
            INSERT INTO gir_trans_h620
               (elemn_entry_id,
                dt_trans,
                statu_trans,
                in_mt_suplm,
                in_mt_rempl,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                cd_gain,
                cd_paiem,
                dt_debut,
                dt_fin,
                tx_mt,
                total_unite_semn_1,
                total_unite_semn_2,
                grand_total_unite,
                de_carte_b,
                no_perd,
                aa_finnc,
                minst,
                budgt,
                centr_respn)
            VALUES
               (NULL,
                vgd_dt_exect,
                'N',
                NVL(REC_CUR_non_recrn_hh.in_mt_suplm_specl_input,
                    'N'),
                NVL(REC_CUR_non_recrn_hh.in_mt_rempl_specl_input,
                    'N'),
                'N',
                /* retouche 126
                REC_CUR_non_recrn_hh.dt_perd_paie_du,
                REC_CUR_non_recrn_hh.dt_perd_paie_au,*/
                vlrec_trans_h620.dt_perd_paie_du,
                vlrec_trans_h620.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H620',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                vlrec_trans_h620.cd_gain,
                vlrec_trans_h620.cd_paiem,
                vlrec_trans_h620.dt_debut,
                vlrec_trans_h620.dt_fin,
                /* INC00017167
                vlREC_trans_h620.tx_mt,*/
                DECODE(TRIM(both '0' FROM vlrec_trans_h620.tx_mt),
                       NULL,
                       NULL,
                       vlrec_trans_h620.tx_mt),
                vlrec_trans_h620.total_unite_1,
                vlrec_trans_h620.total_unite_2,
                vlrec_trans_h620.grand_total_unite,
                'B',
                /*
                vgREC_perd_paie_varbl.no_perd,
                REC_CUR_non_recrn_hh.aa_finnc,
                REC_CUR_non_recrn_hh.minst,
                REC_CUR_non_recrn_hh.budgt,
                REC_CUR_non_recrn_hh.centr_respn*/
                vlrec_trans_h620.no_perd,
                vlrec_trans_h620.aa_finnc,
                NVL(vlrec_trans_h620.minst,
                    '000'),
                NVL(vlrec_trans_h620.budgt,
                    '0000000'),
                NVL(vlrec_trans_h620.centr_respn,
                    '0000'))
            RETURNING id_trans_h620 INTO vln_id_trans;
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h620,
                       pb_in_inser => TRUE);
            --
            -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
            --
            UPDATE gir_rh_fdt fdt
               SET fdt.id_trans    = vln_id_trans,
                   fdt.dt_trans    = TRUNC(vgd_dt_exect),
                   fdt.no_docmn    = vlv_no_docmn,
                   fdt.statu_sagip = cv_statu_sagip_trans,
                   fdt.cd_gain     = vlrec_trans_h620.cd_gain
             WHERE fdt.id_afect = REC_CUR_non_recrn_hh.id_afect
               AND fdt.cd_gain = REC_CUR_non_recrn_hh.cd_gain
               AND fdt.dt_perd_paie_du = REC_CUR_non_recrn_hh.dt_perd_paie_du
               AND fdt.dt_perd_paie_au = REC_CUR_non_recrn_hh.dt_perd_paie_au
                  -- CHG217615 Début 2017-02-21
                  -- Filter sur l'année financière
               AND fdt.aa_finnc = REC_CUR_non_recrn_hh.aa_finnc
                  -- CHG217615 Fin
               AND fdt.tx_horr = REC_CUR_non_recrn_hh.tx_horr
               AND fdt.nm_fiche = 'H620'
               AND fdt.statu_sagip = cv_statu_sagip_non_trans
               AND fdt.in_trans_anul = 'N'
               AND fdt.in_mt_suplm_specl_input = 'N'
               AND fdt.in_mt_rempl_specl_input = 'N'
                  -- INC00016966 et INC00016973
               AND NVL(fdt.raisn_3,
                       '!') = cv_hh_rembr
               AND fdt.id_trans IS NULL;
            --
            p_log('  id_trans_h620: ' || vln_id_trans,
                  vlv_nm_procd_fonct);
            --
         END IF;
         --
      END LOOP non_recrn_hh;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h620_etape_9.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80395';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vgv_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_h620_etape_9;

   --
   -- ============================================================================
   -- P_creer_trans_h010:
   -- ============================================================================
   /*************************************************************************
   * But : Mappage des transactions H010 pour les documents (H620) à annuler.
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Geneviève Bélanger   2016-09-02  CHG217124 / INC00106739 - ajout des messages fonctionnels
   *                                  Retirer l'attribut4 et attribut5 de la table d'erreurs/rejets si la création de la transaction plante
   *************************************************************************/
   PROCEDURE p_creer_trans_h010(pn_assignment_id   IN NUMBER,
                                pv_code_erreur_gir OUT NOCOPY VARCHAR2,
                                pv_token_value     OUT NOCOPY VARCHAR2,
                                pv_de_mesg_techn   OUT NOCOPY VARCHAR2,
                                pv_nm_procd        OUT NOCOPY VARCHAR2) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_h010';
      --DDC 209235
      vld_dt_gain    DATE;
      vlv_nm_procd   VARCHAR2(100) := 'p_creer_trans_h010';
      vlv_type_trans VARCHAR2(10) := 'H010'; --;vgv_type_trans; --
      --vln_id_trans        NUMBER;
      vln_id_contr_absen NUMBER;
      vln_id_contr_fdt   NUMBER;
      --vlv_no_docmn       gir_trans_h620.no_docmn%TYPE;
      --vln_id_afect        NUMBER;
      vln_id_entre_elemn NUMBER;
      --
      vlrec_persn  type_rec_persn; -- Infos de la personne
      vln_id_afect NUMBER; -- Identifiant de l'affectation en cours
      vlv_no_docmn gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vln_id_trans NUMBER;
      --
      /*******************************************************************************
      *                         CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de récupérer les éléments H010
      ----------------------------------------------------------------------
      CURSOR CUR_fdt_h010 IS
         SELECT fdt.id_contr_fdt,
                fdt.id_afect,
                fdt.dt_perd_paie_du,
                fdt.dt_perd_paie_au,
                fdt.no_docmn_anulr,
                fdt.dt_statu_sagip,
                fdt.minst
           FROM gir_rh_fdt fdt
          WHERE fdt.nm_fiche = 'H010'
            AND fdt.statu_sagip = cv_statu_sagip_non_trans
            AND fdt.in_trans_anul = 'N'
               --DDC 209235
            AND fdt.id_afect = pn_assignment_id
         -- Début SAGIR F.Aubin 2014-06-11 INC-70159 : Ajustement sur Curseur CUR_fdt_h010
          ORDER BY fdt.id_afect,
                   fdt.dt_perd_paie_au DESC;
      -- Fin SAGIR F.Aubin 2014-06-11 INC-70159
      --
      -- Début SAGIR F.Aubin 2014-06-11 INC-70159 : Ajouter un curseur qui vérifie l'existance du numéro de document
      --                                            à annuler dans la table gir_trans_h010
      CURSOR CUR_exist_h010(pv_no_docmn_anulr VARCHAR2) IS
         SELECT '1'
           FROM gir_trans_h010 gt
          WHERE gt.id_afect = vln_id_afect
            AND gt.no_docmn_anulr_1 = pv_no_docmn_anulr;
      vln_reslt_exist_h010 VARCHAR2(1);
      -- Fin SAGIR F.Aubin 2014-06-11 INC-70159
      --
   BEGIN
      -- Début SAGIR Edgar Doiron 2016-08-05 INC00105810 : Dans la table de rejets et erreurs, nous avons corrigé insertion de l'information
      --                                                   dans l'attribut1, celle qui inscrivait tout le temps « H010 » dans la table des rejets et erreurs.
      --vgv_type_trans := 'H010';
      -- Fin SAGIR Edgar Doiron 2016-08-05 INC00105810
      --
      p_log('10 - Début procédure ',
            vlv_nm_procd_fonct);
      --
      vln_id_afect := 0;
      --
      <<h010>>
      FOR REC_CUR_fdt_h010 IN CUR_fdt_h010 LOOP
         --
         --DDC 209235
         vln_id_contr_fdt := REC_CUR_fdt_h010.id_contr_fdt; -- INC00106352 : toujours avoir le id_contr_fdt lorsque possible.
      
         --
         p_log('Minst: ' || NVL(REC_CUR_fdt_h010.minst,
                                '000'),
               vlv_nm_procd_fonct);
         p_log('doc  : ' || REC_CUR_fdt_h010.no_docmn_anulr,
               vlv_nm_procd_fonct);
         p_log('date : ' || REC_CUR_fdt_h010.dt_statu_sagip,
               vlv_nm_procd_fonct);
         --
         IF vln_id_afect <> REC_CUR_fdt_h010.id_afect THEN
            --
            vln_id_afect := REC_CUR_fdt_h010.id_afect;
            --
            -- Obtenir les infos de la personne
            --
            p_obten_persn(pn_id_afect => vln_id_afect,
                          pd_dt_fin   => vgrec_perd_paie_varbl.dt_fin,
                          prec_persn  => vlrec_persn);
            --
            p_log('  id_afect: ' || vln_id_afect,
                  vlv_nm_procd_fonct);
            --
         END IF;
         -- Début SAGIR F.Aubin 2014-06-11 INC-70159 : Appel du curseur qui vérifie l'existance du numéro de document
         vln_reslt_exist_h010 := NULL;
         OPEN CUR_exist_h010(REC_CUR_fdt_h010.no_docmn_anulr);
         FETCH CUR_exist_h010
            INTO vln_reslt_exist_h010;
         CLOSE CUR_exist_h010;
         /*fnd_file.put_line(fnd_file.log,
                           'id_afect = ' || vln_id_afect);
         fnd_file.put_line(fnd_file.log,
                           'no_docmn_anulr_1 = ' || REC_CUR_fdt_h010.no_docmn_anulr);
         fnd_file.put_line(fnd_file.log,
                           'vln_reslt_exist_h010 = ' || vln_reslt_exist_h010);*/
         -- Fin SAGIR F.Aubin 2014-06-11 INC-70159
         --
         IF vln_reslt_exist_h010 IS NULL THEN
            --
            -- Récupérer le numéro de document SAGIP
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(REC_CUR_fdt_h010.minst,
                                                                                            '000'));
            --
            p_log('No doc h010:' || vlv_no_docmn,
                  vlv_nm_procd_fonct);
            --
            -- créer la transaction dans GIR_TRANS_H010
            --
            /*fnd_file.put_line(fnd_file.log,
                              'dt_trans = ' || vgd_dt_exect);
            fnd_file.put_line(fnd_file.log,
                              'statu_trans = ' || 'N');
            fnd_file.put_line(fnd_file.log,
                              'in_trans_anul = ' || 'N');
            fnd_file.put_line(fnd_file.log,
                              'perd_paie_varbl_du = ' || REC_CUR_fdt_h010.dt_perd_paie_du);
            fnd_file.put_line(fnd_file.log,
                              'perd_paie_varbl_au = ' || REC_CUR_fdt_h010.dt_perd_paie_au);
            fnd_file.put_line(fnd_file.log,
                              'id_afect = ' || vln_id_afect);
            fnd_file.put_line(fnd_file.log,
                              'no_docmn = ' || vlv_no_docmn);
            fnd_file.put_line(fnd_file.log,
                              'de_carte_a = ' || 'A');
            fnd_file.put_line(fnd_file.log,
                              'cd_trans = ' || 'H010');
            fnd_file.put_line(fnd_file.log,
                              'nas = ' || vlrec_persn.nas);
            fnd_file.put_line(fnd_file.log,
                              'nm_valdr = ' || vlrec_persn.nm_valdr);
            fnd_file.put_line(fnd_file.log,
                              'no_docmn_anulr_1 = ' || REC_CUR_fdt_h010.no_docmn_anulr);
            fnd_file.put_line(fnd_file.log,
                              'cd_trans_anulr_1 = ' || 'H620');
            fnd_file.put_line(fnd_file.log,
                              'dt_sais_docmn_1 = ' || REC_CUR_fdt_h010.dt_statu_sagip);
            fnd_file.put_line(fnd_file.log,
                              'genre_sais_1 = ' || '1');*/
            INSERT INTO gir_trans_h010
               (dt_trans,
                statu_trans,
                in_trans_anul,
                perd_paie_varbl_du,
                perd_paie_varbl_au,
                id_afect,
                no_docmn,
                de_carte_a,
                cd_trans,
                nas,
                nm_valdr,
                no_docmn_anulr_1,
                cd_trans_anulr_1,
                dt_sais_docmn_1,
                genre_sais_1)
            VALUES
               (vgd_dt_exect,
                'N',
                'N',
                REC_CUR_fdt_h010.dt_perd_paie_du,
                REC_CUR_fdt_h010.dt_perd_paie_au,
                vln_id_afect,
                vlv_no_docmn,
                'A',
                'H010',
                vlrec_persn.nas,
                vlrec_persn.nm_valdr,
                REC_CUR_fdt_h010.no_docmn_anulr,
                'H620',
                REC_CUR_fdt_h010.dt_statu_sagip,
                '1')
            RETURNING id_trans_h010 INTO vln_id_trans;
            --
            -- Incrémente le nombre d'enregistrements lus et insérés
            --
            p_incre_cp(pv_nm_table => cv_nm_table_h010,
                       pb_in_inser => TRUE);
         END IF;
         --
         -- Mettre à jour les enregistrements de la fdt ayant servi à créer la transaction
         --
         UPDATE gir_rh_fdt fdt
            SET fdt.id_trans = vln_id_trans,
                fdt.dt_trans = TRUNC(vgd_dt_exect),
                fdt.no_docmn = vlv_no_docmn
          WHERE fdt.id_contr_fdt = REC_CUR_fdt_h010.id_contr_fdt;
         --
         p_log('  id_trans_h010: ' || vln_id_trans,
               vlv_nm_procd_fonct);
         --
      --
      END LOOP h010;
      --
      p_log('20 - Fin procédure ',
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_h010.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN OTHERS THEN
         --
         -- Inscrire l'erreur dans la table de log.
         --
         p_log(pv_texte => SQLERRM,
               pv_apeln => vlv_nm_procd_fonct);
         --
         --DDC 209235
         pv_code_erreur_gir := 'GIR-80424';
         --"TOKEN1:VALUE1;TOKEN2:VALUE2"
         -- Début CHG217124 si une erreur survient, ne pas inscrire id_trans(vln_id_trans), id_contr_fdt(vln_id_contr_fdt) et no_docmn(vlv_no_docmn)
         pv_token_value   := 'TYPE_TRANS:' || vlv_type_trans || ';ID_TRANS:' || NULL || ';ID_CONTR_ABSEN:' || vln_id_contr_absen || ';ID_CONTR_FDT:' || NULL ||
                             ';NO_DOCMN:' || NULL || ';ID_AFECT:' || pn_assignment_id || ';ID_ENTRE_ELEMN:' || vln_id_entre_elemn || ';DT_GAIN:' ||
                             TO_CHAR(vld_dt_gain,
                                     'YYYY-MM-DD') || ';NO_EMPLO:' || vgv_no_emplo || ';NO_AFECT:' || vgv_no_afect || ';DT_DEBUT_PERD_PAIE:' ||
                             TO_CHAR(vgrec_perd_paie_varbl.dt_debut,
                                     'YYYY-MM-DD') || ';';
         pv_de_mesg_techn := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM;
         pv_nm_procd      := vlv_nm_procd;
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
                                   1,
                                   300) || ' - Employé : ' || vgv_no_emplo;
         --
         --RAISE vgexc_trait_h620;
         APP_EXCEPTION.RAISE_EXCEPTION;
         --
   END p_creer_trans_h010;

   --
   -- ============================================================================
   -- P_creer_trans_sgi_h010:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de créer les transactions H010 pour le SGI.
   ***************************************************************************
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-06-11  Retouche 237 Si une entrée existe pour un ancien employé
   *                                               qui a changé de paie ou est inactif, ça cause une erreur.
   *************************************************************************/
   PROCEDURE p_creer_trans_sgi_h010 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_sgi_h010';
      vln_id_lot         gir_wm_contr.id_lot%TYPE; -- lot identifié pour la sortie
      vlv_no_docmn       gir_trans_h010.no_docmn%TYPE; -- numéro du document
      vlv_carte          gir_srhhrth010.va_carte%TYPE; -- Valeurs inscrites dans la carte
      vln_nb_enreg       PLS_INTEGER; -- Nombre d'enregistrements insérés dans SRHHRTH760
      vln_id_afect       NUMBER;
      vlrec_cle_compt    type_rec_ventl_cout; -- infos budgétaires
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de sélectionner les données
      -- à transmettre au SGI.
      ----------------------------------------------------------------------
      CURSOR CUR_h010 IS
         SELECT h010.id_trans_h010,
                h010.no_docmn,
                h010.cd_trans,
                h010.nas,
                h010.de_carte_a,
                h010.nm_valdr,
                h010.no_docmn_anulr_1,
                h010.cd_trans_anulr_1,
                h010.dt_sais_docmn_1,
                h010.genre_sais_1,
                h010.no_docmn_anulr_2,
                h010.cd_trans_anulr_2,
                h010.dt_sais_docmn_2,
                h010.genre_sais_2,
                h010.id_afect,
                h010.statu_trans
           FROM gir_trans_h010 h010
          WHERE h010.cd_trans = 'H010'
            AND h010.in_trans_anul = 'N'
            AND h010.statu_trans IN (cv_cd_statu_sagip_non_trans,
                                     cv_cd_statu_sagip_rejt)
               -- On s'assure que l'enregistrement est pour une affectation valide de paie variable
            AND h010.id_afect IN (SELECT rat.id_afect
                                    FROM xxgir_rh_afect_tempr rat
                                   WHERE rat.in_type_paie = cv_id_type_paie_varbl)
          ORDER BY h010.id_afect;
      --
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      -- Obtenir le prochain numéro de la séquence
      --
      vln_id_lot := gir_id_lot_s.nextval; -- (Release 11)
      --
      -- Étape 1. page 78 du MD50
      --
      -- Créer un enregistrement dans la table de contrôle
      --
      INSERT INTO gir_wm_contr
         (id_lot,
          cd_entit,
          cd_docmn,
          nm_fichr,
          dh_recpt_inter_convr_wm,
          dh_inter_convr_emit_wm,
          dh_debut_concr_progr_pgi,
          dh_fin_concr_progr_pgi,
          cd_statu,
          nb_enreg_inser,
          nb_enreg_rejet,
          nb_enreg_trait,
          nm_destn_1,
          nm_destn_2,
          ind_reprs,
          autre_parmt)
      VALUES
         (vln_id_lot,
          cv_cd_entit,
          cv_cd_docmn_sgi_h010,
          cv_cd_entit || cv_cd_docmn_sgi_h010 || TO_CHAR(vgd_dt_exect,
                                                         'YYYYMMDDHH24MISS') || '.txt',
          NULL,
          NULL,
          vgd_dt_exect,
          GREATEST(vgd_dt_exect /*Enlever SYSDATE*/,
                   vgd_dt_exect),
          'TS',
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL);
      --
      IF SQL%NOTFOUND THEN
         --
         -- Ne devrait jamais arriver mais ...
         --
         p_log('20 - Enregistrement Contrôle inaccessible',
               vlv_nm_procd_fonct);
         --
         vgv_texte_ereur := 'Enregistrement Contrôle inaccessible';
         --
         RAISE vgexc_trait_h620;
         --
      END IF;
      --
      vln_nb_enreg := 0;
      --
      -- Étape 2. page 89 du MD50
      --
      vln_id_afect := 0;
      --
      <<h010>>
      FOR REC_CUR_h010 IN CUR_h010 LOOP
         --
         p_log('No afect:' || REC_CUR_h010.id_afect,
               vlv_nm_procd_fonct);
         p_log('vgREC_perd_paie_varbl.dt_debut:' || fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_debut),
               vlv_nm_procd_fonct);
         p_log('type_paie:' || cv_id_type_paie_varbl,
               vlv_nm_procd_fonct);
         --
         -- Si une transaction est rejetée, il ne faut pas l'envoyer avec le même numéro de document
         --
         IF REC_CUR_h010.statu_trans = cv_cd_statu_sagip_rejt THEN
            --
            -- INC00016215
            IF vln_id_afect <> REC_CUR_h010.id_afect THEN
               --
               vln_id_afect := REC_CUR_h010.id_afect;
               --
               -- Obtenir les valeurs dérivées
               --
               p_obten_ventl_cout(pn_id_afect     => vln_id_afect,
                                  pd_dt_afect     => vgrec_perd_paie_varbl.dt_debut,
                                  pv_id_type_paie => cv_id_type_paie_varbl,
                                  prec_ventl_cout => vlrec_cle_compt);
               --
            END IF;
            -- fin INC00016215
            --
            p_log('30 - Appel de xxgir_rh_23000_trans_docmn.Fn_obten_no_docmn. ' || 'minst => ' ||
                  NVL(vlrec_cle_compt.minst,
                      '000'),
                  vlv_nm_procd_fonct);
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(vlrec_cle_compt.minst,
                                                                                            '000'));
            --
         ELSE
            --
            vlv_no_docmn := REC_CUR_h010.no_docmn;
            --
         END IF;
         --
         p_log('No doc h010:' || vlv_no_docmn,
               vlv_nm_procd_fonct);
         --
         p_log('Date1: ' || REPLACE(TO_CHAR(REC_CUR_h010.dt_sais_docmn_1,
                                            'YYYY-MM-DD'),
                                    '-',
                                    ''),
               vlv_nm_procd_fonct);
         p_log('Date2: ' || LPAD(REPLACE(TO_CHAR(REC_CUR_h010.dt_sais_docmn_2,
                                                 'YYYY-MM-DD'),
                                         '-',
                                         ''),
                                 8,
                                 ' '),
               vlv_nm_procd_fonct);
         --
         -- Carte A toujours présente                                        -- Position
         --
         vlv_carte := LPAD(vlv_no_docmn,
                           8,
                           '0') -- 1-8
                      || REC_CUR_h010.de_carte_a -- 9-9
                      || LPAD(REC_CUR_h010.cd_trans,
                              4,
                              ' ') -- 10-13
                      || LPAD(REC_CUR_h010.nas,
                              9,
                              '0') -- 14-22
                      || RPAD(NVL(REC_CUR_h010.nm_valdr,
                                  ' '),
                              7,
                              ' ') -- 23-29
                      || LPAD(NVL(REC_CUR_h010.no_docmn_anulr_1,
                                  '0'),
                              8,
                              '0') -- 30-37
                      || LPAD(NVL(REC_CUR_h010.cd_trans_anulr_1,
                                  ' '),
                              4,
                              ' ') -- 38-41
                      || LPAD(NVL(REPLACE(TO_CHAR(REC_CUR_h010.dt_sais_docmn_1,
                                                  'YYYY-MM-DD'),
                                          '-',
                                          ''),
                                  ' '),
                              8,
                              ' ') -- 42-49
                      || NVL(REC_CUR_h010.genre_sais_1,
                             ' ') -- 50-50
                      || LPAD(NVL(REC_CUR_h010.no_docmn_anulr_2,
                                  ' '),
                              8,
                              ' ') -- 51-58
                      || LPAD(NVL(REC_CUR_h010.cd_trans_anulr_2,
                                  ' '),
                              4,
                              ' ') -- 59-62
                      || LPAD(NVL(REPLACE(TO_CHAR(REC_CUR_h010.dt_sais_docmn_2,
                                                  'YYYY-MM-DD'),
                                          '-',
                                          ''),
                                  ' '),
                              8,
                              ' ') -- 63-70
                      || NVL(REC_CUR_h010.genre_sais_2,
                             ' '); -- 71-71
         --
         -- créer la carte
         --
         INSERT INTO gir_srhhrth010
            (id_lot,
             cd_entit,
             cd_docmn,
             no_docmn,
             de_carte,
             cd_trans,
             nas,
             nm_valdr,
             va_carte)
         VALUES
            (vln_id_lot,
             cv_cd_entit,
             cv_cd_docmn_sgi_h010,
             vlv_no_docmn,
             REC_CUR_h010.de_carte_a,
             REC_CUR_h010.cd_trans,
             LPAD(REC_CUR_h010.nas,
                  9,
                  '0'),
             REC_CUR_h010.nm_valdr,
             vlv_carte);
         --
         IF SQL%ROWCOUNT > 0 THEN
            --
            -- Comptabiliser le nombre d'enregistrements seulement avec la carte A
            --
            vln_nb_enreg := vln_nb_enreg + 1;
            --
         END IF;
         --
         -- Mise à jour de gir_trans_h010
         --
         UPDATE gir_trans_h010
            SET statu_trans = cv_cd_statu_sagip_trans
          WHERE id_trans_h010 = REC_CUR_h010.id_trans_h010;
         --
         -- Mise à jour de gir_rh_fdt
         --
         UPDATE gir_rh_fdt
            SET statu_sagip = cv_statu_sagip_trans
          WHERE id_trans = REC_CUR_h010.id_trans_h010
            AND nm_fiche = 'H010';
         --
      END LOOP h010;
      --
      -- Mettre à jour le nombre d'enregistrement dans la table de contrôle
      --
      UPDATE gir_wm_contr
         SET nb_enreg_inser = vln_nb_enreg,
             cd_statu       = 'NS'
       WHERE id_lot = vln_id_lot;
      --
      p_log('40 - Fin procédure. Nombre de fiches  = ' || vln_nb_enreg,
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_sgi_h010
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h620 THEN
         --
         p_log('50 - Exception du traitement h010.',
               vlv_nm_procd_fonct);
         --
         RAISE vgexc_trait_h620;
         --
      WHEN OTHERS THEN
         --
         p_log('60 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' est en erreur dans la procédure P_creer_trans_sgi_h010');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_sgi_h010;

   --
   -- ============================================================================
   -- P_creer_trans_sgi_h620:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet de créer les transactions H620 pour le SGI.
   ***************************************************************************
   *
   * Paramètres entrée :
   *   - N/D
   *
   * Paramètres de sortie :
   *   - N/D
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2012-11-08  INC00017263  Corriger le padding
   * Michel Dessureault   2013-02-19  INC00017310  Inscrire le no_docmn dans les tables GIR_RH_FDT et GIR_TRANS_H620
   * Michel Dessureault   2013-03-06  INC00017640  La date de fin doit être plus grande que la date de début lorsque transmise à SAGIP.
   * Michel Dessureault   2013-06-11  Retouche 237 Si une entrée existe pour un ancien employé
   *                                               qui a changé de paie ou est inactif, ça cause une erreur.
   * Geneviève Bélanger   2016-04-15  CHG206235 Ne plus mettre à jour l'année financière de la table FDT, pour garder l'information originale
   *************************************************************************/
   PROCEDURE p_creer_trans_sgi_h620 IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_creer_trans_sgi_h620';
      vln_id_lot         gir_wm_contr.id_lot%TYPE; -- lot identifié pour la sortie
      vlv_no_docmn       gir_trans_h620.no_docmn%TYPE; -- numéro du document
      vlv_carte          gir_srhhrth620.va_carte%TYPE; -- Valeurs inscrites dans la carte
      vln_nb_enreg       PLS_INTEGER; -- Nombre d'enregistrements insérés dans SRHHRTH760
      --
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant de sélectionner les données
      -- à transmettre au SGI.
      ----------------------------------------------------------------------
      CURSOR CUR_h620(pn_nouvl_aa IN NUMBER) IS
         SELECT h620.id_trans_h620,
                h620.no_docmn,
                h620.de_carte_a,
                h620.cd_trans,
                h620.nas,
                h620.nm_valdr,
                h620.cd_gain,
                h620.cd_paiem,
                h620.dt_debut
                /*INC00017640
                ,h620.dt_fin */,
                DECODE(h620.dt_fin,
                       h620.dt_debut,
                       h620.dt_fin + 1,
                       h620.dt_fin) dt_fin,
                h620.tx_mt,
                h620.acomp_trait,
                h620.total_unite_semn_1,
                h620.total_unite_semn_2,
                h620.grand_total_unite,
                h620.de_carte_b,
                h620.no_perd,
                /*DDC 206235 - INC86765
                h620.aa_finnc,
                */
                NVL(pn_nouvl_aa,
                    h620.aa_finnc) aa_finnc,
                /*FIN DDC 206235 - INC86765 */
                h620.minst,
                h620.budgt,
                h620.centr_respn,
                h620.distr_paie,
                h620.no_engag,
                h620.id_afect,
                h620.statu_trans
           FROM gir_trans_h620 h620
          WHERE h620.cd_trans = 'H620'
            AND h620.in_trans_anul = 'N'
            AND h620.statu_trans IN (cv_cd_statu_sagip_non_trans,
                                     cv_cd_statu_sagip_rejt)
               -- On s'assure que l'enregistrement est pour une affectation valide de paie variable
            AND h620.id_afect IN (SELECT rat.id_afect
                                    FROM xxgir_rh_afect_tempr rat
                                   WHERE rat.in_type_paie = cv_id_type_paie_varbl)
          ORDER BY h620.id_afect;
   
      vln_no_perd  NUMBER;
      vln_nouvl_aa NUMBER;
   
   BEGIN
      --
      p_log('10 - Début procédure.',
            vlv_nm_procd_fonct);
      --
      --DDC 206235 - INC86765
      p_log('12 - CREER H620 SGI.',
            vlv_nm_procd_fonct);
      p_log('13 - Numéro de période =' || vgrec_perd_paie_varbl.no_perd,
            vlv_nm_procd_fonct);
      --FND_FILE.PUT_LINE(fnd_file.log,'12- VG année ='||vgrec_perd_paie_varbl.aa_finnc);
      --FND_FILE.PUT_LINE(fnd_file.log,'13 - Numéro de période ='||vgrec_perd_paie_varbl.no_perd);
   
      IF TO_NUMBER(vgrec_perd_paie_varbl.no_perd) IN (1,
                                                      2) THEN
         vln_nouvl_aa := NULL;
      ELSE
         vln_nouvl_aa := vgrec_perd_paie_varbl.aa_finnc;
      END IF;
   
      p_log('14 - Année financière =' || vln_nouvl_aa,
            vlv_nm_procd_fonct);
      -- FIN DDC 206235 - INC86765
   
      -- Obtenir le prochain numéro de la séquence
      --
      vln_id_lot := gir_id_lot_s.nextval; -- (Release 11)
      --
      -- Étape 1. page 78 du MD50
      --
      -- Créer un enregistrement dans la table de contrôle
      --
      INSERT INTO gir_wm_contr
         (id_lot,
          cd_entit,
          cd_docmn,
          nm_fichr,
          dh_recpt_inter_convr_wm,
          dh_inter_convr_emit_wm,
          dh_debut_concr_progr_pgi,
          dh_fin_concr_progr_pgi,
          cd_statu,
          nb_enreg_inser,
          nb_enreg_rejet,
          nb_enreg_trait,
          nm_destn_1,
          nm_destn_2,
          ind_reprs,
          autre_parmt)
      VALUES
         (vln_id_lot,
          cv_cd_entit,
          cv_cd_docmn_sgi_h620,
          cv_cd_entit || cv_cd_docmn_sgi_h620 || TO_CHAR(vgd_dt_exect /*Enlever SYSDATE*/,
                                                         'YYYYMMDDHH24MISS') || '.txt',
          NULL,
          NULL,
          vgd_dt_exect,
          GREATEST(SYSDATE,
                   vgd_dt_exect),
          'TS',
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL);
      --
      IF SQL%NOTFOUND THEN
         --
         -- Ne devrait jamais arriver mais ...
         --
         p_log('20 - Enregistrement Contrôle inaccessible',
               vlv_nm_procd_fonct);
         --
         vgv_texte_ereur := 'Enregistrement Contrôle inaccessible';
         --
         RAISE vgexc_trait_h620;
         --
      END IF;
      --
      vln_nb_enreg := 0;
      --
      -- Étape 2. page 89 du MD50
      --
      <<h620>>
      FOR REC_CUR_h620 IN CUR_h620(vln_nouvl_aa) /*DDC 206235 - INC86765 */
       LOOP
         --
         -- Si une transaction est rejetée, il ne faut pas l'envoyer avec le même numéro de document
         --
         /*FND_FILE.PUT_LINE(fnd_file.log,'24 REC_CUR_h620.Aa_Finnc.'|| REC_CUR_h620.Aa_Finnc);*/
         IF REC_CUR_h620.statu_trans = cv_cd_statu_sagip_rejt THEN
            --
            p_log('30 - Appel de xxgir_rh_23000_trans_docmn.Fn_obten_no_docmn. ' || 'minst => ' ||
                  NVL(REC_CUR_h620.minst,
                      '000'),
                  vlv_nm_procd_fonct);
            --
            vlv_no_docmn := xxgir_rh_23000_trans_docmn.fn_obten_no_docmn(pv_no_docmn => NVL(REC_CUR_h620.minst,
                                                                                            '000'));
            --
         ELSE
            --
            vlv_no_docmn := REC_CUR_h620.no_docmn;
            --
         END IF;
         --
         -- Carte A toujours présente                                               -- Position
         --
         vlv_carte := LPAD(vlv_no_docmn,
                           8,
                           '0') -- 1-8
                      || REC_CUR_h620.de_carte_a -- 9-9
                      || REC_CUR_h620.cd_trans -- 10-13
                      || LPAD(REC_CUR_h620.nas,
                              9,
                              '0') -- 14-22
                      || RPAD(NVL(REC_CUR_h620.nm_valdr,
                                  ' '),
                              7,
                              ' ') -- 23-29
                      || LPAD(NVL(REC_CUR_h620.cd_gain,
                                  ' '),
                              4,
                              ' ') -- 30-33
                      || LPAD(NVL(REC_CUR_h620.cd_paiem,
                                  ' '),
                              2,
                              ' ') -- 34-35
                      || TO_CHAR(REC_CUR_h620.dt_debut,
                                 'YYYYMMDD') -- 36-43
                      || TO_CHAR(REC_CUR_h620.dt_fin,
                                 'YYYYMMDD') -- 44-51
                      || LPAD(NVL(REC_CUR_h620.tx_mt,
                                  '       '),
                              7,
                              '0') -- 52-58
                      || LPAD(NVL(REC_CUR_h620.acomp_trait,
                                  ' '),
                              6,
                              ' ') -- 59-64
                      || LPAD(NVL(REC_CUR_h620.total_unite_semn_1,
                                  '     '),
                              5,
                              '0') -- 65-69
                      || LPAD(NVL(REC_CUR_h620.total_unite_semn_2,
                                  '     '),
                              5,
                              '0') -- 70-74
                      || LPAD(NVL(REC_CUR_h620.grand_total_unite,
                                  '      '),
                              6,
                              '0'); -- 75-80
         --
         -- créer la carte
         --
         INSERT INTO gir_srhhrth620
            (id_lot,
             cd_entit,
             cd_docmn,
             no_docmn,
             de_carte,
             cd_trans,
             nas,
             nm_valdr,
             va_carte)
         VALUES
            (vln_id_lot,
             cv_cd_entit,
             cv_cd_docmn_sgi_h620,
             vlv_no_docmn,
             REC_CUR_h620.de_carte_a,
             REC_CUR_h620.cd_trans,
             LPAD(REC_CUR_h620.nas,
                  9,
                  '0'),
             REC_CUR_h620.nm_valdr,
             vlv_carte);
         --
         IF SQL%ROWCOUNT > 0 THEN
            --
            -- Comptabiliser le nombre d'enregistrements seulement avec la carte A
            --
            vln_nb_enreg := vln_nb_enreg + 1;
            --
         END IF;
         --
         -- Carte B toujours présente                                        -- Position
         --
         vlv_carte := LPAD(vlv_no_docmn,
                           8,
                           '0') -- 1-8
                      || REC_CUR_h620.de_carte_b -- 9-9
                      || LPAD(REC_CUR_h620.no_perd,
                              2,
                              '0') -- 10-11
                      || LPAD(REC_CUR_h620.aa_finnc,
                              4,
                              '0') -- 12-15
                      || LPAD(REC_CUR_h620.minst,
                              3,
                              '0') -- 16-18
                      || LPAD(REC_CUR_h620.budgt,
                              7,
                              '0') -- 19-25
                      || LPAD(REC_CUR_h620.centr_respn,
                              4,
                              '0') -- 26-29
                      || LPAD(NVL(REC_CUR_h620.distr_paie,
                                  ' '),
                              3,
                              ' ') -- 30-32
                      || LPAD(NVL(REC_CUR_h620.no_engag,
                                  ' '),
                              10,
                              ' '); -- 33-42
         --
         -- créer la carte
         --
         INSERT INTO gir_srhhrth620
            (id_lot,
             cd_entit,
             cd_docmn,
             no_docmn,
             de_carte,
             cd_trans,
             nas,
             nm_valdr,
             va_carte)
         VALUES
            (vln_id_lot,
             cv_cd_entit,
             cv_cd_docmn_sgi_h620,
             vlv_no_docmn,
             REC_CUR_h620.de_carte_b,
             REC_CUR_h620.cd_trans,
             LPAD(REC_CUR_h620.nas,
                  9,
                  '0'),
             REC_CUR_h620.nm_valdr,
             vlv_carte);
         --
         --
         -- Mise à jour de gir_trans_h620
         --
         UPDATE gir_trans_h620
            SET statu_trans = cv_cd_statu_sagip_trans
                -- INC0017310
               ,
                no_docmn = vlv_no_docmn
          WHERE id_trans_h620 = REC_CUR_h620.id_trans_h620;
         --
         -- Mise à jour de gir_rh_fdt
         --
         UPDATE gir_rh_fdt
            SET statu_sagip = cv_statu_sagip_trans
                -- INC0017310
               ,
                no_docmn = vlv_no_docmn
          WHERE id_trans = REC_CUR_h620.id_trans_h620
            AND nm_fiche = 'H620';
         --
         --DDC 206235 - INC86765
         p_log('33 - Numéro de période =' || vgrec_perd_paie_varbl.no_perd,
               vlv_nm_procd_fonct);
         p_log('34 - Année Financiere =' || vgrec_perd_paie_varbl.aa_finnc,
               vlv_nm_procd_fonct);
      
         /*FND_FILE.PUT_LINE(fnd_file.log,'33 - Numéro de période ='||vgrec_perd_paie_varbl.no_perd);
         FND_FILE.PUT_LINE(fnd_file.log,'34 - Année Financiere ='||vgrec_perd_paie_varbl.aa_finnc);  */
         IF TO_NUMBER(vgrec_perd_paie_varbl.no_perd) NOT IN (1,
                                                             2) THEN
            UPDATE gir_trans_h620 h620
               SET h620.aa_finnc = vgrec_perd_paie_varbl.aa_finnc /*,
                                                                                                       h620.no_perd  = vgrec_perd_paie_varbl.No_Perd,
                                                                                                       h620.perd_paie_varbl_du = vgrec_perd_paie_varbl.dt_debut,
                                                                                                       h620.perd_paie_varbl_au = vgrec_perd_paie_varbl.dt_fin*/
             WHERE h620.id_trans_h620 = REC_CUR_h620.id_trans_H620;
         
            p_log('35 - Nb gir_trans_h620 UPDATÉS pour id_trans_h620 ' || REC_CUR_h620.Id_Trans_H620 || ' :' || SQL%ROWCOUNT,
                  vlv_nm_procd_fonct);
         
            -- CHG206235 Début 2016-04-15
            -- Ne plus mettre à jour l'année financière de la table FDT, pour garder l'information originale
            --UPDATE gir_rh_fdt fdt
            --SET    fdt.aa_finnc = vgrec_perd_paie_varbl.aa_finnc/*,
            --       fdt.dt_perd_paie_du = vgrec_perd_paie_varbl.dt_debut,
            --       fdt.dt_perd_paie_au = vgrec_perd_paie_varbl.dt_fin*/
            --WHERE  fdt.id_trans = REC_CUR_h620.Id_Trans_H620
            --AND    fdt.nm_fiche = 'H620';
            -- CHG206235 Fin
         END IF;
         -- FIN DDC 206235 - INC86765
      
      END LOOP h620;
      --
      -- Mettre à jour le nombre d'enregistrement dans la table de contrôle
      --
      UPDATE gir_wm_contr
         SET nb_enreg_inser = vln_nb_enreg,
             cd_statu       = 'NS'
       WHERE id_lot = vln_id_lot;
      --
      p_log('40 - Fin procédure. Nombre de fiches  = ' || vln_nb_enreg,
            vlv_nm_procd_fonct);
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_creer_trans_sgi_h620
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h620 THEN
         --
         p_log('50 - Exception du traitement h620.',
               vlv_nm_procd_fonct);
         --
         RAISE vgexc_trait_h620;
         --
      WHEN OTHERS THEN
         --
         p_log('60 - Erreur procédure. ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         -- Inscrire dans le journal.
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' est en erreur dans la procédure P_creer_trans_sgi_h620');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
         --
         vgv_texte_ereur := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                   1,
                                   300);
         --
         RAISE vgexc_trait_h620;
         --
   END p_creer_trans_sgi_h620;

   --
   -- ============================================================================
   -- P_expor_dons_h760:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet d'exporter les données des feuilles de temps
   *       de SAGIR vers SAGIP pour les gains déclaratoires des paies standards.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pv_dt_exect       : Date d'exécution
   *
   * Paramètres de sortie :
   *   - errbuf            : Description erreur Oracle
   *   - retcode           : Code erreur Oracle
   *
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-09-24  Création
   * Michel Dessureault   2013-01-16  Retouche 41  Ajouter le paramètre Date d'exécution
   * Michel Dessureault   2013-01-29  Retouche 118 Création de la procédure P_seprr_gains_tempr.
   * Michel Dessureault   2013-02-19  INC00017310  Date du gain doit être à l'intérieur de l'effectivité de l'affectation
   * Michel Dessureault   2013-03-22  INC00017895  Problème de performance du h760.
   * Michel Dessureault   2013-06-05  INC00018447  Retouche 230. Ajout de l'appel à la procédure P_trait_rembr_h760.
   * Edgar  Doiron        2016-07-08  DDC 209235  Split pour rouler en Paralele
   * Geneviève Bélanger   2016-08-26  INC00106428 - Obtenir le no_afect pour l'inscription dans GIR_ADM_EREUR_REJET_GENRQ
   *************************************************************************/
   PROCEDURE p_expor_dons_h760(errbuf      OUT VARCHAR2,
                               retcode     OUT VARCHAR2,
                               pv_dt_exect IN VARCHAR2,
                               --DDC  209235
                               pn_person_id_debut IN NUMBER,
                               pn_person_id_fin   IN NUMBER) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_expor_dons_h760';
      /* INC00017895
      vlTAB_afect         TAB_liste_afect ;  -- Table des affectations.
      vln_index_afect     PLS_INTEGER; -- Index de la table des affectations*/
      --
      --DDC 209235
      vlv_code_erreur_gir VARCHAR2(100);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      vlv_nm_procd        VARCHAR2(255);
      -- F.Aubin 2016-08-17 INC00105800 : reprendre la méthode utilisé pour H620 soit l'appel à p_time_diff_store_print
      vld_dt_hh_debut TIMESTAMP;
      vld_dt_hh_fin   TIMESTAMP;
      vln_cpt         NUMBER := 0;
      /*******************************************************************************
      *                                  CURSEURS
      *******************************************************************************/
      ----------------------------------------------------------------------
      -- Déclaration du curseur permettant d'avoir l'identifiant de la paie
      -- standard
      ----------------------------------------------------------------------
      CURSOR CUR_id_paie_stand IS
         SELECT papf.payroll_id
           FROM pay_all_payrolls_f papf
          WHERE papf.attribute1 = cv_id_type_paie_stand
            AND TRUNC(vgd_dt_exect) BETWEEN papf.effective_start_date AND papf.effective_end_date;
      --
      -- Curseur pour boucler par employé
      CURSOR CUR_trait_persn IS
         SELECT DISTINCT rat.id_emplo
           FROM xxgir_rh_afect_tempr rat;
   
      -- Curseur pour boucler par affectation
      CURSOR CUR_trait_afect(pn_person_id NUMBER) IS
         SELECT DISTINCT rat.id_afect
           FROM xxgir_rh_afect_tempr rat
          WHERE rat.id_emplo = pn_person_id;
   
      -- Curseur pour numero employé
      CURSOR CUR_no_persn(pn_person_id IN NUMBER) IS
         SELECT DISTINCT pap.employee_number
           FROM per_all_people_f pap
          WHERE pap.person_id = pn_person_id;
   
      -- INC00106428 Début Geneviève Bélanger
      -- Cursur pour numéro affectation
      CURSOR CUR_no_afect(pn_id_afect IN NUMBER) IS
         SELECT DISTINCT a.assignment_number
           FROM per_all_assignments_f a
          WHERE a.assignment_id = pn_id_afect;
   
   BEGIN
      --
      vgv_type_trans := 'H760';
      p_log('10 - Début procédure. ',
            vlv_nm_procd_fonct);
      p_log('15   --> pv_dt_exect=' || pv_dt_exect,
            vlv_nm_procd_fonct);
      --
      /*IF fnd_profile.VALUE('AFLOG_ENABLED') = 'Y' THEN
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_h620_pc_tx_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_gains_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_suplm_h620_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_afect_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_elemn_h620_tempr_physq';
      END IF;*/
      --
      -- Début SAGIR Frédéric Aubin 2014-07-16 DDC 178380 : Incident 72372 --> a enlevé les trunc table
      --
      -- Retouche 41
      -- Attribuer le paramètre de date d'exécution à la variable globale
      --
      vgd_dt_exect := FND_DATE.CANONICAL_TO_DATE(pv_dt_exect || ' ' || TO_CHAR(SYSDATE,
                                                                               'HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      --
      -- Initialiser les compteurs
      --
      p_log('20 - Appel de la procédure P_initl_cp',
            vlv_nm_procd_fonct);
      --
      p_initl_cp;
      --
      --1.   Déterminer la période de paie standard courante
      --
      p_log('30 - Appel de la procédure P_obten_perd_paie. ' || 'pv_id_type_paie => ' || cv_id_type_paie_stand || ', pd_dt_exect => ' ||
            fnd_date.date_to_displaydate(vgd_dt_exect),
            vlv_nm_procd_fonct);
      --
      p_obten_perd_paie(cv_id_type_paie_stand,
                        TRUNC(vgd_dt_exect),
                        vgrec_perd_paie);
   
      -- SAGIR F.Aubin 2016-08-16 INC00105800 : remise du journal
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Période standard du ' || fnd_date.date_to_displaydate(vgrec_perd_paie.dt_debut) || ' au ' ||
                        fnd_date.date_to_displaydate(vgrec_perd_paie.dt_fin));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        ' ');
      --
      OPEN CUR_id_paie_stand;
      --
      FETCH CUR_id_paie_stand
         INTO vgn_id_paie_stand;
      --
      IF CUR_id_paie_stand%NOTFOUND THEN
         -- Ne devrait jamais arriver mais...
         CLOSE CUR_id_paie_stand;
         --
         vgv_texte_ereur := 'Problème avec la table pay_all_payrolls_f';
         --
         RAISE vgexc_trait_h760;
         --
      ELSE
         CLOSE CUR_id_paie_stand;
      END IF;
      --
      --2.   Obtenir le jeu d'éléments pour les H760.
      --    Le jeu d'éléments contient la liste des éléments qui correspondent
      --    aux gains déclaratoires non récurrents.
      --
      p_obten_jeu_elemn(pv_nm_jeu_elemn => cv_nm_jeu_elemn_h760,
                        pd_dt_exect     => TRUNC(vgd_dt_exect));
      --    ***** Les éléments sont obtenus et utilisés dans le curseur CUR_suivi_elemn  ****
      --    *****  dans la procédure p_const_liste_gains_repas                           ****
      --
      --3.   Sélectionner les affectations de paie standard dans la table des
      --    affectations PER_ALL_ASSIGNMENTS_F effectives à la période de paie courante
      --    ou aux périodes de paie antérieures.
      --
      p_log('40 - Appel de la procédure P_obten_liste_afect. ' || 'pv_id_type_paie => ' || cv_id_type_paie_stand || ', pd_perd_fin => ' ||
            vgrec_perd_paie.dt_fin,
            vlv_nm_procd_fonct);
      --
      --
      -- Insérer l'affectation dans la table temporaire d'affectation
      --
      p_obten_liste_afect(pv_id_type_paie    => cv_id_type_paie_stand,
                          pd_perd_fin        => vgrec_perd_paie.dt_fin,
                          pn_person_id_debut => pn_person_id_debut,
                          pn_person_id_fin   => pn_person_id_fin
                          /*INC00017895
                                                                                                                                                                                                                                       pTAB_afect      => vlTAB_afect*/);
   
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 1 - Extraire l''information sur les gains déclaratoires de SAGIR (H760). ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      --4.   Pour chacune des affectations sélectionnées au point précédent faire
      --
      --
      --Boucle employé par employé Edgar Doiron 2016-05-17
      -- Ajout des paramètre au procédure pour
      FOR REC_CUR_trait_persn IN CUR_trait_persn LOOP
         BEGIN
            SAVEPOINT par_employe;
         
            -- Débur SAGIR F.Aubin INC00106425 : réinitialise les copies de compteurs
            p_initl_cp_copie;
            -- Fin SAGIR F.Aubin INC00106425
         
            OPEN CUR_no_persn(REC_CUR_trait_persn.id_emplo);
            FETCH CUR_no_persn
               INTO vgv_no_emplo;
            CLOSE CUR_no_persn;
         
            FOR REC_CUR_trait_afect IN CUR_trait_afect(REC_CUR_trait_persn.id_emplo) LOOP
               p_log('60 - Appel de la procédure P_const_liste_gains_repas. ',
                     vlv_nm_procd_fonct);
               --
               vgv_id_afect       := REC_CUR_trait_afect.id_afect;
               vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
            
               --INC00106428 - Obtenir le no_afect pour l'inscription dans GIR_ADM_EREUR_REJET_GENRQ
               OPEN CUR_no_afect(REC_CUR_trait_afect.id_afect);
               FETCH CUR_no_afect
                  INTO vgv_no_afect;
               CLOSE CUR_no_afect;
            
               vld_dt_hh_debut := systimestamp; -- F.Aubin 2016-08-17 INC00105800
               --
               p_log('64 - Appel de la procédure p_const_liste_gains_repas.' || 'pn_assignment_id   => ' || REC_CUR_trait_afect.Id_Afect ||
                     'pv_code_erreur_gir => ' || vlv_code_erreur_gir || 'pv_token_value     => ' || vlv_token_value || 'pv_de_mesg_techn   => ' ||
                     vlv_de_mesg_techn || 'pv_nm_procd        => ' || vlv_nm_procd,
                     vlv_nm_procd_fonct);
               --
               p_const_liste_gains_repas(pn_assignment_id   => REC_CUR_trait_afect.Id_Afect,
                                         pv_code_erreur_gir => vlv_code_erreur_gir,
                                         pv_token_value     => vlv_token_value,
                                         pv_de_mesg_techn   => vlv_de_mesg_techn,
                                         pv_nm_procd        => vlv_nm_procd);
               --
               p_log('65 - Appel de la procédure P_seprr_gains_tempr.',
                     vlv_nm_procd_fonct);
               --
               p_seprr_gains_tempr(pn_assignment_id   => REC_CUR_trait_afect.Id_Afect,
                                   pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
               --
               p_log('70 - Appel de la procédure P_trait_liste_gains. ',
                     vlv_nm_procd_fonct);
               --
               p_trait_liste_gains(pn_assignment_id   => REC_CUR_trait_afect.Id_Afect,
                                   pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
               --
               p_log('80 - Appel de la procédure P_trait_enreg_h760_fdt',
                     vlv_nm_procd_fonct);
               --
               p_trait_enreg_h760_fdt(pn_assignment_id   => REC_CUR_trait_afect.Id_Afect,
                                      pv_code_erreur_gir => vlv_code_erreur_gir,
                                      pv_token_value     => vlv_token_value,
                                      pv_de_mesg_techn   => vlv_de_mesg_techn,
                                      pv_nm_procd        => vlv_nm_procd);
               --
               p_log('90 - Appel de la procédure P_trait_liste_repas',
                     vlv_nm_procd_fonct);
               --
               p_trait_liste_repas(pn_assignment_id   => REC_CUR_trait_afect.Id_Afect,
                                   pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               -- F.Aubin 2016-08-17 INC00105800 : reprendre la méthode utilisé pour H620 soit l'appel à p_time_diff_store_print
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 1 - Extraire l''information sur les gains déclaratoires de SAGIR (H760).',
                                       pn_tri           => 1);
               --
               --
               IF vgv_in_etape_2 = 'O' THEN
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 2 - Créer les gains déclaratoires à partir des informations extraites de SAGIR.',
                                          pn_tri           => 2);
                  vgv_in_etape_2 := 'E';
               END IF;
            
               --
               --
               -- Retouche 230
               --
               p_log('95 - Appel de la procédure P_trait_rembr_h760',
                     vlv_nm_procd_fonct);
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 3 - Créer les gains à rembourser à partir des informations extraites du PGI de SAGIR. ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_trait_rembr_h760(pn_assignment_id   => REC_CUR_trait_afect.Id_Afect,
                                  pv_code_erreur_gir => vlv_code_erreur_gir,
                                  pv_token_value     => vlv_token_value,
                                  pv_de_mesg_techn   => vlv_de_mesg_techn,
                                  pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               -- F.Aubin 2016-08-17 INC00105800 : reprendre la méthode utilisé pour H620 soit l'appel à p_time_diff_store_print
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 3 - Créer les gains à rembourser à partir des informations extraites du PGI de SAGIR.',
                                       pn_tri           => 3);
               --
               --
               -- Mappage de la table GIR_TRANS_H760
               --
               p_log('100 - Appel de la procédure P_trait_trans_h760',
                     vlv_nm_procd_fonct);
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 4 - Transférer les gains déclaratoires extraits de SAGIR vers la table des gains déclaratoires (GIR_TRANS_H760). ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_trait_trans_h760(pn_assignment_id   => REC_CUR_trait_afect.Id_Afect,
                                  pv_code_erreur_gir => vlv_code_erreur_gir,
                                  pv_token_value     => vlv_token_value,
                                  pv_de_mesg_techn   => vlv_de_mesg_techn,
                                  pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               -- F.Aubin 2016-08-17 INC00105800 : reprendre la méthode utilisé pour H620 soit l'appel à p_time_diff_store_print
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 4 - Transférer les gains déclaratoires extraits de SAGIR vers la table des gains déclaratoires (GIR_TRANS_H760).',
                                       pn_tri           => 4);
            END LOOP;
         
         EXCEPTION
            WHEN OTHERS THEN
               p_log('120a - (H760) WHEN OTHERS THEN ...',
                     vlv_nm_procd_fonct);
               --
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' ' || vlv_de_mesg_techn);
            
               -- Débur SAGIR F.Aubin INC00106425 : retourne les copies de compteurs au compteurs générales
               p_retr_cp_copie;
               -- Fin SAGIR F.Aubin INC00106425
            
               ROLLBACK TO par_employe;
            
               CONTINUE;
         END;
      END LOOP;
      -- F.Aubin 2016-08-17 INC00105800 : reprendre la méthode utilisé pour H620 soit l'appel à p_time_diff_store_print
      p_time_diff_store_print(pn_store_print   => 1, --print
                              pd_dt_debut      => NULL,
                              pd_dt_fin        => NULL,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => NULL,
                              pn_tri           => NULL);
      --
      --
      -- Produire les transactions H760 pour le SGI
      --
      p_log('110 - Appel de la procédure P_creer_trans_sgi_h760',
            vlv_nm_procd_fonct);
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 5 - Transférer les gains déclaratoires extraits de SAGIR vers la table de travail des gains déclaratoires (GIR_SRHHRTH760). ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      IF FND_PROFILE.VALUE('AFLOG_ENABLED') = 'Y' THEN
         --Edgar Doiron CHG00179336 2014-08-05
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'P_copie_table_tempr ' || TO_CHAR(SYSDATE,
                                                             'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' ');
         p_copie_table_tempr;
      END IF;
      --
      --
      --p_creer_trans_sgi_h760;
      --
      -- Insérer les rejets dans la tables des absences de feuille de temps
      --
      p_log('120 - Appel de la procédure P_inser_absen_fdt_rejt',
            vlv_nm_procd_fonct);
      --
   
      p_inser_absen_fdt_rejt('H760');
      --
      p_log('130 - Appel de la procédure P_maj_dernr_exect. ' || 'pv_statu => ' || 'Réussite' || ', pv_trait => ' || 'H760',
            vlv_nm_procd_fonct);
      --
      -- Ceci va accepter toutes les transactions
      --
      p_maj_dernr_exect(pv_statu    => 'Réussite',
                        pv_trait    => 'H760',
                        pn_id_demnd => vgn_id_demnd);
      --
      p_log('140 - Appel de la procédure P_afich_journ_bord',
            vlv_nm_procd_fonct);
      --
      p_afich_journ_bord;
      --
      -- Libérer la mémoire
      --
      vgTAB_rejt.DELETE;
      --
      p_log('150 - Fin de la procédure.',
            vlv_nm_procd_fonct);
   
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_expor_dons_h760
      ***********************************************************************************/
   EXCEPTION
      WHEN vgexc_trait_h760 THEN
         --
         -- Toutes les transactions doivent être annulées
         --
         ROLLBACK;
         --
         p_log('160 - Appel de la procédure P_maj_dernr_exect' || 'pv_statu => ' || 'Échec' || ', pv_trait => ' || 'H760' || ', pv_ereur => ' ||
               vgv_texte_ereur,
               vlv_nm_procd_fonct);
         --
         p_maj_dernr_exect(pv_statu    => 'Échec',
                           pv_trait    => 'H760',
                           pv_ereur    => vgv_texte_ereur,
                           pn_id_demnd => vgn_id_demnd);
         --
         p_log('170 - Appel de la procédure P_afich_journ_bord',
               vlv_nm_procd_fonct);
         --
         p_afich_journ_bord;
         --
         -- Libérer la mémoire
         --
         vgTAB_rejt.DELETE;
         --
         -- Code erreur (Erreur).
         --
         retcode := 2;
         --
         -- Message d'erreur
         --
         errbuf := vgv_texte_ereur;
         --
         p_log('175 - Erreur procédure : ' || 'Sortie après erreur.',
               vlv_nm_procd_fonct);
         --
      WHEN OTHERS THEN
         --
         -- Fermer les curseurs ouverts
         --
         IF CUR_id_paie_stand%ISOPEN THEN
            CLOSE CUR_id_paie_stand;
         END IF;
         --
         -- Toutes les transactions doivent être annulées
         --
         ROLLBACK;
         --
         -- Code erreur (Erreur).
         --
         retcode := 2;
         --
         -- Message d'erreur
         --
         errbuf := SQLERRM;
         --
         -- Libérer la mémoire
         --
         vgTAB_rejt.DELETE;
         --
         p_log('180 - Erreur procédure : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM,
               vlv_nm_procd_fonct);
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'La procédure P_expor_dons_h760 est en erreur.');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Code d''erreur' || retcode || '  ' || errbuf);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
         --
      --      RAISE_APPLICATION_ERROR(-20001,'PROBLEME DE SYSTEME. ' || dbms_utility.format_error_backtrace);
      --
   END p_expor_dons_h760;

   --
   -- ============================================================================
   -- P_expor_dons_h620:
   -- ============================================================================
   /**************************************************************************
   * But : Cette procédure permet d'exporter les données des feuilles de temps
   *       de SAGIR vers SAGIP pour les gains déclaratoires des paies variables.
   ***************************************************************************
   *
   * Paramètres entrée    :
   *   - pv_dt_dernr_exect : Date de la dernière exécution.
   *   - pv_dt_exect       : Date d'exécution
   *
   * Paramètres de sortie :
   *   - errbuf            : Message de l'erreur Oracle
   *   - retcode           : Code de retour indiquant qu'une erreur est survenue si autre que 0
   *
   * Modifications :
   * Par                  Date        Description
   * ------------------   ----------  -------------
   * Michel Dessureault   2012-11-08  Création
   * Michel Dessureault   2013-01-16  Retouche 41 - Ajouter le paramètre Date d'exécution
   * Michel Dessureault   2013-02-11  Retouche 126 (INC00017107) Modifier la validation pour le changement du code SAGIP de «A010» à «A015» d'une H620
   * Michel Dessureault   2013-03-25  Retouche 169 Ajout des Heures supplémentaires résiduelles et intermédiaires
   * Michel Dessureault   2013-03-28  Retouche 170 Gérer les modifications autres que le montants dans le formulaire H620.
   * Geneviève Bélanger   2016-08-26  INC00106428 - Obtenir le no_afect pour l'inscription dans GIR_ADM_EREUR_REJET_GENRQ
   *************************************************************************/
   PROCEDURE p_expor_dons_h620(errbuf            OUT VARCHAR2,
                               retcode           OUT VARCHAR2,
                               pv_dt_dernr_exect IN VARCHAR2,
                               pv_dt_exect       IN VARCHAR2
                               --DS-CHG00182096
                              ,
                               pn_person_id_debut IN NUMBER,
                               pn_person_id_fin   IN NUMBER) IS
      --
      /*******************************************************************************
      *                         VARIABLES DE TRAVAIL
      *******************************************************************************/
      vlv_nm_procd_fonct VARCHAR2(100) := 'apps.xxgir_rh_28045.P_expor_dons_h620';
      --
      vln_session_id NUMBER;
   
      vld_dt_hh_debut TIMESTAMP;
      vld_dt_hh_fin   TIMESTAMP;
      vln_cpt         NUMBER := 0;
      --DDC 209235
      vlv_code_erreur_gir VARCHAR2(100);
      vlv_token_value     VARCHAR2(2000);
      vlv_de_mesg_techn   VARCHAR2(2000);
      vlv_nm_procd        VARCHAR2(255);
      --
      -- Curseur pour boucler par employé
      CURSOR CUR_trait_persn IS
         SELECT DISTINCT rat.id_emplo
           FROM xxgir_rh_afect_tempr rat;
   
      -- Curseur pour boucler par affectation
      CURSOR CUR_trait_afect(pn_person_id NUMBER) IS
         SELECT DISTINCT rat.id_afect
           FROM xxgir_rh_afect_tempr rat
          WHERE rat.id_emplo = pn_person_id;
      --
      -- Curseur pour numero employé
      CURSOR CUR_no_persn(pn_person_id IN NUMBER) IS
         SELECT DISTINCT pap.employee_number
           FROM per_all_people_f pap
          WHERE pap.person_id = pn_person_id;
   
      -- INC00106428 Début Geneviève Bélanger
      -- Cursur pour numéro affectation
      CURSOR CUR_no_afect(pn_id_afect IN NUMBER) IS
         SELECT DISTINCT a.assignment_number
           FROM per_all_assignments_f a
          WHERE a.assignment_id = pn_id_afect;
   
   BEGIN
      vgv_type_trans := 'H620';
      SELECT sys_context('userenv',
                         'sessionid') session_id
        INTO vln_session_id
        FROM dual;
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'session_id: ' || vln_session_id);
      --
      /*      IF fnd_profile.VALUE('AFLOG_ENABLED') = 'Y' THEN
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_h620_pc_tx_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_gains_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_suplm_h620_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_afect_tempr_physq';
         EXECUTE IMMEDIATE 'TRUNCATE TABLE xxgir.gir_rh_elemn_h620_tempr_physq';
      END IF;*/
      --
      p_log('10 - Début traitement. Dernière exécution ' || pv_dt_dernr_exect || ' --> exécution le ' || pv_dt_exect,
            vlv_nm_procd_fonct);
      -- Retouche 41
      -- Attribuer le paramètre de date d'exécution à la variable globale
      --
      vgd_dt_exect := FND_DATE.CANONICAL_TO_DATE(pv_dt_exect || ' ' || TO_CHAR(SYSDATE,
                                                                               'HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      --
      -- Initialiser les compteurs
      --
      p_log('20 - Appel de la procédure P_initl_cp',
            vlv_nm_procd_fonct);
      --
      p_initl_cp;
      --
      -- Point1 Obtenir la période de paie variable.
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 1 ' || TO_CHAR(SYSDATE,
                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vgrec_perd_paie_varbl := NULL;
      --
      vld_dt_hh_debut := systimestamp;
      p_obten_perd_paie(pv_id_type_paie => cv_id_type_paie_varbl,
                        pd_dt_exect     => vgd_dt_exect,
                        prec_perd_paie  => vgrec_perd_paie_varbl);
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Période variable du ' || fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_debut) || ' au ' ||
                                                  fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_fin),
                              pn_tri           => 1);
   
      /*      fnd_file.put_line(fnd_file.log,
                        'Période variable du ' || fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_debut) || ' au ' ||
                        fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_fin));
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      -- Obtenir la période de paie standard.
      --
      vgrec_perd_paie_stand := NULL;
      --
      vld_dt_hh_debut := systimestamp;
      p_obten_perd_paie(pv_id_type_paie => cv_id_type_paie_stand,
                        pd_dt_exect     => vgd_dt_exect,
                        prec_perd_paie  => vgrec_perd_paie_stand);
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 1 ' || TO_CHAR(SYSDATE,
                                                                        'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 2);
      --
      -- Point2 Obtenir le jeu d'éléments pour H620.
      --
      /* fnd_file.put_line(fnd_file.log,
                        'Étape 2 ' || TO_CHAR(SYSDATE,
                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
      p_obten_jeu_elemn_h620(pv_nm_jeu_elemn => cv_nm_jeu_elemn_h620,
                             pd_dt_exect     => vgd_dt_exect,
                             pv_nm_liste     => 'jeu_h620');
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 2 ' || TO_CHAR(SYSDATE,
                                                                        'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 3);
      --
      -- Point 2a Obtenir le jeu d'éléments special inputs pour H620.
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 2a ' || TO_CHAR(SYSDATE,
                                               'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
      p_obten_jeu_elemn_specl_input(pv_nm_jeu_elemn => cv_nm_jeu_elemn_h620,
                                    pd_dt_exect     => vgd_dt_exect,
                                    pv_nm_liste     => 'jeu_specl');
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 2a ' || TO_CHAR(SYSDATE,
                                                                         'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 4);
      --
      -- Point3 Obtenir le jeu d'éléments éligibles aux gains à pourcentage.
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 3 ' || TO_CHAR(SYSDATE,
                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
      p_obten_jeu_elemn_h620(pv_nm_jeu_elemn => cv_nm_jeu_elemn_eligb_prime_pc,
                             pd_dt_exect     => vgd_dt_exect,
                             pv_nm_liste     => 'jeu_pc');
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 3 ' || TO_CHAR(SYSDATE,
                                                                        'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 5);
      --
      -- Point4 Obtenir le jeu d'éléments des heures travaillées basé sur le taux annuel.
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 4 ' || TO_CHAR(SYSDATE,
                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
      p_obten_jeu_elemn_h620(pv_nm_jeu_elemn => cv_nm_jeu_elemn_tx_anuel,
                             pd_dt_exect     => vgd_dt_exect,
                             pv_nm_liste     => 'jeu_tx_anuel');
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 4 ' || TO_CHAR(SYSDATE,
                                                                        'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 6);
      --
      -- Point5 Sélectionner la liste des affectations principales à paie variable.
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 5 ' || TO_CHAR(SYSDATE,
                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      --DS-CHG00182096
      vld_dt_hh_debut := systimestamp;
   
      p_obten_afect_princ_paie_varbl(pn_person_id_debut,
                                     pn_person_id_fin);
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 5 ' || TO_CHAR(SYSDATE,
                                                                        'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 7);
      --
      -- Préparer le tableau qui contiendra tous les id des transactions H620 à annuler
      --
      vgTAB_trans_anul_h620.DELETE;
      --
      -- Point 6
      /*
       Étape 6.1
        L'employé change de paie variable à paie standard dans la période de paie courante.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.1  Vérifier changement de paie ' || TO_CHAR(SYSDATE,
                                                                             'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_chang_type_paie_etape_6_1(pv_code_erreur_gir => vlv_code_erreur_gir,
                                  pv_token_value     => vlv_token_value,
                                  pv_de_mesg_techn   => vlv_de_mesg_techn,
                                  pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.1  Vérifier changement de paie ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 8);
      --
      /*
       Étape 6.2
        Création de la liste des éléments récurrents à pourcentage.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.2  Liste éléments pourcentage ' || TO_CHAR(SYSDATE,
                                                                            'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_2_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.2  Liste éléments pourcentage ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 9);
      --
      /*
       Étape 6.3
        Création de la liste des éléments récurrents basées sur le taux annuel au prorata en fonction des heures.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.3  Liste éléments prorata ' || TO_CHAR(SYSDATE,
                                                                        'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_3_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.3  Liste éléments prorata ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 10);
      --
      /*
       Étape 6.4
        Création de la liste des autres éléments récurrents.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.4  Liste éléments récurrents ' || TO_CHAR(SYSDATE,
                                                                           'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_4_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.4  Liste éléments récurrents ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 11);
      --
      /*
       Étape 6.5
        Création de la liste d'éléments non récurrents avec montant de remplacement.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.5  Liste montant de remplacement ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_5_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.5  Liste montant de remplacement ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 12);
      --
      /*
       Étape 6.6
        Création de la liste d'éléments non récurrents avec montant supplémentaire.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.6  Liste montant supplémentaire ' || TO_CHAR(SYSDATE,
                                                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_6_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.6  Liste montant supplémentaire ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 13);
      --
      /*
       Étape 6.7
        Création de la liste des autres élément non récurrents (Provient de l'écran des élément de l'affectation de l'employé).
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.7  Liste éléments non récurrrents ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_7_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.7  Liste éléments non récurrrents ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 14);
      --
      /*
       Étape 6.8
        Création de la liste des autres élément non récurrents (Nombre d'heures provenant  de la feuille de temps seulement).
       Étape 6.14
        Trier la liste des autres éléments non récurrents par le code du gain SAGIP, la date du gain et le nombre d'heures décroissant.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.8  Liste feuilles de temps ' || TO_CHAR(SYSDATE,
                                                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_8_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.8  Liste feuilles de temps ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 15);
      --
      -- Retouche 126  Modifier le code sagip 010 par 015 si se trouve dans année financière antérieure
      --
      p_modfr_cd_sagip(pv_nm_liste => '6_8');
      --
      /*
       Étape 6.9
        Création de la liste des autres élément non récurrents (Nombre d'heures provenant de l'écran des absences seulement).
        Périodes précédentes et courante
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.9  Liste absences ' || TO_CHAR(SYSDATE,
                                                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_9_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                   pv_token_value     => vlv_token_value,
                                   pv_de_mesg_techn   => vlv_de_mesg_techn,
                                   pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.9  Liste absences ' || TO_CHAR(SYSDATE,
                                                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 16);
      --
      -- Retouche 126  Modifier le code sagip 010 par 015 si se trouve dans année financière antérieure
      --
      p_modfr_cd_sagip(pv_nm_liste => '6_9');
      --
      /*
       Étape 6.10
        Création de la liste des autres élément non récurrents (Nombre d'heures provenant de l'écran des absences seulement).
        Période courante seulement.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.10  Liste absences modifiées période courante ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_10_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                    pv_token_value     => vlv_token_value,
                                    pv_de_mesg_techn   => vlv_de_mesg_techn,
                                    pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.10 Liste absences modifiées période courante ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 17);
      --
      /*
       Étape 6.11
        Création de la liste des autres éléments correspondants à des heures supplémentaires à rembourser.
      */
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 6.11  Liste heures supplémentaires à rembourser ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vld_dt_hh_debut := systimestamp;
   
      p_creer_elemn_etape_6_11_6_12(pv_code_erreur_gir => vlv_code_erreur_gir,
                                    pv_token_value     => vlv_token_value,
                                    pv_de_mesg_techn   => vlv_de_mesg_techn,
                                    pv_nm_procd        => vlv_nm_procd);
   
      vld_dt_hh_fin := systimestamp;
      --
      vln_cpt := vln_cpt + 1;
   
      p_time_diff_store_print(pn_store_print   => 0, --store
                              pd_dt_debut      => vld_dt_hh_debut,
                              pd_dt_fin        => vld_dt_hh_fin,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => 'Étape 6.11 Liste heures supplémentaires à rembourser ' ||
                                                  TO_CHAR(SYSDATE,
                                                          'YYYY-MM-DD HH24:MI:SS'),
                              pn_tri           => 18);
   
      --
      /*
       Étape 6.18
        Traitement d'ajout ou modification des autres éléments récurrents.
      */
      FOR REC_CUR_trait_persn IN CUR_trait_persn LOOP
         BEGIN
            SAVEPOINT par_employe;
         
            --DDC 209235 par employé (=assignment_id) : Remettre à NULL les tableaux
            --vgtab_trans_anul_h620.DELETE;
            --vgVAR_liste_id_h620_h010.DELETE;
            --Fin DDC 209235 par employé (=assignment_id)
            OPEN CUR_no_persn(REC_CUR_trait_persn.id_emplo);
            FETCH CUR_no_persn
               INTO vgv_no_emplo;
            CLOSE CUR_no_persn;
         
            -- Débur SAGIR F.Aubin INC00106425 : réinitialise les copies de compteurs
            p_initl_cp_copie;
            -- Fin SAGIR F.Aubin INC00106425
         
            FOR REC_CUR_trait_afect IN CUR_trait_afect(REC_CUR_trait_persn.id_emplo) LOOP
            
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 6.18  Autres éléments récurrents ' || TO_CHAR(SYSDATE,
                                                                                      'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                 ' ');*/
               --
               --INC 73591 2016-02-11
               /*
                      Étape 6.15
                       Vérification de création d'élément à pourcentage et d'élément basé sur le taux annuel - prorata en fonction des heures.
               */
               /*fnd_file.put_line(fnd_file.log,
                                          'Étape 6.24=>15  Élément à pourcentage et d''élément basé sur le taux annuel - prorata ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                 ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
               --DDC 209235
               vgv_id_afect       := REC_CUR_trait_afect.id_afect;
               vgv_id_entre_elemn := NULL; -- INC00106352 : Remettre à NULL par grande procédure
            
               --INC00106428 - Obtenir le no_afect pour l'inscription dans GIR_ADM_EREUR_REJET_GENRQ
               OPEN CUR_no_afect(REC_CUR_trait_afect.id_afect);
               FETCH CUR_no_afect
                  INTO vgv_no_afect;
               CLOSE CUR_no_afect;
               --
            
               p_verfr_elemn_etape_6_15(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.15 Vérification de création d''élément à pourcentage et d''élément basé sur le taux annuel - prorata en fonction des heures.',
                                       pn_tri           => 19);
            
               IF pv_dt_dernr_exect IS NOT NULL THEN
               
                  /*
                               Étape 6.17
                                Vérification de suppression d'élément à pourcentage et d'élément basé sur le taux annuel - prorata en fonction des heures et du taux horaire.
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                                'Étape 6.24=>17  Élément à pourcentage et d''élément basé sur le taux annuel - prorata ' ||
                                    TO_CHAR(SYSDATE,
                                            'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                    ' ');*/
                  --
                  vld_dt_hh_debut := systimestamp;
               
                  p_verfr_elemn_etape_6_17(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.17 Vérification de suppression d''élément à pourcentage et d''élément basé sur le taux annuel - prorata en fonction des heures et du taux horaire.',
                                          pn_tri           => 20);
                  --
               END IF;
               vld_dt_hh_debut := systimestamp;
            
               p_trait_elemn_etape_6_18(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.18 Traitement d''ajout ou modification des autres éléments récurrents.',
                                       pn_tri           => 21);
               --
               -- Si c'est la première exécution - il n'y a aucune modification ni suppression !
               --
               IF pv_dt_dernr_exect IS NOT NULL THEN
                  --
                  /*
                   Étape 6.19
                    Vérification de suppression des autres éléments récurrents.
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                    'Étape 6.19  Autres éléments récurrents ' || TO_CHAR(SYSDATE,
                                                                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                    ' ');*/
                  --
                  vld_dt_hh_debut := systimestamp;
               
                  p_verfr_elemn_etape_6_19(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.19 Vérification de suppression des autres éléments récurrents.',
                                          pn_tri           => 22);
                  --
                  /*
                   Étape 6.20
                    Traitement d'ajout ou modification des montants supplémentaires.
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                    'Étape 6.20  Montants supplémentaires ' || TO_CHAR(SYSDATE,
                                                                                       'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                    ' ');*/
                  --
                  vld_dt_hh_debut := systimestamp;
               
                  p_trait_elemn_etape_6_20(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.20 Traitement d''ajout ou modification des montants supplémentaires.',
                                          pn_tri           => 23);
                  --
                  /*
                   Étape 6.21
                    Vérification de suppression des montants supplémentaires.
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                    'Étape 6.21  Montants supplémentaires ' || TO_CHAR(SYSDATE,
                                                                                       'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                    ' ');*/
                  --
                  vld_dt_hh_debut := systimestamp;
               
                  p_verfr_elemn_etape_6_21(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.21 Vérification de suppression des montants supplémentaires.',
                                          pn_tri           => 24);
                  --
                  /*
                   Étape 6.22
                    Traitement d'ajout ou modification des autres éléments non récurrents.
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                    'Étape 6.22  Autres éléments non récurrents ' ||
                                    TO_CHAR(SYSDATE,
                                            'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                    ' ');*/
                  --
               
                  vld_dt_hh_debut := systimestamp;
               
                  p_trait_elemn_etape_6_22(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.22 Traitement d''ajout ou modification des autres éléments non récurrents.',
                                          pn_tri           => 25);
                  --
                  /*
                            Étape 6.23
                             Vérification de suppression des autres éléments non récurrents.
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                             'Étape 6.23  Autres éléments non récurrents ' ||
                                             TO_CHAR(SYSDATE,
                                                                                     'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                    ' ');*/
                  --
                  vld_dt_hh_debut := systimestamp;
               
                  p_verfr_elemn_etape_6_23(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.23 Vérification de suppression des autres éléments non récurrents.',
                                          pn_tri           => 26);
                  --
                  --
               END IF;
               --
               /*
                      Étape 6.24
                       Traitement de la liste des autres éléments non récurrents (nb heures fdt seulement).
               */
               /*fnd_file.put_line(fnd_file.log,
                                       'Étape 6.24  Feuilles de temps ' || TO_CHAR(SYSDATE,
                                                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                 ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_trait_elemn_etape_6_24(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.24 Traitement de la liste des autres éléments non récurrents (nb heures fdt seulement).',
                                       pn_tri           => 27);
               --
            
               /*
                Étape 6.25
                 Traitement de la liste des autres éléments non récurrents (nb heures absence).
               */
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 6.25  Absences ' || TO_CHAR(SYSDATE,
                                                                    'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_trait_elemn_etape_6_25(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.25 Traitement de la liste des autres éléments non récurrents (nb heures absence).',
                                       pn_tri           => 28);
               --
               -- Si c'est la première exécution - il n'y a aucune modification ni suppression !
               --
               IF pv_dt_dernr_exect IS NOT NULL THEN
                  --
                  /*
                   Étape 6.26
                    Vérification de suppression des autres éléments non récurrents (nb hh absence).
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                    'Étape 6.26  Absences ' || TO_CHAR(SYSDATE,
                                                                       'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                          ' ');*/
                  --
                  vld_dt_hh_debut := systimestamp;
               
                  p_verfr_elemn_etape_6_26(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.26 Vérification de suppression des autres éléments non récurrents (nb hh absence).',
                                          pn_tri           => 29);
                  --
               END IF;
               --
               /*
                Étape 6.27
                 Traitement de la liste des autres éléments non récurrents (heures sup remboursées).
               */
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 6.27  Heures supplémentaires remboursées ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_trait_elemn_etape_6_27(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.27 Traitement de la liste des autres éléments non récurrents (heures sup remboursées).',
                                       pn_tri           => 30);
               --
               /* Retouche 169
                  La procédure 6.28 est devenue 6.29 et la procédure 6.29 est devenue 6.30
               */
               /*
                Étape 6.28
                 Traitement de la liste des autres éléments non récurrents (heures inter remboursées).
               */
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 6.28  Heures intermédiaires remboursées ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_trait_elemn_etape_6_28(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.28 Traitement de la liste des autres éléments non récurrents (heures inter remboursées).',
                                       pn_tri           => 31);
               --
               /*
                Étape 6.29
                 Traitement de la liste des autres éléments non récurrents (montant de remplacement).
               */
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 6.29  Montant de remplacement ' || TO_CHAR(SYSDATE,
                                                                                   'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_trait_elemn_etape_6_29(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.29 Traitement de la liste des autres éléments non récurrents (montant de remplacement).',
                                       pn_tri           => 32);
               --
               -- Si c'est la première exécution - il n'y a aucune modification ni suppression !
               --
               IF pv_dt_dernr_exect IS NOT NULL THEN
                  --
                  /*
                   Étape 6.30
                    Vérification de suppression des autres éléments non récurrents (montant de remplacement).
                  */
                  /*fnd_file.put_line(fnd_file.log,
                                    'Étape 6.30  Montant de remplacement ' || TO_CHAR(SYSDATE,
                                                                                      'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
                  fnd_file.put_line(fnd_file.log,
                                          ' ');*/
                  --
                  vld_dt_hh_debut := systimestamp;
               
                  p_verfr_elemn_etape_6_30(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                           pv_code_erreur_gir => vlv_code_erreur_gir,
                                           pv_token_value     => vlv_token_value,
                                           pv_de_mesg_techn   => vlv_de_mesg_techn,
                                           pv_nm_procd        => vlv_nm_procd);
               
                  vld_dt_hh_fin := systimestamp;
                  --
                  vln_cpt := vln_cpt + 1;
               
                  p_time_diff_store_print(pn_store_print   => 0, --store
                                          pd_dt_debut      => vld_dt_hh_debut,
                                          pd_dt_fin        => vld_dt_hh_fin,
                                          cpt              => vln_cpt,
                                          pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                          pv_description   => 'Étape 6.30 Vérification de suppression des autres éléments non récurrents (montant de remplacement).',
                                          pn_tri           => 33);
                  --
                  --
               END IF;
               --
               -- Annuler les transactions H620 s'il y a lieu
               -- INC00016333 2012-11-29
               IF vgtab_trans_anul_h620.count > 0 THEN
                  --
                  p_anulr_trans_h620(pn_assignment_id => REC_CUR_trait_afect.id_afect);
                  --
                  -- Créer les H010 annulant les H620 acceptées dans la table GIR_RH_FDT s'il y a lieu
                  --
                  IF vgvar_liste_id_h620_h010.count > 0 THEN
                     --
                     p_creer_enreg_fdt_h010(pn_assignment_id => REC_CUR_trait_afect.id_afect);
                     --
                     --vgVAR_liste_id_h620_h010.DELETE;
                     --
                  END IF;
                  --
                  --vgTAB_trans_anul_h620.DELETE;
                  --
               END IF;
               --Edgar Doiron 2014-04-03
               --Retouche 339
               /*
                Étape 6.31
                 9.   vérification des suppressions des autres éléments non recurrents dans une période
                     antérieure à la période de paie courante (retouche #339)
               */
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 6.31  Suppressions des autres éléments non recurrents ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_verfr_elemn_etape_6_31(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                        pv_code_erreur_gir => vlv_code_erreur_gir,
                                        pv_token_value     => vlv_token_value,
                                        pv_de_mesg_techn   => vlv_de_mesg_techn,
                                        pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6.31 vérification des suppressions des autres éléments non récurrents dans une période antérieure à la période de paie courante',
                                       pn_tri           => 34);
            
               --
               /* ---------------------------------------------------------------------------------------------
               -- Traitements pour les transactions H620 à effectuer lors du mappage de la table GIR_TRANS_H620
                  --------------------------------------------------------------------------------------------- */
               --
               --  1.   ÉLÉMENTS RÉCURRENTS À POURCENTAGE
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 1 Créer les transactions H620 - ÉLÉMENTS RÉCURRENTS À POURCENTAGE ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_1(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 1 Créer les transactions H620 - ÉLÉMENTS RÉCURRENTS À POURCENTAGE ',
                                       pn_tri           => 35);
               --
               --  2.   ÉLÉMENTS RÉCURRENTS BASÉES SUR LE TAUX ANNUEL - PRORATA EN FONCTION DES HEURES
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 2 Créer les transactions H620 - ÉLÉMENTS RÉCURRENTS BASÉES SUR LE TAUX ANNUEL - PRORATA EN FONCTION DES HEURES ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_2(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 2 Créer les transactions H620 - ÉLÉMENTS RÉCURRENTS BASÉES SUR LE TAUX ANNUEL - PRORATA EN FONCTION DES HEURES ',
                                       pn_tri           => 36);
               --
               --  3.   AUTRES ÉLÉMENTS RÉCURRENTS
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 3 Créer les transactions H620 - AUTRES ÉLÉMENTS RÉCURRENTS ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_3(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 3 Créer les transactions H620 - AUTRES ÉLÉMENTS RÉCURRENTS ',
                                       pn_tri           => 37);
               --
               --  4.   ÉLÉMENTS NON RÉCURRENTS AVEC MONTANT SUPPLÉMENTAIRE
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 4 Créer les transactions H620 - ÉLÉMENTS NON RÉCURRENTS AVEC MONTANT SUPPLÉMENTAIRE ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_4(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 4 Créer les transactions H620 - ÉLÉMENTS NON RÉCURRENTS AVEC MONTANT SUPPLÉMENTAIRE ',
                                       pn_tri           => 38);
               --
               --  5.   AUTRES ÉLÉMENTS NON RÉCURRENTS (provenant de l'écran PGI d'affectation)
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 5 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_5(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 5 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS ',
                                       pn_tri           => 39);
               --
               --  6.   AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d'heures provenant de la feuille de temps)
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 6 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d''heures) ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_6(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 6 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d''heures) ',
                                       pn_tri           => 40);
               --
               --  7.   ÉLÉMENTS NON RÉCURRENTS AVEC MONTANT DE REMPLACEMENT
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 7 Créer les transactions H620 - ÉLÉMENTS NON RÉCURRENTS AVEC MONTANT DE REMPLACEMENT ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_7(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 7 Créer les transactions H620 - ÉLÉMENTS NON RÉCURRENTS AVEC MONTANT DE REMPLACEMENT ',
                                       pn_tri           => 41);
               --
               --  8.   AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d'heures provenant de l'écran des absences)
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 8 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d''heures provenant de l''écran des absences) ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_8(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 8 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d''heures provenant de l''écran des absences) ',
                                       pn_tri           => 42);
               --
               --  9.   AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d'heures supplémentaires à rembourser)
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape 9 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d''heures supplémentaires à rembourser) ' ||
                                 TO_CHAR(SYSDATE,
                                         'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h620_etape_9(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                          pv_code_erreur_gir => vlv_code_erreur_gir,
                                          pv_token_value     => vlv_token_value,
                                          pv_de_mesg_techn   => vlv_de_mesg_techn,
                                          pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => REC_CUR_trait_afect.id_afect,
                                       pv_description   => 'Étape 9 Créer les transactions H620 - AUTRES ÉLÉMENTS NON RÉCURRENTS (Nombre d''heures supplémentaires à rembourser) ',
                                       pn_tri           => 43);
            
               --
               -- Créer les transactions H010
               --
               /*fnd_file.put_line(fnd_file.log,
                                 'Étape Créer les transactions H010 ' || TO_CHAR(SYSDATE,
                                                                                 'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
               fnd_file.put_line(fnd_file.log,
                                       ' ');*/
               --
               vld_dt_hh_debut := systimestamp;
            
               p_creer_trans_h010(pn_assignment_id   => REC_CUR_trait_afect.id_afect,
                                  pv_code_erreur_gir => vlv_code_erreur_gir,
                                  pv_token_value     => vlv_token_value,
                                  pv_de_mesg_techn   => vlv_de_mesg_techn,
                                  pv_nm_procd        => vlv_nm_procd);
            
               vld_dt_hh_fin := systimestamp;
               --
               vln_cpt := vln_cpt + 1;
            
               p_time_diff_store_print(pn_store_print   => 0, --store
                                       pd_dt_debut      => vld_dt_hh_debut,
                                       pd_dt_fin        => vld_dt_hh_fin,
                                       cpt              => vln_cpt,
                                       pn_assignment_id => NULL,
                                       pv_description   => 'Étape Créer les transactions H010 ',
                                       pn_tri           => 44);
            
            END LOOP;
         
         EXCEPTION
            WHEN OTHERS THEN
               p_log('120a - (H620) WHEN OTHERS THEN ...',
                     vlv_nm_procd_fonct);
               --
               p_creer_erreur(pv_code_erreur_gir => vlv_code_erreur_gir,
                              pv_token_value     => vlv_token_value,
                              pn_id_demnd        => vgn_id_demnd,
                              pd_dt_ereur_rejet  => vgd_dt_exect, /*SYSDATE,*/ --INC00106619
                              pv_nm_abreg_progr  => vgv_nm_abreg_progr,
                              pv_nm_procd        => vlv_nm_procd,
                              pv_de_mesg_techn   => DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' ' || vlv_de_mesg_techn);
            
               -- Débur SAGIR F.Aubin INC00106425 : retourne les copies de compteurs au compteurs générales
               p_retr_cp_copie;
               -- Fin SAGIR F.Aubin INC00106425
            
               ROLLBACK TO par_employe;
            
               CONTINUE;
         END;
      END LOOP;
   
      p_time_diff_store_print(pn_store_print   => 1, --print
                              pd_dt_debut      => NULL,
                              pd_dt_fin        => NULL,
                              cpt              => vln_cpt,
                              pn_assignment_id => NULL,
                              pv_description   => NULL,
                              pn_tri           => NULL);
      --
      IF FND_PROFILE.VALUE('AFLOG_ENABLED') = 'Y' THEN
         --Edgar Doiron CHG00179336 2014-08-05
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'P_copie_table_tempr ' || TO_CHAR(SYSDATE,
                                                             'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' ');
         p_copie_table_tempr;
      END IF;
      --
      /*--
      -- Créer les transactions SGI pour H010
      --
      fnd_file.put_line(fnd_file.log,'Étape Créer les transactions SGI pour H010 '||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,' ');
      --
      P_creer_trans_sgi_h010;
      --
      -- Créer les transactions SGI pour H620
      --
      fnd_file.put_line(fnd_file.log,'Étape Créer les transactions SGI pour H620 '||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,' ');
      --
      P_creer_trans_sgi_h620;*/
      --
      -- Insérer les rejets dans la tables des absences de feuille de temps
      --
      p_log('120 - Appel de la procédure P_inser_absen_fdt_rejt',
            vlv_nm_procd_fonct);
      --
      p_inser_absen_fdt_rejt('H620');
      --
      p_log('Appel de la procédure P_maj_dernr_exect. ' || 'pv_statu => ' || 'Réussite' || ', pv_trait => ' || 'H620',
            vlv_nm_procd_fonct);
      --
      -- Ceci va accepter toutes les transactions
      --
      p_maj_dernr_exect(pv_statu    => 'Réussite',
                        pv_trait    => 'H620',
                        pn_id_demnd => vgn_id_demnd);
      --
      p_log('Appel de la procédure P_afich_journ_bord',
            vlv_nm_procd_fonct);
      --
      p_afich_journ_bord;
      --
      -- Libérer la mémoire
      --
      vgTAB_rejt.DELETE;
      --
      -- Aucune erreur.
      --
      retcode := 0;
      errbuf  := NULL;
      --
      p_log('Fin du traitement',
            vlv_nm_procd_fonct);
   
      --
      /***********************************************************************************
      *      BLOC D'EXCEPTION de P_expor_dons_h620.
      ***********************************************************************************/
   EXCEPTION
      --
      WHEN vgexc_trait_h620 THEN
         --
         -- Toutes les transactions doivent être annulées
         --
         ROLLBACK;
         --
         vgTAB_trans_anul_h620.DELETE;
         --
         IF vgVAR_liste_id_h620_h010.EXISTS(1) THEN
            vgVAR_liste_id_h620_h010.DELETE;
         END IF;
         --
         /* INC00016215
         IF vgVAR_id_entre_elemn.EXISTS(1) THEN
            vgVAR_id_entre_elemn.DELETE;
         END IF;
         */
         --
         p_log('160 - Appel de la procédure P_maj_dernr_exect' || 'pv_statu => ' || 'Échec' || ', pv_trait => ' || 'H620' || ', pv_ereur => ' ||
               SUBSTR(vgv_texte_ereur,
                      1,
                      150),
               vlv_nm_procd_fonct);
         --
         p_maj_dernr_exect(pv_statu    => 'Échec',
                           pv_trait    => 'H620',
                           pv_ereur    => vgv_texte_ereur,
                           pn_id_demnd => vgn_id_demnd);
         --
         -- Code erreur (Erreur).
         --
         retcode := 2;
         --
         -- Message d'erreur
         --
         errbuf := vgv_texte_ereur;
         --
         p_log('165 - Erreur procédure : ' || 'Sortie après erreur.',
               vlv_nm_procd_fonct);
         --
      WHEN OTHERS THEN
         --
         -- Toutes les transactions doivent être annulées
         --
         ROLLBACK;
         --
         -- Libérer la mémoire
         --
         vgTAB_trans_anul_h620.DELETE;
         --
         IF vgVAR_liste_id_h620_h010.EXISTS(1) THEN
            vgVAR_liste_id_h620_h010.DELETE;
         END IF;
         --
         /* INC00016215
         IF vgVAR_id_entre_elemn.EXISTS(1) THEN
            vgVAR_id_entre_elemn.DELETE;
         END IF;
         */
         --
         vgTAB_rejt.DELETE;
         --
         -- Code erreur (Erreur).
         --
         retcode := 2;
         --
         -- Message d'erreur
         --
         errbuf := SQLERRM;
         --
         -- Inscrire dans le journal.
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Le programme de transfert des heures et unités vers SAGIP (RH_28045)');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' est en erreur dans la procédure P_expor_dons_h620');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
         --
   END p_expor_dons_h620;

   PROCEDURE p_sgi_h620_h010(errbuf            OUT VARCHAR2,
                             retcode           OUT VARCHAR2,
                             pv_dt_dernr_exect IN VARCHAR2,
                             pv_dt_exect       IN VARCHAR2) IS
      CURSOR CUR_afect_paie_varbl_stand IS
         SELECT paaf.assignment_id        id_afect,
                paaf.person_id            id_emplo,
                paaf.effective_start_date dt_debut,
                paaf.effective_end_date   dt_fin
           FROM -- Table temporaire contenant la liste des affectations principales à paie variable
                xxgir_rh_afect_tempr  rat,
                per_all_assignments_f paaf,
                pay_all_payrolls_f    papf,
                per_all_people_f      pepf
          WHERE paaf.assignment_id = rat.id_afect
            AND cv_id_type_paie_varbl = rat.in_type_paie
               -- Changement de type de paie dans le futur.
            AND paaf.effective_start_date > rat.dt_fin
            AND paaf.payroll_id = papf.payroll_id
            AND paaf.primary_flag = 'Y'
               -- Paie standard
            AND papf.attribute1 = cv_id_type_paie_stand
            AND paaf.effective_start_date BETWEEN papf.effective_start_date AND papf.effective_end_date
               -- Affectation en date de fin de la période de paie standard.
            AND vgrec_perd_paie_stand.dt_fin BETWEEN paaf.effective_start_date AND paaf.effective_end_date
            AND pepf.person_id = paaf.person_id
            AND pepf.national_identifier IS NOT NULL
            AND pepf.effective_start_date BETWEEN papf.effective_start_date AND papf.effective_end_date;
      vln_session_id NUMBER;
   BEGIN
      SELECT sys_context('userenv',
                         'sessionid') session_id
        INTO vln_session_id
        FROM dual;
      /*fnd_file.put_line(fnd_file.log,
      'session_id: ' || vln_session_id);*/
      -- Attribuer le paramètre de date d'exécution à la variable globale
      --
      vgd_dt_exect := FND_DATE.CANONICAL_TO_DATE(pv_dt_exect || ' ' || TO_CHAR(SYSDATE,
                                                                               'HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      --
      -- Point1 Obtenir la période de paie variable.
      --
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Étape 1 ' || TO_CHAR(SYSDATE,
                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        ' ');
      --
      vgrec_perd_paie_varbl := NULL;
      --
      p_obten_perd_paie(pv_id_type_paie => cv_id_type_paie_varbl,
                        pd_dt_exect     => vgd_dt_exect,
                        prec_perd_paie  => vgrec_perd_paie_varbl);
      --
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Période variable du ' || fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_debut) || ' au ' ||
                        fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_fin));
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        ' ');
      --Genérer la liste des affectation pour toute les person id
      p_obten_afect_princ_paie_varbl(pn_person_id_debut => 0,
                                     pn_person_id_fin   => 999999);
      --
      -- Obtenir la période de paie standard.
      --
      vgrec_perd_paie_stand := NULL;
      --
      p_obten_perd_paie(pv_id_type_paie => cv_id_type_paie_stand,
                        pd_dt_exect     => vgd_dt_exect,
                        prec_perd_paie  => vgrec_perd_paie_stand);
      -- Enlever ceux qui passe a paie standard durant la periode.
      FOR REC_CUR_afect_paie_varbl_stand IN CUR_afect_paie_varbl_stand LOOP
         --
         -- Indiquer les affectations qui passent de paie variable à standard.
         --
         UPDATE xxgir_rh_afect_tempr rat
            SET rat.dt_debut     = REC_CUR_afect_paie_varbl_stand.dt_debut,
                rat.id_emplo     = REC_CUR_afect_paie_varbl_stand.id_emplo,
                rat.in_type_paie = cv_id_type_paie_stand
          WHERE rat.id_afect = REC_CUR_afect_paie_varbl_stand.id_afect;
         --
      --
      END LOOP;
      -- Créer les transactions SGI pour H010
      --
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Étape Créer les transactions SGI pour H010 ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        ' ');
      --
      p_creer_trans_sgi_h010;
      --
      -- Créer les transactions SGI pour H620
      --
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        'Étape Créer les transactions SGI pour H620 ' ||
                        TO_CHAR(SYSDATE,
                                'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      FND_FILE.PUT_LINE(FND_FILE.LOG,
                        ' ');
      --
      p_creer_trans_sgi_h620;
   
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         --
         --
         -- Code erreur (Erreur).
         --
         retcode := 2;
         --
         -- Message d'erreur
         --
         errbuf := SQLERRM;
         --
         -- Inscrire dans le journal.
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Le programme de création des fichier SGI H010 et H620 (RH_28045)');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' est en erreur dans la procédure P_sgi_H620_H010');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
   END p_sgi_h620_h010;

   PROCEDURE p_sgi_h760(errbuf      OUT VARCHAR2,
                        retcode     OUT VARCHAR2,
                        pv_dt_exect IN VARCHAR2) IS
   
      vln_session_id NUMBER;
   BEGIN
      SELECT sys_context('userenv',
                         'sessionid') session_id
        INTO vln_session_id
        FROM dual;
      /*fnd_file.put_line(fnd_file.log,
      'session_id: ' || vln_session_id);*/
      -- Attribuer le paramètre de date d'exécution à la variable globale
      --
      vgd_dt_exect := FND_DATE.CANONICAL_TO_DATE(pv_dt_exect || ' ' || TO_CHAR(SYSDATE,
                                                                               'HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      --
      -- Point1 Obtenir la période de paie variable.
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Étape 1 ' || TO_CHAR(SYSDATE,
                                              'YYYY-MM-DD HH24:MI:SS')); --F.Aubin 2014-08-12 DDC 179706
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --
      vgrec_perd_paie := NULL;
      --
      p_obten_perd_paie(cv_id_type_paie_stand,
                        TRUNC(vgd_dt_exect),
                        vgrec_perd_paie);
      --
      /*fnd_file.put_line(fnd_file.log,
                        'Période variable du ' || fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_debut) || ' au ' ||
                        fnd_date.date_to_displaydate(vgrec_perd_paie_varbl.dt_fin));
      fnd_file.put_line(fnd_file.log,
                        ' ');*/
      --Genérer la liste des affectation pour toute les person id
      p_obten_liste_afect(pv_id_type_paie    => cv_id_type_paie_stand,
                          pd_perd_fin        => vgrec_perd_paie.dt_fin,
                          pn_person_id_debut => 0,
                          pn_person_id_fin   => 999999);
   
      --
      p_creer_trans_sgi_h760;
   
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         --
         --
         -- Code erreur (Erreur).
         --
         retcode := 2;
         --
         -- Message d'erreur
         --
         errbuf := SQLERRM;
         --
         -- Inscrire dans le journal.
         --
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           'Le programme de création des fichier SGI H760 (RH_28045)');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' est en erreur dans la procédure p_sgi_h760');
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           ' Code d''erreur:' || SQLCODE || '  ' || SQLERRM);
         FND_FILE.PUT_LINE(FND_FILE.LOG,
                           DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || ' -> ' || SQLERRM);
   END p_sgi_h760;
   --
END xxgir_rh_28045;
/
